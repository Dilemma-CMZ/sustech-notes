#import "template.typ": *

#show: project.with(
  title: "Compiler Assignment 1",
  authors: (
    (
      name: "陈贲(12212231)",
    ),
  ),
)

#problem[
Given the following three strings: $S_1 = "\"abcde\""$ , $S_2 = "\"bc\""$, $S_3 = "\"abcdabcde\""$, please answer the questions below:
- Is $S_2$ a proper substring of $S_1$?
- Is $S_2$ a subsequence of $S_1$?
- How many proper substrings does $S_1$ have?
- How many subsequences does $S_1$ have?
- If we insert $S_1$ into a position in $S_3$, we can get a new string $S_4$. Can we find ways to generate an $S_4$ such that $S_1$ is not a proper substring of it? Please justify your answer.
]

#solution[
#set enum(numbering: "1.")
 + Yes, since $S_1 = "\"a"#text(fill: red)[bc]"de\""$ contains $S_2 = "\"bc\""$.
 + Yes, since $S_2$ is proper substring of $S_1$.
 + 14 proper substrings, computed by $5 * (5 + 1) slash 2 - 1 = 14$.
 + 32 subsequences including $epsilon$, computed by $2^5 = 32$.
 + No, since $S_4$ must contain $S_1$, $S_1$ is always the proper substring of $S_4$.
]

#problem[
Given the regular expression $R = ("abc"|"def")^*$, identify all substrings of the string "_abcdefabcdef_" that match the language described by $R$.
]

#solution[
The pattern matches substrings with any number of repetitions of either "abc" or "def". The substrings are (without duplicate) $epsilon$, "_abc_", "_def_", "_abcdef_", "_abcdefabc_", "_defabcdef_", "_abcdefabcdef_".
]

#problem[
Identify all suﬀixes of the string "_abcde_" that belong to the language generated by the regular expression $R = ("a"|"b"|"c"|"d"|"e")^*$.
]

#solution[
The language generated is the strings constructed by the five characters "a", "b", "c", "d", and "e". The suﬀixes of the string "_abcde_" that belong to the language are "_abcde_", "_bcde_", "_cde_", "_de_", "_e_", and $epsilon$.
]

#problem[
Write a regular definition for a valid IPv4 address.
]

#solution[
To match a valid IPv4 address, we should first matches the numbers ranging from 0 to 255 and then the pattern:
$
   "digit" &arrow.r {0-9} | 1{0-9}{0-9} | 2{0-4}{0-9} | 25{0-5} \
   "IPv4" &arrow.r "digit" . "digit" . "digit" . "digit"
$
]

#problem[
#set enum(numbering: "1.")
Given an alphabet $Sigma = {a, b}$, are the following two regular languages equivalent? Besides saying yes or no, please also justify your answer.
+ $L_1 = L((a b)^*a c)$
+ $L_2 = L(a(b a)^*c)$
]

#solution[
Yes, they're equivalent. Proof by induction: Suppose $n$ denotes the number of occurrences of "ab" in $L_1$ and "ba" in $L_2$. The base case is $n = 0$, and the two languages are both $a c$. For the inductive step, suppose when $n = k$, $l_1 = (a b)^k a c = l_2 = a (b a)^k c$. If $n = k + 1$, then $L_1 = (a b)^(k + 1) a c = a b (a b)^k a c = a b l_1 = a b l_2 = a b a (b a)^k c = a (b a)^(k + 1) c = L_2$, so $L_1 = L_2$. Q.E.D.
]

#problem[
Consider the regular expression $b a^+ | a b^*$, Please provide a state transition diagram that can recognize the strings in the corresponding regular language. Can the tran- sition diagram recognize the string "baab"? If yes, please give the sequence of state transitions. Otherwise, please explain the reason.
]

#solution[
The expression matches strings with either starting with "b" followed by one or more "a"s or starting with "a" followed by zero or more "b"s. The state transition diagram is as follows:
  #figure(
    image("img/state.svg", width: 60%)
  )
The string "baab" cannot be recognized since it fails with character "b" at the end during state 2. The sequence of state transitions is $s_0 arrow.r s_1 arrow.r s_2 arrow.r s_2 arrow.r "fail"$.
]
