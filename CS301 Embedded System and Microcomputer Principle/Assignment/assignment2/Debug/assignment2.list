
assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b18  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003078  08008d00  08008d00  00009d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd78  0800bd78  0000d010  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd78  0800bd78  0000d010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd78  0800bd78  0000d010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd78  0800bd78  0000cd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd7c  0800bd7c  0000cd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800bd80  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000010  0800bd90  0000d010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  0800bd90  0000d04c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c87  00000000  00000000  0000d039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015dc  00000000  00000000  00012cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  000142a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000411  00000000  00000000  00014810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001902a  00000000  00000000  00014c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008597  00000000  00000000  0002dc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd00  00000000  00000000  000361e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014d0  00000000  00000000  000c3f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  000c53f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	08008ce8 	.word	0x08008ce8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	08008ce8 	.word	0x08008ce8

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a45      	ldr	r2, [pc, #276]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a3f      	ldr	r2, [pc, #252]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x130>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	4b3a      	ldr	r3, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a39      	ldr	r2, [pc, #228]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b37      	ldr	r3, [pc, #220]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000896:	4834      	ldr	r0, [pc, #208]	@ (8000968 <MX_GPIO_Init+0x134>)
 8000898:	f007 fde1 	bl	800845e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2104      	movs	r1, #4
 80008a0:	4832      	ldr	r0, [pc, #200]	@ (800096c <MX_GPIO_Init+0x138>)
 80008a2:	f007 fddc 	bl	800845e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_GPIO_Init+0x13c>)
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	482b      	ldr	r0, [pc, #172]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008ba:	f007 fc25 	bl	8008108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	4829      	ldr	r0, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x144>)
 80008d2:	f007 fc19 	bl	8008108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	481e      	ldr	r0, [pc, #120]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008f0:	f007 fc0a 	bl	8008108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4817      	ldr	r0, [pc, #92]	@ (8000968 <MX_GPIO_Init+0x134>)
 800090a:	f007 fbfd 	bl	8008108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800090e:	2304      	movs	r3, #4
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	@ (800096c <MX_GPIO_Init+0x138>)
 8000926:	f007 fbef 	bl	8008108 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	2006      	movs	r0, #6
 8000930:	f007 fbb3 	bl	800809a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000934:	2006      	movs	r0, #6
 8000936:	f007 fbcc 	bl	80080d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	2017      	movs	r0, #23
 8000940:	f007 fbab 	bl	800809a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000944:	2017      	movs	r0, #23
 8000946:	f007 fbc4 	bl	80080d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800094a:	2202      	movs	r2, #2
 800094c:	2101      	movs	r1, #1
 800094e:	2028      	movs	r0, #40	@ 0x28
 8000950:	f007 fba3 	bl	800809a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000954:	2028      	movs	r0, #40	@ 0x28
 8000956:	f007 fbbc 	bl	80080d2 <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	40011400 	.word	0x40011400
 8000970:	10110000 	.word	0x10110000
 8000974:	10210000 	.word	0x10210000
 8000978:	40011000 	.word	0x40011000

0800097c <fresh_origin>:
uint32_t input_length = 0;

/*
 *	Refresh only the Zone 2 when typing, to avoid fresh the whole screen.
 */
void fresh_origin() {
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af04      	add	r7, sp, #16
	char p[HAMMING_ENCODING_LENGTH + 1] = "0000";
 8000982:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <fresh_origin+0x8c>)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800098a:	6018      	str	r0, [r3, #0]
 800098c:	3304      	adds	r3, #4
 800098e:	7019      	strb	r1, [r3, #0]
	for(int i = 0; i < HAMMING_ENCODING_LENGTH; ++i) {
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e025      	b.n	80009e2 <fresh_origin+0x66>
		if (i < HAMMING_ENCODING_LENGTH - input_length) {
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <fresh_origin+0x90>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f1c3 0204 	rsb	r2, r3, #4
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d905      	bls.n	80009b0 <fresh_origin+0x34>
			p[i] = ' ';
 80009a4:	1d3a      	adds	r2, r7, #4
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4413      	add	r3, r2
 80009aa:	2220      	movs	r2, #32
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e015      	b.n	80009dc <fresh_origin+0x60>
		} else {
			p[i] += nthbit(input_data, HAMMING_ENCODING_LENGTH - 1 - i);
 80009b0:	1d3a      	adds	r2, r7, #4
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <fresh_origin+0x94>)
 80009ba:	6819      	ldr	r1, [r3, #0]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f1c3 0303 	rsb	r3, r3, #3
 80009c2:	fa21 f303 	lsr.w	r3, r1, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4413      	add	r3, r2
 80009d0:	b2d9      	uxtb	r1, r3
 80009d2:	1d3a      	adds	r2, r7, #4
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	460a      	mov	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < HAMMING_ENCODING_LENGTH; ++i) {
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	ddd6      	ble.n	8000996 <fresh_origin+0x1a>
		}
	}
	lcd_show_string(20, 85, 200, 24, 24, p, BLACK);
 80009e8:	2300      	movs	r3, #0
 80009ea:	9302      	str	r3, [sp, #8]
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	2318      	movs	r3, #24
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2318      	movs	r3, #24
 80009f6:	22c8      	movs	r2, #200	@ 0xc8
 80009f8:	2155      	movs	r1, #85	@ 0x55
 80009fa:	2014      	movs	r0, #20
 80009fc:	f006 fef0 	bl	80077e0 <lcd_show_string>
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08008d00 	.word	0x08008d00
 8000a0c:	20000034 	.word	0x20000034
 8000a10:	20000030 	.word	0x20000030

08000a14 <fresh_hamming>:

/*
 *	Refresh only the Zone 3 when typing, to avoid fresh the whole screen.
 */
void fresh_hamming() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af04      	add	r7, sp, #16
	char p[HAMMING_DECODING_LENGTH + 1] = "00000000";
 8000a1a:	4a20      	ldr	r2, [pc, #128]	@ (8000a9c <fresh_hamming+0x88>)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a20:	c303      	stmia	r3!, {r0, r1}
 8000a22:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e025      	b.n	8000a76 <fresh_hamming+0x62>
		if (i < HAMMING_DECODING_LENGTH - input_length) {
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <fresh_hamming+0x8c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f1c3 0208 	rsb	r2, r3, #8
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d905      	bls.n	8000a44 <fresh_hamming+0x30>
			p[i] = ' ';
 8000a38:	463a      	mov	r2, r7
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	2220      	movs	r2, #32
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e015      	b.n	8000a70 <fresh_hamming+0x5c>
		} else {
			p[i] += nthbit(input_data, HAMMING_DECODING_LENGTH - 1 - i);
 8000a44:	463a      	mov	r2, r7
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <fresh_hamming+0x90>)
 8000a4e:	6819      	ldr	r1, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	fa21 f303 	lsr.w	r3, r1, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	b2d9      	uxtb	r1, r3
 8000a66:	463a      	mov	r2, r7
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	ddd6      	ble.n	8000a2a <fresh_hamming+0x16>
		}
	}
	lcd_show_string(20, 150, 200, 24, 24, p, BLACK);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	463b      	mov	r3, r7
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	2318      	movs	r3, #24
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2318      	movs	r3, #24
 8000a8a:	22c8      	movs	r2, #200	@ 0xc8
 8000a8c:	2196      	movs	r1, #150	@ 0x96
 8000a8e:	2014      	movs	r0, #20
 8000a90:	f006 fea6 	bl	80077e0 <lcd_show_string>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08008d08 	.word	0x08008d08
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	20000030 	.word	0x20000030

08000aa8 <print_result>:

/*
 * Print results in encoding or decoding mode. Only invoke once when finished.
 */
void print_result() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09a      	sub	sp, #104	@ 0x68
 8000aac:	af04      	add	r7, sp, #16
	if (mode == HAMMING_ENCODING_MODE){
 8000aae:	4bae      	ldr	r3, [pc, #696]	@ (8000d68 <print_result+0x2c0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d145      	bne.n	8000b42 <print_result+0x9a>
		// Zone 3
		uint32_t result = encode(input_data);
 8000ab6:	4bad      	ldr	r3, [pc, #692]	@ (8000d6c <print_result+0x2c4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fa64 	bl	8000f88 <encode>
 8000ac0:	63f8      	str	r0, [r7, #60]	@ 0x3c
		char p[HAMMING_DECODING_LENGTH + 1] = "00000000";
 8000ac2:	4aab      	ldr	r2, [pc, #684]	@ (8000d70 <print_result+0x2c8>)
 8000ac4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aca:	c303      	stmia	r3!, {r0, r1}
 8000acc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000ace:	2300      	movs	r3, #0
 8000ad0:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ad2:	e019      	b.n	8000b08 <print_result+0x60>
			p[i] += nthbit(result, HAMMING_DECODING_LENGTH - 1 - i);
 8000ad4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ada:	4413      	add	r3, r2
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ae0:	f1c3 0307 	rsb	r3, r3, #7
 8000ae4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4413      	add	r3, r2
 8000af4:	b2d9      	uxtb	r1, r3
 8000af6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000afc:	4413      	add	r3, r2
 8000afe:	460a      	mov	r2, r1
 8000b00:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b04:	3301      	adds	r3, #1
 8000b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8000b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b0a:	2b07      	cmp	r3, #7
 8000b0c:	dde2      	ble.n	8000ad4 <print_result+0x2c>
		}
		lcd_show_string(20, 165, 200, 24, 24, p, BLACK);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	9302      	str	r3, [sp, #8]
 8000b12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	2318      	movs	r3, #24
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2318      	movs	r3, #24
 8000b1e:	22c8      	movs	r2, #200	@ 0xc8
 8000b20:	21a5      	movs	r1, #165	@ 0xa5
 8000b22:	2014      	movs	r0, #20
 8000b24:	f006 fe5c 	bl	80077e0 <lcd_show_string>

		// Zone 4
		lcd_show_string(20, 250, 200, 16, 16, "No errors", BLACK);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9302      	str	r3, [sp, #8]
 8000b2c:	4b91      	ldr	r3, [pc, #580]	@ (8000d74 <print_result+0x2cc>)
 8000b2e:	9301      	str	r3, [sp, #4]
 8000b30:	2310      	movs	r3, #16
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2310      	movs	r3, #16
 8000b36:	22c8      	movs	r2, #200	@ 0xc8
 8000b38:	21fa      	movs	r1, #250	@ 0xfa
 8000b3a:	2014      	movs	r0, #20
 8000b3c:	f006 fe50 	bl	80077e0 <lcd_show_string>
				c[i] += nthbit(correct, HAMMING_DECODING_LENGTH - 1 - i);
			}
			lcd_show_string_highlight(110, 260, 200, 16, 16, c, GREEN, error_index);
		}
	}
}
 8000b40:	e157      	b.n	8000df2 <print_result+0x34a>
		decode_result result = decode();
 8000b42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fafc 	bl	8001144 <decode>
		char p[HAMMING_ENCODING_LENGTH + 1] = "0000";
 8000b4c:	4a8a      	ldr	r2, [pc, #552]	@ (8000d78 <print_result+0x2d0>)
 8000b4e:	f107 0320 	add.w	r3, r7, #32
 8000b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b56:	6018      	str	r0, [r3, #0]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	7019      	strb	r1, [r3, #0]
		for(int i = 0; i < HAMMING_ENCODING_LENGTH; ++i) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8000b60:	e019      	b.n	8000b96 <print_result+0xee>
			p[i] += nthbit(result.result, HAMMING_ENCODING_LENGTH - 1 - i);
 8000b62:	f107 0220 	add.w	r2, r7, #32
 8000b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b68:	4413      	add	r3, r2
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b70:	f1c3 0303 	rsb	r3, r3, #3
 8000b74:	fa21 f303 	lsr.w	r3, r1, r3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4413      	add	r3, r2
 8000b82:	b2d9      	uxtb	r1, r3
 8000b84:	f107 0220 	add.w	r2, r7, #32
 8000b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b8a:	4413      	add	r3, r2
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < HAMMING_ENCODING_LENGTH; ++i) {
 8000b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b92:	3301      	adds	r3, #1
 8000b94:	653b      	str	r3, [r7, #80]	@ 0x50
 8000b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	dde2      	ble.n	8000b62 <print_result+0xba>
		lcd_show_string(20, 85, 200, 24, 24, p, BLACK);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9302      	str	r3, [sp, #8]
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	2318      	movs	r3, #24
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2318      	movs	r3, #24
 8000bac:	22c8      	movs	r2, #200	@ 0xc8
 8000bae:	2155      	movs	r1, #85	@ 0x55
 8000bb0:	2014      	movs	r0, #20
 8000bb2:	f006 fe15 	bl	80077e0 <lcd_show_string>
		lcd_show_string(20, 180, 200, 16, 16, "with ", BLACK);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9302      	str	r3, [sp, #8]
 8000bba:	4b70      	ldr	r3, [pc, #448]	@ (8000d7c <print_result+0x2d4>)
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	22c8      	movs	r2, #200	@ 0xc8
 8000bc6:	21b4      	movs	r1, #180	@ 0xb4
 8000bc8:	2014      	movs	r0, #20
 8000bca:	f006 fe09 	bl	80077e0 <lcd_show_string>
		lcd_show_string(57, 175, 200, 24, 24, "4", BLACK);
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	4b6b      	ldr	r3, [pc, #428]	@ (8000d80 <print_result+0x2d8>)
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	2318      	movs	r3, #24
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2318      	movs	r3, #24
 8000bdc:	22c8      	movs	r2, #200	@ 0xc8
 8000bde:	21af      	movs	r1, #175	@ 0xaf
 8000be0:	2039      	movs	r0, #57	@ 0x39
 8000be2:	f006 fdfd 	bl	80077e0 <lcd_show_string>
		lcd_show_string(67, 180, 200, 16, 16, " parity bits", BLACK);
 8000be6:	2300      	movs	r3, #0
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	4b66      	ldr	r3, [pc, #408]	@ (8000d84 <print_result+0x2dc>)
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	2310      	movs	r3, #16
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	22c8      	movs	r2, #200	@ 0xc8
 8000bf6:	21b4      	movs	r1, #180	@ 0xb4
 8000bf8:	2043      	movs	r0, #67	@ 0x43
 8000bfa:	f006 fdf1 	bl	80077e0 <lcd_show_string>
		if (result.syndrome == 0 || input_length < HAMMING_DECODING_LENGTH){
 8000bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <print_result+0x164>
 8000c04:	4b60      	ldr	r3, [pc, #384]	@ (8000d88 <print_result+0x2e0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b07      	cmp	r3, #7
 8000c0a:	d80c      	bhi.n	8000c26 <print_result+0x17e>
			lcd_show_string(20, 250, 200, 16, 16, "No errors", BLACK);
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	4b58      	ldr	r3, [pc, #352]	@ (8000d74 <print_result+0x2cc>)
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	2310      	movs	r3, #16
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2310      	movs	r3, #16
 8000c1a:	22c8      	movs	r2, #200	@ 0xc8
 8000c1c:	21fa      	movs	r1, #250	@ 0xfa
 8000c1e:	2014      	movs	r0, #20
 8000c20:	f006 fdde 	bl	80077e0 <lcd_show_string>
}
 8000c24:	e0e5      	b.n	8000df2 <print_result+0x34a>
			 if (nthbit(result.syndrome, HAMMING_DECODING_LENGTH - HAMMING_ENCODING_LENGTH - 1)) {
 8000c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00c      	beq.n	8000c4a <print_result+0x1a2>
				lcd_show_string(20, 220, 200, 12, 12, "2 errors occur, P = ", BLACK);
 8000c30:	2300      	movs	r3, #0
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	4b55      	ldr	r3, [pc, #340]	@ (8000d8c <print_result+0x2e4>)
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	230c      	movs	r3, #12
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	22c8      	movs	r2, #200	@ 0xc8
 8000c40:	21dc      	movs	r1, #220	@ 0xdc
 8000c42:	2014      	movs	r0, #20
 8000c44:	f006 fdcc 	bl	80077e0 <lcd_show_string>
 8000c48:	e00b      	b.n	8000c62 <print_result+0x1ba>
				lcd_show_string(20, 220, 200, 12, 12, "1 error occurs, P = ", BLACK);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	9302      	str	r3, [sp, #8]
 8000c4e:	4b50      	ldr	r3, [pc, #320]	@ (8000d90 <print_result+0x2e8>)
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	230c      	movs	r3, #12
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	230c      	movs	r3, #12
 8000c58:	22c8      	movs	r2, #200	@ 0xc8
 8000c5a:	21dc      	movs	r1, #220	@ 0xdc
 8000c5c:	2014      	movs	r0, #20
 8000c5e:	f006 fdbf 	bl	80077e0 <lcd_show_string>
			char p[2] = "0"; p[0] += result.syndrome & ((1 << (HAMMING_DECODING_LENGTH - HAMMING_ENCODING_LENGTH - 1)) - 1);
 8000c62:	2330      	movs	r3, #48	@ 0x30
 8000c64:	83bb      	strh	r3, [r7, #28]
 8000c66:	7f3a      	ldrb	r2, [r7, #28]
 8000c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4413      	add	r3, r2
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	773b      	strb	r3, [r7, #28]
			lcd_show_string(140, 217, 200, 16, 16, p, BLACK);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9302      	str	r3, [sp, #8]
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	2310      	movs	r3, #16
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2310      	movs	r3, #16
 8000c88:	22c8      	movs	r2, #200	@ 0xc8
 8000c8a:	21d9      	movs	r1, #217	@ 0xd9
 8000c8c:	208c      	movs	r0, #140	@ 0x8c
 8000c8e:	f006 fda7 	bl	80077e0 <lcd_show_string>
			uint32_t error_index = result.syndrome & ((1 << (HAMMING_DECODING_LENGTH - HAMMING_ENCODING_LENGTH - 1)) - 1);
 8000c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	647b      	str	r3, [r7, #68]	@ 0x44
			lcd_show_string(20, 240, 200, 16, 16, "Corrupted: ", BLACK);
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d94 <print_result+0x2ec>)
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	22c8      	movs	r2, #200	@ 0xc8
 8000caa:	21f0      	movs	r1, #240	@ 0xf0
 8000cac:	2014      	movs	r0, #20
 8000cae:	f006 fd97 	bl	80077e0 <lcd_show_string>
			char d[HAMMING_DECODING_LENGTH + 1] = "00000000";
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8000d70 <print_result+0x2c8>)
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cba:	c303      	stmia	r3!, {r0, r1}
 8000cbc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000cc2:	e01a      	b.n	8000cfa <print_result+0x252>
				d[i] += nthbit(input_data, HAMMING_DECODING_LENGTH - 1 - i);
 8000cc4:	f107 0210 	add.w	r2, r7, #16
 8000cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cca:	4413      	add	r3, r2
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	4b27      	ldr	r3, [pc, #156]	@ (8000d6c <print_result+0x2c4>)
 8000cd0:	6819      	ldr	r1, [r3, #0]
 8000cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cd4:	f1c3 0307 	rsb	r3, r3, #7
 8000cd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b2d9      	uxtb	r1, r3
 8000ce8:	f107 0210 	add.w	r2, r7, #16
 8000cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cee:	4413      	add	r3, r2
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cfc:	2b07      	cmp	r3, #7
 8000cfe:	dde1      	ble.n	8000cc4 <print_result+0x21c>
			lcd_show_string_highlight(110, 240, 200, 16, 16, d, RED, error_index);
 8000d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d02:	9303      	str	r3, [sp, #12]
 8000d04:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	2310      	movs	r3, #16
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2310      	movs	r3, #16
 8000d16:	22c8      	movs	r2, #200	@ 0xc8
 8000d18:	21f0      	movs	r1, #240	@ 0xf0
 8000d1a:	206e      	movs	r0, #110	@ 0x6e
 8000d1c:	f006 fdb0 	bl	8007880 <lcd_show_string_highlight>
			lcd_show_string(20, 260, 200, 16, 16, "Corrected: ", BLACK);
 8000d20:	2300      	movs	r3, #0
 8000d22:	9302      	str	r3, [sp, #8]
 8000d24:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <print_result+0x2f0>)
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	2310      	movs	r3, #16
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	22c8      	movs	r2, #200	@ 0xc8
 8000d30:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000d34:	2014      	movs	r0, #20
 8000d36:	f006 fd53 	bl	80077e0 <lcd_show_string>
			uint32_t correct = input_data ^= 1 << (HAMMING_DECODING_LENGTH - 1 - error_index);
 8000d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d3c:	f1c3 0307 	rsb	r3, r3, #7
 8000d40:	2201      	movs	r2, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <print_result+0x2c4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4053      	eors	r3, r2
 8000d4e:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <print_result+0x2c4>)
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <print_result+0x2c4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	643b      	str	r3, [r7, #64]	@ 0x40
			char c[HAMMING_DECODING_LENGTH + 1] = "00000000";
 8000d58:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <print_result+0x2c8>)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d5e:	c303      	stmia	r3!, {r0, r1}
 8000d60:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000d62:	2300      	movs	r3, #0
 8000d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d66:	e031      	b.n	8000dcc <print_result+0x324>
 8000d68:	2000002c 	.word	0x2000002c
 8000d6c:	20000030 	.word	0x20000030
 8000d70:	08008d08 	.word	0x08008d08
 8000d74:	08008d14 	.word	0x08008d14
 8000d78:	08008d00 	.word	0x08008d00
 8000d7c:	08008d20 	.word	0x08008d20
 8000d80:	08008d28 	.word	0x08008d28
 8000d84:	08008d2c 	.word	0x08008d2c
 8000d88:	20000034 	.word	0x20000034
 8000d8c:	08008d3c 	.word	0x08008d3c
 8000d90:	08008d54 	.word	0x08008d54
 8000d94:	08008d6c 	.word	0x08008d6c
 8000d98:	08008d78 	.word	0x08008d78
				c[i] += nthbit(correct, HAMMING_DECODING_LENGTH - 1 - i);
 8000d9c:	1d3a      	adds	r2, r7, #4
 8000d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000da0:	4413      	add	r3, r2
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	b2d9      	uxtb	r1, r3
 8000dbc:	1d3a      	adds	r2, r7, #4
 8000dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dc0:	4413      	add	r3, r2
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dc8:	3301      	adds	r3, #1
 8000dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dce:	2b07      	cmp	r3, #7
 8000dd0:	dde4      	ble.n	8000d9c <print_result+0x2f4>
			lcd_show_string_highlight(110, 260, 200, 16, 16, c, GREEN, error_index);
 8000dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dd4:	9303      	str	r3, [sp, #12]
 8000dd6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2310      	movs	r3, #16
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2310      	movs	r3, #16
 8000de6:	22c8      	movs	r2, #200	@ 0xc8
 8000de8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000dec:	206e      	movs	r0, #110	@ 0x6e
 8000dee:	f006 fd47 	bl	8007880 <lcd_show_string_highlight>
}
 8000df2:	bf00      	nop
 8000df4:	3758      	adds	r7, #88	@ 0x58
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop

08000dfc <print_screen>:

/*
 * Print or refresh the interface, without any data but basic information.
 */
void print_screen() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af04      	add	r7, sp, #16
	lcd_clear(WHITE);
 8000e02:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000e06:	f006 faf9 	bl	80073fc <lcd_clear>

	// Zone 1
	lcd_show_string(20, 13, 200, 24, 24, mode ? "Decoding Mode" : "Encoding Mode", BLACK);
 8000e0a:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <print_screen+0xb4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <print_screen+0x1a>
 8000e12:	4b28      	ldr	r3, [pc, #160]	@ (8000eb4 <print_screen+0xb8>)
 8000e14:	e000      	b.n	8000e18 <print_screen+0x1c>
 8000e16:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <print_screen+0xbc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	9202      	str	r2, [sp, #8]
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	2318      	movs	r3, #24
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2318      	movs	r3, #24
 8000e24:	22c8      	movs	r2, #200	@ 0xc8
 8000e26:	210d      	movs	r1, #13
 8000e28:	2014      	movs	r0, #20
 8000e2a:	f006 fcd9 	bl	80077e0 <lcd_show_string>

	// Zone 2
	lcd_draw_hline(10, 50, 220, BLACK);
 8000e2e:	2300      	movs	r3, #0
 8000e30:	22dc      	movs	r2, #220	@ 0xdc
 8000e32:	2132      	movs	r1, #50	@ 0x32
 8000e34:	200a      	movs	r0, #10
 8000e36:	f006 fbab 	bl	8007590 <lcd_draw_hline>
	lcd_show_string(20, 65, 200, 16, 16, "Original Data", BLACK);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <print_screen+0xc0>)
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	2310      	movs	r3, #16
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2310      	movs	r3, #16
 8000e48:	22c8      	movs	r2, #200	@ 0xc8
 8000e4a:	2141      	movs	r1, #65	@ 0x41
 8000e4c:	2014      	movs	r0, #20
 8000e4e:	f006 fcc7 	bl	80077e0 <lcd_show_string>

	// Zone 3
	lcd_draw_hline(10, 120, 220, BLACK);
 8000e52:	2300      	movs	r3, #0
 8000e54:	22dc      	movs	r2, #220	@ 0xdc
 8000e56:	2178      	movs	r1, #120	@ 0x78
 8000e58:	200a      	movs	r0, #10
 8000e5a:	f006 fb99 	bl	8007590 <lcd_draw_hline>
	lcd_show_string(20, (mode == HAMMING_ENCODING_MODE ? 145 : 130), 200, 16, 16, "Hamming Code", BLACK);
 8000e5e:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <print_screen+0xb4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <print_screen+0x6e>
 8000e66:	2191      	movs	r1, #145	@ 0x91
 8000e68:	e000      	b.n	8000e6c <print_screen+0x70>
 8000e6a:	2182      	movs	r1, #130	@ 0x82
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <print_screen+0xc4>)
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	2310      	movs	r3, #16
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2310      	movs	r3, #16
 8000e7a:	22c8      	movs	r2, #200	@ 0xc8
 8000e7c:	2014      	movs	r0, #20
 8000e7e:	f006 fcaf 	bl	80077e0 <lcd_show_string>

	// Zone 4
	lcd_draw_hline(10, 210, 220, BLACK);
 8000e82:	2300      	movs	r3, #0
 8000e84:	22dc      	movs	r2, #220	@ 0xdc
 8000e86:	21d2      	movs	r1, #210	@ 0xd2
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f006 fb81 	bl	8007590 <lcd_draw_hline>
	lcd_show_string(120, 300, 200, 12, 12, "Hamming code (8, 4)", BLACK);
 8000e8e:	2300      	movs	r3, #0
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <print_screen+0xc8>)
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	230c      	movs	r3, #12
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	22c8      	movs	r2, #200	@ 0xc8
 8000e9e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000ea2:	2078      	movs	r0, #120	@ 0x78
 8000ea4:	f006 fc9c 	bl	80077e0 <lcd_show_string>
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000002c 	.word	0x2000002c
 8000eb4:	08008d84 	.word	0x08008d84
 8000eb8:	08008d94 	.word	0x08008d94
 8000ebc:	08008da4 	.word	0x08008da4
 8000ec0:	08008db4 	.word	0x08008db4
 8000ec4:	08008dc4 	.word	0x08008dc4

08000ec8 <is_parity>:

/*
 * Check the if the ith index in hamming code is a parity bit
 */
uint32_t is_parity(uint32_t i) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    for(int j = 0; j < HAMMING_R; ++j) if(i == (1 << j)) return 1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	e00a      	b.n	8000eec <is_parity+0x24>
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	409a      	lsls	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d101      	bne.n	8000ee6 <is_parity+0x1e>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e006      	b.n	8000ef4 <is_parity+0x2c>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	ddf1      	ble.n	8000ed6 <is_parity+0xe>
    return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <flip_bit>:

/*
 * Reverse 8 bits in a hamming code.
 */
uint32_t flip_bit(uint32_t data) {
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < HAMMING_DECODING_LENGTH; i += 2) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e034      	b.n	8000f76 <flip_bit+0x78>
        uint32_t tmp = nthbit(data, i);
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
        data &= ~(1 << i);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	607b      	str	r3, [r7, #4]
        data |= nthbit(data, HAMMING_DECODING_LENGTH - 1 - i) << i;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	f003 0201 	and.w	r2, r3, #1
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	607b      	str	r3, [r7, #4]
        data &= ~(1 << (HAMMING_DECODING_LENGTH - 1 - i));
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2201      	movs	r2, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	607b      	str	r3, [r7, #4]
        data |= tmp << (HAMMING_DECODING_LENGTH - 1 - i);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1c3 0307 	rsb	r3, r3, #7
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	607b      	str	r3, [r7, #4]
    for(int i = 0; i < HAMMING_DECODING_LENGTH; i += 2) {
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3302      	adds	r3, #2
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	ddc7      	ble.n	8000f0c <flip_bit+0xe>
    }
    return data;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <encode>:

/*
 * Encode a data to hamming code from data.
 * Return a a hamming code of the input data without errors.
 */
uint32_t encode(uint32_t data) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	@ 0x50
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    uint32_t result = 0, x = 0, y = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f94:	2300      	movs	r3, #0
 8000f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f98:	2300      	movs	r3, #0
 8000f9a:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t parity_index[HAMMING_R], data_index[HAMMING_R];

    // get indices of data bits and parity bits
    for(int i = 1; i < HAMMING_DECODING_LENGTH; ++i) {
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fa0:	e02a      	b.n	8000ff8 <encode+0x70>
        if (!is_parity(i)) {
 8000fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff8f 	bl	8000ec8 <is_parity>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d117      	bne.n	8000fe0 <encode+0x58>
        	// place the data bits into hamming code
            result |= nthbit(data, HAMMING_ENCODING_LENGTH - 1 - x) << i;
 8000fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fb2:	f1c3 0303 	rsb	r3, r3, #3
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fbc:	f003 0201 	and.w	r2, r3, #1
 8000fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
            data_index[x++] = i;
 8000fcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000fd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	3350      	adds	r3, #80	@ 0x50
 8000fd8:	443b      	add	r3, r7
 8000fda:	f843 2c44 	str.w	r2, [r3, #-68]
 8000fde:	e008      	b.n	8000ff2 <encode+0x6a>
        } else parity_index[y++] = i;
 8000fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	647a      	str	r2, [r7, #68]	@ 0x44
 8000fe6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	3350      	adds	r3, #80	@ 0x50
 8000fec:	443b      	add	r3, r7
 8000fee:	f843 2c34 	str.w	r2, [r3, #-52]
    for(int i = 1; i < HAMMING_DECODING_LENGTH; ++i) {
 8000ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	643b      	str	r3, [r7, #64]	@ 0x40
 8000ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ffa:	2b07      	cmp	r3, #7
 8000ffc:	ddd1      	ble.n	8000fa2 <encode+0x1a>
    }

    // place the parity bits
    for(int i = 0; i < y; ++i) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001002:	e048      	b.n	8001096 <encode+0x10e>
    	// calculate the xored result of parity bits
        for(int j = 0; j < x; ++j) {
 8001004:	2300      	movs	r3, #0
 8001006:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001008:	e03e      	b.n	8001088 <encode+0x100>
            if (nthbit(data_index[j], i)) {
 800100a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	3350      	adds	r3, #80	@ 0x50
 8001010:	443b      	add	r3, r7
 8001012:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8001016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d02e      	beq.n	8001082 <encode+0xfa>
                uint32_t new_parity = nthbit(result, parity_index[i]) ^ nthbit(result, data_index[j]); // get new parity
 8001024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	3350      	adds	r3, #80	@ 0x50
 800102a:	443b      	add	r3, r7
 800102c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001030:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001032:	40da      	lsrs	r2, r3
 8001034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	3350      	adds	r3, #80	@ 0x50
 800103a:	443b      	add	r3, r7
 800103c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001040:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001042:	fa21 f303 	lsr.w	r3, r1, r3
 8001046:	4053      	eors	r3, r2
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                result &= ~(1 << parity_index[i]); // clear parity bit
 800104e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	3350      	adds	r3, #80	@ 0x50
 8001054:	443b      	add	r3, r7
 8001056:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800105a:	2201      	movs	r2, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001066:	4013      	ands	r3, r2
 8001068:	64fb      	str	r3, [r7, #76]	@ 0x4c
                result |= new_parity << parity_index[i]; // put new parity
 800106a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	3350      	adds	r3, #80	@ 0x50
 8001070:	443b      	add	r3, r7
 8001072:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800107e:	4313      	orrs	r3, r2
 8001080:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for(int j = 0; j < x; ++j) {
 8001082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001084:	3301      	adds	r3, #1
 8001086:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800108a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800108c:	429a      	cmp	r2, r3
 800108e:	d8bc      	bhi.n	800100a <encode+0x82>
    for(int i = 0; i < y; ++i) {
 8001090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001092:	3301      	adds	r3, #1
 8001094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800109a:	429a      	cmp	r2, r3
 800109c:	d8b2      	bhi.n	8001004 <encode+0x7c>
            }
        } 
    }

    // place the PP parity at the beginning
    for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 800109e:	2300      	movs	r3, #0
 80010a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80010a2:	e012      	b.n	80010ca <encode+0x142>
        uint32_t new_parity = nthbit(result, i) ^ nthbit(result, 0);
 80010a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a8:	40da      	lsrs	r2, r3
 80010aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010ac:	4053      	eors	r3, r2
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
        result &= ~(1 << 0);
 80010b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
        result |= new_parity << 0;
 80010bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c0:	4313      	orrs	r3, r2
 80010c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 80010c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c6:	3301      	adds	r3, #1
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80010ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010cc:	2b07      	cmp	r3, #7
 80010ce:	dde9      	ble.n	80010a4 <encode+0x11c>
    }

    return flip_bit(result);
 80010d0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80010d2:	f7ff ff14 	bl	8000efe <flip_bit>
 80010d6:	4603      	mov	r3, r0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3750      	adds	r7, #80	@ 0x50
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <get_parity>:

/*
 * Get parity bits and packed into a continous bits from hamming code, helper function of decode.
 * Return a uint32_t with {PP, P4, P2, P1}
 */
uint32_t get_parity(uint32_t code, uint32_t y) {
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
    uint32_t parity = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < y; ++i) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	e013      	b.n	800111c <get_parity+0x3c>
    	// concatenate the bits, the Px bits at 2^x, and put at parity[3 - x]
        parity |= nthbit(code, HAMMING_DECODING_LENGTH - 1 - (1 << i)) << i;
 80010f4:	2201      	movs	r2, #1
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	f1c3 0307 	rsb	r3, r3, #7
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	fa22 f303 	lsr.w	r3, r2, r3
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < y; ++i) {
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3301      	adds	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8e7      	bhi.n	80010f4 <get_parity+0x14>
    }
    parity |= nthbit(code, HAMMING_DECODING_LENGTH - 1) << y; // PP
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	09db      	lsrs	r3, r3, #7
 8001128:	f003 0201 	and.w	r2, r3, #1
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
    return parity;
 8001138:	68fb      	ldr	r3, [r7, #12]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <decode>:
 * Return a decode result:
 *  - result: uint32_t, the correct original data
 *  - syndrome: uint32_t, the parity result, syndrome[3] for whether 2 errors occur,
 *  			syndrome[2:0] for the error bits detected, syndrome is zero when no errors.
 */
decode_result decode() {
 8001144:	b580      	push	{r7, lr}
 8001146:	b092      	sub	sp, #72	@ 0x48
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    uint32_t data = 0, x = 0, y = 0, hamming = input_data;
 800114c:	2300      	movs	r3, #0
 800114e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001150:	2300      	movs	r3, #0
 8001152:	643b      	str	r3, [r7, #64]	@ 0x40
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001158:	4b59      	ldr	r3, [pc, #356]	@ (80012c0 <decode+0x17c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t data_index[HAMMING_R];

    // get index of data bits in hamming code.
    for(int i = 1; i < HAMMING_DECODING_LENGTH; ++i) {
 800115e:	2301      	movs	r3, #1
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001162:	e026      	b.n	80011b2 <decode+0x6e>
        if (!is_parity(i)) {
 8001164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff feae 	bl	8000ec8 <is_parity>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d119      	bne.n	80011a6 <decode+0x62>
            data |= nthbit(hamming, HAMMING_DECODING_LENGTH - 1 - i) << (HAMMING_ENCODING_LENGTH - 1 - x);
 8001172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001174:	f1c3 0307 	rsb	r3, r3, #7
 8001178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117a:	fa22 f303 	lsr.w	r3, r2, r3
 800117e:	f003 0201 	and.w	r2, r3, #1
 8001182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001184:	f1c3 0303 	rsb	r3, r3, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800118e:	4313      	orrs	r3, r2
 8001190:	647b      	str	r3, [r7, #68]	@ 0x44
            data_index[x++] = i;
 8001192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	643a      	str	r2, [r7, #64]	@ 0x40
 8001198:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	3348      	adds	r3, #72	@ 0x48
 800119e:	443b      	add	r3, r7
 80011a0:	f843 2c38 	str.w	r2, [r3, #-56]
 80011a4:	e002      	b.n	80011ac <decode+0x68>
        } else y++;
 80011a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011a8:	3301      	adds	r3, #1
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for(int i = 1; i < HAMMING_DECODING_LENGTH; ++i) {
 80011ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ae:	3301      	adds	r3, #1
 80011b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011b4:	2b07      	cmp	r3, #7
 80011b6:	ddd5      	ble.n	8001164 <decode+0x20>
    }

    uint32_t xor = hamming ^ encode(data);
 80011b8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80011ba:	f7ff fee5 	bl	8000f88 <encode>
 80011be:	4602      	mov	r2, r0
 80011c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c2:	4053      	eors	r3, r2
 80011c4:	623b      	str	r3, [r7, #32]
    decode_result result = { 0 };
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]

    result.syndrome = get_parity(xor, y);
 80011d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80011d2:	6a38      	ldr	r0, [r7, #32]
 80011d4:	f7ff ff84 	bl	80010e0 <get_parity>
 80011d8:	4603      	mov	r3, r0
 80011da:	60fb      	str	r3, [r7, #12]
    result.result = data;
 80011dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011de:	60bb      	str	r3, [r7, #8]

    if (result.syndrome != 0) {
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d05f      	beq.n	80012a6 <decode+0x162>
        uint32_t old_input = input_data;
 80011e6:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <decode+0x17c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
        if (result.syndrome != (1 << y))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2101      	movs	r1, #1
 80011f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00f      	beq.n	800121a <decode+0xd6>
        	old_input ^= 1 << (HAMMING_DECODING_LENGTH - 1 - (result.syndrome & ((1 << y) - 1)));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2101      	movs	r1, #1
 80011fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	3a01      	subs	r2, #1
 8001206:	4013      	ands	r3, r2
 8001208:	f1c3 0307 	rsb	r3, r3, #7
 800120c:	2201      	movs	r2, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	461a      	mov	r2, r3
 8001214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001216:	4053      	eors	r3, r2
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34

        uint32_t parity = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
        for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001222:	e00b      	b.n	800123c <decode+0xf8>
            parity ^= nthbit(old_input, i);
 8001224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001232:	4053      	eors	r3, r2
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
        for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8001236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001238:	3301      	adds	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800123c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123e:	2b07      	cmp	r3, #7
 8001240:	ddf0      	ble.n	8001224 <decode+0xe0>
        }

        if (parity) result.syndrome |= 1 << y;
 8001242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <decode+0x114>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2101      	movs	r1, #1
 800124c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800124e:	fa01 f202 	lsl.w	r2, r1, r2
 8001252:	4313      	orrs	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e003      	b.n	8001260 <decode+0x11c>
        else result.syndrome &= (1 << (HAMMING_DECODING_LENGTH - HAMMING_ENCODING_LENGTH - 1)) - 1;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

        data = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	647b      	str	r3, [r7, #68]	@ 0x44
        for(int i = 0; i < x; ++i) {
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001268:	e017      	b.n	800129a <decode+0x156>
            data |= nthbit(old_input, HAMMING_DECODING_LENGTH - 1 - data_index[i]) << (HAMMING_ENCODING_LENGTH - 1 - i);
 800126a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	3348      	adds	r3, #72	@ 0x48
 8001270:	443b      	add	r3, r7
 8001272:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	f003 0201 	and.w	r2, r3, #1
 8001284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001286:	f1c3 0303 	rsb	r3, r3, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001290:	4313      	orrs	r3, r2
 8001292:	647b      	str	r3, [r7, #68]	@ 0x44
        for(int i = 0; i < x; ++i) {
 8001294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001296:	3301      	adds	r3, #1
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800129a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800129c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800129e:	429a      	cmp	r2, r3
 80012a0:	d8e3      	bhi.n	800126a <decode+0x126>
        }
        result.result = data;
 80012a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012a4:	60bb      	str	r3, [r7, #8]
    }

    return result;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	461a      	mov	r2, r3
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012b2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	3748      	adds	r7, #72	@ 0x48
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000030 	.word	0x20000030

080012c4 <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <lcd_wr_xdata+0x40>)
 80012d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <lcd_wr_xdata+0x40>)
 80012d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012dc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 80012de:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <lcd_wr_xdata+0x44>)
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <lcd_wr_xdata+0x40>)
 80012e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <lcd_wr_xdata+0x40>)
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <lcd_wr_xdata+0x40>)
 80012f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f8:	611a      	str	r2, [r3, #16]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	40011000 	.word	0x40011000
 8001308:	40010c00 	.word	0x40010c00

0800130c <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	80fb      	strh	r3, [r7, #6]
 8001318:	4613      	mov	r3, r2
 800131a:	80bb      	strh	r3, [r7, #4]
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <lcd_write_reg+0x7c>)
 8001322:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001326:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <lcd_write_reg+0x7c>)
 800132a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800132e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <lcd_write_reg+0x80>)
 8001336:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <lcd_write_reg+0x7c>)
 800133a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800133e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <lcd_write_reg+0x7c>)
 8001342:	2280      	movs	r2, #128	@ 0x80
 8001344:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <lcd_write_reg+0x7c>)
 8001348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134c:	611a      	str	r2, [r3, #16]
}
 800134e:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <lcd_write_reg+0x7c>)
 8001352:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <lcd_write_reg+0x7c>)
 800135a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <lcd_write_reg+0x80>)
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	60d3      	str	r3, [r2, #12]
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <lcd_write_reg+0x7c>)
 8001368:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <lcd_write_reg+0x7c>)
 8001370:	2280      	movs	r2, #128	@ 0x80
 8001372:	611a      	str	r2, [r3, #16]
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <lcd_write_reg+0x7c>)
 8001376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137a:	611a      	str	r2, [r3, #16]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40011000 	.word	0x40011000
 800138c:	40010c00 	.word	0x40010c00

08001390 <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    while (i--);
 8001398:	bf00      	nop
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1fa      	bne.n	800139a <lcd_opt_delay+0xa>
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 80013b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ba:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4818      	ldr	r0, [pc, #96]	@ (8001430 <lcd_rd_data+0x80>)
 80013ce:	f006 fe9b 	bl	8008108 <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <lcd_rd_data+0x84>)
 80013d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013d8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <lcd_rd_data+0x84>)
 80013dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013e0:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <lcd_rd_data+0x84>)
 80013e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013e8:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 80013ea:	2002      	movs	r0, #2
 80013ec:	f7ff ffd0 	bl	8001390 <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <lcd_rd_data+0x80>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 80013f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <lcd_rd_data+0x84>)
 80013fa:	2240      	movs	r2, #64	@ 0x40
 80013fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <lcd_rd_data+0x84>)
 8001400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001404:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8001406:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800140a:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <lcd_rd_data+0x80>)
 800141e:	f006 fe73 	bl	8008108 <HAL_GPIO_Init>

    return ram;
 8001422:	8afb      	ldrh	r3, [r7, #22]
 8001424:	b29b      	uxth	r3, r3
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40010c00 	.word	0x40010c00
 8001434:	40011000 	.word	0x40011000

08001438 <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	460a      	mov	r2, r1
 8001442:	80fb      	strh	r3, [r7, #6]
 8001444:	4613      	mov	r3, r2
 8001446:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8001448:	4b44      	ldr	r3, [pc, #272]	@ (800155c <lcd_set_cursor+0x124>)
 800144a:	889b      	ldrh	r3, [r3, #4]
 800144c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001450:	4293      	cmp	r3, r2
 8001452:	f040 8189 	bne.w	8001768 <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 8001456:	4b41      	ldr	r3, [pc, #260]	@ (800155c <lcd_set_cursor+0x124>)
 8001458:	799b      	ldrb	r3, [r3, #6]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 8084 	bne.w	8001568 <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8001460:	4b3e      	ldr	r3, [pc, #248]	@ (800155c <lcd_set_cursor+0x124>)
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b01      	subs	r3, #1
 800146c:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 800146e:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <lcd_set_cursor+0x124>)
 8001470:	895b      	ldrh	r3, [r3, #10]
 8001472:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001474:	4b3a      	ldr	r3, [pc, #232]	@ (8001560 <lcd_set_cursor+0x128>)
 8001476:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800147a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800147c:	4b38      	ldr	r3, [pc, #224]	@ (8001560 <lcd_set_cursor+0x128>)
 800147e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001482:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <lcd_set_cursor+0x12c>)
 800148a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800148c:	4b34      	ldr	r3, [pc, #208]	@ (8001560 <lcd_set_cursor+0x128>)
 800148e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001492:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001494:	4b32      	ldr	r3, [pc, #200]	@ (8001560 <lcd_set_cursor+0x128>)
 8001496:	2280      	movs	r2, #128	@ 0x80
 8001498:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800149a:	4b31      	ldr	r3, [pc, #196]	@ (8001560 <lcd_set_cursor+0x128>)
 800149c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a0:	611a      	str	r2, [r3, #16]
}
 80014a2:	bf00      	nop
            lcd_wr_data(0);
 80014a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001560 <lcd_set_cursor+0x128>)
 80014a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <lcd_set_cursor+0x128>)
 80014ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <lcd_set_cursor+0x12c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <lcd_set_cursor+0x128>)
 80014bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	4b27      	ldr	r3, [pc, #156]	@ (8001560 <lcd_set_cursor+0x128>)
 80014c4:	2280      	movs	r2, #128	@ 0x80
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <lcd_set_cursor+0x128>)
 80014ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ce:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 80014d0:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <lcd_set_cursor+0x128>)
 80014d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <lcd_set_cursor+0x128>)
 80014da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <lcd_set_cursor+0x12c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <lcd_set_cursor+0x128>)
 80014e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <lcd_set_cursor+0x128>)
 80014f0:	2280      	movs	r2, #128	@ 0x80
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <lcd_set_cursor+0x128>)
 80014f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014fa:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 80014fc:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <lcd_set_cursor+0x128>)
 80014fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <lcd_set_cursor+0x128>)
 8001506:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <lcd_set_cursor+0x12c>)
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <lcd_set_cursor+0x128>)
 8001518:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <lcd_set_cursor+0x128>)
 8001520:	2280      	movs	r2, #128	@ 0x80
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <lcd_set_cursor+0x128>)
 8001526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800152a:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <lcd_set_cursor+0x128>)
 800152e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <lcd_set_cursor+0x128>)
 8001536:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	4a09      	ldr	r2, [pc, #36]	@ (8001564 <lcd_set_cursor+0x12c>)
 8001540:	b2db      	uxtb	r3, r3
 8001542:	60d3      	str	r3, [r2, #12]
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <lcd_set_cursor+0x128>)
 8001546:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <lcd_set_cursor+0x128>)
 800154e:	2280      	movs	r2, #128	@ 0x80
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <lcd_set_cursor+0x128>)
 8001554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	e081      	b.n	8001660 <lcd_set_cursor+0x228>
 800155c:	20000038 	.word	0x20000038
 8001560:	40011000 	.word	0x40011000
 8001564:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8001568:	4b7c      	ldr	r3, [pc, #496]	@ (800175c <lcd_set_cursor+0x324>)
 800156a:	895b      	ldrh	r3, [r3, #10]
 800156c:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800156e:	4b7c      	ldr	r3, [pc, #496]	@ (8001760 <lcd_set_cursor+0x328>)
 8001570:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001574:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001576:	4b7a      	ldr	r3, [pc, #488]	@ (8001760 <lcd_set_cursor+0x328>)
 8001578:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800157c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800157e:	8a3b      	ldrh	r3, [r7, #16]
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b78      	ldr	r3, [pc, #480]	@ (8001764 <lcd_set_cursor+0x32c>)
 8001584:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001586:	4b76      	ldr	r3, [pc, #472]	@ (8001760 <lcd_set_cursor+0x328>)
 8001588:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800158c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800158e:	4b74      	ldr	r3, [pc, #464]	@ (8001760 <lcd_set_cursor+0x328>)
 8001590:	2280      	movs	r2, #128	@ 0x80
 8001592:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001594:	4b72      	ldr	r3, [pc, #456]	@ (8001760 <lcd_set_cursor+0x328>)
 8001596:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800159a:	611a      	str	r2, [r3, #16]
}
 800159c:	bf00      	nop
            lcd_wr_data(x >> 8);
 800159e:	4b70      	ldr	r3, [pc, #448]	@ (8001760 <lcd_set_cursor+0x328>)
 80015a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001760 <lcd_set_cursor+0x328>)
 80015a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015ac:	611a      	str	r2, [r3, #16]
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001764 <lcd_set_cursor+0x32c>)
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	4b69      	ldr	r3, [pc, #420]	@ (8001760 <lcd_set_cursor+0x328>)
 80015ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	4b67      	ldr	r3, [pc, #412]	@ (8001760 <lcd_set_cursor+0x328>)
 80015c2:	2280      	movs	r2, #128	@ 0x80
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	4b66      	ldr	r3, [pc, #408]	@ (8001760 <lcd_set_cursor+0x328>)
 80015c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015cc:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 80015ce:	4b64      	ldr	r3, [pc, #400]	@ (8001760 <lcd_set_cursor+0x328>)
 80015d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	4b62      	ldr	r3, [pc, #392]	@ (8001760 <lcd_set_cursor+0x328>)
 80015d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	4a60      	ldr	r2, [pc, #384]	@ (8001764 <lcd_set_cursor+0x32c>)
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	60d3      	str	r3, [r2, #12]
 80015e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001760 <lcd_set_cursor+0x328>)
 80015e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001760 <lcd_set_cursor+0x328>)
 80015f0:	2280      	movs	r2, #128	@ 0x80
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001760 <lcd_set_cursor+0x328>)
 80015f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fa:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 80015fc:	4b58      	ldr	r3, [pc, #352]	@ (8001760 <lcd_set_cursor+0x328>)
 80015fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	4b56      	ldr	r3, [pc, #344]	@ (8001760 <lcd_set_cursor+0x328>)
 8001606:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	4b53      	ldr	r3, [pc, #332]	@ (800175c <lcd_set_cursor+0x324>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	3b01      	subs	r3, #1
 8001612:	121a      	asrs	r2, r3, #8
 8001614:	4b53      	ldr	r3, [pc, #332]	@ (8001764 <lcd_set_cursor+0x32c>)
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	4b51      	ldr	r3, [pc, #324]	@ (8001760 <lcd_set_cursor+0x328>)
 800161a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	4b4f      	ldr	r3, [pc, #316]	@ (8001760 <lcd_set_cursor+0x328>)
 8001622:	2280      	movs	r2, #128	@ 0x80
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	4b4e      	ldr	r3, [pc, #312]	@ (8001760 <lcd_set_cursor+0x328>)
 8001628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800162c:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 800162e:	4b4c      	ldr	r3, [pc, #304]	@ (8001760 <lcd_set_cursor+0x328>)
 8001630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	4b4a      	ldr	r3, [pc, #296]	@ (8001760 <lcd_set_cursor+0x328>)
 8001638:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	4b47      	ldr	r3, [pc, #284]	@ (800175c <lcd_set_cursor+0x324>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	3b01      	subs	r3, #1
 8001644:	4a47      	ldr	r2, [pc, #284]	@ (8001764 <lcd_set_cursor+0x32c>)
 8001646:	b2db      	uxtb	r3, r3
 8001648:	60d3      	str	r3, [r2, #12]
 800164a:	4b45      	ldr	r3, [pc, #276]	@ (8001760 <lcd_set_cursor+0x328>)
 800164c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	4b43      	ldr	r3, [pc, #268]	@ (8001760 <lcd_set_cursor+0x328>)
 8001654:	2280      	movs	r2, #128	@ 0x80
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	4b41      	ldr	r3, [pc, #260]	@ (8001760 <lcd_set_cursor+0x328>)
 800165a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800165e:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8001660:	4b3e      	ldr	r3, [pc, #248]	@ (800175c <lcd_set_cursor+0x324>)
 8001662:	899b      	ldrh	r3, [r3, #12]
 8001664:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001666:	4b3e      	ldr	r3, [pc, #248]	@ (8001760 <lcd_set_cursor+0x328>)
 8001668:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800166c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800166e:	4b3c      	ldr	r3, [pc, #240]	@ (8001760 <lcd_set_cursor+0x328>)
 8001670:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001674:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b3a      	ldr	r3, [pc, #232]	@ (8001764 <lcd_set_cursor+0x32c>)
 800167c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800167e:	4b38      	ldr	r3, [pc, #224]	@ (8001760 <lcd_set_cursor+0x328>)
 8001680:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001684:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001686:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <lcd_set_cursor+0x328>)
 8001688:	2280      	movs	r2, #128	@ 0x80
 800168a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800168c:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <lcd_set_cursor+0x328>)
 800168e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001692:	611a      	str	r2, [r3, #16]
}
 8001694:	bf00      	nop
        lcd_wr_data(y >> 8);
 8001696:	4b32      	ldr	r3, [pc, #200]	@ (8001760 <lcd_set_cursor+0x328>)
 8001698:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	4b30      	ldr	r3, [pc, #192]	@ (8001760 <lcd_set_cursor+0x328>)
 80016a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001764 <lcd_set_cursor+0x32c>)
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <lcd_set_cursor+0x328>)
 80016b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016b6:	611a      	str	r2, [r3, #16]
 80016b8:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <lcd_set_cursor+0x328>)
 80016ba:	2280      	movs	r2, #128	@ 0x80
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <lcd_set_cursor+0x328>)
 80016c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c4:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 80016c6:	4b26      	ldr	r3, [pc, #152]	@ (8001760 <lcd_set_cursor+0x328>)
 80016c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <lcd_set_cursor+0x328>)
 80016d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	4a22      	ldr	r2, [pc, #136]	@ (8001764 <lcd_set_cursor+0x32c>)
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	60d3      	str	r3, [r2, #12]
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <lcd_set_cursor+0x328>)
 80016e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016e4:	611a      	str	r2, [r3, #16]
 80016e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <lcd_set_cursor+0x328>)
 80016e8:	2280      	movs	r2, #128	@ 0x80
 80016ea:	611a      	str	r2, [r3, #16]
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <lcd_set_cursor+0x328>)
 80016ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f2:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <lcd_set_cursor+0x328>)
 80016f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <lcd_set_cursor+0x328>)
 80016fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001702:	611a      	str	r2, [r3, #16]
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <lcd_set_cursor+0x324>)
 8001706:	885b      	ldrh	r3, [r3, #2]
 8001708:	3b01      	subs	r3, #1
 800170a:	121a      	asrs	r2, r3, #8
 800170c:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <lcd_set_cursor+0x32c>)
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <lcd_set_cursor+0x328>)
 8001712:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <lcd_set_cursor+0x328>)
 800171a:	2280      	movs	r2, #128	@ 0x80
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <lcd_set_cursor+0x328>)
 8001720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001724:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <lcd_set_cursor+0x328>)
 8001728:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <lcd_set_cursor+0x328>)
 8001730:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <lcd_set_cursor+0x324>)
 8001738:	885b      	ldrh	r3, [r3, #2]
 800173a:	3b01      	subs	r3, #1
 800173c:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <lcd_set_cursor+0x32c>)
 800173e:	b2db      	uxtb	r3, r3
 8001740:	60d3      	str	r3, [r2, #12]
 8001742:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <lcd_set_cursor+0x328>)
 8001744:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <lcd_set_cursor+0x328>)
 800174c:	2280      	movs	r2, #128	@ 0x80
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	4b03      	ldr	r3, [pc, #12]	@ (8001760 <lcd_set_cursor+0x328>)
 8001752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001756:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8001758:	e176      	b.n	8001a48 <lcd_set_cursor+0x610>
 800175a:	bf00      	nop
 800175c:	20000038 	.word	0x20000038
 8001760:	40011000 	.word	0x40011000
 8001764:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 8001768:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <lcd_set_cursor+0x4dc>)
 800176a:	889b      	ldrh	r3, [r3, #4]
 800176c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001770:	4293      	cmp	r3, r2
 8001772:	f040 80d5 	bne.w	8001920 <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 8001776:	4b67      	ldr	r3, [pc, #412]	@ (8001914 <lcd_set_cursor+0x4dc>)
 8001778:	895b      	ldrh	r3, [r3, #10]
 800177a:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800177c:	4b66      	ldr	r3, [pc, #408]	@ (8001918 <lcd_set_cursor+0x4e0>)
 800177e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001782:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001784:	4b64      	ldr	r3, [pc, #400]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001786:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800178a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800178c:	8b7b      	ldrh	r3, [r7, #26]
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b62      	ldr	r3, [pc, #392]	@ (800191c <lcd_set_cursor+0x4e4>)
 8001792:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001794:	4b60      	ldr	r3, [pc, #384]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001796:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800179a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800179c:	4b5e      	ldr	r3, [pc, #376]	@ (8001918 <lcd_set_cursor+0x4e0>)
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80017a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80017a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a8:	611a      	str	r2, [r3, #16]
}
 80017aa:	bf00      	nop
        lcd_wr_data(x >> 8);
 80017ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80017ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	4b58      	ldr	r3, [pc, #352]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80017b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b56      	ldr	r3, [pc, #344]	@ (800191c <lcd_set_cursor+0x4e4>)
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	4b54      	ldr	r3, [pc, #336]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80017c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	4b52      	ldr	r3, [pc, #328]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80017d0:	2280      	movs	r2, #128	@ 0x80
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	4b50      	ldr	r3, [pc, #320]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80017d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017da:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 80017dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001914 <lcd_set_cursor+0x4dc>)
 80017de:	895b      	ldrh	r3, [r3, #10]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80017e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80017e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80017ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80017f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80017f6:	8b3b      	ldrh	r3, [r7, #24]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b48      	ldr	r3, [pc, #288]	@ (800191c <lcd_set_cursor+0x4e4>)
 80017fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80017fe:	4b46      	ldr	r3, [pc, #280]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001800:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001804:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001806:	4b44      	ldr	r3, [pc, #272]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001808:	2280      	movs	r2, #128	@ 0x80
 800180a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800180c:	4b42      	ldr	r3, [pc, #264]	@ (8001918 <lcd_set_cursor+0x4e0>)
 800180e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001812:	611a      	str	r2, [r3, #16]
}
 8001814:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 8001816:	4b40      	ldr	r3, [pc, #256]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001818:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001820:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	4a3c      	ldr	r2, [pc, #240]	@ (800191c <lcd_set_cursor+0x4e4>)
 800182a:	b2db      	uxtb	r3, r3
 800182c:	60d3      	str	r3, [r2, #12]
 800182e:	4b3a      	ldr	r3, [pc, #232]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001830:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001834:	611a      	str	r2, [r3, #16]
 8001836:	4b38      	ldr	r3, [pc, #224]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <lcd_set_cursor+0x4e0>)
 800183e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001842:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001844:	4b33      	ldr	r3, [pc, #204]	@ (8001914 <lcd_set_cursor+0x4dc>)
 8001846:	899b      	ldrh	r3, [r3, #12]
 8001848:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800184a:	4b33      	ldr	r3, [pc, #204]	@ (8001918 <lcd_set_cursor+0x4e0>)
 800184c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001850:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001854:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001858:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800185a:	8afb      	ldrh	r3, [r7, #22]
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b2f      	ldr	r3, [pc, #188]	@ (800191c <lcd_set_cursor+0x4e4>)
 8001860:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001862:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001864:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001868:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800186a:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <lcd_set_cursor+0x4e0>)
 800186c:	2280      	movs	r2, #128	@ 0x80
 800186e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001870:	4b29      	ldr	r3, [pc, #164]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001876:	611a      	str	r2, [r3, #16]
}
 8001878:	bf00      	nop
        lcd_wr_data(y >> 8);
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <lcd_set_cursor+0x4e0>)
 800187c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001884:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <lcd_set_cursor+0x4e4>)
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001896:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <lcd_set_cursor+0x4e0>)
 800189e:	2280      	movs	r2, #128	@ 0x80
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80018a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a8:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <lcd_set_cursor+0x4dc>)
 80018ac:	899b      	ldrh	r3, [r3, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80018b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018ba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80018bc:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80018be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018c2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80018c4:	8abb      	ldrh	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <lcd_set_cursor+0x4e4>)
 80018ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80018ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80018d4:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80018d6:	2280      	movs	r2, #128	@ 0x80
 80018d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80018dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e0:	611a      	str	r2, [r3, #16]
}
 80018e2:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80018e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ea:	611a      	str	r2, [r3, #16]
 80018ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80018ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	4a09      	ldr	r2, [pc, #36]	@ (800191c <lcd_set_cursor+0x4e4>)
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	60d3      	str	r3, [r2, #12]
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <lcd_set_cursor+0x4e0>)
 80018fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <lcd_set_cursor+0x4e0>)
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <lcd_set_cursor+0x4e0>)
 800190c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001910:	611a      	str	r2, [r3, #16]
}
 8001912:	e099      	b.n	8001a48 <lcd_set_cursor+0x610>
 8001914:	20000038 	.word	0x20000038
 8001918:	40011000 	.word	0x40011000
 800191c:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 8001920:	4b4c      	ldr	r3, [pc, #304]	@ (8001a54 <lcd_set_cursor+0x61c>)
 8001922:	895b      	ldrh	r3, [r3, #10]
 8001924:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001926:	4b4c      	ldr	r3, [pc, #304]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001928:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800192c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800192e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001930:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001934:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001936:	8bfb      	ldrh	r3, [r7, #30]
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b48      	ldr	r3, [pc, #288]	@ (8001a5c <lcd_set_cursor+0x624>)
 800193c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800193e:	4b46      	ldr	r3, [pc, #280]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001940:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001944:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001946:	4b44      	ldr	r3, [pc, #272]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800194c:	4b42      	ldr	r3, [pc, #264]	@ (8001a58 <lcd_set_cursor+0x620>)
 800194e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001952:	611a      	str	r2, [r3, #16]
}
 8001954:	bf00      	nop
        lcd_wr_data(x >> 8);
 8001956:	4b40      	ldr	r3, [pc, #256]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001960:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <lcd_set_cursor+0x624>)
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	4b39      	ldr	r3, [pc, #228]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001972:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <lcd_set_cursor+0x620>)
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	4b36      	ldr	r3, [pc, #216]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001984:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 8001986:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001990:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4a30      	ldr	r2, [pc, #192]	@ (8001a5c <lcd_set_cursor+0x624>)
 800199a:	b2db      	uxtb	r3, r3
 800199c:	60d3      	str	r3, [r2, #12]
 800199e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b2:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <lcd_set_cursor+0x61c>)
 80019b6:	899b      	ldrh	r3, [r3, #12]
 80019b8:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80019ba:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019c0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80019c2:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80019ca:	8bbb      	ldrh	r3, [r7, #28]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b23      	ldr	r3, [pc, #140]	@ (8001a5c <lcd_set_cursor+0x624>)
 80019d0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80019d2:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019d8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80019da:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019dc:	2280      	movs	r2, #128	@ 0x80
 80019de:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80019e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e6:	611a      	str	r2, [r3, #16]
}
 80019e8:	bf00      	nop
        lcd_wr_data(y >> 8);
 80019ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <lcd_set_cursor+0x620>)
 80019f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <lcd_set_cursor+0x624>)
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001a06:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	611a      	str	r2, [r3, #16]
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a18:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001a1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001a24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	88bb      	ldrh	r3, [r7, #4]
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <lcd_set_cursor+0x624>)
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	60d3      	str	r3, [r2, #12]
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001a34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <lcd_set_cursor+0x620>)
 8001a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a46:	611a      	str	r2, [r3, #16]
}
 8001a48:	bf00      	nop
 8001a4a:	3724      	adds	r7, #36	@ 0x24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000038 	.word	0x20000038
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40010c00 	.word	0x40010c00

08001a60 <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t dirreg = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 8001a72:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001a74:	799b      	ldrb	r3, [r3, #6]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <lcd_scan_dir+0x26>
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001a7c:	889b      	ldrh	r3, [r3, #4]
 8001a7e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d109      	bne.n	8001a9a <lcd_scan_dir+0x3a>
 8001a86:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001a88:	799b      	ldrb	r3, [r3, #6]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d134      	bne.n	8001af8 <lcd_scan_dir+0x98>
 8001a8e:	4b58      	ldr	r3, [pc, #352]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001a90:	889b      	ldrh	r3, [r3, #4]
 8001a92:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12e      	bne.n	8001af8 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b07      	cmp	r3, #7
 8001a9e:	d82b      	bhi.n	8001af8 <lcd_scan_dir+0x98>
 8001aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa8 <lcd_scan_dir+0x48>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	08001ac9 	.word	0x08001ac9
 8001aac:	08001acf 	.word	0x08001acf
 8001ab0:	08001ad5 	.word	0x08001ad5
 8001ab4:	08001adb 	.word	0x08001adb
 8001ab8:	08001ae1 	.word	0x08001ae1
 8001abc:	08001ae7 	.word	0x08001ae7
 8001ac0:	08001aed 	.word	0x08001aed
 8001ac4:	08001af3 	.word	0x08001af3
        {
            case 0:
                dir = 6;
 8001ac8:	2306      	movs	r3, #6
 8001aca:	71fb      	strb	r3, [r7, #7]
                break;
 8001acc:	e014      	b.n	8001af8 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	71fb      	strb	r3, [r7, #7]
                break;
 8001ad2:	e011      	b.n	8001af8 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	71fb      	strb	r3, [r7, #7]
                break;
 8001ad8:	e00e      	b.n	8001af8 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 8001ada:	2305      	movs	r3, #5
 8001adc:	71fb      	strb	r3, [r7, #7]
                break;
 8001ade:	e00b      	b.n	8001af8 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	71fb      	strb	r3, [r7, #7]
                break;
 8001ae4:	e008      	b.n	8001af8 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71fb      	strb	r3, [r7, #7]
                break;
 8001aea:	e005      	b.n	8001af8 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 8001aec:	2303      	movs	r3, #3
 8001aee:	71fb      	strb	r3, [r7, #7]
                break;
 8001af0:	e002      	b.n	8001af8 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	71fb      	strb	r3, [r7, #7]
                break;
 8001af6:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	2b07      	cmp	r3, #7
 8001afc:	d835      	bhi.n	8001b6a <lcd_scan_dir+0x10a>
 8001afe:	a201      	add	r2, pc, #4	@ (adr r2, 8001b04 <lcd_scan_dir+0xa4>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b6b 	.word	0x08001b6b
 8001b08:	08001b25 	.word	0x08001b25
 8001b0c:	08001b2f 	.word	0x08001b2f
 8001b10:	08001b39 	.word	0x08001b39
 8001b14:	08001b43 	.word	0x08001b43
 8001b18:	08001b4d 	.word	0x08001b4d
 8001b1c:	08001b57 	.word	0x08001b57
 8001b20:	08001b61 	.word	0x08001b61
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001b24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001b2c:	e01d      	b.n	8001b6a <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001b2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b34:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001b36:	e018      	b.n	8001b6a <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001b38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001b3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001b40:	e013      	b.n	8001b6a <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8001b42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b44:	f043 0320 	orr.w	r3, r3, #32
 8001b48:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001b4a:	e00e      	b.n	8001b6a <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001b4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b52:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001b54:	e009      	b.n	8001b6a <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001b56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b58:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001b5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001b5e:	e004      	b.n	8001b6a <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001b60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b62:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001b66:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001b68:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 8001b6a:	2336      	movs	r3, #54	@ 0x36
 8001b6c:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (lcddev.id == 0X5510)
 8001b6e:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001b70:	889b      	ldrh	r3, [r3, #4]
 8001b72:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d102      	bne.n	8001b80 <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 8001b7a:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 8001b7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 8001b80:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001b82:	889b      	ldrh	r3, [r3, #4]
 8001b84:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00b      	beq.n	8001ba4 <lcd_scan_dir+0x144>
 8001b8c:	4b18      	ldr	r3, [pc, #96]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001b8e:	889b      	ldrh	r3, [r3, #4]
 8001b90:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d005      	beq.n	8001ba4 <lcd_scan_dir+0x144>
 8001b98:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001b9a:	889b      	ldrh	r3, [r3, #4]
 8001b9c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d103      	bne.n	8001bac <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 8001ba4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lcd_write_reg(dirreg, regval);
 8001bac:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fbaa 	bl	800130c <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001bba:	889b      	ldrh	r3, [r3, #4]
 8001bbc:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d027      	beq.n	8001c14 <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 8001bc4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d012      	beq.n	8001bf4 <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001bd0:	881a      	ldrh	r2, [r3, #0]
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001bd4:	885b      	ldrh	r3, [r3, #2]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d21c      	bcs.n	8001c14 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001bda:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 8001be0:	4b03      	ldr	r3, [pc, #12]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001be2:	885a      	ldrh	r2, [r3, #2]
 8001be4:	4b02      	ldr	r3, [pc, #8]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001be6:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001be8:	4a01      	ldr	r2, [pc, #4]	@ (8001bf0 <lcd_scan_dir+0x190>)
 8001bea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001bec:	8053      	strh	r3, [r2, #2]
 8001bee:	e011      	b.n	8001c14 <lcd_scan_dir+0x1b4>
 8001bf0:	20000038 	.word	0x20000038
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 8001bf4:	4b9c      	ldr	r3, [pc, #624]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001bf6:	881a      	ldrh	r2, [r3, #0]
 8001bf8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001bfa:	885b      	ldrh	r3, [r3, #2]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d909      	bls.n	8001c14 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001c00:	4b99      	ldr	r3, [pc, #612]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 8001c06:	4b98      	ldr	r3, [pc, #608]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001c08:	885a      	ldrh	r2, [r3, #2]
 8001c0a:	4b97      	ldr	r3, [pc, #604]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001c0c:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001c0e:	4a96      	ldr	r2, [pc, #600]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001c10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001c12:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 8001c14:	4b94      	ldr	r3, [pc, #592]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001c16:	889b      	ldrh	r3, [r3, #4]
 8001c18:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	f040 81af 	bne.w	8001f80 <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 8001c22:	4b91      	ldr	r3, [pc, #580]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001c24:	895b      	ldrh	r3, [r3, #10]
 8001c26:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001c28:	4b90      	ldr	r3, [pc, #576]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001c30:	4b8e      	ldr	r3, [pc, #568]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001c38:	8bbb      	ldrh	r3, [r7, #28]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001c3e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001c40:	4b8a      	ldr	r3, [pc, #552]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c42:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c46:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001c48:	4b88      	ldr	r3, [pc, #544]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c4a:	2280      	movs	r2, #128	@ 0x80
 8001c4c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001c4e:	4b87      	ldr	r3, [pc, #540]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c54:	611a      	str	r2, [r3, #16]
}
 8001c56:	bf00      	nop
        lcd_wr_data(0);
 8001c58:	4b84      	ldr	r3, [pc, #528]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	4b82      	ldr	r3, [pc, #520]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	4b81      	ldr	r3, [pc, #516]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c82:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8001c84:	4b78      	ldr	r3, [pc, #480]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001c86:	895b      	ldrh	r3, [r3, #10]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001c8e:	4b77      	ldr	r3, [pc, #476]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c94:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001c96:	4b75      	ldr	r3, [pc, #468]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001c98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001c9e:	8b7b      	ldrh	r3, [r7, #26]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	4b73      	ldr	r3, [pc, #460]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001ca4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001ca6:	4b71      	ldr	r3, [pc, #452]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001ca8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001cac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001cae:	4b6f      	ldr	r3, [pc, #444]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001cb0:	2280      	movs	r2, #128	@ 0x80
 8001cb2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001cb4:	4b6d      	ldr	r3, [pc, #436]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cba:	611a      	str	r2, [r3, #16]
}
 8001cbc:	bf00      	nop
        lcd_wr_data(0);
 8001cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	4b69      	ldr	r3, [pc, #420]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001cc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	4b68      	ldr	r3, [pc, #416]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	4b65      	ldr	r3, [pc, #404]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001cd6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	4b63      	ldr	r3, [pc, #396]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001cde:	2280      	movs	r2, #128	@ 0x80
 8001ce0:	611a      	str	r2, [r3, #16]
 8001ce2:	4b62      	ldr	r3, [pc, #392]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce8:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 8001cea:	4b5f      	ldr	r3, [pc, #380]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001cec:	895b      	ldrh	r3, [r3, #10]
 8001cee:	3302      	adds	r3, #2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001cf4:	4b5d      	ldr	r3, [pc, #372]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001cf6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cfa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001cfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d02:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001d04:	8b3b      	ldrh	r3, [r7, #24]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b59      	ldr	r3, [pc, #356]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001d0a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001d0c:	4b57      	ldr	r3, [pc, #348]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d12:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001d14:	4b55      	ldr	r3, [pc, #340]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d16:	2280      	movs	r2, #128	@ 0x80
 8001d18:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001d1a:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d20:	611a      	str	r2, [r3, #16]
}
 8001d22:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 8001d24:	4b51      	ldr	r3, [pc, #324]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	4b4c      	ldr	r3, [pc, #304]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	121a      	asrs	r2, r3, #8
 8001d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	4b4a      	ldr	r3, [pc, #296]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d42:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d46:	611a      	str	r2, [r3, #16]
 8001d48:	4b48      	ldr	r3, [pc, #288]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d4a:	2280      	movs	r2, #128	@ 0x80
 8001d4c:	611a      	str	r2, [r3, #16]
 8001d4e:	4b47      	ldr	r3, [pc, #284]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d54:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 8001d56:	4b44      	ldr	r3, [pc, #272]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001d58:	895b      	ldrh	r3, [r3, #10]
 8001d5a:	3303      	adds	r3, #3
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001d60:	4b42      	ldr	r3, [pc, #264]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d62:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d66:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001d68:	4b40      	ldr	r3, [pc, #256]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d6e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001d70:	8afb      	ldrh	r3, [r7, #22]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b3e      	ldr	r3, [pc, #248]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001d76:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001d78:	4b3c      	ldr	r3, [pc, #240]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d7a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d7e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001d80:	4b3a      	ldr	r3, [pc, #232]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d82:	2280      	movs	r2, #128	@ 0x80
 8001d84:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001d86:	4b39      	ldr	r3, [pc, #228]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8c:	611a      	str	r2, [r3, #16]
}
 8001d8e:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8001d90:	4b36      	ldr	r3, [pc, #216]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001d9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d9e:	611a      	str	r2, [r3, #16]
 8001da0:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	4a32      	ldr	r2, [pc, #200]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	60d3      	str	r3, [r2, #12]
 8001dac:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001dae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001db6:	2280      	movs	r2, #128	@ 0x80
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc0:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001dc2:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001dc4:	899b      	ldrh	r3, [r3, #12]
 8001dc6:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001dc8:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001dca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001dce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001dd0:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001dd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dd6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001dd8:	8abb      	ldrh	r3, [r7, #20]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001dde:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001de0:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001de2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001de6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001dea:	2280      	movs	r2, #128	@ 0x80
 8001dec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001dee:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df4:	611a      	str	r2, [r3, #16]
}
 8001df6:	bf00      	nop
        lcd_wr_data(0);
 8001df8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001dfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e06:	611a      	str	r2, [r3, #16]
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e18:	2280      	movs	r2, #128	@ 0x80
 8001e1a:	611a      	str	r2, [r3, #16]
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e22:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8001e24:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <lcd_scan_dir+0x408>)
 8001e26:	899b      	ldrh	r3, [r3, #12]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e34:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001e36:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e3c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001e3e:	8a7b      	ldrh	r3, [r7, #18]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <lcd_scan_dir+0x410>)
 8001e44:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e48:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e4c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e50:	2280      	movs	r2, #128	@ 0x80
 8001e52:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e5a:	611a      	str	r2, [r3, #16]
}
 8001e5c:	bf00      	nop
        lcd_wr_data(0);
 8001e5e:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <lcd_scan_dir+0x40c>)
 8001e60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e64:	611a      	str	r2, [r3, #16]
 8001e66:	e005      	b.n	8001e74 <lcd_scan_dir+0x414>
 8001e68:	20000038 	.word	0x20000038
 8001e6c:	40011000 	.word	0x40011000
 8001e70:	40010c00 	.word	0x40010c00
 8001e74:	4b3f      	ldr	r3, [pc, #252]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001e76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e7a:	611a      	str	r2, [r3, #16]
 8001e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <lcd_scan_dir+0x518>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	4b3c      	ldr	r3, [pc, #240]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001e84:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e88:	611a      	str	r2, [r3, #16]
 8001e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001e8c:	2280      	movs	r2, #128	@ 0x80
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	4b38      	ldr	r3, [pc, #224]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e96:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 8001e98:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <lcd_scan_dir+0x51c>)
 8001e9a:	899b      	ldrh	r3, [r3, #12]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001ea2:	4b34      	ldr	r3, [pc, #208]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001ea4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ea8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001eaa:	4b32      	ldr	r3, [pc, #200]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001eac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001eb2:	8a3b      	ldrh	r3, [r7, #16]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <lcd_scan_dir+0x518>)
 8001eb8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001eba:	4b2e      	ldr	r3, [pc, #184]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001ebc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ec0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001ec4:	2280      	movs	r2, #128	@ 0x80
 8001ec6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ece:	611a      	str	r2, [r3, #16]
}
 8001ed0:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 8001ed2:	4b28      	ldr	r3, [pc, #160]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed8:	611a      	str	r2, [r3, #16]
 8001eda:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001edc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ee0:	611a      	str	r2, [r3, #16]
 8001ee2:	4b26      	ldr	r3, [pc, #152]	@ (8001f7c <lcd_scan_dir+0x51c>)
 8001ee4:	885b      	ldrh	r3, [r3, #2]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	121a      	asrs	r2, r3, #8
 8001eea:	4b23      	ldr	r3, [pc, #140]	@ (8001f78 <lcd_scan_dir+0x518>)
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001ef0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001ef8:	2280      	movs	r2, #128	@ 0x80
 8001efa:	611a      	str	r2, [r3, #16]
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f02:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <lcd_scan_dir+0x51c>)
 8001f06:	899b      	ldrh	r3, [r3, #12]
 8001f08:	3303      	adds	r3, #3
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001f16:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001f1e:	89fb      	ldrh	r3, [r7, #14]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <lcd_scan_dir+0x518>)
 8001f24:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f28:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f2c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f30:	2280      	movs	r2, #128	@ 0x80
 8001f32:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f3a:	611a      	str	r2, [r3, #16]
}
 8001f3c:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f44:	611a      	str	r2, [r3, #16]
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <lcd_scan_dir+0x51c>)
 8001f50:	885b      	ldrh	r3, [r3, #2]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	4a08      	ldr	r2, [pc, #32]	@ (8001f78 <lcd_scan_dir+0x518>)
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	60d3      	str	r3, [r2, #12]
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f64:	2280      	movs	r2, #128	@ 0x80
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	4b02      	ldr	r3, [pc, #8]	@ (8001f74 <lcd_scan_dir+0x514>)
 8001f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f6e:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 8001f70:	e0f8      	b.n	8002164 <lcd_scan_dir+0x704>
 8001f72:	bf00      	nop
 8001f74:	40011000 	.word	0x40011000
 8001f78:	40010c00 	.word	0x40010c00
 8001f7c:	20000038 	.word	0x20000038
        lcd_wr_regno(lcddev.setxcmd);
 8001f80:	4b7a      	ldr	r3, [pc, #488]	@ (800216c <lcd_scan_dir+0x70c>)
 8001f82:	895b      	ldrh	r3, [r3, #10]
 8001f84:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001f86:	4b7a      	ldr	r3, [pc, #488]	@ (8002170 <lcd_scan_dir+0x710>)
 8001f88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f8c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001f8e:	4b78      	ldr	r3, [pc, #480]	@ (8002170 <lcd_scan_dir+0x710>)
 8001f90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f94:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001f96:	8c3b      	ldrh	r3, [r7, #32]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b76      	ldr	r3, [pc, #472]	@ (8002174 <lcd_scan_dir+0x714>)
 8001f9c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001f9e:	4b74      	ldr	r3, [pc, #464]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fa0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001fa4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001fa6:	4b72      	ldr	r3, [pc, #456]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fa8:	2280      	movs	r2, #128	@ 0x80
 8001faa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001fac:	4b70      	ldr	r3, [pc, #448]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb2:	611a      	str	r2, [r3, #16]
}
 8001fb4:	bf00      	nop
        lcd_wr_data(0);
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fc4:	611a      	str	r2, [r3, #16]
 8001fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8002174 <lcd_scan_dir+0x714>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	4b68      	ldr	r3, [pc, #416]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	4b66      	ldr	r3, [pc, #408]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fd6:	2280      	movs	r2, #128	@ 0x80
 8001fd8:	611a      	str	r2, [r3, #16]
 8001fda:	4b65      	ldr	r3, [pc, #404]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe0:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 8001fe2:	4b63      	ldr	r3, [pc, #396]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	4b61      	ldr	r3, [pc, #388]	@ (8002170 <lcd_scan_dir+0x710>)
 8001fec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	4b60      	ldr	r3, [pc, #384]	@ (8002174 <lcd_scan_dir+0x714>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	4b5d      	ldr	r3, [pc, #372]	@ (8002170 <lcd_scan_dir+0x710>)
 8001ffa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ffe:	611a      	str	r2, [r3, #16]
 8002000:	4b5b      	ldr	r3, [pc, #364]	@ (8002170 <lcd_scan_dir+0x710>)
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	611a      	str	r2, [r3, #16]
 8002006:	4b5a      	ldr	r3, [pc, #360]	@ (8002170 <lcd_scan_dir+0x710>)
 8002008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200c:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 800200e:	4b58      	ldr	r3, [pc, #352]	@ (8002170 <lcd_scan_dir+0x710>)
 8002010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002014:	611a      	str	r2, [r3, #16]
 8002016:	4b56      	ldr	r3, [pc, #344]	@ (8002170 <lcd_scan_dir+0x710>)
 8002018:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800201c:	611a      	str	r2, [r3, #16]
 800201e:	4b53      	ldr	r3, [pc, #332]	@ (800216c <lcd_scan_dir+0x70c>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	3b01      	subs	r3, #1
 8002024:	121a      	asrs	r2, r3, #8
 8002026:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <lcd_scan_dir+0x714>)
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	4b51      	ldr	r3, [pc, #324]	@ (8002170 <lcd_scan_dir+0x710>)
 800202c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	4b4f      	ldr	r3, [pc, #316]	@ (8002170 <lcd_scan_dir+0x710>)
 8002034:	2280      	movs	r2, #128	@ 0x80
 8002036:	611a      	str	r2, [r3, #16]
 8002038:	4b4d      	ldr	r3, [pc, #308]	@ (8002170 <lcd_scan_dir+0x710>)
 800203a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203e:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8002040:	4b4b      	ldr	r3, [pc, #300]	@ (8002170 <lcd_scan_dir+0x710>)
 8002042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	4b49      	ldr	r3, [pc, #292]	@ (8002170 <lcd_scan_dir+0x710>)
 800204a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	4b46      	ldr	r3, [pc, #280]	@ (800216c <lcd_scan_dir+0x70c>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	4a47      	ldr	r2, [pc, #284]	@ (8002174 <lcd_scan_dir+0x714>)
 8002058:	b2db      	uxtb	r3, r3
 800205a:	60d3      	str	r3, [r2, #12]
 800205c:	4b44      	ldr	r3, [pc, #272]	@ (8002170 <lcd_scan_dir+0x710>)
 800205e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002062:	611a      	str	r2, [r3, #16]
 8002064:	4b42      	ldr	r3, [pc, #264]	@ (8002170 <lcd_scan_dir+0x710>)
 8002066:	2280      	movs	r2, #128	@ 0x80
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <lcd_scan_dir+0x710>)
 800206c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002070:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8002072:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <lcd_scan_dir+0x70c>)
 8002074:	899b      	ldrh	r3, [r3, #12]
 8002076:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002078:	4b3d      	ldr	r3, [pc, #244]	@ (8002170 <lcd_scan_dir+0x710>)
 800207a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800207e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002080:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <lcd_scan_dir+0x710>)
 8002082:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002086:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002088:	8bfb      	ldrh	r3, [r7, #30]
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b39      	ldr	r3, [pc, #228]	@ (8002174 <lcd_scan_dir+0x714>)
 800208e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002090:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <lcd_scan_dir+0x710>)
 8002092:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002096:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002098:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <lcd_scan_dir+0x710>)
 800209a:	2280      	movs	r2, #128	@ 0x80
 800209c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800209e:	4b34      	ldr	r3, [pc, #208]	@ (8002170 <lcd_scan_dir+0x710>)
 80020a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020a4:	611a      	str	r2, [r3, #16]
}
 80020a6:	bf00      	nop
        lcd_wr_data(0);
 80020a8:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <lcd_scan_dir+0x710>)
 80020aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <lcd_scan_dir+0x710>)
 80020b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020b6:	611a      	str	r2, [r3, #16]
 80020b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002174 <lcd_scan_dir+0x714>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <lcd_scan_dir+0x710>)
 80020c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020c4:	611a      	str	r2, [r3, #16]
 80020c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <lcd_scan_dir+0x710>)
 80020c8:	2280      	movs	r2, #128	@ 0x80
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <lcd_scan_dir+0x710>)
 80020ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020d2:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <lcd_scan_dir+0x710>)
 80020d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <lcd_scan_dir+0x710>)
 80020de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020e2:	611a      	str	r2, [r3, #16]
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <lcd_scan_dir+0x714>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <lcd_scan_dir+0x710>)
 80020ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020f0:	611a      	str	r2, [r3, #16]
 80020f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002170 <lcd_scan_dir+0x710>)
 80020f4:	2280      	movs	r2, #128	@ 0x80
 80020f6:	611a      	str	r2, [r3, #16]
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <lcd_scan_dir+0x710>)
 80020fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020fe:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <lcd_scan_dir+0x710>)
 8002102:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002106:	611a      	str	r2, [r3, #16]
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <lcd_scan_dir+0x710>)
 800210a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800210e:	611a      	str	r2, [r3, #16]
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <lcd_scan_dir+0x70c>)
 8002112:	885b      	ldrh	r3, [r3, #2]
 8002114:	3b01      	subs	r3, #1
 8002116:	121a      	asrs	r2, r3, #8
 8002118:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <lcd_scan_dir+0x714>)
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <lcd_scan_dir+0x710>)
 800211e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002122:	611a      	str	r2, [r3, #16]
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <lcd_scan_dir+0x710>)
 8002126:	2280      	movs	r2, #128	@ 0x80
 8002128:	611a      	str	r2, [r3, #16]
 800212a:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <lcd_scan_dir+0x710>)
 800212c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002130:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <lcd_scan_dir+0x710>)
 8002134:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <lcd_scan_dir+0x710>)
 800213c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002140:	611a      	str	r2, [r3, #16]
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <lcd_scan_dir+0x70c>)
 8002144:	885b      	ldrh	r3, [r3, #2]
 8002146:	3b01      	subs	r3, #1
 8002148:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <lcd_scan_dir+0x714>)
 800214a:	b2db      	uxtb	r3, r3
 800214c:	60d3      	str	r3, [r2, #12]
 800214e:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <lcd_scan_dir+0x710>)
 8002150:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002154:	611a      	str	r2, [r3, #16]
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <lcd_scan_dir+0x710>)
 8002158:	2280      	movs	r2, #128	@ 0x80
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <lcd_scan_dir+0x710>)
 800215e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002162:	611a      	str	r2, [r3, #16]
}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	@ 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000038 	.word	0x20000038
 8002170:	40011000 	.word	0x40011000
 8002174:	40010c00 	.word	0x40010c00

08002178 <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	603a      	str	r2, [r7, #0]
 8002182:	80fb      	strh	r3, [r7, #6]
 8002184:	460b      	mov	r3, r1
 8002186:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 8002188:	88ba      	ldrh	r2, [r7, #4]
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f952 	bl	8001438 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8002194:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <lcd_draw_point+0x88>)
 8002196:	891b      	ldrh	r3, [r3, #8]
 8002198:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800219a:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <lcd_draw_point+0x8c>)
 800219c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80021a2:	4b18      	ldr	r3, [pc, #96]	@ (8002204 <lcd_draw_point+0x8c>)
 80021a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	4b16      	ldr	r3, [pc, #88]	@ (8002208 <lcd_draw_point+0x90>)
 80021b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80021b2:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <lcd_draw_point+0x8c>)
 80021b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <lcd_draw_point+0x8c>)
 80021bc:	2280      	movs	r2, #128	@ 0x80
 80021be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80021c0:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <lcd_draw_point+0x8c>)
 80021c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021c6:	611a      	str	r2, [r3, #16]
}
 80021c8:	bf00      	nop
}
 80021ca:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 80021cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <lcd_draw_point+0x8c>)
 80021ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d2:	611a      	str	r2, [r3, #16]
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <lcd_draw_point+0x8c>)
 80021d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021da:	611a      	str	r2, [r3, #16]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <lcd_draw_point+0x90>)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	60d3      	str	r3, [r2, #12]
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <lcd_draw_point+0x8c>)
 80021e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021e8:	611a      	str	r2, [r3, #16]
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <lcd_draw_point+0x8c>)
 80021ec:	2280      	movs	r2, #128	@ 0x80
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <lcd_draw_point+0x8c>)
 80021f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f6:	611a      	str	r2, [r3, #16]
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000038 	.word	0x20000038
 8002204:	40011000 	.word	0x40011000
 8002208:	40010c00 	.word	0x40010c00
 800220c:	00000000 	.word	0x00000000

08002210 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
 800221a:	23be      	movs	r3, #190	@ 0xbe
 800221c:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800221e:	4b5a      	ldr	r3, [pc, #360]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002220:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002224:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002226:	4b58      	ldr	r3, [pc, #352]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002228:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800222c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b56      	ldr	r3, [pc, #344]	@ (800238c <lcd_ssd_backlight_set+0x17c>)
 8002234:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002236:	4b54      	ldr	r3, [pc, #336]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002238:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800223c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800223e:	4b52      	ldr	r3, [pc, #328]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002240:	2280      	movs	r2, #128	@ 0x80
 8002242:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002244:	4b50      	ldr	r3, [pc, #320]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002246:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800224a:	611a      	str	r2, [r3, #16]
}
 800224c:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 800224e:	4b4e      	ldr	r3, [pc, #312]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002250:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002254:	611a      	str	r2, [r3, #16]
 8002256:	4b4c      	ldr	r3, [pc, #304]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002258:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <lcd_ssd_backlight_set+0x17c>)
 8002260:	2205      	movs	r2, #5
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	4b48      	ldr	r3, [pc, #288]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002266:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800226a:	611a      	str	r2, [r3, #16]
 800226c:	4b46      	ldr	r3, [pc, #280]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 800226e:	2280      	movs	r2, #128	@ 0x80
 8002270:	611a      	str	r2, [r3, #16]
 8002272:	4b45      	ldr	r3, [pc, #276]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002278:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 800227a:	4b43      	ldr	r3, [pc, #268]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 800227c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002280:	611a      	str	r2, [r3, #16]
 8002282:	4b41      	ldr	r3, [pc, #260]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002284:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002288:	611a      	str	r2, [r3, #16]
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fa47 	bl	8000720 <__aeabi_i2d>
 8002292:	a33b      	add	r3, pc, #236	@ (adr r3, 8002380 <lcd_ssd_backlight_set+0x170>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fd ffc6 	bl	8000228 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4c3a      	ldr	r4, [pc, #232]	@ (800238c <lcd_ssd_backlight_set+0x17c>)
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	f7fe faa5 	bl	80007f4 <__aeabi_d2uiz>
 80022aa:	4603      	mov	r3, r0
 80022ac:	60e3      	str	r3, [r4, #12]
 80022ae:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022b4:	611a      	str	r2, [r3, #16]
 80022b6:	4b34      	ldr	r3, [pc, #208]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022b8:	2280      	movs	r2, #128	@ 0x80
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c2:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 80022c4:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022d2:	611a      	str	r2, [r3, #16]
 80022d4:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <lcd_ssd_backlight_set+0x17c>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022e0:	611a      	str	r2, [r3, #16]
 80022e2:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	611a      	str	r2, [r3, #16]
 80022e8:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ee:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022f6:	611a      	str	r2, [r3, #16]
 80022f8:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 80022fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022fe:	611a      	str	r2, [r3, #16]
 8002300:	4b22      	ldr	r3, [pc, #136]	@ (800238c <lcd_ssd_backlight_set+0x17c>)
 8002302:	22ff      	movs	r2, #255	@ 0xff
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002308:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800230c:	611a      	str	r2, [r3, #16]
 800230e:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	611a      	str	r2, [r3, #16]
 8002314:	4b1c      	ldr	r3, [pc, #112]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800231a:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 800231c:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 800231e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002322:	611a      	str	r2, [r3, #16]
 8002324:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002326:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800232a:	611a      	str	r2, [r3, #16]
 800232c:	4b17      	ldr	r3, [pc, #92]	@ (800238c <lcd_ssd_backlight_set+0x17c>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002334:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002338:	611a      	str	r2, [r3, #16]
 800233a:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 800233c:	2280      	movs	r2, #128	@ 0x80
 800233e:	611a      	str	r2, [r3, #16]
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002346:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 800234a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800234e:	611a      	str	r2, [r3, #16]
 8002350:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002352:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002356:	611a      	str	r2, [r3, #16]
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <lcd_ssd_backlight_set+0x17c>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002360:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 8002368:	2280      	movs	r2, #128	@ 0x80
 800236a:	611a      	str	r2, [r3, #16]
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <lcd_ssd_backlight_set+0x178>)
 800236e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002372:	611a      	str	r2, [r3, #16]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}
 800237c:	f3af 8000 	nop.w
 8002380:	66666666 	.word	0x66666666
 8002384:	40046666 	.word	0x40046666
 8002388:	40011000 	.word	0x40011000
 800238c:	40010c00 	.word	0x40010c00

08002390 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 800239a:	4a68      	ldr	r2, [pc, #416]	@ (800253c <lcd_display_dir+0x1ac>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d165      	bne.n	8002472 <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 80023a6:	4b65      	ldr	r3, [pc, #404]	@ (800253c <lcd_display_dir+0x1ac>)
 80023a8:	22f0      	movs	r2, #240	@ 0xf0
 80023aa:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 80023ac:	4b63      	ldr	r3, [pc, #396]	@ (800253c <lcd_display_dir+0x1ac>)
 80023ae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80023b2:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 80023b4:	4b61      	ldr	r3, [pc, #388]	@ (800253c <lcd_display_dir+0x1ac>)
 80023b6:	889b      	ldrh	r3, [r3, #4]
 80023b8:	f245 5210 	movw	r2, #21776	@ 0x5510
 80023bc:	4293      	cmp	r3, r2
 80023be:	d114      	bne.n	80023ea <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 80023c0:	4b5e      	ldr	r3, [pc, #376]	@ (800253c <lcd_display_dir+0x1ac>)
 80023c2:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80023c6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 80023c8:	4b5c      	ldr	r3, [pc, #368]	@ (800253c <lcd_display_dir+0x1ac>)
 80023ca:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80023ce:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 80023d0:	4b5a      	ldr	r3, [pc, #360]	@ (800253c <lcd_display_dir+0x1ac>)
 80023d2:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80023d6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 80023d8:	4b58      	ldr	r3, [pc, #352]	@ (800253c <lcd_display_dir+0x1ac>)
 80023da:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80023de:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 80023e0:	4b56      	ldr	r3, [pc, #344]	@ (800253c <lcd_display_dir+0x1ac>)
 80023e2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80023e6:	805a      	strh	r2, [r3, #2]
 80023e8:	e020      	b.n	800242c <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 80023ea:	4b54      	ldr	r3, [pc, #336]	@ (800253c <lcd_display_dir+0x1ac>)
 80023ec:	889b      	ldrh	r3, [r3, #4]
 80023ee:	f641 1263 	movw	r2, #6499	@ 0x1963
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d111      	bne.n	800241a <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 80023f6:	4b51      	ldr	r3, [pc, #324]	@ (800253c <lcd_display_dir+0x1ac>)
 80023f8:	222c      	movs	r2, #44	@ 0x2c
 80023fa:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 80023fc:	4b4f      	ldr	r3, [pc, #316]	@ (800253c <lcd_display_dir+0x1ac>)
 80023fe:	222b      	movs	r2, #43	@ 0x2b
 8002400:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 8002402:	4b4e      	ldr	r3, [pc, #312]	@ (800253c <lcd_display_dir+0x1ac>)
 8002404:	222a      	movs	r2, #42	@ 0x2a
 8002406:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 8002408:	4b4c      	ldr	r3, [pc, #304]	@ (800253c <lcd_display_dir+0x1ac>)
 800240a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800240e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 8002410:	4b4a      	ldr	r3, [pc, #296]	@ (800253c <lcd_display_dir+0x1ac>)
 8002412:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002416:	805a      	strh	r2, [r3, #2]
 8002418:	e008      	b.n	800242c <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 800241a:	4b48      	ldr	r3, [pc, #288]	@ (800253c <lcd_display_dir+0x1ac>)
 800241c:	222c      	movs	r2, #44	@ 0x2c
 800241e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8002420:	4b46      	ldr	r3, [pc, #280]	@ (800253c <lcd_display_dir+0x1ac>)
 8002422:	222a      	movs	r2, #42	@ 0x2a
 8002424:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8002426:	4b45      	ldr	r3, [pc, #276]	@ (800253c <lcd_display_dir+0x1ac>)
 8002428:	222b      	movs	r2, #43	@ 0x2b
 800242a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 800242c:	4b43      	ldr	r3, [pc, #268]	@ (800253c <lcd_display_dir+0x1ac>)
 800242e:	889b      	ldrh	r3, [r3, #4]
 8002430:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002434:	4293      	cmp	r3, r2
 8002436:	d005      	beq.n	8002444 <lcd_display_dir+0xb4>
 8002438:	4b40      	ldr	r3, [pc, #256]	@ (800253c <lcd_display_dir+0x1ac>)
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002440:	4293      	cmp	r3, r2
 8002442:	d107      	bne.n	8002454 <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8002444:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <lcd_display_dir+0x1ac>)
 8002446:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800244a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 800244c:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <lcd_display_dir+0x1ac>)
 800244e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002452:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 8002454:	4b39      	ldr	r3, [pc, #228]	@ (800253c <lcd_display_dir+0x1ac>)
 8002456:	889b      	ldrh	r3, [r3, #4]
 8002458:	f649 0206 	movw	r2, #38918	@ 0x9806
 800245c:	4293      	cmp	r3, r2
 800245e:	d165      	bne.n	800252c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8002460:	4b36      	ldr	r3, [pc, #216]	@ (800253c <lcd_display_dir+0x1ac>)
 8002462:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002466:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8002468:	4b34      	ldr	r3, [pc, #208]	@ (800253c <lcd_display_dir+0x1ac>)
 800246a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800246e:	805a      	strh	r2, [r3, #2]
 8002470:	e05c      	b.n	800252c <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 8002472:	4b32      	ldr	r3, [pc, #200]	@ (800253c <lcd_display_dir+0x1ac>)
 8002474:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002478:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 800247a:	4b30      	ldr	r3, [pc, #192]	@ (800253c <lcd_display_dir+0x1ac>)
 800247c:	22f0      	movs	r2, #240	@ 0xf0
 800247e:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8002480:	4b2e      	ldr	r3, [pc, #184]	@ (800253c <lcd_display_dir+0x1ac>)
 8002482:	889b      	ldrh	r3, [r3, #4]
 8002484:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002488:	4293      	cmp	r3, r2
 800248a:	d114      	bne.n	80024b6 <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <lcd_display_dir+0x1ac>)
 800248e:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8002492:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8002494:	4b29      	ldr	r3, [pc, #164]	@ (800253c <lcd_display_dir+0x1ac>)
 8002496:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 800249a:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 800249c:	4b27      	ldr	r3, [pc, #156]	@ (800253c <lcd_display_dir+0x1ac>)
 800249e:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80024a2:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 80024a4:	4b25      	ldr	r3, [pc, #148]	@ (800253c <lcd_display_dir+0x1ac>)
 80024a6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80024aa:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80024ac:	4b23      	ldr	r3, [pc, #140]	@ (800253c <lcd_display_dir+0x1ac>)
 80024ae:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80024b2:	805a      	strh	r2, [r3, #2]
 80024b4:	e026      	b.n	8002504 <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 80024b6:	4b21      	ldr	r3, [pc, #132]	@ (800253c <lcd_display_dir+0x1ac>)
 80024b8:	889b      	ldrh	r3, [r3, #4]
 80024ba:	f641 1263 	movw	r2, #6499	@ 0x1963
 80024be:	4293      	cmp	r3, r2
 80024c0:	d005      	beq.n	80024ce <lcd_display_dir+0x13e>
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <lcd_display_dir+0x1ac>)
 80024c4:	889b      	ldrh	r3, [r3, #4]
 80024c6:	f649 0206 	movw	r2, #38918	@ 0x9806
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d111      	bne.n	80024f2 <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 80024ce:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <lcd_display_dir+0x1ac>)
 80024d0:	222c      	movs	r2, #44	@ 0x2c
 80024d2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 80024d4:	4b19      	ldr	r3, [pc, #100]	@ (800253c <lcd_display_dir+0x1ac>)
 80024d6:	222a      	movs	r2, #42	@ 0x2a
 80024d8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 80024da:	4b18      	ldr	r3, [pc, #96]	@ (800253c <lcd_display_dir+0x1ac>)
 80024dc:	222b      	movs	r2, #43	@ 0x2b
 80024de:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 80024e0:	4b16      	ldr	r3, [pc, #88]	@ (800253c <lcd_display_dir+0x1ac>)
 80024e2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80024e6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 80024e8:	4b14      	ldr	r3, [pc, #80]	@ (800253c <lcd_display_dir+0x1ac>)
 80024ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80024ee:	805a      	strh	r2, [r3, #2]
 80024f0:	e008      	b.n	8002504 <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 80024f2:	4b12      	ldr	r3, [pc, #72]	@ (800253c <lcd_display_dir+0x1ac>)
 80024f4:	222c      	movs	r2, #44	@ 0x2c
 80024f6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <lcd_display_dir+0x1ac>)
 80024fa:	222a      	movs	r2, #42	@ 0x2a
 80024fc:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 80024fe:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <lcd_display_dir+0x1ac>)
 8002500:	222b      	movs	r2, #43	@ 0x2b
 8002502:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8002504:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <lcd_display_dir+0x1ac>)
 8002506:	889b      	ldrh	r3, [r3, #4]
 8002508:	f245 3210 	movw	r2, #21264	@ 0x5310
 800250c:	4293      	cmp	r3, r2
 800250e:	d005      	beq.n	800251c <lcd_display_dir+0x18c>
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <lcd_display_dir+0x1ac>)
 8002512:	889b      	ldrh	r3, [r3, #4]
 8002514:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002518:	4293      	cmp	r3, r2
 800251a:	d107      	bne.n	800252c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <lcd_display_dir+0x1ac>)
 800251e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002522:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <lcd_display_dir+0x1ac>)
 8002526:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800252a:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 800252c:	2000      	movs	r0, #0
 800252e:	f7ff fa97 	bl	8001a60 <lcd_scan_dir>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000038 	.word	0x20000038

08002540 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0da      	sub	sp, #360	@ 0x168
 8002544:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 8002546:	4bbe      	ldr	r3, [pc, #760]	@ (8002840 <lcd_init+0x300>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	4abd      	ldr	r2, [pc, #756]	@ (8002840 <lcd_init+0x300>)
 800254c:	f043 0310 	orr.w	r3, r3, #16
 8002550:	6193      	str	r3, [r2, #24]
 8002552:	4bbb      	ldr	r3, [pc, #748]	@ (8002840 <lcd_init+0x300>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0210 	and.w	r2, r3, #16
 800255a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800255e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002568:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800256c:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 800256e:	4bb4      	ldr	r3, [pc, #720]	@ (8002840 <lcd_init+0x300>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4ab3      	ldr	r2, [pc, #716]	@ (8002840 <lcd_init+0x300>)
 8002574:	f043 0310 	orr.w	r3, r3, #16
 8002578:	6193      	str	r3, [r2, #24]
 800257a:	4bb1      	ldr	r3, [pc, #708]	@ (8002840 <lcd_init+0x300>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0210 	and.w	r2, r3, #16
 8002582:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002586:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002590:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002594:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 8002596:	4baa      	ldr	r3, [pc, #680]	@ (8002840 <lcd_init+0x300>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4aa9      	ldr	r2, [pc, #676]	@ (8002840 <lcd_init+0x300>)
 800259c:	f043 0310 	orr.w	r3, r3, #16
 80025a0:	6193      	str	r3, [r2, #24]
 80025a2:	4ba7      	ldr	r3, [pc, #668]	@ (8002840 <lcd_init+0x300>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0210 	and.w	r2, r3, #16
 80025aa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025ae:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025b8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80025bc:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 80025be:	4ba0      	ldr	r3, [pc, #640]	@ (8002840 <lcd_init+0x300>)
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	4a9f      	ldr	r2, [pc, #636]	@ (8002840 <lcd_init+0x300>)
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	6193      	str	r3, [r2, #24]
 80025ca:	4b9d      	ldr	r3, [pc, #628]	@ (8002840 <lcd_init+0x300>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f003 0210 	and.w	r2, r3, #16
 80025d2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025d6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025e0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80025e4:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 80025e6:	4b96      	ldr	r3, [pc, #600]	@ (8002840 <lcd_init+0x300>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	4a95      	ldr	r2, [pc, #596]	@ (8002840 <lcd_init+0x300>)
 80025ec:	f043 0310 	orr.w	r3, r3, #16
 80025f0:	6193      	str	r3, [r2, #24]
 80025f2:	4b93      	ldr	r3, [pc, #588]	@ (8002840 <lcd_init+0x300>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0210 	and.w	r2, r3, #16
 80025fa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002608:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800260c:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 800260e:	4b8c      	ldr	r3, [pc, #560]	@ (8002840 <lcd_init+0x300>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4a8b      	ldr	r2, [pc, #556]	@ (8002840 <lcd_init+0x300>)
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	6193      	str	r3, [r2, #24]
 800261a:	4b89      	ldr	r3, [pc, #548]	@ (8002840 <lcd_init+0x300>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0208 	and.w	r2, r3, #8
 8002622:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002626:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002630:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002634:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8002636:	4b82      	ldr	r3, [pc, #520]	@ (8002840 <lcd_init+0x300>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	4a81      	ldr	r2, [pc, #516]	@ (8002840 <lcd_init+0x300>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6193      	str	r3, [r2, #24]
 8002642:	4b7f      	ldr	r3, [pc, #508]	@ (8002840 <lcd_init+0x300>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0201 	and.w	r2, r3, #1
 800264a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800264e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002658:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800265c:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 800265e:	4b79      	ldr	r3, [pc, #484]	@ (8002844 <lcd_init+0x304>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002666:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800266a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800266e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002672:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002676:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800267a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800267e:	4a71      	ldr	r2, [pc, #452]	@ (8002844 <lcd_init+0x304>)
 8002680:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002684:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8002686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800268a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 800268e:	2301      	movs	r3, #1
 8002690:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 8002694:	2301      	movs	r3, #1
 8002696:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 800269a:	2303      	movs	r3, #3
 800269c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 80026a0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80026a4:	4619      	mov	r1, r3
 80026a6:	4868      	ldr	r0, [pc, #416]	@ (8002848 <lcd_init+0x308>)
 80026a8:	f005 fd2e 	bl	8008108 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 80026ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026b0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 80026b4:	2301      	movs	r3, #1
 80026b6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 80026ba:	2301      	movs	r3, #1
 80026bc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 80026c0:	2303      	movs	r3, #3
 80026c2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 80026c6:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80026ca:	4619      	mov	r1, r3
 80026cc:	485e      	ldr	r0, [pc, #376]	@ (8002848 <lcd_init+0x308>)
 80026ce:	f005 fd1b 	bl	8008108 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 80026d8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80026dc:	4619      	mov	r1, r3
 80026de:	485a      	ldr	r0, [pc, #360]	@ (8002848 <lcd_init+0x308>)
 80026e0:	f005 fd12 	bl	8008108 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 80026e4:	2340      	movs	r3, #64	@ 0x40
 80026e6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 80026ea:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80026ee:	4619      	mov	r1, r3
 80026f0:	4855      	ldr	r0, [pc, #340]	@ (8002848 <lcd_init+0x308>)
 80026f2:	f005 fd09 	bl	8008108 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 80026f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026fa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 80026fe:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002702:	4619      	mov	r1, r3
 8002704:	4850      	ldr	r0, [pc, #320]	@ (8002848 <lcd_init+0x308>)
 8002706:	f005 fcff 	bl	8008108 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 800270a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800270e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 8002712:	2301      	movs	r3, #1
 8002714:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8002718:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800271c:	4619      	mov	r1, r3
 800271e:	484b      	ldr	r0, [pc, #300]	@ (800284c <lcd_init+0x30c>)
 8002720:	f005 fcf2 	bl	8008108 <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 8002724:	4b48      	ldr	r3, [pc, #288]	@ (8002848 <lcd_init+0x308>)
 8002726:	2280      	movs	r2, #128	@ 0x80
 8002728:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 800272a:	4b47      	ldr	r3, [pc, #284]	@ (8002848 <lcd_init+0x308>)
 800272c:	2240      	movs	r2, #64	@ 0x40
 800272e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8002730:	4b45      	ldr	r3, [pc, #276]	@ (8002848 <lcd_init+0x308>)
 8002732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002736:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8002738:	4b43      	ldr	r3, [pc, #268]	@ (8002848 <lcd_init+0x308>)
 800273a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800273e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8002740:	4b42      	ldr	r3, [pc, #264]	@ (800284c <lcd_init+0x30c>)
 8002742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002746:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8002748:	4841      	ldr	r0, [pc, #260]	@ (8002850 <lcd_init+0x310>)
 800274a:	f7fe fe21 	bl	8001390 <lcd_opt_delay>
 800274e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002752:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002756:	22d3      	movs	r2, #211	@ 0xd3
 8002758:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <lcd_init+0x308>)
 800275c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002760:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002762:	4b39      	ldr	r3, [pc, #228]	@ (8002848 <lcd_init+0x308>)
 8002764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002768:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800276a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800276e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b35      	ldr	r3, [pc, #212]	@ (800284c <lcd_init+0x30c>)
 8002778:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800277a:	4b33      	ldr	r3, [pc, #204]	@ (8002848 <lcd_init+0x308>)
 800277c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002780:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002782:	4b31      	ldr	r3, [pc, #196]	@ (8002848 <lcd_init+0x308>)
 8002784:	2280      	movs	r2, #128	@ 0x80
 8002786:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002788:	4b2f      	ldr	r3, [pc, #188]	@ (8002848 <lcd_init+0x308>)
 800278a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800278e:	611a      	str	r2, [r3, #16]
}
 8002790:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 8002792:	f7fe fe0d 	bl	80013b0 <lcd_rd_data>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	4b2e      	ldr	r3, [pc, #184]	@ (8002854 <lcd_init+0x314>)
 800279c:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 800279e:	f7fe fe07 	bl	80013b0 <lcd_rd_data>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002854 <lcd_init+0x314>)
 80027a8:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 80027aa:	f7fe fe01 	bl	80013b0 <lcd_rd_data>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b28      	ldr	r3, [pc, #160]	@ (8002854 <lcd_init+0x314>)
 80027b4:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 80027b6:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <lcd_init+0x314>)
 80027b8:	889b      	ldrh	r3, [r3, #4]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b25      	ldr	r3, [pc, #148]	@ (8002854 <lcd_init+0x314>)
 80027c0:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 80027c2:	f7fe fdf5 	bl	80013b0 <lcd_rd_data>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b22      	ldr	r3, [pc, #136]	@ (8002854 <lcd_init+0x314>)
 80027cc:	889b      	ldrh	r3, [r3, #4]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <lcd_init+0x314>)
 80027d4:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 80027d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002854 <lcd_init+0x314>)
 80027d8:	889b      	ldrh	r3, [r3, #4]
 80027da:	f249 3241 	movw	r2, #37697	@ 0x9341
 80027de:	4293      	cmp	r3, r2
 80027e0:	f000 820e 	beq.w	8002c00 <lcd_init+0x6c0>
 80027e4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027e8:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 80027ec:	2204      	movs	r2, #4
 80027ee:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80027f0:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <lcd_init+0x308>)
 80027f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <lcd_init+0x308>)
 80027fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002800:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002804:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <lcd_init+0x30c>)
 800280e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <lcd_init+0x308>)
 8002812:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002816:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <lcd_init+0x308>)
 800281a:	2280      	movs	r2, #128	@ 0x80
 800281c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800281e:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <lcd_init+0x308>)
 8002820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002824:	611a      	str	r2, [r3, #16]
}
 8002826:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8002828:	f7fe fdc2 	bl	80013b0 <lcd_rd_data>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <lcd_init+0x314>)
 8002832:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 8002834:	f7fe fdbc 	bl	80013b0 <lcd_rd_data>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	e00c      	b.n	8002858 <lcd_init+0x318>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	40010000 	.word	0x40010000
 8002848:	40011000 	.word	0x40011000
 800284c:	40010c00 	.word	0x40010c00
 8002850:	0001ffff 	.word	0x0001ffff
 8002854:	20000038 	.word	0x20000038
 8002858:	4bb1      	ldr	r3, [pc, #708]	@ (8002b20 <lcd_init+0x5e0>)
 800285a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 800285c:	f7fe fda8 	bl	80013b0 <lcd_rd_data>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	4bae      	ldr	r3, [pc, #696]	@ (8002b20 <lcd_init+0x5e0>)
 8002866:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8002868:	4bad      	ldr	r3, [pc, #692]	@ (8002b20 <lcd_init+0x5e0>)
 800286a:	889b      	ldrh	r3, [r3, #4]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	b29a      	uxth	r2, r3
 8002870:	4bab      	ldr	r3, [pc, #684]	@ (8002b20 <lcd_init+0x5e0>)
 8002872:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 8002874:	f7fe fd9c 	bl	80013b0 <lcd_rd_data>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	4ba8      	ldr	r3, [pc, #672]	@ (8002b20 <lcd_init+0x5e0>)
 800287e:	889b      	ldrh	r3, [r3, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	b29a      	uxth	r2, r3
 8002884:	4ba6      	ldr	r3, [pc, #664]	@ (8002b20 <lcd_init+0x5e0>)
 8002886:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 8002888:	4ba5      	ldr	r3, [pc, #660]	@ (8002b20 <lcd_init+0x5e0>)
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	f248 5252 	movw	r2, #34130	@ 0x8552
 8002890:	4293      	cmp	r3, r2
 8002892:	d103      	bne.n	800289c <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 8002894:	4ba2      	ldr	r3, [pc, #648]	@ (8002b20 <lcd_init+0x5e0>)
 8002896:	f247 7289 	movw	r2, #30601	@ 0x7789
 800289a:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 800289c:	4ba0      	ldr	r3, [pc, #640]	@ (8002b20 <lcd_init+0x5e0>)
 800289e:	889b      	ldrh	r3, [r3, #4]
 80028a0:	f247 7289 	movw	r2, #30601	@ 0x7789
 80028a4:	4293      	cmp	r3, r2
 80028a6:	f000 81ab 	beq.w	8002c00 <lcd_init+0x6c0>
 80028aa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80028ae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028b2:	22d4      	movs	r2, #212	@ 0xd4
 80028b4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80028b6:	4b9b      	ldr	r3, [pc, #620]	@ (8002b24 <lcd_init+0x5e4>)
 80028b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80028be:	4b99      	ldr	r3, [pc, #612]	@ (8002b24 <lcd_init+0x5e4>)
 80028c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80028c6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80028ca:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	4b95      	ldr	r3, [pc, #596]	@ (8002b28 <lcd_init+0x5e8>)
 80028d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028d6:	4b93      	ldr	r3, [pc, #588]	@ (8002b24 <lcd_init+0x5e4>)
 80028d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028de:	4b91      	ldr	r3, [pc, #580]	@ (8002b24 <lcd_init+0x5e4>)
 80028e0:	2280      	movs	r2, #128	@ 0x80
 80028e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002b24 <lcd_init+0x5e4>)
 80028e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ea:	611a      	str	r2, [r3, #16]
}
 80028ec:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 80028ee:	f7fe fd5f 	bl	80013b0 <lcd_rd_data>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002b20 <lcd_init+0x5e0>)
 80028f8:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 80028fa:	f7fe fd59 	bl	80013b0 <lcd_rd_data>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	4b87      	ldr	r3, [pc, #540]	@ (8002b20 <lcd_init+0x5e0>)
 8002904:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 8002906:	f7fe fd53 	bl	80013b0 <lcd_rd_data>
 800290a:	4603      	mov	r3, r0
 800290c:	461a      	mov	r2, r3
 800290e:	4b84      	ldr	r3, [pc, #528]	@ (8002b20 <lcd_init+0x5e0>)
 8002910:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8002912:	4b83      	ldr	r3, [pc, #524]	@ (8002b20 <lcd_init+0x5e0>)
 8002914:	889b      	ldrh	r3, [r3, #4]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	b29a      	uxth	r2, r3
 800291a:	4b81      	ldr	r3, [pc, #516]	@ (8002b20 <lcd_init+0x5e0>)
 800291c:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 800291e:	f7fe fd47 	bl	80013b0 <lcd_rd_data>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b7e      	ldr	r3, [pc, #504]	@ (8002b20 <lcd_init+0x5e0>)
 8002928:	889b      	ldrh	r3, [r3, #4]
 800292a:	4313      	orrs	r3, r2
 800292c:	b29a      	uxth	r2, r3
 800292e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b20 <lcd_init+0x5e0>)
 8002930:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 8002932:	4b7b      	ldr	r3, [pc, #492]	@ (8002b20 <lcd_init+0x5e0>)
 8002934:	889b      	ldrh	r3, [r3, #4]
 8002936:	f245 3210 	movw	r2, #21264	@ 0x5310
 800293a:	4293      	cmp	r3, r2
 800293c:	f000 8160 	beq.w	8002c00 <lcd_init+0x6c0>
 8002940:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002944:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002948:	22d3      	movs	r2, #211	@ 0xd3
 800294a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800294c:	4b75      	ldr	r3, [pc, #468]	@ (8002b24 <lcd_init+0x5e4>)
 800294e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002952:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002954:	4b73      	ldr	r3, [pc, #460]	@ (8002b24 <lcd_init+0x5e4>)
 8002956:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800295a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800295c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002960:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29a      	uxth	r2, r3
 8002968:	4b6f      	ldr	r3, [pc, #444]	@ (8002b28 <lcd_init+0x5e8>)
 800296a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800296c:	4b6d      	ldr	r3, [pc, #436]	@ (8002b24 <lcd_init+0x5e4>)
 800296e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002972:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002974:	4b6b      	ldr	r3, [pc, #428]	@ (8002b24 <lcd_init+0x5e4>)
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800297a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b24 <lcd_init+0x5e4>)
 800297c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002980:	611a      	str	r2, [r3, #16]
}
 8002982:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 8002984:	f7fe fd14 	bl	80013b0 <lcd_rd_data>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	4b64      	ldr	r3, [pc, #400]	@ (8002b20 <lcd_init+0x5e0>)
 800298e:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002990:	f7fe fd0e 	bl	80013b0 <lcd_rd_data>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	4b61      	ldr	r3, [pc, #388]	@ (8002b20 <lcd_init+0x5e0>)
 800299a:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 800299c:	f7fe fd08 	bl	80013b0 <lcd_rd_data>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b20 <lcd_init+0x5e0>)
 80029a6:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 80029a8:	4b5d      	ldr	r3, [pc, #372]	@ (8002b20 <lcd_init+0x5e0>)
 80029aa:	889b      	ldrh	r3, [r3, #4]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <lcd_init+0x5e0>)
 80029b2:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 80029b4:	f7fe fcfc 	bl	80013b0 <lcd_rd_data>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b58      	ldr	r3, [pc, #352]	@ (8002b20 <lcd_init+0x5e0>)
 80029be:	889b      	ldrh	r3, [r3, #4]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b56      	ldr	r3, [pc, #344]	@ (8002b20 <lcd_init+0x5e0>)
 80029c6:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 80029c8:	4b55      	ldr	r3, [pc, #340]	@ (8002b20 <lcd_init+0x5e0>)
 80029ca:	889b      	ldrh	r3, [r3, #4]
 80029cc:	f247 7296 	movw	r2, #30614	@ 0x7796
 80029d0:	4293      	cmp	r3, r2
 80029d2:	f000 8115 	beq.w	8002c00 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 80029d6:	2155      	movs	r1, #85	@ 0x55
 80029d8:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80029dc:	f7fe fc96 	bl	800130c <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 80029e0:	21aa      	movs	r1, #170	@ 0xaa
 80029e2:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80029e6:	f7fe fc91 	bl	800130c <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 80029ea:	2152      	movs	r1, #82	@ 0x52
 80029ec:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80029f0:	f7fe fc8c 	bl	800130c <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 80029f4:	2108      	movs	r1, #8
 80029f6:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80029fa:	f7fe fc87 	bl	800130c <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 80029fe:	2101      	movs	r1, #1
 8002a00:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8002a04:	f7fe fc82 	bl	800130c <lcd_write_reg>
 8002a08:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a0c:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002a10:	f44f 4245 	mov.w	r2, #50432	@ 0xc500
 8002a14:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a16:	4b43      	ldr	r3, [pc, #268]	@ (8002b24 <lcd_init+0x5e4>)
 8002a18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a1c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a1e:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <lcd_init+0x5e4>)
 8002a20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a24:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a26:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a2a:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	4b3d      	ldr	r3, [pc, #244]	@ (8002b28 <lcd_init+0x5e8>)
 8002a34:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a36:	4b3b      	ldr	r3, [pc, #236]	@ (8002b24 <lcd_init+0x5e4>)
 8002a38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a3c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a3e:	4b39      	ldr	r3, [pc, #228]	@ (8002b24 <lcd_init+0x5e4>)
 8002a40:	2280      	movs	r2, #128	@ 0x80
 8002a42:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a44:	4b37      	ldr	r3, [pc, #220]	@ (8002b24 <lcd_init+0x5e4>)
 8002a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4a:	611a      	str	r2, [r3, #16]
}
 8002a4c:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 8002a4e:	f7fe fcaf 	bl	80013b0 <lcd_rd_data>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b32      	ldr	r3, [pc, #200]	@ (8002b20 <lcd_init+0x5e0>)
 8002a58:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8002a5a:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <lcd_init+0x5e0>)
 8002a5c:	889b      	ldrh	r3, [r3, #4]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <lcd_init+0x5e0>)
 8002a64:	809a      	strh	r2, [r3, #4]
 8002a66:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a6a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a6e:	f24c 5201 	movw	r2, #50433	@ 0xc501
 8002a72:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a74:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <lcd_init+0x5e4>)
 8002a76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a7a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a7c:	4b29      	ldr	r3, [pc, #164]	@ (8002b24 <lcd_init+0x5e4>)
 8002a7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a82:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a84:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a88:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <lcd_init+0x5e8>)
 8002a92:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a94:	4b23      	ldr	r3, [pc, #140]	@ (8002b24 <lcd_init+0x5e4>)
 8002a96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a9a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a9c:	4b21      	ldr	r3, [pc, #132]	@ (8002b24 <lcd_init+0x5e4>)
 8002a9e:	2280      	movs	r2, #128	@ 0x80
 8002aa0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002aa2:	4b20      	ldr	r3, [pc, #128]	@ (8002b24 <lcd_init+0x5e4>)
 8002aa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa8:	611a      	str	r2, [r3, #16]
}
 8002aaa:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 8002aac:	f7fe fc80 	bl	80013b0 <lcd_rd_data>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <lcd_init+0x5e0>)
 8002ab6:	889b      	ldrh	r3, [r3, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <lcd_init+0x5e0>)
 8002abe:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 8002ac0:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <lcd_init+0x5e0>)
 8002ac2:	889b      	ldrh	r3, [r3, #4]
 8002ac4:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	f000 8099 	beq.w	8002c00 <lcd_init+0x6c0>
 8002ace:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ad2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ad6:	22d3      	movs	r2, #211	@ 0xd3
 8002ad8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ada:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <lcd_init+0x5e4>)
 8002adc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ae0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <lcd_init+0x5e4>)
 8002ae4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002aea:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002aee:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <lcd_init+0x5e8>)
 8002af8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <lcd_init+0x5e4>)
 8002afc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b00:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b02:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <lcd_init+0x5e4>)
 8002b04:	2280      	movs	r2, #128	@ 0x80
 8002b06:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <lcd_init+0x5e4>)
 8002b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0e:	611a      	str	r2, [r3, #16]
}
 8002b10:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8002b12:	f7fe fc4d 	bl	80013b0 <lcd_rd_data>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b01      	ldr	r3, [pc, #4]	@ (8002b20 <lcd_init+0x5e0>)
 8002b1c:	809a      	strh	r2, [r3, #4]
 8002b1e:	e005      	b.n	8002b2c <lcd_init+0x5ec>
 8002b20:	20000038 	.word	0x20000038
 8002b24:	40011000 	.word	0x40011000
 8002b28:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002b2c:	f7fe fc40 	bl	80013b0 <lcd_rd_data>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	4bb2      	ldr	r3, [pc, #712]	@ (8002e00 <lcd_init+0x8c0>)
 8002b36:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 8002b38:	f7fe fc3a 	bl	80013b0 <lcd_rd_data>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4baf      	ldr	r3, [pc, #700]	@ (8002e00 <lcd_init+0x8c0>)
 8002b42:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8002b44:	4bae      	ldr	r3, [pc, #696]	@ (8002e00 <lcd_init+0x8c0>)
 8002b46:	889b      	ldrh	r3, [r3, #4]
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4bac      	ldr	r3, [pc, #688]	@ (8002e00 <lcd_init+0x8c0>)
 8002b4e:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002b50:	f7fe fc2e 	bl	80013b0 <lcd_rd_data>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4ba9      	ldr	r3, [pc, #676]	@ (8002e00 <lcd_init+0x8c0>)
 8002b5a:	889b      	ldrh	r3, [r3, #4]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4ba7      	ldr	r3, [pc, #668]	@ (8002e00 <lcd_init+0x8c0>)
 8002b62:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 8002b64:	4ba6      	ldr	r3, [pc, #664]	@ (8002e00 <lcd_init+0x8c0>)
 8002b66:	889b      	ldrh	r3, [r3, #4]
 8002b68:	f649 0206 	movw	r2, #38918	@ 0x9806
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d047      	beq.n	8002c00 <lcd_init+0x6c0>
 8002b70:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b74:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002b78:	22a1      	movs	r2, #161	@ 0xa1
 8002b7a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b7c:	4ba1      	ldr	r3, [pc, #644]	@ (8002e04 <lcd_init+0x8c4>)
 8002b7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b82:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b84:	4b9f      	ldr	r3, [pc, #636]	@ (8002e04 <lcd_init+0x8c4>)
 8002b86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b8a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b8c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b90:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	4b9b      	ldr	r3, [pc, #620]	@ (8002e08 <lcd_init+0x8c8>)
 8002b9a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b9c:	4b99      	ldr	r3, [pc, #612]	@ (8002e04 <lcd_init+0x8c4>)
 8002b9e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ba2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ba4:	4b97      	ldr	r3, [pc, #604]	@ (8002e04 <lcd_init+0x8c4>)
 8002ba6:	2280      	movs	r2, #128	@ 0x80
 8002ba8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002baa:	4b96      	ldr	r3, [pc, #600]	@ (8002e04 <lcd_init+0x8c4>)
 8002bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb0:	611a      	str	r2, [r3, #16]
}
 8002bb2:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 8002bb4:	f7fe fbfc 	bl	80013b0 <lcd_rd_data>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b90      	ldr	r3, [pc, #576]	@ (8002e00 <lcd_init+0x8c0>)
 8002bbe:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 8002bc0:	f7fe fbf6 	bl	80013b0 <lcd_rd_data>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b8d      	ldr	r3, [pc, #564]	@ (8002e00 <lcd_init+0x8c0>)
 8002bca:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8002bcc:	4b8c      	ldr	r3, [pc, #560]	@ (8002e00 <lcd_init+0x8c0>)
 8002bce:	889b      	ldrh	r3, [r3, #4]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b8a      	ldr	r3, [pc, #552]	@ (8002e00 <lcd_init+0x8c0>)
 8002bd6:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 8002bd8:	f7fe fbea 	bl	80013b0 <lcd_rd_data>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b87      	ldr	r3, [pc, #540]	@ (8002e00 <lcd_init+0x8c0>)
 8002be2:	889b      	ldrh	r3, [r3, #4]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	4b85      	ldr	r3, [pc, #532]	@ (8002e00 <lcd_init+0x8c0>)
 8002bea:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 8002bec:	4b84      	ldr	r3, [pc, #528]	@ (8002e00 <lcd_init+0x8c0>)
 8002bee:	889b      	ldrh	r3, [r3, #4]
 8002bf0:	f245 7261 	movw	r2, #22369	@ 0x5761
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d103      	bne.n	8002c00 <lcd_init+0x6c0>
 8002bf8:	4b81      	ldr	r3, [pc, #516]	@ (8002e00 <lcd_init+0x8c0>)
 8002bfa:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002bfe:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 8002c00:	4b7f      	ldr	r3, [pc, #508]	@ (8002e00 <lcd_init+0x8c0>)
 8002c02:	889b      	ldrh	r3, [r3, #4]
 8002c04:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	f040 82f3 	bne.w	80031f4 <lcd_init+0xcb4>
 8002c0e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c12:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c16:	2211      	movs	r2, #17
 8002c18:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e04 <lcd_init+0x8c4>)
 8002c1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c20:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c22:	4b78      	ldr	r3, [pc, #480]	@ (8002e04 <lcd_init+0x8c4>)
 8002c24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c28:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c2a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c2e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b74      	ldr	r3, [pc, #464]	@ (8002e08 <lcd_init+0x8c8>)
 8002c38:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c3a:	4b72      	ldr	r3, [pc, #456]	@ (8002e04 <lcd_init+0x8c4>)
 8002c3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c40:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c42:	4b70      	ldr	r3, [pc, #448]	@ (8002e04 <lcd_init+0x8c4>)
 8002c44:	2280      	movs	r2, #128	@ 0x80
 8002c46:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c48:	4b6e      	ldr	r3, [pc, #440]	@ (8002e04 <lcd_init+0x8c4>)
 8002c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c4e:	611a      	str	r2, [r3, #16]
}
 8002c50:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 8002c52:	2078      	movs	r0, #120	@ 0x78
 8002c54:	f005 f926 	bl	8007ea4 <HAL_Delay>
 8002c58:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c5c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002c60:	2236      	movs	r2, #54	@ 0x36
 8002c62:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c64:	4b67      	ldr	r3, [pc, #412]	@ (8002e04 <lcd_init+0x8c4>)
 8002c66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c6a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c6c:	4b65      	ldr	r3, [pc, #404]	@ (8002e04 <lcd_init+0x8c4>)
 8002c6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c72:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c74:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c78:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	4b61      	ldr	r3, [pc, #388]	@ (8002e08 <lcd_init+0x8c8>)
 8002c82:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c84:	4b5f      	ldr	r3, [pc, #380]	@ (8002e04 <lcd_init+0x8c4>)
 8002c86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c8a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c8c:	4b5d      	ldr	r3, [pc, #372]	@ (8002e04 <lcd_init+0x8c4>)
 8002c8e:	2280      	movs	r2, #128	@ 0x80
 8002c90:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c92:	4b5c      	ldr	r3, [pc, #368]	@ (8002e04 <lcd_init+0x8c4>)
 8002c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c98:	611a      	str	r2, [r3, #16]
}
 8002c9a:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fe fb11 	bl	80012c4 <lcd_wr_xdata>
 8002ca2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ca6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002caa:	223a      	movs	r2, #58	@ 0x3a
 8002cac:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002cae:	4b55      	ldr	r3, [pc, #340]	@ (8002e04 <lcd_init+0x8c4>)
 8002cb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cb4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002cb6:	4b53      	ldr	r3, [pc, #332]	@ (8002e04 <lcd_init+0x8c4>)
 8002cb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cbc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002cbe:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002cc2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	4b4f      	ldr	r3, [pc, #316]	@ (8002e08 <lcd_init+0x8c8>)
 8002ccc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cce:	4b4d      	ldr	r3, [pc, #308]	@ (8002e04 <lcd_init+0x8c4>)
 8002cd0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cd4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002e04 <lcd_init+0x8c4>)
 8002cd8:	2280      	movs	r2, #128	@ 0x80
 8002cda:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cdc:	4b49      	ldr	r3, [pc, #292]	@ (8002e04 <lcd_init+0x8c4>)
 8002cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce2:	611a      	str	r2, [r3, #16]
}
 8002ce4:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 8002ce6:	2005      	movs	r0, #5
 8002ce8:	f7fe faec 	bl	80012c4 <lcd_wr_xdata>
 8002cec:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002cf0:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002cf4:	22b2      	movs	r2, #178	@ 0xb2
 8002cf6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002cf8:	4b42      	ldr	r3, [pc, #264]	@ (8002e04 <lcd_init+0x8c4>)
 8002cfa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cfe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d00:	4b40      	ldr	r3, [pc, #256]	@ (8002e04 <lcd_init+0x8c4>)
 8002d02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d06:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d08:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d0c:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	4b3c      	ldr	r3, [pc, #240]	@ (8002e08 <lcd_init+0x8c8>)
 8002d16:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d18:	4b3a      	ldr	r3, [pc, #232]	@ (8002e04 <lcd_init+0x8c4>)
 8002d1a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d1e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d20:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <lcd_init+0x8c4>)
 8002d22:	2280      	movs	r2, #128	@ 0x80
 8002d24:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d26:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <lcd_init+0x8c4>)
 8002d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2c:	611a      	str	r2, [r3, #16]
}
 8002d2e:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 8002d30:	200c      	movs	r0, #12
 8002d32:	f7fe fac7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8002d36:	200c      	movs	r0, #12
 8002d38:	f7fe fac4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fe fac1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002d42:	2033      	movs	r0, #51	@ 0x33
 8002d44:	f7fe fabe 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002d48:	2033      	movs	r0, #51	@ 0x33
 8002d4a:	f7fe fabb 	bl	80012c4 <lcd_wr_xdata>
 8002d4e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d52:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d56:	22b7      	movs	r2, #183	@ 0xb7
 8002d58:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <lcd_init+0x8c4>)
 8002d5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d60:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d62:	4b28      	ldr	r3, [pc, #160]	@ (8002e04 <lcd_init+0x8c4>)
 8002d64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d68:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d6a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d6e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <lcd_init+0x8c8>)
 8002d78:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d7a:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <lcd_init+0x8c4>)
 8002d7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d80:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d82:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <lcd_init+0x8c4>)
 8002d84:	2280      	movs	r2, #128	@ 0x80
 8002d86:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d88:	4b1e      	ldr	r3, [pc, #120]	@ (8002e04 <lcd_init+0x8c4>)
 8002d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d8e:	611a      	str	r2, [r3, #16]
}
 8002d90:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 8002d92:	2035      	movs	r0, #53	@ 0x35
 8002d94:	f7fe fa96 	bl	80012c4 <lcd_wr_xdata>
 8002d98:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d9c:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002da0:	22bb      	movs	r2, #187	@ 0xbb
 8002da2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002da4:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <lcd_init+0x8c4>)
 8002da6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002daa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002dac:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <lcd_init+0x8c4>)
 8002dae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002db2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002db4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002db8:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <lcd_init+0x8c8>)
 8002dc2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <lcd_init+0x8c4>)
 8002dc6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002dca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <lcd_init+0x8c4>)
 8002dce:	2280      	movs	r2, #128	@ 0x80
 8002dd0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <lcd_init+0x8c4>)
 8002dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd8:	611a      	str	r2, [r3, #16]
}
 8002dda:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 8002ddc:	2032      	movs	r0, #50	@ 0x32
 8002dde:	f7fe fa71 	bl	80012c4 <lcd_wr_xdata>
 8002de2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002de6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dea:	22c0      	movs	r2, #192	@ 0xc0
 8002dec:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002dee:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <lcd_init+0x8c4>)
 8002df0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002df4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002df6:	4b03      	ldr	r3, [pc, #12]	@ (8002e04 <lcd_init+0x8c4>)
 8002df8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	e005      	b.n	8002e0c <lcd_init+0x8cc>
 8002e00:	20000038 	.word	0x20000038
 8002e04:	40011000 	.word	0x40011000
 8002e08:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e0c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e10:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4bbf      	ldr	r3, [pc, #764]	@ (8003118 <lcd_init+0xbd8>)
 8002e1a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e1c:	4bbf      	ldr	r3, [pc, #764]	@ (800311c <lcd_init+0xbdc>)
 8002e1e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e22:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e24:	4bbd      	ldr	r3, [pc, #756]	@ (800311c <lcd_init+0xbdc>)
 8002e26:	2280      	movs	r2, #128	@ 0x80
 8002e28:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e2a:	4bbc      	ldr	r3, [pc, #752]	@ (800311c <lcd_init+0xbdc>)
 8002e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e30:	611a      	str	r2, [r3, #16]
}
 8002e32:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 8002e34:	200c      	movs	r0, #12
 8002e36:	f7fe fa45 	bl	80012c4 <lcd_wr_xdata>
 8002e3a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e3e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002e42:	22c2      	movs	r2, #194	@ 0xc2
 8002e44:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e46:	4bb5      	ldr	r3, [pc, #724]	@ (800311c <lcd_init+0xbdc>)
 8002e48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e4c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e4e:	4bb3      	ldr	r3, [pc, #716]	@ (800311c <lcd_init+0xbdc>)
 8002e50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e54:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e56:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e5a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	4bad      	ldr	r3, [pc, #692]	@ (8003118 <lcd_init+0xbd8>)
 8002e64:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e66:	4bad      	ldr	r3, [pc, #692]	@ (800311c <lcd_init+0xbdc>)
 8002e68:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e6c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e6e:	4bab      	ldr	r3, [pc, #684]	@ (800311c <lcd_init+0xbdc>)
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e74:	4ba9      	ldr	r3, [pc, #676]	@ (800311c <lcd_init+0xbdc>)
 8002e76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e7a:	611a      	str	r2, [r3, #16]
}
 8002e7c:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f7fe fa20 	bl	80012c4 <lcd_wr_xdata>
 8002e84:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e8c:	22c3      	movs	r2, #195	@ 0xc3
 8002e8e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e90:	4ba2      	ldr	r3, [pc, #648]	@ (800311c <lcd_init+0xbdc>)
 8002e92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e96:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e98:	4ba0      	ldr	r3, [pc, #640]	@ (800311c <lcd_init+0xbdc>)
 8002e9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e9e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ea0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ea4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	4b9a      	ldr	r3, [pc, #616]	@ (8003118 <lcd_init+0xbd8>)
 8002eae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002eb0:	4b9a      	ldr	r3, [pc, #616]	@ (800311c <lcd_init+0xbdc>)
 8002eb2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002eb6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002eb8:	4b98      	ldr	r3, [pc, #608]	@ (800311c <lcd_init+0xbdc>)
 8002eba:	2280      	movs	r2, #128	@ 0x80
 8002ebc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ebe:	4b97      	ldr	r3, [pc, #604]	@ (800311c <lcd_init+0xbdc>)
 8002ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ec4:	611a      	str	r2, [r3, #16]
}
 8002ec6:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 8002ec8:	2010      	movs	r0, #16
 8002eca:	f7fe f9fb 	bl	80012c4 <lcd_wr_xdata>
 8002ece:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ed2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8002ed6:	22c4      	movs	r2, #196	@ 0xc4
 8002ed8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002eda:	4b90      	ldr	r3, [pc, #576]	@ (800311c <lcd_init+0xbdc>)
 8002edc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ee0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ee2:	4b8e      	ldr	r3, [pc, #568]	@ (800311c <lcd_init+0xbdc>)
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ee8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002eea:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002eee:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	4b88      	ldr	r3, [pc, #544]	@ (8003118 <lcd_init+0xbd8>)
 8002ef8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002efa:	4b88      	ldr	r3, [pc, #544]	@ (800311c <lcd_init+0xbdc>)
 8002efc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f00:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f02:	4b86      	ldr	r3, [pc, #536]	@ (800311c <lcd_init+0xbdc>)
 8002f04:	2280      	movs	r2, #128	@ 0x80
 8002f06:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f08:	4b84      	ldr	r3, [pc, #528]	@ (800311c <lcd_init+0xbdc>)
 8002f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f0e:	611a      	str	r2, [r3, #16]
}
 8002f10:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 8002f12:	2020      	movs	r0, #32
 8002f14:	f7fe f9d6 	bl	80012c4 <lcd_wr_xdata>
 8002f18:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f1c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f20:	22c6      	movs	r2, #198	@ 0xc6
 8002f22:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f24:	4b7d      	ldr	r3, [pc, #500]	@ (800311c <lcd_init+0xbdc>)
 8002f26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f2a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f2c:	4b7b      	ldr	r3, [pc, #492]	@ (800311c <lcd_init+0xbdc>)
 8002f2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f32:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f34:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f38:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b75      	ldr	r3, [pc, #468]	@ (8003118 <lcd_init+0xbd8>)
 8002f42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f44:	4b75      	ldr	r3, [pc, #468]	@ (800311c <lcd_init+0xbdc>)
 8002f46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f4c:	4b73      	ldr	r3, [pc, #460]	@ (800311c <lcd_init+0xbdc>)
 8002f4e:	2280      	movs	r2, #128	@ 0x80
 8002f50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f52:	4b72      	ldr	r3, [pc, #456]	@ (800311c <lcd_init+0xbdc>)
 8002f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f58:	611a      	str	r2, [r3, #16]
}
 8002f5a:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 8002f5c:	200f      	movs	r0, #15
 8002f5e:	f7fe f9b1 	bl	80012c4 <lcd_wr_xdata>
 8002f62:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f66:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8002f6a:	22d0      	movs	r2, #208	@ 0xd0
 8002f6c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800311c <lcd_init+0xbdc>)
 8002f70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f74:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f76:	4b69      	ldr	r3, [pc, #420]	@ (800311c <lcd_init+0xbdc>)
 8002f78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f7c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f7e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f82:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	4b63      	ldr	r3, [pc, #396]	@ (8003118 <lcd_init+0xbd8>)
 8002f8c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f8e:	4b63      	ldr	r3, [pc, #396]	@ (800311c <lcd_init+0xbdc>)
 8002f90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f94:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f96:	4b61      	ldr	r3, [pc, #388]	@ (800311c <lcd_init+0xbdc>)
 8002f98:	2280      	movs	r2, #128	@ 0x80
 8002f9a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800311c <lcd_init+0xbdc>)
 8002f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa2:	611a      	str	r2, [r3, #16]
}
 8002fa4:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 8002fa6:	20a4      	movs	r0, #164	@ 0xa4
 8002fa8:	f7fe f98c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 8002fac:	20a1      	movs	r0, #161	@ 0xa1
 8002fae:	f7fe f989 	bl	80012c4 <lcd_wr_xdata>
 8002fb2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fb6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002fba:	22e0      	movs	r2, #224	@ 0xe0
 8002fbc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fbe:	4b57      	ldr	r3, [pc, #348]	@ (800311c <lcd_init+0xbdc>)
 8002fc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fc4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fc6:	4b55      	ldr	r3, [pc, #340]	@ (800311c <lcd_init+0xbdc>)
 8002fc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fcc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fce:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fd2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	4b4f      	ldr	r3, [pc, #316]	@ (8003118 <lcd_init+0xbd8>)
 8002fdc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fde:	4b4f      	ldr	r3, [pc, #316]	@ (800311c <lcd_init+0xbdc>)
 8002fe0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fe4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800311c <lcd_init+0xbdc>)
 8002fe8:	2280      	movs	r2, #128	@ 0x80
 8002fea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fec:	4b4b      	ldr	r3, [pc, #300]	@ (800311c <lcd_init+0xbdc>)
 8002fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ff2:	611a      	str	r2, [r3, #16]
}
 8002ff4:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 8002ff6:	20d0      	movs	r0, #208	@ 0xd0
 8002ff8:	f7fe f964 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7fe f961 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003002:	2002      	movs	r0, #2
 8003004:	f7fe f95e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8003008:	2007      	movs	r0, #7
 800300a:	f7fe f95b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 800300e:	200a      	movs	r0, #10
 8003010:	f7fe f958 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8003014:	2028      	movs	r0, #40	@ 0x28
 8003016:	f7fe f955 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 800301a:	2032      	movs	r0, #50	@ 0x32
 800301c:	f7fe f952 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 8003020:	2044      	movs	r0, #68	@ 0x44
 8003022:	f7fe f94f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 8003026:	2042      	movs	r0, #66	@ 0x42
 8003028:	f7fe f94c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 800302c:	2006      	movs	r0, #6
 800302e:	f7fe f949 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 8003032:	200e      	movs	r0, #14
 8003034:	f7fe f946 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8003038:	2012      	movs	r0, #18
 800303a:	f7fe f943 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 800303e:	2014      	movs	r0, #20
 8003040:	f7fe f940 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003044:	2017      	movs	r0, #23
 8003046:	f7fe f93d 	bl	80012c4 <lcd_wr_xdata>
 800304a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800304e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8003052:	22e1      	movs	r2, #225	@ 0xe1
 8003054:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003056:	4b31      	ldr	r3, [pc, #196]	@ (800311c <lcd_init+0xbdc>)
 8003058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800305c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800305e:	4b2f      	ldr	r3, [pc, #188]	@ (800311c <lcd_init+0xbdc>)
 8003060:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003064:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003066:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800306a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29a      	uxth	r2, r3
 8003072:	4b29      	ldr	r3, [pc, #164]	@ (8003118 <lcd_init+0xbd8>)
 8003074:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003076:	4b29      	ldr	r3, [pc, #164]	@ (800311c <lcd_init+0xbdc>)
 8003078:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800307c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800307e:	4b27      	ldr	r3, [pc, #156]	@ (800311c <lcd_init+0xbdc>)
 8003080:	2280      	movs	r2, #128	@ 0x80
 8003082:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003084:	4b25      	ldr	r3, [pc, #148]	@ (800311c <lcd_init+0xbdc>)
 8003086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800308a:	611a      	str	r2, [r3, #16]
}
 800308c:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 800308e:	20d0      	movs	r0, #208	@ 0xd0
 8003090:	f7fe f918 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003094:	2000      	movs	r0, #0
 8003096:	f7fe f915 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800309a:	2002      	movs	r0, #2
 800309c:	f7fe f912 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80030a0:	2007      	movs	r0, #7
 80030a2:	f7fe f90f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 80030a6:	200a      	movs	r0, #10
 80030a8:	f7fe f90c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80030ac:	2028      	movs	r0, #40	@ 0x28
 80030ae:	f7fe f909 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 80030b2:	2031      	movs	r0, #49	@ 0x31
 80030b4:	f7fe f906 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 80030b8:	2054      	movs	r0, #84	@ 0x54
 80030ba:	f7fe f903 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 80030be:	2047      	movs	r0, #71	@ 0x47
 80030c0:	f7fe f900 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 80030c4:	200e      	movs	r0, #14
 80030c6:	f7fe f8fd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 80030ca:	201c      	movs	r0, #28
 80030cc:	f7fe f8fa 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80030d0:	2017      	movs	r0, #23
 80030d2:	f7fe f8f7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 80030d6:	201b      	movs	r0, #27
 80030d8:	f7fe f8f4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 80030dc:	201e      	movs	r0, #30
 80030de:	f7fe f8f1 	bl	80012c4 <lcd_wr_xdata>
 80030e2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80030e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030ea:	222a      	movs	r2, #42	@ 0x2a
 80030ec:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030ee:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <lcd_init+0xbdc>)
 80030f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030f4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030f6:	4b09      	ldr	r3, [pc, #36]	@ (800311c <lcd_init+0xbdc>)
 80030f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030fc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030fe:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003102:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29a      	uxth	r2, r3
 800310a:	4b03      	ldr	r3, [pc, #12]	@ (8003118 <lcd_init+0xbd8>)
 800310c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800310e:	4b03      	ldr	r3, [pc, #12]	@ (800311c <lcd_init+0xbdc>)
 8003110:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003114:	611a      	str	r2, [r3, #16]
 8003116:	e003      	b.n	8003120 <lcd_init+0xbe0>
 8003118:	40010c00 	.word	0x40010c00
 800311c:	40011000 	.word	0x40011000
    LCD_WR(1);
 8003120:	4b32      	ldr	r3, [pc, #200]	@ (80031ec <lcd_init+0xcac>)
 8003122:	2280      	movs	r2, #128	@ 0x80
 8003124:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003126:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <lcd_init+0xcac>)
 8003128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800312c:	611a      	str	r2, [r3, #16]
}
 800312e:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8003130:	2000      	movs	r0, #0
 8003132:	f7fe f8c7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003136:	2000      	movs	r0, #0
 8003138:	f7fe f8c4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800313c:	2000      	movs	r0, #0
 800313e:	f7fe f8c1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8003142:	20ef      	movs	r0, #239	@ 0xef
 8003144:	f7fe f8be 	bl	80012c4 <lcd_wr_xdata>
 8003148:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800314c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8003150:	222b      	movs	r2, #43	@ 0x2b
 8003152:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003154:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <lcd_init+0xcac>)
 8003156:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800315a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800315c:	4b23      	ldr	r3, [pc, #140]	@ (80031ec <lcd_init+0xcac>)
 800315e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003162:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003164:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003168:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29a      	uxth	r2, r3
 8003170:	4b1f      	ldr	r3, [pc, #124]	@ (80031f0 <lcd_init+0xcb0>)
 8003172:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003174:	4b1d      	ldr	r3, [pc, #116]	@ (80031ec <lcd_init+0xcac>)
 8003176:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800317a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800317c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ec <lcd_init+0xcac>)
 800317e:	2280      	movs	r2, #128	@ 0x80
 8003180:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003182:	4b1a      	ldr	r3, [pc, #104]	@ (80031ec <lcd_init+0xcac>)
 8003184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003188:	611a      	str	r2, [r3, #16]
}
 800318a:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fe f899 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003192:	2000      	movs	r0, #0
 8003194:	f7fe f896 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003198:	2001      	movs	r0, #1
 800319a:	f7fe f893 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 800319e:	203f      	movs	r0, #63	@ 0x3f
 80031a0:	f7fe f890 	bl	80012c4 <lcd_wr_xdata>
 80031a4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80031a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031ac:	2229      	movs	r2, #41	@ 0x29
 80031ae:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031b0:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <lcd_init+0xcac>)
 80031b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031b6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031b8:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <lcd_init+0xcac>)
 80031ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031be:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031c0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80031c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <lcd_init+0xcb0>)
 80031ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031d0:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <lcd_init+0xcac>)
 80031d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <lcd_init+0xcac>)
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80031de:	4b03      	ldr	r3, [pc, #12]	@ (80031ec <lcd_init+0xcac>)
 80031e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031e4:	611a      	str	r2, [r3, #16]
}
 80031e6:	f004 b8f4 	b.w	80073d2 <lcd_init+0x4e92>
 80031ea:	bf00      	nop
 80031ec:	40011000 	.word	0x40011000
 80031f0:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 80031f4:	4bb9      	ldr	r3, [pc, #740]	@ (80034dc <lcd_init+0xf9c>)
 80031f6:	889b      	ldrh	r3, [r3, #4]
 80031f8:	f249 3241 	movw	r2, #37697	@ 0x9341
 80031fc:	4293      	cmp	r3, r2
 80031fe:	f040 83a1 	bne.w	8003944 <lcd_init+0x1404>
 8003202:	23cf      	movs	r3, #207	@ 0xcf
 8003204:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003208:	4bb5      	ldr	r3, [pc, #724]	@ (80034e0 <lcd_init+0xfa0>)
 800320a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800320e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003210:	4bb3      	ldr	r3, [pc, #716]	@ (80034e0 <lcd_init+0xfa0>)
 8003212:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003216:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003218:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800321c:	b29a      	uxth	r2, r3
 800321e:	4bb1      	ldr	r3, [pc, #708]	@ (80034e4 <lcd_init+0xfa4>)
 8003220:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003222:	4baf      	ldr	r3, [pc, #700]	@ (80034e0 <lcd_init+0xfa0>)
 8003224:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003228:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800322a:	4bad      	ldr	r3, [pc, #692]	@ (80034e0 <lcd_init+0xfa0>)
 800322c:	2280      	movs	r2, #128	@ 0x80
 800322e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003230:	4bab      	ldr	r3, [pc, #684]	@ (80034e0 <lcd_init+0xfa0>)
 8003232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003236:	611a      	str	r2, [r3, #16]
}
 8003238:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fe f842 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 8003240:	20c1      	movs	r0, #193	@ 0xc1
 8003242:	f7fe f83f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 8003246:	2030      	movs	r0, #48	@ 0x30
 8003248:	f7fe f83c 	bl	80012c4 <lcd_wr_xdata>
 800324c:	23ed      	movs	r3, #237	@ 0xed
 800324e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003252:	4ba3      	ldr	r3, [pc, #652]	@ (80034e0 <lcd_init+0xfa0>)
 8003254:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003258:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800325a:	4ba1      	ldr	r3, [pc, #644]	@ (80034e0 <lcd_init+0xfa0>)
 800325c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003260:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003262:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8003266:	b29a      	uxth	r2, r3
 8003268:	4b9e      	ldr	r3, [pc, #632]	@ (80034e4 <lcd_init+0xfa4>)
 800326a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800326c:	4b9c      	ldr	r3, [pc, #624]	@ (80034e0 <lcd_init+0xfa0>)
 800326e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003272:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003274:	4b9a      	ldr	r3, [pc, #616]	@ (80034e0 <lcd_init+0xfa0>)
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800327a:	4b99      	ldr	r3, [pc, #612]	@ (80034e0 <lcd_init+0xfa0>)
 800327c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003280:	611a      	str	r2, [r3, #16]
}
 8003282:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 8003284:	2064      	movs	r0, #100	@ 0x64
 8003286:	f7fe f81d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 800328a:	2003      	movs	r0, #3
 800328c:	f7fe f81a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 8003290:	2012      	movs	r0, #18
 8003292:	f7fe f817 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 8003296:	2081      	movs	r0, #129	@ 0x81
 8003298:	f7fe f814 	bl	80012c4 <lcd_wr_xdata>
 800329c:	23e8      	movs	r3, #232	@ 0xe8
 800329e:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032a2:	4b8f      	ldr	r3, [pc, #572]	@ (80034e0 <lcd_init+0xfa0>)
 80032a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032aa:	4b8d      	ldr	r3, [pc, #564]	@ (80034e0 <lcd_init+0xfa0>)
 80032ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032b2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b8a      	ldr	r3, [pc, #552]	@ (80034e4 <lcd_init+0xfa4>)
 80032ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80032bc:	4b88      	ldr	r3, [pc, #544]	@ (80034e0 <lcd_init+0xfa0>)
 80032be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80032c4:	4b86      	ldr	r3, [pc, #536]	@ (80034e0 <lcd_init+0xfa0>)
 80032c6:	2280      	movs	r2, #128	@ 0x80
 80032c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80032ca:	4b85      	ldr	r3, [pc, #532]	@ (80034e0 <lcd_init+0xfa0>)
 80032cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032d0:	611a      	str	r2, [r3, #16]
}
 80032d2:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 80032d4:	2085      	movs	r0, #133	@ 0x85
 80032d6:	f7fd fff5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80032da:	2010      	movs	r0, #16
 80032dc:	f7fd fff2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 80032e0:	207a      	movs	r0, #122	@ 0x7a
 80032e2:	f7fd ffef 	bl	80012c4 <lcd_wr_xdata>
 80032e6:	23cb      	movs	r3, #203	@ 0xcb
 80032e8:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032ec:	4b7c      	ldr	r3, [pc, #496]	@ (80034e0 <lcd_init+0xfa0>)
 80032ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032f4:	4b7a      	ldr	r3, [pc, #488]	@ (80034e0 <lcd_init+0xfa0>)
 80032f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032fc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8003300:	b29a      	uxth	r2, r3
 8003302:	4b78      	ldr	r3, [pc, #480]	@ (80034e4 <lcd_init+0xfa4>)
 8003304:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003306:	4b76      	ldr	r3, [pc, #472]	@ (80034e0 <lcd_init+0xfa0>)
 8003308:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800330c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800330e:	4b74      	ldr	r3, [pc, #464]	@ (80034e0 <lcd_init+0xfa0>)
 8003310:	2280      	movs	r2, #128	@ 0x80
 8003312:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003314:	4b72      	ldr	r3, [pc, #456]	@ (80034e0 <lcd_init+0xfa0>)
 8003316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800331a:	611a      	str	r2, [r3, #16]
}
 800331c:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 800331e:	2039      	movs	r0, #57	@ 0x39
 8003320:	f7fd ffd0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8003324:	202c      	movs	r0, #44	@ 0x2c
 8003326:	f7fd ffcd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800332a:	2000      	movs	r0, #0
 800332c:	f7fd ffca 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8003330:	2034      	movs	r0, #52	@ 0x34
 8003332:	f7fd ffc7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003336:	2002      	movs	r0, #2
 8003338:	f7fd ffc4 	bl	80012c4 <lcd_wr_xdata>
 800333c:	23f7      	movs	r3, #247	@ 0xf7
 800333e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003342:	4b67      	ldr	r3, [pc, #412]	@ (80034e0 <lcd_init+0xfa0>)
 8003344:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003348:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800334a:	4b65      	ldr	r3, [pc, #404]	@ (80034e0 <lcd_init+0xfa0>)
 800334c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003350:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003352:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8003356:	b29a      	uxth	r2, r3
 8003358:	4b62      	ldr	r3, [pc, #392]	@ (80034e4 <lcd_init+0xfa4>)
 800335a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800335c:	4b60      	ldr	r3, [pc, #384]	@ (80034e0 <lcd_init+0xfa0>)
 800335e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003362:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003364:	4b5e      	ldr	r3, [pc, #376]	@ (80034e0 <lcd_init+0xfa0>)
 8003366:	2280      	movs	r2, #128	@ 0x80
 8003368:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800336a:	4b5d      	ldr	r3, [pc, #372]	@ (80034e0 <lcd_init+0xfa0>)
 800336c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003370:	611a      	str	r2, [r3, #16]
}
 8003372:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 8003374:	2020      	movs	r0, #32
 8003376:	f7fd ffa5 	bl	80012c4 <lcd_wr_xdata>
 800337a:	23ea      	movs	r3, #234	@ 0xea
 800337c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003380:	4b57      	ldr	r3, [pc, #348]	@ (80034e0 <lcd_init+0xfa0>)
 8003382:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003386:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003388:	4b55      	ldr	r3, [pc, #340]	@ (80034e0 <lcd_init+0xfa0>)
 800338a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800338e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003390:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003394:	b29a      	uxth	r2, r3
 8003396:	4b53      	ldr	r3, [pc, #332]	@ (80034e4 <lcd_init+0xfa4>)
 8003398:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800339a:	4b51      	ldr	r3, [pc, #324]	@ (80034e0 <lcd_init+0xfa0>)
 800339c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033a0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033a2:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <lcd_init+0xfa0>)
 80033a4:	2280      	movs	r2, #128	@ 0x80
 80033a6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033a8:	4b4d      	ldr	r3, [pc, #308]	@ (80034e0 <lcd_init+0xfa0>)
 80033aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ae:	611a      	str	r2, [r3, #16]
}
 80033b0:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd ff86 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fd ff83 	bl	80012c4 <lcd_wr_xdata>
 80033be:	23c0      	movs	r3, #192	@ 0xc0
 80033c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80033c4:	4b46      	ldr	r3, [pc, #280]	@ (80034e0 <lcd_init+0xfa0>)
 80033c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033ca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80033cc:	4b44      	ldr	r3, [pc, #272]	@ (80034e0 <lcd_init+0xfa0>)
 80033ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80033d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b42      	ldr	r3, [pc, #264]	@ (80034e4 <lcd_init+0xfa4>)
 80033dc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80033de:	4b40      	ldr	r3, [pc, #256]	@ (80034e0 <lcd_init+0xfa0>)
 80033e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033e4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033e6:	4b3e      	ldr	r3, [pc, #248]	@ (80034e0 <lcd_init+0xfa0>)
 80033e8:	2280      	movs	r2, #128	@ 0x80
 80033ea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033ec:	4b3c      	ldr	r3, [pc, #240]	@ (80034e0 <lcd_init+0xfa0>)
 80033ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f2:	611a      	str	r2, [r3, #16]
}
 80033f4:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 80033f6:	201b      	movs	r0, #27
 80033f8:	f7fd ff64 	bl	80012c4 <lcd_wr_xdata>
 80033fc:	23c1      	movs	r3, #193	@ 0xc1
 80033fe:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003402:	4b37      	ldr	r3, [pc, #220]	@ (80034e0 <lcd_init+0xfa0>)
 8003404:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003408:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800340a:	4b35      	ldr	r3, [pc, #212]	@ (80034e0 <lcd_init+0xfa0>)
 800340c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003410:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003412:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003416:	b29a      	uxth	r2, r3
 8003418:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <lcd_init+0xfa4>)
 800341a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800341c:	4b30      	ldr	r3, [pc, #192]	@ (80034e0 <lcd_init+0xfa0>)
 800341e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003422:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003424:	4b2e      	ldr	r3, [pc, #184]	@ (80034e0 <lcd_init+0xfa0>)
 8003426:	2280      	movs	r2, #128	@ 0x80
 8003428:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800342a:	4b2d      	ldr	r3, [pc, #180]	@ (80034e0 <lcd_init+0xfa0>)
 800342c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003430:	611a      	str	r2, [r3, #16]
}
 8003432:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 8003434:	2001      	movs	r0, #1
 8003436:	f7fd ff45 	bl	80012c4 <lcd_wr_xdata>
 800343a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800343e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003442:	22c5      	movs	r2, #197	@ 0xc5
 8003444:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003446:	4b26      	ldr	r3, [pc, #152]	@ (80034e0 <lcd_init+0xfa0>)
 8003448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800344c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800344e:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <lcd_init+0xfa0>)
 8003450:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003454:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003456:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800345a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <lcd_init+0xfa4>)
 8003464:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003466:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <lcd_init+0xfa0>)
 8003468:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800346c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800346e:	4b1c      	ldr	r3, [pc, #112]	@ (80034e0 <lcd_init+0xfa0>)
 8003470:	2280      	movs	r2, #128	@ 0x80
 8003472:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003474:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <lcd_init+0xfa0>)
 8003476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800347a:	611a      	str	r2, [r3, #16]
}
 800347c:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 800347e:	2030      	movs	r0, #48	@ 0x30
 8003480:	f7fd ff20 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 8003484:	2030      	movs	r0, #48	@ 0x30
 8003486:	f7fd ff1d 	bl	80012c4 <lcd_wr_xdata>
 800348a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800348e:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8003492:	22c7      	movs	r2, #199	@ 0xc7
 8003494:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003496:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <lcd_init+0xfa0>)
 8003498:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800349c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800349e:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <lcd_init+0xfa0>)
 80034a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80034a6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80034aa:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <lcd_init+0xfa4>)
 80034b4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034b6:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <lcd_init+0xfa0>)
 80034b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034bc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034be:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <lcd_init+0xfa0>)
 80034c0:	2280      	movs	r2, #128	@ 0x80
 80034c2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <lcd_init+0xfa0>)
 80034c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ca:	611a      	str	r2, [r3, #16]
}
 80034cc:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 80034ce:	20b7      	movs	r0, #183	@ 0xb7
 80034d0:	f7fd fef8 	bl	80012c4 <lcd_wr_xdata>
 80034d4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80034d8:	e006      	b.n	80034e8 <lcd_init+0xfa8>
 80034da:	bf00      	nop
 80034dc:	20000038 	.word	0x20000038
 80034e0:	40011000 	.word	0x40011000
 80034e4:	40010c00 	.word	0x40010c00
 80034e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034ec:	2236      	movs	r2, #54	@ 0x36
 80034ee:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80034f0:	4bc1      	ldr	r3, [pc, #772]	@ (80037f8 <lcd_init+0x12b8>)
 80034f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80034f8:	4bbf      	ldr	r3, [pc, #764]	@ (80037f8 <lcd_init+0x12b8>)
 80034fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003500:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b29a      	uxth	r2, r3
 800350c:	4bbb      	ldr	r3, [pc, #748]	@ (80037fc <lcd_init+0x12bc>)
 800350e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003510:	4bb9      	ldr	r3, [pc, #740]	@ (80037f8 <lcd_init+0x12b8>)
 8003512:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003516:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003518:	4bb7      	ldr	r3, [pc, #732]	@ (80037f8 <lcd_init+0x12b8>)
 800351a:	2280      	movs	r2, #128	@ 0x80
 800351c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800351e:	4bb6      	ldr	r3, [pc, #728]	@ (80037f8 <lcd_init+0x12b8>)
 8003520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003524:	611a      	str	r2, [r3, #16]
}
 8003526:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8003528:	2048      	movs	r0, #72	@ 0x48
 800352a:	f7fd fecb 	bl	80012c4 <lcd_wr_xdata>
 800352e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003532:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8003536:	223a      	movs	r2, #58	@ 0x3a
 8003538:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800353a:	4baf      	ldr	r3, [pc, #700]	@ (80037f8 <lcd_init+0x12b8>)
 800353c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003540:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003542:	4bad      	ldr	r3, [pc, #692]	@ (80037f8 <lcd_init+0x12b8>)
 8003544:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003548:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800354a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800354e:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29a      	uxth	r2, r3
 8003556:	4ba9      	ldr	r3, [pc, #676]	@ (80037fc <lcd_init+0x12bc>)
 8003558:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800355a:	4ba7      	ldr	r3, [pc, #668]	@ (80037f8 <lcd_init+0x12b8>)
 800355c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003560:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003562:	4ba5      	ldr	r3, [pc, #660]	@ (80037f8 <lcd_init+0x12b8>)
 8003564:	2280      	movs	r2, #128	@ 0x80
 8003566:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003568:	4ba3      	ldr	r3, [pc, #652]	@ (80037f8 <lcd_init+0x12b8>)
 800356a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800356e:	611a      	str	r2, [r3, #16]
}
 8003570:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8003572:	2055      	movs	r0, #85	@ 0x55
 8003574:	f7fd fea6 	bl	80012c4 <lcd_wr_xdata>
 8003578:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800357c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003580:	22b1      	movs	r2, #177	@ 0xb1
 8003582:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003584:	4b9c      	ldr	r3, [pc, #624]	@ (80037f8 <lcd_init+0x12b8>)
 8003586:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800358a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800358c:	4b9a      	ldr	r3, [pc, #616]	@ (80037f8 <lcd_init+0x12b8>)
 800358e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003592:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003594:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	4b96      	ldr	r3, [pc, #600]	@ (80037fc <lcd_init+0x12bc>)
 80035a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035a4:	4b94      	ldr	r3, [pc, #592]	@ (80037f8 <lcd_init+0x12b8>)
 80035a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035ac:	4b92      	ldr	r3, [pc, #584]	@ (80037f8 <lcd_init+0x12b8>)
 80035ae:	2280      	movs	r2, #128	@ 0x80
 80035b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80035b2:	4b91      	ldr	r3, [pc, #580]	@ (80037f8 <lcd_init+0x12b8>)
 80035b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035b8:	611a      	str	r2, [r3, #16]
}
 80035ba:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fd fe81 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 80035c2:	201a      	movs	r0, #26
 80035c4:	f7fd fe7e 	bl	80012c4 <lcd_wr_xdata>
 80035c8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80035cc:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80035d0:	22b6      	movs	r2, #182	@ 0xb6
 80035d2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80035d4:	4b88      	ldr	r3, [pc, #544]	@ (80037f8 <lcd_init+0x12b8>)
 80035d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035da:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035dc:	4b86      	ldr	r3, [pc, #536]	@ (80037f8 <lcd_init+0x12b8>)
 80035de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80035e4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80035e8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	4b82      	ldr	r3, [pc, #520]	@ (80037fc <lcd_init+0x12bc>)
 80035f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035f4:	4b80      	ldr	r3, [pc, #512]	@ (80037f8 <lcd_init+0x12b8>)
 80035f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035fc:	4b7e      	ldr	r3, [pc, #504]	@ (80037f8 <lcd_init+0x12b8>)
 80035fe:	2280      	movs	r2, #128	@ 0x80
 8003600:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003602:	4b7d      	ldr	r3, [pc, #500]	@ (80037f8 <lcd_init+0x12b8>)
 8003604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003608:	611a      	str	r2, [r3, #16]
}
 800360a:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 800360c:	200a      	movs	r0, #10
 800360e:	f7fd fe59 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8003612:	20a2      	movs	r0, #162	@ 0xa2
 8003614:	f7fd fe56 	bl	80012c4 <lcd_wr_xdata>
 8003618:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800361c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003620:	22f2      	movs	r2, #242	@ 0xf2
 8003622:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003624:	4b74      	ldr	r3, [pc, #464]	@ (80037f8 <lcd_init+0x12b8>)
 8003626:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800362a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800362c:	4b72      	ldr	r3, [pc, #456]	@ (80037f8 <lcd_init+0x12b8>)
 800362e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003632:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003634:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003638:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29a      	uxth	r2, r3
 8003640:	4b6e      	ldr	r3, [pc, #440]	@ (80037fc <lcd_init+0x12bc>)
 8003642:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003644:	4b6c      	ldr	r3, [pc, #432]	@ (80037f8 <lcd_init+0x12b8>)
 8003646:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800364a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800364c:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <lcd_init+0x12b8>)
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003652:	4b69      	ldr	r3, [pc, #420]	@ (80037f8 <lcd_init+0x12b8>)
 8003654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003658:	611a      	str	r2, [r3, #16]
}
 800365a:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 800365c:	2000      	movs	r0, #0
 800365e:	f7fd fe31 	bl	80012c4 <lcd_wr_xdata>
 8003662:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003666:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800366a:	2226      	movs	r2, #38	@ 0x26
 800366c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800366e:	4b62      	ldr	r3, [pc, #392]	@ (80037f8 <lcd_init+0x12b8>)
 8003670:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003674:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003676:	4b60      	ldr	r3, [pc, #384]	@ (80037f8 <lcd_init+0x12b8>)
 8003678:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800367c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800367e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003682:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29a      	uxth	r2, r3
 800368a:	4b5c      	ldr	r3, [pc, #368]	@ (80037fc <lcd_init+0x12bc>)
 800368c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800368e:	4b5a      	ldr	r3, [pc, #360]	@ (80037f8 <lcd_init+0x12b8>)
 8003690:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003694:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003696:	4b58      	ldr	r3, [pc, #352]	@ (80037f8 <lcd_init+0x12b8>)
 8003698:	2280      	movs	r2, #128	@ 0x80
 800369a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800369c:	4b56      	ldr	r3, [pc, #344]	@ (80037f8 <lcd_init+0x12b8>)
 800369e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a2:	611a      	str	r2, [r3, #16]
}
 80036a4:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7fd fe0c 	bl	80012c4 <lcd_wr_xdata>
 80036ac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80036b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80036b4:	22e0      	movs	r2, #224	@ 0xe0
 80036b6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80036b8:	4b4f      	ldr	r3, [pc, #316]	@ (80037f8 <lcd_init+0x12b8>)
 80036ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036be:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80036c0:	4b4d      	ldr	r3, [pc, #308]	@ (80037f8 <lcd_init+0x12b8>)
 80036c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036c6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036c8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80036cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b49      	ldr	r3, [pc, #292]	@ (80037fc <lcd_init+0x12bc>)
 80036d6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80036d8:	4b47      	ldr	r3, [pc, #284]	@ (80037f8 <lcd_init+0x12b8>)
 80036da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036de:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036e0:	4b45      	ldr	r3, [pc, #276]	@ (80037f8 <lcd_init+0x12b8>)
 80036e2:	2280      	movs	r2, #128	@ 0x80
 80036e4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036e6:	4b44      	ldr	r3, [pc, #272]	@ (80037f8 <lcd_init+0x12b8>)
 80036e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ec:	611a      	str	r2, [r3, #16]
}
 80036ee:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 80036f0:	200f      	movs	r0, #15
 80036f2:	f7fd fde7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 80036f6:	202a      	movs	r0, #42	@ 0x2a
 80036f8:	f7fd fde4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80036fc:	2028      	movs	r0, #40	@ 0x28
 80036fe:	f7fd fde1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8003702:	2008      	movs	r0, #8
 8003704:	f7fd fdde 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8003708:	200e      	movs	r0, #14
 800370a:	f7fd fddb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 800370e:	2008      	movs	r0, #8
 8003710:	f7fd fdd8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8003714:	2054      	movs	r0, #84	@ 0x54
 8003716:	f7fd fdd5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 800371a:	20a9      	movs	r0, #169	@ 0xa9
 800371c:	f7fd fdd2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8003720:	2043      	movs	r0, #67	@ 0x43
 8003722:	f7fd fdcf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 8003726:	200a      	movs	r0, #10
 8003728:	f7fd fdcc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 800372c:	200f      	movs	r0, #15
 800372e:	f7fd fdc9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003732:	2000      	movs	r0, #0
 8003734:	f7fd fdc6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003738:	2000      	movs	r0, #0
 800373a:	f7fd fdc3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800373e:	2000      	movs	r0, #0
 8003740:	f7fd fdc0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003744:	2000      	movs	r0, #0
 8003746:	f7fd fdbd 	bl	80012c4 <lcd_wr_xdata>
 800374a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800374e:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8003752:	22e1      	movs	r2, #225	@ 0xe1
 8003754:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003756:	4b28      	ldr	r3, [pc, #160]	@ (80037f8 <lcd_init+0x12b8>)
 8003758:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800375c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800375e:	4b26      	ldr	r3, [pc, #152]	@ (80037f8 <lcd_init+0x12b8>)
 8003760:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003764:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003766:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800376a:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	b29a      	uxth	r2, r3
 8003772:	4b22      	ldr	r3, [pc, #136]	@ (80037fc <lcd_init+0x12bc>)
 8003774:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003776:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <lcd_init+0x12b8>)
 8003778:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800377c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800377e:	4b1e      	ldr	r3, [pc, #120]	@ (80037f8 <lcd_init+0x12b8>)
 8003780:	2280      	movs	r2, #128	@ 0x80
 8003782:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003784:	4b1c      	ldr	r3, [pc, #112]	@ (80037f8 <lcd_init+0x12b8>)
 8003786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800378a:	611a      	str	r2, [r3, #16]
}
 800378c:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 800378e:	2000      	movs	r0, #0
 8003790:	f7fd fd98 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 8003794:	2015      	movs	r0, #21
 8003796:	f7fd fd95 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 800379a:	2017      	movs	r0, #23
 800379c:	f7fd fd92 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80037a0:	2007      	movs	r0, #7
 80037a2:	f7fd fd8f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 80037a6:	2011      	movs	r0, #17
 80037a8:	f7fd fd8c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 80037ac:	2006      	movs	r0, #6
 80037ae:	f7fd fd89 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 80037b2:	202b      	movs	r0, #43	@ 0x2b
 80037b4:	f7fd fd86 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80037b8:	2056      	movs	r0, #86	@ 0x56
 80037ba:	f7fd fd83 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80037be:	203c      	movs	r0, #60	@ 0x3c
 80037c0:	f7fd fd80 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 80037c4:	2005      	movs	r0, #5
 80037c6:	f7fd fd7d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80037ca:	2010      	movs	r0, #16
 80037cc:	f7fd fd7a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80037d0:	200f      	movs	r0, #15
 80037d2:	f7fd fd77 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80037d6:	203f      	movs	r0, #63	@ 0x3f
 80037d8:	f7fd fd74 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80037dc:	203f      	movs	r0, #63	@ 0x3f
 80037de:	f7fd fd71 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80037e2:	200f      	movs	r0, #15
 80037e4:	f7fd fd6e 	bl	80012c4 <lcd_wr_xdata>
 80037e8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80037ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80037f0:	222b      	movs	r2, #43	@ 0x2b
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	e004      	b.n	8003800 <lcd_init+0x12c0>
 80037f6:	bf00      	nop
 80037f8:	40011000 	.word	0x40011000
 80037fc:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003800:	4b4e      	ldr	r3, [pc, #312]	@ (800393c <lcd_init+0x13fc>)
 8003802:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003806:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003808:	4b4c      	ldr	r3, [pc, #304]	@ (800393c <lcd_init+0x13fc>)
 800380a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800380e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003810:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003814:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29a      	uxth	r2, r3
 800381c:	4b48      	ldr	r3, [pc, #288]	@ (8003940 <lcd_init+0x1400>)
 800381e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003820:	4b46      	ldr	r3, [pc, #280]	@ (800393c <lcd_init+0x13fc>)
 8003822:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003826:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003828:	4b44      	ldr	r3, [pc, #272]	@ (800393c <lcd_init+0x13fc>)
 800382a:	2280      	movs	r2, #128	@ 0x80
 800382c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800382e:	4b43      	ldr	r3, [pc, #268]	@ (800393c <lcd_init+0x13fc>)
 8003830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003834:	611a      	str	r2, [r3, #16]
}
 8003836:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8003838:	2000      	movs	r0, #0
 800383a:	f7fd fd43 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800383e:	2000      	movs	r0, #0
 8003840:	f7fd fd40 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003844:	2001      	movs	r0, #1
 8003846:	f7fd fd3d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 800384a:	203f      	movs	r0, #63	@ 0x3f
 800384c:	f7fd fd3a 	bl	80012c4 <lcd_wr_xdata>
 8003850:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003854:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8003858:	222a      	movs	r2, #42	@ 0x2a
 800385a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800385c:	4b37      	ldr	r3, [pc, #220]	@ (800393c <lcd_init+0x13fc>)
 800385e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003862:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003864:	4b35      	ldr	r3, [pc, #212]	@ (800393c <lcd_init+0x13fc>)
 8003866:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800386a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800386c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003870:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29a      	uxth	r2, r3
 8003878:	4b31      	ldr	r3, [pc, #196]	@ (8003940 <lcd_init+0x1400>)
 800387a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800387c:	4b2f      	ldr	r3, [pc, #188]	@ (800393c <lcd_init+0x13fc>)
 800387e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003882:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003884:	4b2d      	ldr	r3, [pc, #180]	@ (800393c <lcd_init+0x13fc>)
 8003886:	2280      	movs	r2, #128	@ 0x80
 8003888:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800388a:	4b2c      	ldr	r3, [pc, #176]	@ (800393c <lcd_init+0x13fc>)
 800388c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003890:	611a      	str	r2, [r3, #16]
}
 8003892:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8003894:	2000      	movs	r0, #0
 8003896:	f7fd fd15 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800389a:	2000      	movs	r0, #0
 800389c:	f7fd fd12 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7fd fd0f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 80038a6:	20ef      	movs	r0, #239	@ 0xef
 80038a8:	f7fd fd0c 	bl	80012c4 <lcd_wr_xdata>
 80038ac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80038b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80038b4:	2211      	movs	r2, #17
 80038b6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80038b8:	4b20      	ldr	r3, [pc, #128]	@ (800393c <lcd_init+0x13fc>)
 80038ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038be:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80038c0:	4b1e      	ldr	r3, [pc, #120]	@ (800393c <lcd_init+0x13fc>)
 80038c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038c6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80038c8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80038cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003940 <lcd_init+0x1400>)
 80038d6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80038d8:	4b18      	ldr	r3, [pc, #96]	@ (800393c <lcd_init+0x13fc>)
 80038da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038de:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80038e0:	4b16      	ldr	r3, [pc, #88]	@ (800393c <lcd_init+0x13fc>)
 80038e2:	2280      	movs	r2, #128	@ 0x80
 80038e4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80038e6:	4b15      	ldr	r3, [pc, #84]	@ (800393c <lcd_init+0x13fc>)
 80038e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ec:	611a      	str	r2, [r3, #16]
}
 80038ee:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 80038f0:	2078      	movs	r0, #120	@ 0x78
 80038f2:	f004 fad7 	bl	8007ea4 <HAL_Delay>
 80038f6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80038fa:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80038fe:	2229      	movs	r2, #41	@ 0x29
 8003900:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003902:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <lcd_init+0x13fc>)
 8003904:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003908:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800390a:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <lcd_init+0x13fc>)
 800390c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003910:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003912:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003916:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29a      	uxth	r2, r3
 800391e:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <lcd_init+0x1400>)
 8003920:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <lcd_init+0x13fc>)
 8003924:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003928:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800392a:	4b04      	ldr	r3, [pc, #16]	@ (800393c <lcd_init+0x13fc>)
 800392c:	2280      	movs	r2, #128	@ 0x80
 800392e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003930:	4b02      	ldr	r3, [pc, #8]	@ (800393c <lcd_init+0x13fc>)
 8003932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003936:	611a      	str	r2, [r3, #16]
}
 8003938:	f003 bd4b 	b.w	80073d2 <lcd_init+0x4e92>
 800393c:	40011000 	.word	0x40011000
 8003940:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 8003944:	4bbe      	ldr	r3, [pc, #760]	@ (8003c40 <lcd_init+0x1700>)
 8003946:	889b      	ldrh	r3, [r3, #4]
 8003948:	f245 3210 	movw	r2, #21264	@ 0x5310
 800394c:	4293      	cmp	r3, r2
 800394e:	f041 846d 	bne.w	800522c <lcd_init+0x2cec>
 8003952:	23ed      	movs	r3, #237	@ 0xed
 8003954:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003958:	4bba      	ldr	r3, [pc, #744]	@ (8003c44 <lcd_init+0x1704>)
 800395a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800395e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003960:	4bb8      	ldr	r3, [pc, #736]	@ (8003c44 <lcd_init+0x1704>)
 8003962:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003966:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003968:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 800396c:	b29a      	uxth	r2, r3
 800396e:	4bb6      	ldr	r3, [pc, #728]	@ (8003c48 <lcd_init+0x1708>)
 8003970:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003972:	4bb4      	ldr	r3, [pc, #720]	@ (8003c44 <lcd_init+0x1704>)
 8003974:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003978:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800397a:	4bb2      	ldr	r3, [pc, #712]	@ (8003c44 <lcd_init+0x1704>)
 800397c:	2280      	movs	r2, #128	@ 0x80
 800397e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003980:	4bb0      	ldr	r3, [pc, #704]	@ (8003c44 <lcd_init+0x1704>)
 8003982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003986:	611a      	str	r2, [r3, #16]
}
 8003988:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 800398a:	2001      	movs	r0, #1
 800398c:	f7fd fc9a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 8003990:	20fe      	movs	r0, #254	@ 0xfe
 8003992:	f7fd fc97 	bl	80012c4 <lcd_wr_xdata>
 8003996:	23ee      	movs	r3, #238	@ 0xee
 8003998:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800399c:	4ba9      	ldr	r3, [pc, #676]	@ (8003c44 <lcd_init+0x1704>)
 800399e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039a4:	4ba7      	ldr	r3, [pc, #668]	@ (8003c44 <lcd_init+0x1704>)
 80039a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80039ac:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	4ba5      	ldr	r3, [pc, #660]	@ (8003c48 <lcd_init+0x1708>)
 80039b4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80039b6:	4ba3      	ldr	r3, [pc, #652]	@ (8003c44 <lcd_init+0x1704>)
 80039b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80039bc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80039be:	4ba1      	ldr	r3, [pc, #644]	@ (8003c44 <lcd_init+0x1704>)
 80039c0:	2280      	movs	r2, #128	@ 0x80
 80039c2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80039c4:	4b9f      	ldr	r3, [pc, #636]	@ (8003c44 <lcd_init+0x1704>)
 80039c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ca:	611a      	str	r2, [r3, #16]
}
 80039cc:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 80039ce:	20de      	movs	r0, #222	@ 0xde
 80039d0:	f7fd fc78 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 80039d4:	2021      	movs	r0, #33	@ 0x21
 80039d6:	f7fd fc75 	bl	80012c4 <lcd_wr_xdata>
 80039da:	23f1      	movs	r3, #241	@ 0xf1
 80039dc:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039e0:	4b98      	ldr	r3, [pc, #608]	@ (8003c44 <lcd_init+0x1704>)
 80039e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039e8:	4b96      	ldr	r3, [pc, #600]	@ (8003c44 <lcd_init+0x1704>)
 80039ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80039f0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	4b94      	ldr	r3, [pc, #592]	@ (8003c48 <lcd_init+0x1708>)
 80039f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80039fa:	4b92      	ldr	r3, [pc, #584]	@ (8003c44 <lcd_init+0x1704>)
 80039fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a00:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a02:	4b90      	ldr	r3, [pc, #576]	@ (8003c44 <lcd_init+0x1704>)
 8003a04:	2280      	movs	r2, #128	@ 0x80
 8003a06:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a08:	4b8e      	ldr	r3, [pc, #568]	@ (8003c44 <lcd_init+0x1704>)
 8003a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0e:	611a      	str	r2, [r3, #16]
}
 8003a10:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 8003a12:	2001      	movs	r0, #1
 8003a14:	f7fd fc56 	bl	80012c4 <lcd_wr_xdata>
 8003a18:	23df      	movs	r3, #223	@ 0xdf
 8003a1a:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a1e:	4b89      	ldr	r3, [pc, #548]	@ (8003c44 <lcd_init+0x1704>)
 8003a20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a24:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a26:	4b87      	ldr	r3, [pc, #540]	@ (8003c44 <lcd_init+0x1704>)
 8003a28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a2c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a2e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	4b84      	ldr	r3, [pc, #528]	@ (8003c48 <lcd_init+0x1708>)
 8003a36:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a38:	4b82      	ldr	r3, [pc, #520]	@ (8003c44 <lcd_init+0x1704>)
 8003a3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a3e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a40:	4b80      	ldr	r3, [pc, #512]	@ (8003c44 <lcd_init+0x1704>)
 8003a42:	2280      	movs	r2, #128	@ 0x80
 8003a44:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a46:	4b7f      	ldr	r3, [pc, #508]	@ (8003c44 <lcd_init+0x1704>)
 8003a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a4c:	611a      	str	r2, [r3, #16]
}
 8003a4e:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003a50:	2010      	movs	r0, #16
 8003a52:	f7fd fc37 	bl	80012c4 <lcd_wr_xdata>
 8003a56:	23c4      	movs	r3, #196	@ 0xc4
 8003a58:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a5c:	4b79      	ldr	r3, [pc, #484]	@ (8003c44 <lcd_init+0x1704>)
 8003a5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a62:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a64:	4b77      	ldr	r3, [pc, #476]	@ (8003c44 <lcd_init+0x1704>)
 8003a66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a6a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a6c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	4b75      	ldr	r3, [pc, #468]	@ (8003c48 <lcd_init+0x1708>)
 8003a74:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a76:	4b73      	ldr	r3, [pc, #460]	@ (8003c44 <lcd_init+0x1704>)
 8003a78:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a7c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a7e:	4b71      	ldr	r3, [pc, #452]	@ (8003c44 <lcd_init+0x1704>)
 8003a80:	2280      	movs	r2, #128	@ 0x80
 8003a82:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a84:	4b6f      	ldr	r3, [pc, #444]	@ (8003c44 <lcd_init+0x1704>)
 8003a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a8a:	611a      	str	r2, [r3, #16]
}
 8003a8c:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 8003a8e:	208f      	movs	r0, #143	@ 0x8f
 8003a90:	f7fd fc18 	bl	80012c4 <lcd_wr_xdata>
 8003a94:	23c6      	movs	r3, #198	@ 0xc6
 8003a96:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c44 <lcd_init+0x1704>)
 8003a9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aa0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003aa2:	4b68      	ldr	r3, [pc, #416]	@ (8003c44 <lcd_init+0x1704>)
 8003aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aa8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003aaa:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	4b65      	ldr	r3, [pc, #404]	@ (8003c48 <lcd_init+0x1708>)
 8003ab2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003ab4:	4b63      	ldr	r3, [pc, #396]	@ (8003c44 <lcd_init+0x1704>)
 8003ab6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003aba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003abc:	4b61      	ldr	r3, [pc, #388]	@ (8003c44 <lcd_init+0x1704>)
 8003abe:	2280      	movs	r2, #128	@ 0x80
 8003ac0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ac2:	4b60      	ldr	r3, [pc, #384]	@ (8003c44 <lcd_init+0x1704>)
 8003ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ac8:	611a      	str	r2, [r3, #16]
}
 8003aca:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7fd fbf9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003ad2:	20e2      	movs	r0, #226	@ 0xe2
 8003ad4:	f7fd fbf6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003ad8:	20e2      	movs	r0, #226	@ 0xe2
 8003ada:	f7fd fbf3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003ade:	20e2      	movs	r0, #226	@ 0xe2
 8003ae0:	f7fd fbf0 	bl	80012c4 <lcd_wr_xdata>
 8003ae4:	23bf      	movs	r3, #191	@ 0xbf
 8003ae6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003aea:	4b56      	ldr	r3, [pc, #344]	@ (8003c44 <lcd_init+0x1704>)
 8003aec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003af0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003af2:	4b54      	ldr	r3, [pc, #336]	@ (8003c44 <lcd_init+0x1704>)
 8003af4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003af8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003afa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	4b51      	ldr	r3, [pc, #324]	@ (8003c48 <lcd_init+0x1708>)
 8003b02:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b04:	4b4f      	ldr	r3, [pc, #316]	@ (8003c44 <lcd_init+0x1704>)
 8003b06:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b0a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c44 <lcd_init+0x1704>)
 8003b0e:	2280      	movs	r2, #128	@ 0x80
 8003b10:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b12:	4b4c      	ldr	r3, [pc, #304]	@ (8003c44 <lcd_init+0x1704>)
 8003b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b18:	611a      	str	r2, [r3, #16]
}
 8003b1a:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 8003b1c:	20aa      	movs	r0, #170	@ 0xaa
 8003b1e:	f7fd fbd1 	bl	80012c4 <lcd_wr_xdata>
 8003b22:	23b0      	movs	r3, #176	@ 0xb0
 8003b24:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b28:	4b46      	ldr	r3, [pc, #280]	@ (8003c44 <lcd_init+0x1704>)
 8003b2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b30:	4b44      	ldr	r3, [pc, #272]	@ (8003c44 <lcd_init+0x1704>)
 8003b32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b38:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	4b42      	ldr	r3, [pc, #264]	@ (8003c48 <lcd_init+0x1708>)
 8003b40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b42:	4b40      	ldr	r3, [pc, #256]	@ (8003c44 <lcd_init+0x1704>)
 8003b44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c44 <lcd_init+0x1704>)
 8003b4c:	2280      	movs	r2, #128	@ 0x80
 8003b4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b50:	4b3c      	ldr	r3, [pc, #240]	@ (8003c44 <lcd_init+0x1704>)
 8003b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b56:	611a      	str	r2, [r3, #16]
}
 8003b58:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 8003b5a:	200d      	movs	r0, #13
 8003b5c:	f7fd fbb2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b60:	2000      	movs	r0, #0
 8003b62:	f7fd fbaf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8003b66:	200d      	movs	r0, #13
 8003b68:	f7fd fbac 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f7fd fba9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 8003b72:	2011      	movs	r0, #17
 8003b74:	f7fd fba6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7fd fba3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8003b7e:	2019      	movs	r0, #25
 8003b80:	f7fd fba0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b84:	2000      	movs	r0, #0
 8003b86:	f7fd fb9d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003b8a:	2021      	movs	r0, #33	@ 0x21
 8003b8c:	f7fd fb9a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7fd fb97 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 8003b96:	202d      	movs	r0, #45	@ 0x2d
 8003b98:	f7fd fb94 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f7fd fb91 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 8003ba2:	203d      	movs	r0, #61	@ 0x3d
 8003ba4:	f7fd fb8e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f7fd fb8b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003bae:	205d      	movs	r0, #93	@ 0x5d
 8003bb0:	f7fd fb88 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f7fd fb85 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003bba:	205d      	movs	r0, #93	@ 0x5d
 8003bbc:	f7fd fb82 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7fd fb7f 	bl	80012c4 <lcd_wr_xdata>
 8003bc6:	23b1      	movs	r3, #177	@ 0xb1
 8003bc8:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c44 <lcd_init+0x1704>)
 8003bce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bd2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <lcd_init+0x1704>)
 8003bd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bda:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003bdc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <lcd_init+0x1708>)
 8003be4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003be6:	4b17      	ldr	r3, [pc, #92]	@ (8003c44 <lcd_init+0x1704>)
 8003be8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003bec:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003bee:	4b15      	ldr	r3, [pc, #84]	@ (8003c44 <lcd_init+0x1704>)
 8003bf0:	2280      	movs	r2, #128	@ 0x80
 8003bf2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003bf4:	4b13      	ldr	r3, [pc, #76]	@ (8003c44 <lcd_init+0x1704>)
 8003bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bfa:	611a      	str	r2, [r3, #16]
}
 8003bfc:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 8003bfe:	2080      	movs	r0, #128	@ 0x80
 8003c00:	f7fd fb60 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7fd fb5d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003c0a:	208b      	movs	r0, #139	@ 0x8b
 8003c0c:	f7fd fb5a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c10:	2000      	movs	r0, #0
 8003c12:	f7fd fb57 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 8003c16:	2096      	movs	r0, #150	@ 0x96
 8003c18:	f7fd fb54 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f7fd fb51 	bl	80012c4 <lcd_wr_xdata>
 8003c22:	23b2      	movs	r3, #178	@ 0xb2
 8003c24:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <lcd_init+0x1704>)
 8003c2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c30:	4b04      	ldr	r3, [pc, #16]	@ (8003c44 <lcd_init+0x1704>)
 8003c32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c38:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	e005      	b.n	8003c4c <lcd_init+0x170c>
 8003c40:	20000038 	.word	0x20000038
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40010c00 	.word	0x40010c00
 8003c4c:	4bd0      	ldr	r3, [pc, #832]	@ (8003f90 <lcd_init+0x1a50>)
 8003c4e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c50:	4bd0      	ldr	r3, [pc, #832]	@ (8003f94 <lcd_init+0x1a54>)
 8003c52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c56:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c58:	4bce      	ldr	r3, [pc, #824]	@ (8003f94 <lcd_init+0x1a54>)
 8003c5a:	2280      	movs	r2, #128	@ 0x80
 8003c5c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c5e:	4bcd      	ldr	r3, [pc, #820]	@ (8003f94 <lcd_init+0x1a54>)
 8003c60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c64:	611a      	str	r2, [r3, #16]
}
 8003c66:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f7fd fb2b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7fd fb28 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003c74:	2002      	movs	r0, #2
 8003c76:	f7fd fb25 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fd fb22 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003c80:	2003      	movs	r0, #3
 8003c82:	f7fd fb1f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7fd fb1c 	bl	80012c4 <lcd_wr_xdata>
 8003c8c:	23b3      	movs	r3, #179	@ 0xb3
 8003c8e:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c92:	4bc0      	ldr	r3, [pc, #768]	@ (8003f94 <lcd_init+0x1a54>)
 8003c94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c98:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c9a:	4bbe      	ldr	r3, [pc, #760]	@ (8003f94 <lcd_init+0x1a54>)
 8003c9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ca0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ca2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	4bb9      	ldr	r3, [pc, #740]	@ (8003f90 <lcd_init+0x1a50>)
 8003caa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003cac:	4bb9      	ldr	r3, [pc, #740]	@ (8003f94 <lcd_init+0x1a54>)
 8003cae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cb2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003cb4:	4bb7      	ldr	r3, [pc, #732]	@ (8003f94 <lcd_init+0x1a54>)
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003cba:	4bb6      	ldr	r3, [pc, #728]	@ (8003f94 <lcd_init+0x1a54>)
 8003cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cc0:	611a      	str	r2, [r3, #16]
}
 8003cc2:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7fd fafd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7fd fafa 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7fd faf7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f7fd faf4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f7fd faf1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7fd faee 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f7fd faeb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fd fae8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7fd fae5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fd fae2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d00:	2000      	movs	r0, #0
 8003d02:	f7fd fadf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7fd fadc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7fd fad9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7fd fad6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f7fd fad3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f7fd fad0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7fd facd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f7fd faca 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d30:	2000      	movs	r0, #0
 8003d32:	f7fd fac7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7fd fac4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7fd fac1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d42:	2000      	movs	r0, #0
 8003d44:	f7fd fabe 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f7fd fabb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7fd fab8 	bl	80012c4 <lcd_wr_xdata>
 8003d54:	23b4      	movs	r3, #180	@ 0xb4
 8003d56:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003d5a:	4b8e      	ldr	r3, [pc, #568]	@ (8003f94 <lcd_init+0x1a54>)
 8003d5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d60:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003d62:	4b8c      	ldr	r3, [pc, #560]	@ (8003f94 <lcd_init+0x1a54>)
 8003d64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d68:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003d6a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	4b87      	ldr	r3, [pc, #540]	@ (8003f90 <lcd_init+0x1a50>)
 8003d72:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003d74:	4b87      	ldr	r3, [pc, #540]	@ (8003f94 <lcd_init+0x1a54>)
 8003d76:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d7a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003d7c:	4b85      	ldr	r3, [pc, #532]	@ (8003f94 <lcd_init+0x1a54>)
 8003d7e:	2280      	movs	r2, #128	@ 0x80
 8003d80:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003d82:	4b84      	ldr	r3, [pc, #528]	@ (8003f94 <lcd_init+0x1a54>)
 8003d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d88:	611a      	str	r2, [r3, #16]
}
 8003d8a:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 8003d8c:	208b      	movs	r0, #139	@ 0x8b
 8003d8e:	f7fd fa99 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d92:	2000      	movs	r0, #0
 8003d94:	f7fd fa96 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 8003d98:	2096      	movs	r0, #150	@ 0x96
 8003d9a:	f7fd fa93 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f7fd fa90 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 8003da4:	20a1      	movs	r0, #161	@ 0xa1
 8003da6:	f7fd fa8d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003daa:	2000      	movs	r0, #0
 8003dac:	f7fd fa8a 	bl	80012c4 <lcd_wr_xdata>
 8003db0:	23b5      	movs	r3, #181	@ 0xb5
 8003db2:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003db6:	4b77      	ldr	r3, [pc, #476]	@ (8003f94 <lcd_init+0x1a54>)
 8003db8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003dbc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003dbe:	4b75      	ldr	r3, [pc, #468]	@ (8003f94 <lcd_init+0x1a54>)
 8003dc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dc4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003dc6:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	4b70      	ldr	r3, [pc, #448]	@ (8003f90 <lcd_init+0x1a50>)
 8003dce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003dd0:	4b70      	ldr	r3, [pc, #448]	@ (8003f94 <lcd_init+0x1a54>)
 8003dd2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003dd6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003dd8:	4b6e      	ldr	r3, [pc, #440]	@ (8003f94 <lcd_init+0x1a54>)
 8003dda:	2280      	movs	r2, #128	@ 0x80
 8003ddc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003dde:	4b6d      	ldr	r3, [pc, #436]	@ (8003f94 <lcd_init+0x1a54>)
 8003de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003de4:	611a      	str	r2, [r3, #16]
}
 8003de6:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 8003de8:	2002      	movs	r0, #2
 8003dea:	f7fd fa6b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dee:	2000      	movs	r0, #0
 8003df0:	f7fd fa68 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003df4:	2003      	movs	r0, #3
 8003df6:	f7fd fa65 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7fd fa62 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003e00:	2004      	movs	r0, #4
 8003e02:	f7fd fa5f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e06:	2000      	movs	r0, #0
 8003e08:	f7fd fa5c 	bl	80012c4 <lcd_wr_xdata>
 8003e0c:	23b6      	movs	r3, #182	@ 0xb6
 8003e0e:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003e12:	4b60      	ldr	r3, [pc, #384]	@ (8003f94 <lcd_init+0x1a54>)
 8003e14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e18:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003e1a:	4b5e      	ldr	r3, [pc, #376]	@ (8003f94 <lcd_init+0x1a54>)
 8003e1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e20:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003e22:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	4b59      	ldr	r3, [pc, #356]	@ (8003f90 <lcd_init+0x1a50>)
 8003e2a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003e2c:	4b59      	ldr	r3, [pc, #356]	@ (8003f94 <lcd_init+0x1a54>)
 8003e2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e32:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003e34:	4b57      	ldr	r3, [pc, #348]	@ (8003f94 <lcd_init+0x1a54>)
 8003e36:	2280      	movs	r2, #128	@ 0x80
 8003e38:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003e3a:	4b56      	ldr	r3, [pc, #344]	@ (8003f94 <lcd_init+0x1a54>)
 8003e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e40:	611a      	str	r2, [r3, #16]
}
 8003e42:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 8003e44:	2000      	movs	r0, #0
 8003e46:	f7fd fa3d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	f7fd fa3a 	bl	80012c4 <lcd_wr_xdata>
 8003e50:	23b7      	movs	r3, #183	@ 0xb7
 8003e52:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003e56:	4b4f      	ldr	r3, [pc, #316]	@ (8003f94 <lcd_init+0x1a54>)
 8003e58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e5c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003f94 <lcd_init+0x1a54>)
 8003e60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e64:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003e66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	4b48      	ldr	r3, [pc, #288]	@ (8003f90 <lcd_init+0x1a50>)
 8003e6e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003e70:	4b48      	ldr	r3, [pc, #288]	@ (8003f94 <lcd_init+0x1a54>)
 8003e72:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e76:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003e78:	4b46      	ldr	r3, [pc, #280]	@ (8003f94 <lcd_init+0x1a54>)
 8003e7a:	2280      	movs	r2, #128	@ 0x80
 8003e7c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003e7e:	4b45      	ldr	r3, [pc, #276]	@ (8003f94 <lcd_init+0x1a54>)
 8003e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e84:	611a      	str	r2, [r3, #16]
}
 8003e86:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7fd fa1b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f7fd fa18 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8003e94:	203f      	movs	r0, #63	@ 0x3f
 8003e96:	f7fd fa15 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7fd fa12 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 8003ea0:	205e      	movs	r0, #94	@ 0x5e
 8003ea2:	f7fd fa0f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f7fd fa0c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003eac:	2064      	movs	r0, #100	@ 0x64
 8003eae:	f7fd fa09 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f7fd fa06 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 8003eb8:	208c      	movs	r0, #140	@ 0x8c
 8003eba:	f7fd fa03 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	f7fd fa00 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 8003ec4:	20ac      	movs	r0, #172	@ 0xac
 8003ec6:	f7fd f9fd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eca:	2000      	movs	r0, #0
 8003ecc:	f7fd f9fa 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003ed0:	20dc      	movs	r0, #220	@ 0xdc
 8003ed2:	f7fd f9f7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f7fd f9f4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 8003edc:	2070      	movs	r0, #112	@ 0x70
 8003ede:	f7fd f9f1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	f7fd f9ee 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 8003ee8:	2090      	movs	r0, #144	@ 0x90
 8003eea:	f7fd f9eb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f7fd f9e8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 8003ef4:	20eb      	movs	r0, #235	@ 0xeb
 8003ef6:	f7fd f9e5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003efa:	2000      	movs	r0, #0
 8003efc:	f7fd f9e2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003f00:	20dc      	movs	r0, #220	@ 0xdc
 8003f02:	f7fd f9df 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f06:	2000      	movs	r0, #0
 8003f08:	f7fd f9dc 	bl	80012c4 <lcd_wr_xdata>
 8003f0c:	23b8      	movs	r3, #184	@ 0xb8
 8003f0e:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003f12:	4b20      	ldr	r3, [pc, #128]	@ (8003f94 <lcd_init+0x1a54>)
 8003f14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f18:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f94 <lcd_init+0x1a54>)
 8003f1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f20:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003f22:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	4b19      	ldr	r3, [pc, #100]	@ (8003f90 <lcd_init+0x1a50>)
 8003f2a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003f2c:	4b19      	ldr	r3, [pc, #100]	@ (8003f94 <lcd_init+0x1a54>)
 8003f2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f32:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003f34:	4b17      	ldr	r3, [pc, #92]	@ (8003f94 <lcd_init+0x1a54>)
 8003f36:	2280      	movs	r2, #128	@ 0x80
 8003f38:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003f3a:	4b16      	ldr	r3, [pc, #88]	@ (8003f94 <lcd_init+0x1a54>)
 8003f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f40:	611a      	str	r2, [r3, #16]
}
 8003f42:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7fd f9bd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7fd f9ba 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f50:	2000      	movs	r0, #0
 8003f52:	f7fd f9b7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f56:	2000      	movs	r0, #0
 8003f58:	f7fd f9b4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f7fd f9b1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7fd f9ae 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7fd f9ab 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f6e:	2000      	movs	r0, #0
 8003f70:	f7fd f9a8 	bl	80012c4 <lcd_wr_xdata>
 8003f74:	23ba      	movs	r3, #186	@ 0xba
 8003f76:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <lcd_init+0x1a54>)
 8003f7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f80:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003f82:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <lcd_init+0x1a54>)
 8003f84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f88:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003f8a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8003f8e:	e003      	b.n	8003f98 <lcd_init+0x1a58>
 8003f90:	40010c00 	.word	0x40010c00
 8003f94:	40011000 	.word	0x40011000
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	4bd9      	ldr	r3, [pc, #868]	@ (8004300 <lcd_init+0x1dc0>)
 8003f9c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003f9e:	4bd9      	ldr	r3, [pc, #868]	@ (8004304 <lcd_init+0x1dc4>)
 8003fa0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003fa4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003fa6:	4bd7      	ldr	r3, [pc, #860]	@ (8004304 <lcd_init+0x1dc4>)
 8003fa8:	2280      	movs	r2, #128	@ 0x80
 8003faa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003fac:	4bd5      	ldr	r3, [pc, #852]	@ (8004304 <lcd_init+0x1dc4>)
 8003fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fb2:	611a      	str	r2, [r3, #16]
}
 8003fb4:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 8003fb6:	2024      	movs	r0, #36	@ 0x24
 8003fb8:	f7fd f984 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	f7fd f981 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	f7fd f97e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f7fd f97b 	bl	80012c4 <lcd_wr_xdata>
 8003fce:	23c1      	movs	r3, #193	@ 0xc1
 8003fd0:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003fd4:	4bcb      	ldr	r3, [pc, #812]	@ (8004304 <lcd_init+0x1dc4>)
 8003fd6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fda:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003fdc:	4bc9      	ldr	r3, [pc, #804]	@ (8004304 <lcd_init+0x1dc4>)
 8003fde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fe2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003fe4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	4bc5      	ldr	r3, [pc, #788]	@ (8004300 <lcd_init+0x1dc0>)
 8003fec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003fee:	4bc5      	ldr	r3, [pc, #788]	@ (8004304 <lcd_init+0x1dc4>)
 8003ff0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ff4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ff6:	4bc3      	ldr	r3, [pc, #780]	@ (8004304 <lcd_init+0x1dc4>)
 8003ff8:	2280      	movs	r2, #128	@ 0x80
 8003ffa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ffc:	4bc1      	ldr	r3, [pc, #772]	@ (8004304 <lcd_init+0x1dc4>)
 8003ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004002:	611a      	str	r2, [r3, #16]
}
 8004004:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 8004006:	2020      	movs	r0, #32
 8004008:	f7fd f95c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800400c:	2000      	movs	r0, #0
 800400e:	f7fd f959 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8004012:	2054      	movs	r0, #84	@ 0x54
 8004014:	f7fd f956 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004018:	2000      	movs	r0, #0
 800401a:	f7fd f953 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800401e:	20ff      	movs	r0, #255	@ 0xff
 8004020:	f7fd f950 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004024:	2000      	movs	r0, #0
 8004026:	f7fd f94d 	bl	80012c4 <lcd_wr_xdata>
 800402a:	23c2      	movs	r3, #194	@ 0xc2
 800402c:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004030:	4bb4      	ldr	r3, [pc, #720]	@ (8004304 <lcd_init+0x1dc4>)
 8004032:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004036:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004038:	4bb2      	ldr	r3, [pc, #712]	@ (8004304 <lcd_init+0x1dc4>)
 800403a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800403e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004040:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8004044:	b29a      	uxth	r2, r3
 8004046:	4bae      	ldr	r3, [pc, #696]	@ (8004300 <lcd_init+0x1dc0>)
 8004048:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800404a:	4bae      	ldr	r3, [pc, #696]	@ (8004304 <lcd_init+0x1dc4>)
 800404c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004050:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004052:	4bac      	ldr	r3, [pc, #688]	@ (8004304 <lcd_init+0x1dc4>)
 8004054:	2280      	movs	r2, #128	@ 0x80
 8004056:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004058:	4baa      	ldr	r3, [pc, #680]	@ (8004304 <lcd_init+0x1dc4>)
 800405a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800405e:	611a      	str	r2, [r3, #16]
}
 8004060:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 8004062:	200a      	movs	r0, #10
 8004064:	f7fd f92e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004068:	2000      	movs	r0, #0
 800406a:	f7fd f92b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 800406e:	2004      	movs	r0, #4
 8004070:	f7fd f928 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004074:	2000      	movs	r0, #0
 8004076:	f7fd f925 	bl	80012c4 <lcd_wr_xdata>
 800407a:	23c3      	movs	r3, #195	@ 0xc3
 800407c:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004080:	4ba0      	ldr	r3, [pc, #640]	@ (8004304 <lcd_init+0x1dc4>)
 8004082:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004086:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004088:	4b9e      	ldr	r3, [pc, #632]	@ (8004304 <lcd_init+0x1dc4>)
 800408a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800408e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004090:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8004094:	b29a      	uxth	r2, r3
 8004096:	4b9a      	ldr	r3, [pc, #616]	@ (8004300 <lcd_init+0x1dc0>)
 8004098:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800409a:	4b9a      	ldr	r3, [pc, #616]	@ (8004304 <lcd_init+0x1dc4>)
 800409c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80040a0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80040a2:	4b98      	ldr	r3, [pc, #608]	@ (8004304 <lcd_init+0x1dc4>)
 80040a4:	2280      	movs	r2, #128	@ 0x80
 80040a6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80040a8:	4b96      	ldr	r3, [pc, #600]	@ (8004304 <lcd_init+0x1dc4>)
 80040aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ae:	611a      	str	r2, [r3, #16]
}
 80040b0:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 80040b2:	203c      	movs	r0, #60	@ 0x3c
 80040b4:	f7fd f906 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7fd f903 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 80040be:	203a      	movs	r0, #58	@ 0x3a
 80040c0:	f7fd f900 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fd f8fd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 80040ca:	2039      	movs	r0, #57	@ 0x39
 80040cc:	f7fd f8fa 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040d0:	2000      	movs	r0, #0
 80040d2:	f7fd f8f7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 80040d6:	2037      	movs	r0, #55	@ 0x37
 80040d8:	f7fd f8f4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040dc:	2000      	movs	r0, #0
 80040de:	f7fd f8f1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80040e2:	203c      	movs	r0, #60	@ 0x3c
 80040e4:	f7fd f8ee 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040e8:	2000      	movs	r0, #0
 80040ea:	f7fd f8eb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 80040ee:	2036      	movs	r0, #54	@ 0x36
 80040f0:	f7fd f8e8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fd f8e5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80040fa:	2032      	movs	r0, #50	@ 0x32
 80040fc:	f7fd f8e2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004100:	2000      	movs	r0, #0
 8004102:	f7fd f8df 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 8004106:	202f      	movs	r0, #47	@ 0x2f
 8004108:	f7fd f8dc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800410c:	2000      	movs	r0, #0
 800410e:	f7fd f8d9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8004112:	202c      	movs	r0, #44	@ 0x2c
 8004114:	f7fd f8d6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004118:	2000      	movs	r0, #0
 800411a:	f7fd f8d3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 800411e:	2029      	movs	r0, #41	@ 0x29
 8004120:	f7fd f8d0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004124:	2000      	movs	r0, #0
 8004126:	f7fd f8cd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 800412a:	2026      	movs	r0, #38	@ 0x26
 800412c:	f7fd f8ca 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004130:	2000      	movs	r0, #0
 8004132:	f7fd f8c7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8004136:	2024      	movs	r0, #36	@ 0x24
 8004138:	f7fd f8c4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800413c:	2000      	movs	r0, #0
 800413e:	f7fd f8c1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8004142:	2024      	movs	r0, #36	@ 0x24
 8004144:	f7fd f8be 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004148:	2000      	movs	r0, #0
 800414a:	f7fd f8bb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 800414e:	2023      	movs	r0, #35	@ 0x23
 8004150:	f7fd f8b8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004154:	2000      	movs	r0, #0
 8004156:	f7fd f8b5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800415a:	203c      	movs	r0, #60	@ 0x3c
 800415c:	f7fd f8b2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004160:	2000      	movs	r0, #0
 8004162:	f7fd f8af 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004166:	2036      	movs	r0, #54	@ 0x36
 8004168:	f7fd f8ac 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800416c:	2000      	movs	r0, #0
 800416e:	f7fd f8a9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8004172:	2032      	movs	r0, #50	@ 0x32
 8004174:	f7fd f8a6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004178:	2000      	movs	r0, #0
 800417a:	f7fd f8a3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 800417e:	202f      	movs	r0, #47	@ 0x2f
 8004180:	f7fd f8a0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004184:	2000      	movs	r0, #0
 8004186:	f7fd f89d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 800418a:	202c      	movs	r0, #44	@ 0x2c
 800418c:	f7fd f89a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004190:	2000      	movs	r0, #0
 8004192:	f7fd f897 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004196:	2029      	movs	r0, #41	@ 0x29
 8004198:	f7fd f894 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800419c:	2000      	movs	r0, #0
 800419e:	f7fd f891 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80041a2:	2026      	movs	r0, #38	@ 0x26
 80041a4:	f7fd f88e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041a8:	2000      	movs	r0, #0
 80041aa:	f7fd f88b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80041ae:	2024      	movs	r0, #36	@ 0x24
 80041b0:	f7fd f888 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7fd f885 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80041ba:	2024      	movs	r0, #36	@ 0x24
 80041bc:	f7fd f882 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7fd f87f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80041c6:	2023      	movs	r0, #35	@ 0x23
 80041c8:	f7fd f87c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041cc:	2000      	movs	r0, #0
 80041ce:	f7fd f879 	bl	80012c4 <lcd_wr_xdata>
 80041d2:	23c4      	movs	r3, #196	@ 0xc4
 80041d4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80041d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004304 <lcd_init+0x1dc4>)
 80041da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041de:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80041e0:	4b48      	ldr	r3, [pc, #288]	@ (8004304 <lcd_init+0x1dc4>)
 80041e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041e6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80041e8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	4b44      	ldr	r3, [pc, #272]	@ (8004300 <lcd_init+0x1dc0>)
 80041f0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80041f2:	4b44      	ldr	r3, [pc, #272]	@ (8004304 <lcd_init+0x1dc4>)
 80041f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80041f8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80041fa:	4b42      	ldr	r3, [pc, #264]	@ (8004304 <lcd_init+0x1dc4>)
 80041fc:	2280      	movs	r2, #128	@ 0x80
 80041fe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004200:	4b40      	ldr	r3, [pc, #256]	@ (8004304 <lcd_init+0x1dc4>)
 8004202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004206:	611a      	str	r2, [r3, #16]
}
 8004208:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 800420a:	2062      	movs	r0, #98	@ 0x62
 800420c:	f7fd f85a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004210:	2000      	movs	r0, #0
 8004212:	f7fd f857 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8004216:	2005      	movs	r0, #5
 8004218:	f7fd f854 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800421c:	2000      	movs	r0, #0
 800421e:	f7fd f851 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8004222:	2084      	movs	r0, #132	@ 0x84
 8004224:	f7fd f84e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004228:	2000      	movs	r0, #0
 800422a:	f7fd f84b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 800422e:	20f0      	movs	r0, #240	@ 0xf0
 8004230:	f7fd f848 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004234:	2000      	movs	r0, #0
 8004236:	f7fd f845 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 800423a:	2018      	movs	r0, #24
 800423c:	f7fd f842 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004240:	2000      	movs	r0, #0
 8004242:	f7fd f83f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 8004246:	20a4      	movs	r0, #164	@ 0xa4
 8004248:	f7fd f83c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800424c:	2000      	movs	r0, #0
 800424e:	f7fd f839 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8004252:	2018      	movs	r0, #24
 8004254:	f7fd f836 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004258:	2000      	movs	r0, #0
 800425a:	f7fd f833 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 800425e:	2050      	movs	r0, #80	@ 0x50
 8004260:	f7fd f830 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004264:	2000      	movs	r0, #0
 8004266:	f7fd f82d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 800426a:	200c      	movs	r0, #12
 800426c:	f7fd f82a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004270:	2000      	movs	r0, #0
 8004272:	f7fd f827 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8004276:	2017      	movs	r0, #23
 8004278:	f7fd f824 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800427c:	2000      	movs	r0, #0
 800427e:	f7fd f821 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 8004282:	2095      	movs	r0, #149	@ 0x95
 8004284:	f7fd f81e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004288:	2000      	movs	r0, #0
 800428a:	f7fd f81b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 800428e:	20f3      	movs	r0, #243	@ 0xf3
 8004290:	f7fd f818 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004294:	2000      	movs	r0, #0
 8004296:	f7fd f815 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 800429a:	20e6      	movs	r0, #230	@ 0xe6
 800429c:	f7fd f812 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042a0:	2000      	movs	r0, #0
 80042a2:	f7fd f80f 	bl	80012c4 <lcd_wr_xdata>
 80042a6:	23c5      	movs	r3, #197	@ 0xc5
 80042a8:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80042ac:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <lcd_init+0x1dc4>)
 80042ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80042b4:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <lcd_init+0x1dc4>)
 80042b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80042bc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004300 <lcd_init+0x1dc0>)
 80042c4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80042c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <lcd_init+0x1dc4>)
 80042c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80042cc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <lcd_init+0x1dc4>)
 80042d0:	2280      	movs	r2, #128	@ 0x80
 80042d2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80042d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <lcd_init+0x1dc4>)
 80042d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042da:	611a      	str	r2, [r3, #16]
}
 80042dc:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 80042de:	2032      	movs	r0, #50	@ 0x32
 80042e0:	f7fc fff0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042e4:	2000      	movs	r0, #0
 80042e6:	f7fc ffed 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80042ea:	2044      	movs	r0, #68	@ 0x44
 80042ec:	f7fc ffea 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042f0:	2000      	movs	r0, #0
 80042f2:	f7fc ffe7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 80042f6:	2065      	movs	r0, #101	@ 0x65
 80042f8:	f7fc ffe4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042fc:	2000      	movs	r0, #0
 80042fe:	e003      	b.n	8004308 <lcd_init+0x1dc8>
 8004300:	40010c00 	.word	0x40010c00
 8004304:	40011000 	.word	0x40011000
 8004308:	f7fc ffdc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 800430c:	2076      	movs	r0, #118	@ 0x76
 800430e:	f7fc ffd9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004312:	2000      	movs	r0, #0
 8004314:	f7fc ffd6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004318:	2088      	movs	r0, #136	@ 0x88
 800431a:	f7fc ffd3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800431e:	2000      	movs	r0, #0
 8004320:	f7fc ffd0 	bl	80012c4 <lcd_wr_xdata>
 8004324:	23c6      	movs	r3, #198	@ 0xc6
 8004326:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800432a:	4bd7      	ldr	r3, [pc, #860]	@ (8004688 <lcd_init+0x2148>)
 800432c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004330:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004332:	4bd5      	ldr	r3, [pc, #852]	@ (8004688 <lcd_init+0x2148>)
 8004334:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004338:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800433a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800433e:	b29a      	uxth	r2, r3
 8004340:	4bd2      	ldr	r3, [pc, #840]	@ (800468c <lcd_init+0x214c>)
 8004342:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004344:	4bd0      	ldr	r3, [pc, #832]	@ (8004688 <lcd_init+0x2148>)
 8004346:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800434a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800434c:	4bce      	ldr	r3, [pc, #824]	@ (8004688 <lcd_init+0x2148>)
 800434e:	2280      	movs	r2, #128	@ 0x80
 8004350:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004352:	4bcd      	ldr	r3, [pc, #820]	@ (8004688 <lcd_init+0x2148>)
 8004354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004358:	611a      	str	r2, [r3, #16]
}
 800435a:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 800435c:	2020      	movs	r0, #32
 800435e:	f7fc ffb1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004362:	2000      	movs	r0, #0
 8004364:	f7fc ffae 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8004368:	2017      	movs	r0, #23
 800436a:	f7fc ffab 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800436e:	2000      	movs	r0, #0
 8004370:	f7fc ffa8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8004374:	2001      	movs	r0, #1
 8004376:	f7fc ffa5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800437a:	2000      	movs	r0, #0
 800437c:	f7fc ffa2 	bl	80012c4 <lcd_wr_xdata>
 8004380:	23c7      	movs	r3, #199	@ 0xc7
 8004382:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004386:	4bc0      	ldr	r3, [pc, #768]	@ (8004688 <lcd_init+0x2148>)
 8004388:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800438c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800438e:	4bbe      	ldr	r3, [pc, #760]	@ (8004688 <lcd_init+0x2148>)
 8004390:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004394:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004396:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 800439a:	b29a      	uxth	r2, r3
 800439c:	4bbb      	ldr	r3, [pc, #748]	@ (800468c <lcd_init+0x214c>)
 800439e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80043a0:	4bb9      	ldr	r3, [pc, #740]	@ (8004688 <lcd_init+0x2148>)
 80043a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80043a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80043a8:	4bb7      	ldr	r3, [pc, #732]	@ (8004688 <lcd_init+0x2148>)
 80043aa:	2280      	movs	r2, #128	@ 0x80
 80043ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80043ae:	4bb6      	ldr	r3, [pc, #728]	@ (8004688 <lcd_init+0x2148>)
 80043b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043b4:	611a      	str	r2, [r3, #16]
}
 80043b6:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7fc ff83 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043be:	2000      	movs	r0, #0
 80043c0:	f7fc ff80 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043c4:	2000      	movs	r0, #0
 80043c6:	f7fc ff7d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043ca:	2000      	movs	r0, #0
 80043cc:	f7fc ff7a 	bl	80012c4 <lcd_wr_xdata>
 80043d0:	23c8      	movs	r3, #200	@ 0xc8
 80043d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80043d6:	4bac      	ldr	r3, [pc, #688]	@ (8004688 <lcd_init+0x2148>)
 80043d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80043de:	4baa      	ldr	r3, [pc, #680]	@ (8004688 <lcd_init+0x2148>)
 80043e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80043e6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	4ba7      	ldr	r3, [pc, #668]	@ (800468c <lcd_init+0x214c>)
 80043ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80043f0:	4ba5      	ldr	r3, [pc, #660]	@ (8004688 <lcd_init+0x2148>)
 80043f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80043f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80043f8:	4ba3      	ldr	r3, [pc, #652]	@ (8004688 <lcd_init+0x2148>)
 80043fa:	2280      	movs	r2, #128	@ 0x80
 80043fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80043fe:	4ba2      	ldr	r3, [pc, #648]	@ (8004688 <lcd_init+0x2148>)
 8004400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004404:	611a      	str	r2, [r3, #16]
}
 8004406:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 8004408:	2000      	movs	r0, #0
 800440a:	f7fc ff5b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800440e:	2000      	movs	r0, #0
 8004410:	f7fc ff58 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004414:	2000      	movs	r0, #0
 8004416:	f7fc ff55 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800441a:	2000      	movs	r0, #0
 800441c:	f7fc ff52 	bl	80012c4 <lcd_wr_xdata>
 8004420:	23c9      	movs	r3, #201	@ 0xc9
 8004422:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004426:	4b98      	ldr	r3, [pc, #608]	@ (8004688 <lcd_init+0x2148>)
 8004428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800442c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800442e:	4b96      	ldr	r3, [pc, #600]	@ (8004688 <lcd_init+0x2148>)
 8004430:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004434:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004436:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 800443a:	b29a      	uxth	r2, r3
 800443c:	4b93      	ldr	r3, [pc, #588]	@ (800468c <lcd_init+0x214c>)
 800443e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004440:	4b91      	ldr	r3, [pc, #580]	@ (8004688 <lcd_init+0x2148>)
 8004442:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004446:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004448:	4b8f      	ldr	r3, [pc, #572]	@ (8004688 <lcd_init+0x2148>)
 800444a:	2280      	movs	r2, #128	@ 0x80
 800444c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800444e:	4b8e      	ldr	r3, [pc, #568]	@ (8004688 <lcd_init+0x2148>)
 8004450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004454:	611a      	str	r2, [r3, #16]
}
 8004456:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8004458:	2000      	movs	r0, #0
 800445a:	f7fc ff33 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800445e:	2000      	movs	r0, #0
 8004460:	f7fc ff30 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004464:	2000      	movs	r0, #0
 8004466:	f7fc ff2d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800446a:	2000      	movs	r0, #0
 800446c:	f7fc ff2a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004470:	2000      	movs	r0, #0
 8004472:	f7fc ff27 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004476:	2000      	movs	r0, #0
 8004478:	f7fc ff24 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800447c:	2000      	movs	r0, #0
 800447e:	f7fc ff21 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004482:	2000      	movs	r0, #0
 8004484:	f7fc ff1e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004488:	2000      	movs	r0, #0
 800448a:	f7fc ff1b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800448e:	2000      	movs	r0, #0
 8004490:	f7fc ff18 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004494:	2000      	movs	r0, #0
 8004496:	f7fc ff15 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800449a:	2000      	movs	r0, #0
 800449c:	f7fc ff12 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044a0:	2000      	movs	r0, #0
 80044a2:	f7fc ff0f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044a6:	2000      	movs	r0, #0
 80044a8:	f7fc ff0c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ac:	2000      	movs	r0, #0
 80044ae:	f7fc ff09 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044b2:	2000      	movs	r0, #0
 80044b4:	f7fc ff06 	bl	80012c4 <lcd_wr_xdata>
 80044b8:	23e0      	movs	r3, #224	@ 0xe0
 80044ba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80044be:	4b72      	ldr	r3, [pc, #456]	@ (8004688 <lcd_init+0x2148>)
 80044c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044c4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80044c6:	4b70      	ldr	r3, [pc, #448]	@ (8004688 <lcd_init+0x2148>)
 80044c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044cc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80044ce:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	4b6d      	ldr	r3, [pc, #436]	@ (800468c <lcd_init+0x214c>)
 80044d6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80044d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004688 <lcd_init+0x2148>)
 80044da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044de:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80044e0:	4b69      	ldr	r3, [pc, #420]	@ (8004688 <lcd_init+0x2148>)
 80044e2:	2280      	movs	r2, #128	@ 0x80
 80044e4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80044e6:	4b68      	ldr	r3, [pc, #416]	@ (8004688 <lcd_init+0x2148>)
 80044e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ec:	611a      	str	r2, [r3, #16]
}
 80044ee:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 80044f0:	2016      	movs	r0, #22
 80044f2:	f7fc fee7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044f6:	2000      	movs	r0, #0
 80044f8:	f7fc fee4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 80044fc:	201c      	movs	r0, #28
 80044fe:	f7fc fee1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004502:	2000      	movs	r0, #0
 8004504:	f7fc fede 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8004508:	2021      	movs	r0, #33	@ 0x21
 800450a:	f7fc fedb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800450e:	2000      	movs	r0, #0
 8004510:	f7fc fed8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004514:	2036      	movs	r0, #54	@ 0x36
 8004516:	f7fc fed5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800451a:	2000      	movs	r0, #0
 800451c:	f7fc fed2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8004520:	2046      	movs	r0, #70	@ 0x46
 8004522:	f7fc fecf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004526:	2000      	movs	r0, #0
 8004528:	f7fc fecc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 800452c:	2052      	movs	r0, #82	@ 0x52
 800452e:	f7fc fec9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004532:	2000      	movs	r0, #0
 8004534:	f7fc fec6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8004538:	2064      	movs	r0, #100	@ 0x64
 800453a:	f7fc fec3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800453e:	2000      	movs	r0, #0
 8004540:	f7fc fec0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8004544:	207a      	movs	r0, #122	@ 0x7a
 8004546:	f7fc febd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800454a:	2000      	movs	r0, #0
 800454c:	f7fc feba 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8004550:	208b      	movs	r0, #139	@ 0x8b
 8004552:	f7fc feb7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004556:	2000      	movs	r0, #0
 8004558:	f7fc feb4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 800455c:	2099      	movs	r0, #153	@ 0x99
 800455e:	f7fc feb1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004562:	2000      	movs	r0, #0
 8004564:	f7fc feae 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8004568:	20a8      	movs	r0, #168	@ 0xa8
 800456a:	f7fc feab 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800456e:	2000      	movs	r0, #0
 8004570:	f7fc fea8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8004574:	20b9      	movs	r0, #185	@ 0xb9
 8004576:	f7fc fea5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800457a:	2000      	movs	r0, #0
 800457c:	f7fc fea2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8004580:	20c4      	movs	r0, #196	@ 0xc4
 8004582:	f7fc fe9f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004586:	2000      	movs	r0, #0
 8004588:	f7fc fe9c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 800458c:	20ca      	movs	r0, #202	@ 0xca
 800458e:	f7fc fe99 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004592:	2000      	movs	r0, #0
 8004594:	f7fc fe96 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8004598:	20d2      	movs	r0, #210	@ 0xd2
 800459a:	f7fc fe93 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800459e:	2000      	movs	r0, #0
 80045a0:	f7fc fe90 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 80045a4:	20d9      	movs	r0, #217	@ 0xd9
 80045a6:	f7fc fe8d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045aa:	2000      	movs	r0, #0
 80045ac:	f7fc fe8a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 80045b0:	20e0      	movs	r0, #224	@ 0xe0
 80045b2:	f7fc fe87 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7fc fe84 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80045bc:	20f3      	movs	r0, #243	@ 0xf3
 80045be:	f7fc fe81 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7fc fe7e 	bl	80012c4 <lcd_wr_xdata>
 80045c8:	23e1      	movs	r3, #225	@ 0xe1
 80045ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80045ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004688 <lcd_init+0x2148>)
 80045d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045d4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80045d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004688 <lcd_init+0x2148>)
 80045d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045dc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80045de:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	4b29      	ldr	r3, [pc, #164]	@ (800468c <lcd_init+0x214c>)
 80045e6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80045e8:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <lcd_init+0x2148>)
 80045ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045ee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80045f0:	4b25      	ldr	r3, [pc, #148]	@ (8004688 <lcd_init+0x2148>)
 80045f2:	2280      	movs	r2, #128	@ 0x80
 80045f4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80045f6:	4b24      	ldr	r3, [pc, #144]	@ (8004688 <lcd_init+0x2148>)
 80045f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045fc:	611a      	str	r2, [r3, #16]
}
 80045fe:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8004600:	2016      	movs	r0, #22
 8004602:	f7fc fe5f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004606:	2000      	movs	r0, #0
 8004608:	f7fc fe5c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 800460c:	201c      	movs	r0, #28
 800460e:	f7fc fe59 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004612:	2000      	movs	r0, #0
 8004614:	f7fc fe56 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8004618:	2022      	movs	r0, #34	@ 0x22
 800461a:	f7fc fe53 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800461e:	2000      	movs	r0, #0
 8004620:	f7fc fe50 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004624:	2036      	movs	r0, #54	@ 0x36
 8004626:	f7fc fe4d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800462a:	2000      	movs	r0, #0
 800462c:	f7fc fe4a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004630:	2045      	movs	r0, #69	@ 0x45
 8004632:	f7fc fe47 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004636:	2000      	movs	r0, #0
 8004638:	f7fc fe44 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 800463c:	2052      	movs	r0, #82	@ 0x52
 800463e:	f7fc fe41 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004642:	2000      	movs	r0, #0
 8004644:	f7fc fe3e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8004648:	2064      	movs	r0, #100	@ 0x64
 800464a:	f7fc fe3b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800464e:	2000      	movs	r0, #0
 8004650:	f7fc fe38 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8004654:	207a      	movs	r0, #122	@ 0x7a
 8004656:	f7fc fe35 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800465a:	2000      	movs	r0, #0
 800465c:	f7fc fe32 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8004660:	208b      	movs	r0, #139	@ 0x8b
 8004662:	f7fc fe2f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004666:	2000      	movs	r0, #0
 8004668:	f7fc fe2c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 800466c:	2099      	movs	r0, #153	@ 0x99
 800466e:	f7fc fe29 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004672:	2000      	movs	r0, #0
 8004674:	f7fc fe26 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8004678:	20a8      	movs	r0, #168	@ 0xa8
 800467a:	f7fc fe23 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800467e:	2000      	movs	r0, #0
 8004680:	f7fc fe20 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8004684:	20b9      	movs	r0, #185	@ 0xb9
 8004686:	e003      	b.n	8004690 <lcd_init+0x2150>
 8004688:	40011000 	.word	0x40011000
 800468c:	40010c00 	.word	0x40010c00
 8004690:	f7fc fe18 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004694:	2000      	movs	r0, #0
 8004696:	f7fc fe15 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 800469a:	20c4      	movs	r0, #196	@ 0xc4
 800469c:	f7fc fe12 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046a0:	2000      	movs	r0, #0
 80046a2:	f7fc fe0f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 80046a6:	20ca      	movs	r0, #202	@ 0xca
 80046a8:	f7fc fe0c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046ac:	2000      	movs	r0, #0
 80046ae:	f7fc fe09 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 80046b2:	20d2      	movs	r0, #210	@ 0xd2
 80046b4:	f7fc fe06 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046b8:	2000      	movs	r0, #0
 80046ba:	f7fc fe03 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 80046be:	20d8      	movs	r0, #216	@ 0xd8
 80046c0:	f7fc fe00 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7fc fdfd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 80046ca:	20e0      	movs	r0, #224	@ 0xe0
 80046cc:	f7fc fdfa 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046d0:	2000      	movs	r0, #0
 80046d2:	f7fc fdf7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80046d6:	20f3      	movs	r0, #243	@ 0xf3
 80046d8:	f7fc fdf4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046dc:	2000      	movs	r0, #0
 80046de:	f7fc fdf1 	bl	80012c4 <lcd_wr_xdata>
 80046e2:	23e2      	movs	r3, #226	@ 0xe2
 80046e4:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046e8:	4be3      	ldr	r3, [pc, #908]	@ (8004a78 <lcd_init+0x2538>)
 80046ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046ee:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046f0:	4be1      	ldr	r3, [pc, #900]	@ (8004a78 <lcd_init+0x2538>)
 80046f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046f6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046f8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	4bdf      	ldr	r3, [pc, #892]	@ (8004a7c <lcd_init+0x253c>)
 8004700:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004702:	4bdd      	ldr	r3, [pc, #884]	@ (8004a78 <lcd_init+0x2538>)
 8004704:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004708:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800470a:	4bdb      	ldr	r3, [pc, #876]	@ (8004a78 <lcd_init+0x2538>)
 800470c:	2280      	movs	r2, #128	@ 0x80
 800470e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004710:	4bd9      	ldr	r3, [pc, #868]	@ (8004a78 <lcd_init+0x2538>)
 8004712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004716:	611a      	str	r2, [r3, #16]
}
 8004718:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 800471a:	2005      	movs	r0, #5
 800471c:	f7fc fdd2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004720:	2000      	movs	r0, #0
 8004722:	f7fc fdcf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8004726:	200b      	movs	r0, #11
 8004728:	f7fc fdcc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800472c:	2000      	movs	r0, #0
 800472e:	f7fc fdc9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 8004732:	201b      	movs	r0, #27
 8004734:	f7fc fdc6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004738:	2000      	movs	r0, #0
 800473a:	f7fc fdc3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 800473e:	2034      	movs	r0, #52	@ 0x34
 8004740:	f7fc fdc0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004744:	2000      	movs	r0, #0
 8004746:	f7fc fdbd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 800474a:	2044      	movs	r0, #68	@ 0x44
 800474c:	f7fc fdba 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004750:	2000      	movs	r0, #0
 8004752:	f7fc fdb7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 8004756:	204f      	movs	r0, #79	@ 0x4f
 8004758:	f7fc fdb4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800475c:	2000      	movs	r0, #0
 800475e:	f7fc fdb1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8004762:	2061      	movs	r0, #97	@ 0x61
 8004764:	f7fc fdae 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004768:	2000      	movs	r0, #0
 800476a:	f7fc fdab 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 800476e:	2079      	movs	r0, #121	@ 0x79
 8004770:	f7fc fda8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004774:	2000      	movs	r0, #0
 8004776:	f7fc fda5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 800477a:	2088      	movs	r0, #136	@ 0x88
 800477c:	f7fc fda2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004780:	2000      	movs	r0, #0
 8004782:	f7fc fd9f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8004786:	2097      	movs	r0, #151	@ 0x97
 8004788:	f7fc fd9c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800478c:	2000      	movs	r0, #0
 800478e:	f7fc fd99 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8004792:	20a6      	movs	r0, #166	@ 0xa6
 8004794:	f7fc fd96 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004798:	2000      	movs	r0, #0
 800479a:	f7fc fd93 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 800479e:	20b7      	movs	r0, #183	@ 0xb7
 80047a0:	f7fc fd90 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047a4:	2000      	movs	r0, #0
 80047a6:	f7fc fd8d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 80047aa:	20c2      	movs	r0, #194	@ 0xc2
 80047ac:	f7fc fd8a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7fc fd87 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 80047b6:	20c7      	movs	r0, #199	@ 0xc7
 80047b8:	f7fc fd84 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047bc:	2000      	movs	r0, #0
 80047be:	f7fc fd81 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 80047c2:	20d1      	movs	r0, #209	@ 0xd1
 80047c4:	f7fc fd7e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047c8:	2000      	movs	r0, #0
 80047ca:	f7fc fd7b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 80047ce:	20d6      	movs	r0, #214	@ 0xd6
 80047d0:	f7fc fd78 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047d4:	2000      	movs	r0, #0
 80047d6:	f7fc fd75 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80047da:	20dd      	movs	r0, #221	@ 0xdd
 80047dc:	f7fc fd72 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047e0:	2000      	movs	r0, #0
 80047e2:	f7fc fd6f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80047e6:	20f3      	movs	r0, #243	@ 0xf3
 80047e8:	f7fc fd6c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047ec:	2000      	movs	r0, #0
 80047ee:	f7fc fd69 	bl	80012c4 <lcd_wr_xdata>
 80047f2:	23e3      	movs	r3, #227	@ 0xe3
 80047f4:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047f8:	4b9f      	ldr	r3, [pc, #636]	@ (8004a78 <lcd_init+0x2538>)
 80047fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047fe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004800:	4b9d      	ldr	r3, [pc, #628]	@ (8004a78 <lcd_init+0x2538>)
 8004802:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004806:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004808:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 800480c:	b29a      	uxth	r2, r3
 800480e:	4b9b      	ldr	r3, [pc, #620]	@ (8004a7c <lcd_init+0x253c>)
 8004810:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004812:	4b99      	ldr	r3, [pc, #612]	@ (8004a78 <lcd_init+0x2538>)
 8004814:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004818:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800481a:	4b97      	ldr	r3, [pc, #604]	@ (8004a78 <lcd_init+0x2538>)
 800481c:	2280      	movs	r2, #128	@ 0x80
 800481e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004820:	4b95      	ldr	r3, [pc, #596]	@ (8004a78 <lcd_init+0x2538>)
 8004822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004826:	611a      	str	r2, [r3, #16]
}
 8004828:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 800482a:	2005      	movs	r0, #5
 800482c:	f7fc fd4a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004830:	2000      	movs	r0, #0
 8004832:	f7fc fd47 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 8004836:	200a      	movs	r0, #10
 8004838:	f7fc fd44 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800483c:	2000      	movs	r0, #0
 800483e:	f7fc fd41 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8004842:	201c      	movs	r0, #28
 8004844:	f7fc fd3e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004848:	2000      	movs	r0, #0
 800484a:	f7fc fd3b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800484e:	2033      	movs	r0, #51	@ 0x33
 8004850:	f7fc fd38 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004854:	2000      	movs	r0, #0
 8004856:	f7fc fd35 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 800485a:	2044      	movs	r0, #68	@ 0x44
 800485c:	f7fc fd32 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004860:	2000      	movs	r0, #0
 8004862:	f7fc fd2f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8004866:	2050      	movs	r0, #80	@ 0x50
 8004868:	f7fc fd2c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800486c:	2000      	movs	r0, #0
 800486e:	f7fc fd29 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 8004872:	2062      	movs	r0, #98	@ 0x62
 8004874:	f7fc fd26 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004878:	2000      	movs	r0, #0
 800487a:	f7fc fd23 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 800487e:	2078      	movs	r0, #120	@ 0x78
 8004880:	f7fc fd20 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004884:	2000      	movs	r0, #0
 8004886:	f7fc fd1d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 800488a:	2088      	movs	r0, #136	@ 0x88
 800488c:	f7fc fd1a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004890:	2000      	movs	r0, #0
 8004892:	f7fc fd17 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8004896:	2097      	movs	r0, #151	@ 0x97
 8004898:	f7fc fd14 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800489c:	2000      	movs	r0, #0
 800489e:	f7fc fd11 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 80048a2:	20a6      	movs	r0, #166	@ 0xa6
 80048a4:	f7fc fd0e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048a8:	2000      	movs	r0, #0
 80048aa:	f7fc fd0b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 80048ae:	20b7      	movs	r0, #183	@ 0xb7
 80048b0:	f7fc fd08 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048b4:	2000      	movs	r0, #0
 80048b6:	f7fc fd05 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 80048ba:	20c2      	movs	r0, #194	@ 0xc2
 80048bc:	f7fc fd02 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048c0:	2000      	movs	r0, #0
 80048c2:	f7fc fcff 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 80048c6:	20c7      	movs	r0, #199	@ 0xc7
 80048c8:	f7fc fcfc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7fc fcf9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 80048d2:	20d1      	movs	r0, #209	@ 0xd1
 80048d4:	f7fc fcf6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048d8:	2000      	movs	r0, #0
 80048da:	f7fc fcf3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 80048de:	20d5      	movs	r0, #213	@ 0xd5
 80048e0:	f7fc fcf0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7fc fced 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80048ea:	20dd      	movs	r0, #221	@ 0xdd
 80048ec:	f7fc fcea 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7fc fce7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80048f6:	20f3      	movs	r0, #243	@ 0xf3
 80048f8:	f7fc fce4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048fc:	2000      	movs	r0, #0
 80048fe:	f7fc fce1 	bl	80012c4 <lcd_wr_xdata>
 8004902:	23e4      	movs	r3, #228	@ 0xe4
 8004904:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004908:	4b5b      	ldr	r3, [pc, #364]	@ (8004a78 <lcd_init+0x2538>)
 800490a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800490e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004910:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <lcd_init+0x2538>)
 8004912:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004916:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004918:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800491c:	b29a      	uxth	r2, r3
 800491e:	4b57      	ldr	r3, [pc, #348]	@ (8004a7c <lcd_init+0x253c>)
 8004920:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004922:	4b55      	ldr	r3, [pc, #340]	@ (8004a78 <lcd_init+0x2538>)
 8004924:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004928:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800492a:	4b53      	ldr	r3, [pc, #332]	@ (8004a78 <lcd_init+0x2538>)
 800492c:	2280      	movs	r2, #128	@ 0x80
 800492e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004930:	4b51      	ldr	r3, [pc, #324]	@ (8004a78 <lcd_init+0x2538>)
 8004932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004936:	611a      	str	r2, [r3, #16]
}
 8004938:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 800493a:	2001      	movs	r0, #1
 800493c:	f7fc fcc2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004940:	2000      	movs	r0, #0
 8004942:	f7fc fcbf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8004946:	2001      	movs	r0, #1
 8004948:	f7fc fcbc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800494c:	2000      	movs	r0, #0
 800494e:	f7fc fcb9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8004952:	2002      	movs	r0, #2
 8004954:	f7fc fcb6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004958:	2000      	movs	r0, #0
 800495a:	f7fc fcb3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 800495e:	202a      	movs	r0, #42	@ 0x2a
 8004960:	f7fc fcb0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004964:	2000      	movs	r0, #0
 8004966:	f7fc fcad 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800496a:	203c      	movs	r0, #60	@ 0x3c
 800496c:	f7fc fcaa 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004970:	2000      	movs	r0, #0
 8004972:	f7fc fca7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8004976:	204b      	movs	r0, #75	@ 0x4b
 8004978:	f7fc fca4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800497c:	2000      	movs	r0, #0
 800497e:	f7fc fca1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8004982:	205d      	movs	r0, #93	@ 0x5d
 8004984:	f7fc fc9e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004988:	2000      	movs	r0, #0
 800498a:	f7fc fc9b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 800498e:	2074      	movs	r0, #116	@ 0x74
 8004990:	f7fc fc98 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004994:	2000      	movs	r0, #0
 8004996:	f7fc fc95 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 800499a:	2084      	movs	r0, #132	@ 0x84
 800499c:	f7fc fc92 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7fc fc8f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 80049a6:	2093      	movs	r0, #147	@ 0x93
 80049a8:	f7fc fc8c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fc fc89 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 80049b2:	20a2      	movs	r0, #162	@ 0xa2
 80049b4:	f7fc fc86 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049b8:	2000      	movs	r0, #0
 80049ba:	f7fc fc83 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 80049be:	20b3      	movs	r0, #179	@ 0xb3
 80049c0:	f7fc fc80 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7fc fc7d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 80049ca:	20be      	movs	r0, #190	@ 0xbe
 80049cc:	f7fc fc7a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7fc fc77 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80049d6:	20c4      	movs	r0, #196	@ 0xc4
 80049d8:	f7fc fc74 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049dc:	2000      	movs	r0, #0
 80049de:	f7fc fc71 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 80049e2:	20cd      	movs	r0, #205	@ 0xcd
 80049e4:	f7fc fc6e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7fc fc6b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 80049ee:	20d3      	movs	r0, #211	@ 0xd3
 80049f0:	f7fc fc68 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fc fc65 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80049fa:	20dd      	movs	r0, #221	@ 0xdd
 80049fc:	f7fc fc62 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7fc fc5f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004a06:	20f3      	movs	r0, #243	@ 0xf3
 8004a08:	f7fc fc5c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7fc fc59 	bl	80012c4 <lcd_wr_xdata>
 8004a12:	23e5      	movs	r3, #229	@ 0xe5
 8004a14:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a18:	4b17      	ldr	r3, [pc, #92]	@ (8004a78 <lcd_init+0x2538>)
 8004a1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a1e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a20:	4b15      	ldr	r3, [pc, #84]	@ (8004a78 <lcd_init+0x2538>)
 8004a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a26:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a28:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <lcd_init+0x253c>)
 8004a30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a32:	4b11      	ldr	r3, [pc, #68]	@ (8004a78 <lcd_init+0x2538>)
 8004a34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a78 <lcd_init+0x2538>)
 8004a3c:	2280      	movs	r2, #128	@ 0x80
 8004a3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a40:	4b0d      	ldr	r3, [pc, #52]	@ (8004a78 <lcd_init+0x2538>)
 8004a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a46:	611a      	str	r2, [r3, #16]
}
 8004a48:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f7fc fc3a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7fc fc37 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7fc fc34 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f7fc fc31 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8004a62:	2002      	movs	r0, #2
 8004a64:	f7fc fc2e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7fc fc2b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004a6e:	2029      	movs	r0, #41	@ 0x29
 8004a70:	f7fc fc28 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a74:	2000      	movs	r0, #0
 8004a76:	e003      	b.n	8004a80 <lcd_init+0x2540>
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40010c00 	.word	0x40010c00
 8004a80:	f7fc fc20 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8004a84:	203c      	movs	r0, #60	@ 0x3c
 8004a86:	f7fc fc1d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f7fc fc1a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8004a90:	204b      	movs	r0, #75	@ 0x4b
 8004a92:	f7fc fc17 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7fc fc14 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8004a9c:	205d      	movs	r0, #93	@ 0x5d
 8004a9e:	f7fc fc11 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f7fc fc0e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004aa8:	2074      	movs	r0, #116	@ 0x74
 8004aaa:	f7fc fc0b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f7fc fc08 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8004ab4:	2084      	movs	r0, #132	@ 0x84
 8004ab6:	f7fc fc05 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004aba:	2000      	movs	r0, #0
 8004abc:	f7fc fc02 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8004ac0:	2093      	movs	r0, #147	@ 0x93
 8004ac2:	f7fc fbff 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f7fc fbfc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004acc:	20a2      	movs	r0, #162	@ 0xa2
 8004ace:	f7fc fbf9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f7fc fbf6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004ad8:	20b3      	movs	r0, #179	@ 0xb3
 8004ada:	f7fc fbf3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7fc fbf0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8004ae4:	20be      	movs	r0, #190	@ 0xbe
 8004ae6:	f7fc fbed 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004aea:	2000      	movs	r0, #0
 8004aec:	f7fc fbea 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8004af0:	20c4      	movs	r0, #196	@ 0xc4
 8004af2:	f7fc fbe7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fc fbe4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 8004afc:	20cd      	movs	r0, #205	@ 0xcd
 8004afe:	f7fc fbe1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b02:	2000      	movs	r0, #0
 8004b04:	f7fc fbde 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004b08:	20d3      	movs	r0, #211	@ 0xd3
 8004b0a:	f7fc fbdb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fc fbd8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8004b14:	20dc      	movs	r0, #220	@ 0xdc
 8004b16:	f7fc fbd5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f7fc fbd2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004b20:	20f3      	movs	r0, #243	@ 0xf3
 8004b22:	f7fc fbcf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7fc fbcc 	bl	80012c4 <lcd_wr_xdata>
 8004b2c:	23e6      	movs	r3, #230	@ 0xe6
 8004b2e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b32:	4bde      	ldr	r3, [pc, #888]	@ (8004eac <lcd_init+0x296c>)
 8004b34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b38:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b3a:	4bdc      	ldr	r3, [pc, #880]	@ (8004eac <lcd_init+0x296c>)
 8004b3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b40:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b42:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	4bd9      	ldr	r3, [pc, #868]	@ (8004eb0 <lcd_init+0x2970>)
 8004b4a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b4c:	4bd7      	ldr	r3, [pc, #860]	@ (8004eac <lcd_init+0x296c>)
 8004b4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b52:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b54:	4bd5      	ldr	r3, [pc, #852]	@ (8004eac <lcd_init+0x296c>)
 8004b56:	2280      	movs	r2, #128	@ 0x80
 8004b58:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b5a:	4bd4      	ldr	r3, [pc, #848]	@ (8004eac <lcd_init+0x296c>)
 8004b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b60:	611a      	str	r2, [r3, #16]
}
 8004b62:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 8004b64:	2011      	movs	r0, #17
 8004b66:	f7fc fbad 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f7fc fbaa 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004b70:	2034      	movs	r0, #52	@ 0x34
 8004b72:	f7fc fba7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b76:	2000      	movs	r0, #0
 8004b78:	f7fc fba4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004b7c:	2056      	movs	r0, #86	@ 0x56
 8004b7e:	f7fc fba1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b82:	2000      	movs	r0, #0
 8004b84:	f7fc fb9e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8004b88:	2076      	movs	r0, #118	@ 0x76
 8004b8a:	f7fc fb9b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f7fc fb98 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 8004b94:	2077      	movs	r0, #119	@ 0x77
 8004b96:	f7fc fb95 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f7fc fb92 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004ba0:	2066      	movs	r0, #102	@ 0x66
 8004ba2:	f7fc fb8f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fc fb8c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004bac:	2088      	movs	r0, #136	@ 0x88
 8004bae:	f7fc fb89 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7fc fb86 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004bb8:	2099      	movs	r0, #153	@ 0x99
 8004bba:	f7fc fb83 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7fc fb80 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004bc4:	20bb      	movs	r0, #187	@ 0xbb
 8004bc6:	f7fc fb7d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f7fc fb7a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004bd0:	2099      	movs	r0, #153	@ 0x99
 8004bd2:	f7fc fb77 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7fc fb74 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004bdc:	2066      	movs	r0, #102	@ 0x66
 8004bde:	f7fc fb71 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004be2:	2000      	movs	r0, #0
 8004be4:	f7fc fb6e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004be8:	2055      	movs	r0, #85	@ 0x55
 8004bea:	f7fc fb6b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f7fc fb68 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004bf4:	2055      	movs	r0, #85	@ 0x55
 8004bf6:	f7fc fb65 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f7fc fb62 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004c00:	2045      	movs	r0, #69	@ 0x45
 8004c02:	f7fc fb5f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c06:	2000      	movs	r0, #0
 8004c08:	f7fc fb5c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8004c0c:	2043      	movs	r0, #67	@ 0x43
 8004c0e:	f7fc fb59 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c12:	2000      	movs	r0, #0
 8004c14:	f7fc fb56 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004c18:	2044      	movs	r0, #68	@ 0x44
 8004c1a:	f7fc fb53 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c1e:	2000      	movs	r0, #0
 8004c20:	f7fc fb50 	bl	80012c4 <lcd_wr_xdata>
 8004c24:	23e7      	movs	r3, #231	@ 0xe7
 8004c26:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c2a:	4ba0      	ldr	r3, [pc, #640]	@ (8004eac <lcd_init+0x296c>)
 8004c2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c30:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c32:	4b9e      	ldr	r3, [pc, #632]	@ (8004eac <lcd_init+0x296c>)
 8004c34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c38:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c3a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	4b9b      	ldr	r3, [pc, #620]	@ (8004eb0 <lcd_init+0x2970>)
 8004c42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c44:	4b99      	ldr	r3, [pc, #612]	@ (8004eac <lcd_init+0x296c>)
 8004c46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c4c:	4b97      	ldr	r3, [pc, #604]	@ (8004eac <lcd_init+0x296c>)
 8004c4e:	2280      	movs	r2, #128	@ 0x80
 8004c50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c52:	4b96      	ldr	r3, [pc, #600]	@ (8004eac <lcd_init+0x296c>)
 8004c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c58:	611a      	str	r2, [r3, #16]
}
 8004c5a:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 8004c5c:	2032      	movs	r0, #50	@ 0x32
 8004c5e:	f7fc fb31 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c62:	2000      	movs	r0, #0
 8004c64:	f7fc fb2e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004c68:	2055      	movs	r0, #85	@ 0x55
 8004c6a:	f7fc fb2b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f7fc fb28 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8004c74:	2076      	movs	r0, #118	@ 0x76
 8004c76:	f7fc fb25 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f7fc fb22 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004c80:	2066      	movs	r0, #102	@ 0x66
 8004c82:	f7fc fb1f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7fc fb1c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004c8c:	2067      	movs	r0, #103	@ 0x67
 8004c8e:	f7fc fb19 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f7fc fb16 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004c98:	2067      	movs	r0, #103	@ 0x67
 8004c9a:	f7fc fb13 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7fc fb10 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 8004ca4:	2087      	movs	r0, #135	@ 0x87
 8004ca6:	f7fc fb0d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004caa:	2000      	movs	r0, #0
 8004cac:	f7fc fb0a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004cb0:	2099      	movs	r0, #153	@ 0x99
 8004cb2:	f7fc fb07 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f7fc fb04 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004cbc:	20bb      	movs	r0, #187	@ 0xbb
 8004cbe:	f7fc fb01 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7fc fafe 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004cc8:	2099      	movs	r0, #153	@ 0x99
 8004cca:	f7fc fafb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f7fc faf8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 8004cd4:	2077      	movs	r0, #119	@ 0x77
 8004cd6:	f7fc faf5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f7fc faf2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004ce0:	2044      	movs	r0, #68	@ 0x44
 8004ce2:	f7fc faef 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f7fc faec 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004cec:	2056      	movs	r0, #86	@ 0x56
 8004cee:	f7fc fae9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f7fc fae6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8004cf8:	2023      	movs	r0, #35	@ 0x23
 8004cfa:	f7fc fae3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f7fc fae0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004d04:	2033      	movs	r0, #51	@ 0x33
 8004d06:	f7fc fadd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7fc fada 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004d10:	2045      	movs	r0, #69	@ 0x45
 8004d12:	f7fc fad7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f7fc fad4 	bl	80012c4 <lcd_wr_xdata>
 8004d1c:	23e8      	movs	r3, #232	@ 0xe8
 8004d1e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d22:	4b62      	ldr	r3, [pc, #392]	@ (8004eac <lcd_init+0x296c>)
 8004d24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d28:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d2a:	4b60      	ldr	r3, [pc, #384]	@ (8004eac <lcd_init+0x296c>)
 8004d2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d30:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb0 <lcd_init+0x2970>)
 8004d3a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004eac <lcd_init+0x296c>)
 8004d3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d42:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d44:	4b59      	ldr	r3, [pc, #356]	@ (8004eac <lcd_init+0x296c>)
 8004d46:	2280      	movs	r2, #128	@ 0x80
 8004d48:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d4a:	4b58      	ldr	r3, [pc, #352]	@ (8004eac <lcd_init+0x296c>)
 8004d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d50:	611a      	str	r2, [r3, #16]
}
 8004d52:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7fc fab5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f7fc fab2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004d60:	2099      	movs	r0, #153	@ 0x99
 8004d62:	f7fc faaf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d66:	2000      	movs	r0, #0
 8004d68:	f7fc faac 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 8004d6c:	2087      	movs	r0, #135	@ 0x87
 8004d6e:	f7fc faa9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d72:	2000      	movs	r0, #0
 8004d74:	f7fc faa6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004d78:	2088      	movs	r0, #136	@ 0x88
 8004d7a:	f7fc faa3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f7fc faa0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 8004d84:	2077      	movs	r0, #119	@ 0x77
 8004d86:	f7fc fa9d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7fc fa9a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004d90:	2066      	movs	r0, #102	@ 0x66
 8004d92:	f7fc fa97 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d96:	2000      	movs	r0, #0
 8004d98:	f7fc fa94 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004d9c:	2088      	movs	r0, #136	@ 0x88
 8004d9e:	f7fc fa91 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004da2:	2000      	movs	r0, #0
 8004da4:	f7fc fa8e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 8004da8:	20aa      	movs	r0, #170	@ 0xaa
 8004daa:	f7fc fa8b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dae:	2000      	movs	r0, #0
 8004db0:	f7fc fa88 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004db4:	20bb      	movs	r0, #187	@ 0xbb
 8004db6:	f7fc fa85 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7fc fa82 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004dc0:	2099      	movs	r0, #153	@ 0x99
 8004dc2:	f7fc fa7f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	f7fc fa7c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004dcc:	2066      	movs	r0, #102	@ 0x66
 8004dce:	f7fc fa79 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f7fc fa76 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004dd8:	2055      	movs	r0, #85	@ 0x55
 8004dda:	f7fc fa73 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dde:	2000      	movs	r0, #0
 8004de0:	f7fc fa70 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004de4:	2055      	movs	r0, #85	@ 0x55
 8004de6:	f7fc fa6d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dea:	2000      	movs	r0, #0
 8004dec:	f7fc fa6a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004df0:	2044      	movs	r0, #68	@ 0x44
 8004df2:	f7fc fa67 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004df6:	2000      	movs	r0, #0
 8004df8:	f7fc fa64 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004dfc:	2044      	movs	r0, #68	@ 0x44
 8004dfe:	f7fc fa61 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e02:	2000      	movs	r0, #0
 8004e04:	f7fc fa5e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004e08:	2055      	movs	r0, #85	@ 0x55
 8004e0a:	f7fc fa5b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f7fc fa58 	bl	80012c4 <lcd_wr_xdata>
 8004e14:	23e9      	movs	r3, #233	@ 0xe9
 8004e16:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e1a:	4b24      	ldr	r3, [pc, #144]	@ (8004eac <lcd_init+0x296c>)
 8004e1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e20:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e22:	4b22      	ldr	r3, [pc, #136]	@ (8004eac <lcd_init+0x296c>)
 8004e24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e28:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e2a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb0 <lcd_init+0x2970>)
 8004e32:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e34:	4b1d      	ldr	r3, [pc, #116]	@ (8004eac <lcd_init+0x296c>)
 8004e36:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e3a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eac <lcd_init+0x296c>)
 8004e3e:	2280      	movs	r2, #128	@ 0x80
 8004e40:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e42:	4b1a      	ldr	r3, [pc, #104]	@ (8004eac <lcd_init+0x296c>)
 8004e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e48:	611a      	str	r2, [r3, #16]
}
 8004e4a:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 8004e4c:	20aa      	movs	r0, #170	@ 0xaa
 8004e4e:	f7fc fa39 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7fc fa36 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f7fc fa33 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f7fc fa30 	bl	80012c4 <lcd_wr_xdata>
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e6a:	4b10      	ldr	r3, [pc, #64]	@ (8004eac <lcd_init+0x296c>)
 8004e6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e70:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e72:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <lcd_init+0x296c>)
 8004e74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e78:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e7a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <lcd_init+0x2970>)
 8004e82:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e84:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <lcd_init+0x296c>)
 8004e86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e8a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e8c:	4b07      	ldr	r3, [pc, #28]	@ (8004eac <lcd_init+0x296c>)
 8004e8e:	2280      	movs	r2, #128	@ 0x80
 8004e90:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <lcd_init+0x296c>)
 8004e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e98:	611a      	str	r2, [r3, #16]
}
 8004e9a:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 8004e9c:	20aa      	movs	r0, #170	@ 0xaa
 8004e9e:	f7fc fa11 	bl	80012c4 <lcd_wr_xdata>
 8004ea2:	23cf      	movs	r3, #207	@ 0xcf
 8004ea4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8004ea8:	e004      	b.n	8004eb4 <lcd_init+0x2974>
 8004eaa:	bf00      	nop
 8004eac:	40011000 	.word	0x40011000
 8004eb0:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004eb4:	4bbc      	ldr	r3, [pc, #752]	@ (80051a8 <lcd_init+0x2c68>)
 8004eb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004eba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ebc:	4bba      	ldr	r3, [pc, #744]	@ (80051a8 <lcd_init+0x2c68>)
 8004ebe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ec2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ec4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	4bb8      	ldr	r3, [pc, #736]	@ (80051ac <lcd_init+0x2c6c>)
 8004ecc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ece:	4bb6      	ldr	r3, [pc, #728]	@ (80051a8 <lcd_init+0x2c68>)
 8004ed0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ed4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ed6:	4bb4      	ldr	r3, [pc, #720]	@ (80051a8 <lcd_init+0x2c68>)
 8004ed8:	2280      	movs	r2, #128	@ 0x80
 8004eda:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004edc:	4bb2      	ldr	r3, [pc, #712]	@ (80051a8 <lcd_init+0x2c68>)
 8004ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ee2:	611a      	str	r2, [r3, #16]
}
 8004ee4:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7fc f9ec 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004eec:	2000      	movs	r0, #0
 8004eee:	f7fc f9e9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f7fc f9e6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7fc f9e3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004efe:	2000      	movs	r0, #0
 8004f00:	f7fc f9e0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f04:	2000      	movs	r0, #0
 8004f06:	f7fc f9dd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7fc f9da 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7fc f9d7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f16:	2000      	movs	r0, #0
 8004f18:	f7fc f9d4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	f7fc f9d1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f22:	2000      	movs	r0, #0
 8004f24:	f7fc f9ce 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f28:	2000      	movs	r0, #0
 8004f2a:	f7fc f9cb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f7fc f9c8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f34:	2000      	movs	r0, #0
 8004f36:	f7fc f9c5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f7fc f9c2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f40:	2000      	movs	r0, #0
 8004f42:	f7fc f9bf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f46:	2000      	movs	r0, #0
 8004f48:	f7fc f9bc 	bl	80012c4 <lcd_wr_xdata>
 8004f4c:	23f0      	movs	r3, #240	@ 0xf0
 8004f4e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004f52:	4b95      	ldr	r3, [pc, #596]	@ (80051a8 <lcd_init+0x2c68>)
 8004f54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f58:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004f5a:	4b93      	ldr	r3, [pc, #588]	@ (80051a8 <lcd_init+0x2c68>)
 8004f5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f60:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004f62:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	4b90      	ldr	r3, [pc, #576]	@ (80051ac <lcd_init+0x2c6c>)
 8004f6a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004f6c:	4b8e      	ldr	r3, [pc, #568]	@ (80051a8 <lcd_init+0x2c68>)
 8004f6e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f72:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004f74:	4b8c      	ldr	r3, [pc, #560]	@ (80051a8 <lcd_init+0x2c68>)
 8004f76:	2280      	movs	r2, #128	@ 0x80
 8004f78:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004f7a:	4b8b      	ldr	r3, [pc, #556]	@ (80051a8 <lcd_init+0x2c68>)
 8004f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f80:	611a      	str	r2, [r3, #16]
}
 8004f82:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 8004f84:	2000      	movs	r0, #0
 8004f86:	f7fc f99d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8004f8a:	2050      	movs	r0, #80	@ 0x50
 8004f8c:	f7fc f99a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f90:	2000      	movs	r0, #0
 8004f92:	f7fc f997 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f96:	2000      	movs	r0, #0
 8004f98:	f7fc f994 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7fc f991 	bl	80012c4 <lcd_wr_xdata>
 8004fa2:	23f3      	movs	r3, #243	@ 0xf3
 8004fa4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004fa8:	4b7f      	ldr	r3, [pc, #508]	@ (80051a8 <lcd_init+0x2c68>)
 8004faa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004fb0:	4b7d      	ldr	r3, [pc, #500]	@ (80051a8 <lcd_init+0x2c68>)
 8004fb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004fb8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	4b7b      	ldr	r3, [pc, #492]	@ (80051ac <lcd_init+0x2c6c>)
 8004fc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004fc2:	4b79      	ldr	r3, [pc, #484]	@ (80051a8 <lcd_init+0x2c68>)
 8004fc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004fc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004fca:	4b77      	ldr	r3, [pc, #476]	@ (80051a8 <lcd_init+0x2c68>)
 8004fcc:	2280      	movs	r2, #128	@ 0x80
 8004fce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004fd0:	4b75      	ldr	r3, [pc, #468]	@ (80051a8 <lcd_init+0x2c68>)
 8004fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fd6:	611a      	str	r2, [r3, #16]
}
 8004fd8:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7fc f972 	bl	80012c4 <lcd_wr_xdata>
 8004fe0:	23f9      	movs	r3, #249	@ 0xf9
 8004fe2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004fe6:	4b70      	ldr	r3, [pc, #448]	@ (80051a8 <lcd_init+0x2c68>)
 8004fe8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004fee:	4b6e      	ldr	r3, [pc, #440]	@ (80051a8 <lcd_init+0x2c68>)
 8004ff0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ff4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ff6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80051ac <lcd_init+0x2c6c>)
 8004ffe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005000:	4b69      	ldr	r3, [pc, #420]	@ (80051a8 <lcd_init+0x2c68>)
 8005002:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005006:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005008:	4b67      	ldr	r3, [pc, #412]	@ (80051a8 <lcd_init+0x2c68>)
 800500a:	2280      	movs	r2, #128	@ 0x80
 800500c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800500e:	4b66      	ldr	r3, [pc, #408]	@ (80051a8 <lcd_init+0x2c68>)
 8005010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005014:	611a      	str	r2, [r3, #16]
}
 8005016:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 8005018:	2006      	movs	r0, #6
 800501a:	f7fc f953 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 800501e:	2010      	movs	r0, #16
 8005020:	f7fc f950 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8005024:	2029      	movs	r0, #41	@ 0x29
 8005026:	f7fc f94d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800502a:	2000      	movs	r0, #0
 800502c:	f7fc f94a 	bl	80012c4 <lcd_wr_xdata>
 8005030:	233a      	movs	r3, #58	@ 0x3a
 8005032:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005036:	4b5c      	ldr	r3, [pc, #368]	@ (80051a8 <lcd_init+0x2c68>)
 8005038:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800503c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800503e:	4b5a      	ldr	r3, [pc, #360]	@ (80051a8 <lcd_init+0x2c68>)
 8005040:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005044:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005046:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800504a:	b29a      	uxth	r2, r3
 800504c:	4b57      	ldr	r3, [pc, #348]	@ (80051ac <lcd_init+0x2c6c>)
 800504e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005050:	4b55      	ldr	r3, [pc, #340]	@ (80051a8 <lcd_init+0x2c68>)
 8005052:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005056:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005058:	4b53      	ldr	r3, [pc, #332]	@ (80051a8 <lcd_init+0x2c68>)
 800505a:	2280      	movs	r2, #128	@ 0x80
 800505c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800505e:	4b52      	ldr	r3, [pc, #328]	@ (80051a8 <lcd_init+0x2c68>)
 8005060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005064:	611a      	str	r2, [r3, #16]
}
 8005066:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 8005068:	2055      	movs	r0, #85	@ 0x55
 800506a:	f7fc f92b 	bl	80012c4 <lcd_wr_xdata>
 800506e:	2311      	movs	r3, #17
 8005070:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005074:	4b4c      	ldr	r3, [pc, #304]	@ (80051a8 <lcd_init+0x2c68>)
 8005076:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800507a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800507c:	4b4a      	ldr	r3, [pc, #296]	@ (80051a8 <lcd_init+0x2c68>)
 800507e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005082:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005084:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005088:	b29a      	uxth	r2, r3
 800508a:	4b48      	ldr	r3, [pc, #288]	@ (80051ac <lcd_init+0x2c6c>)
 800508c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800508e:	4b46      	ldr	r3, [pc, #280]	@ (80051a8 <lcd_init+0x2c68>)
 8005090:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005094:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005096:	4b44      	ldr	r3, [pc, #272]	@ (80051a8 <lcd_init+0x2c68>)
 8005098:	2280      	movs	r2, #128	@ 0x80
 800509a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800509c:	4b42      	ldr	r3, [pc, #264]	@ (80051a8 <lcd_init+0x2c68>)
 800509e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050a2:	611a      	str	r2, [r3, #16]
}
 80050a4:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 80050a6:	2064      	movs	r0, #100	@ 0x64
 80050a8:	f002 fefc 	bl	8007ea4 <HAL_Delay>
 80050ac:	2329      	movs	r3, #41	@ 0x29
 80050ae:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80050b2:	4b3d      	ldr	r3, [pc, #244]	@ (80051a8 <lcd_init+0x2c68>)
 80050b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80050ba:	4b3b      	ldr	r3, [pc, #236]	@ (80051a8 <lcd_init+0x2c68>)
 80050bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80050c2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	4b38      	ldr	r3, [pc, #224]	@ (80051ac <lcd_init+0x2c6c>)
 80050ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80050cc:	4b36      	ldr	r3, [pc, #216]	@ (80051a8 <lcd_init+0x2c68>)
 80050ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80050d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80050d4:	4b34      	ldr	r3, [pc, #208]	@ (80051a8 <lcd_init+0x2c68>)
 80050d6:	2280      	movs	r2, #128	@ 0x80
 80050d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80050da:	4b33      	ldr	r3, [pc, #204]	@ (80051a8 <lcd_init+0x2c68>)
 80050dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050e0:	611a      	str	r2, [r3, #16]
}
 80050e2:	bf00      	nop
 80050e4:	2335      	movs	r3, #53	@ 0x35
 80050e6:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80050ea:	4b2f      	ldr	r3, [pc, #188]	@ (80051a8 <lcd_init+0x2c68>)
 80050ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80050f2:	4b2d      	ldr	r3, [pc, #180]	@ (80051a8 <lcd_init+0x2c68>)
 80050f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80050fa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80050fe:	b29a      	uxth	r2, r3
 8005100:	4b2a      	ldr	r3, [pc, #168]	@ (80051ac <lcd_init+0x2c6c>)
 8005102:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005104:	4b28      	ldr	r3, [pc, #160]	@ (80051a8 <lcd_init+0x2c68>)
 8005106:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800510a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800510c:	4b26      	ldr	r3, [pc, #152]	@ (80051a8 <lcd_init+0x2c68>)
 800510e:	2280      	movs	r2, #128	@ 0x80
 8005110:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005112:	4b25      	ldr	r3, [pc, #148]	@ (80051a8 <lcd_init+0x2c68>)
 8005114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005118:	611a      	str	r2, [r3, #16]
}
 800511a:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 800511c:	2000      	movs	r0, #0
 800511e:	f7fc f8d1 	bl	80012c4 <lcd_wr_xdata>
 8005122:	2351      	movs	r3, #81	@ 0x51
 8005124:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005128:	4b1f      	ldr	r3, [pc, #124]	@ (80051a8 <lcd_init+0x2c68>)
 800512a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800512e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005130:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <lcd_init+0x2c68>)
 8005132:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005136:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005138:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800513c:	b29a      	uxth	r2, r3
 800513e:	4b1b      	ldr	r3, [pc, #108]	@ (80051ac <lcd_init+0x2c6c>)
 8005140:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005142:	4b19      	ldr	r3, [pc, #100]	@ (80051a8 <lcd_init+0x2c68>)
 8005144:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005148:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800514a:	4b17      	ldr	r3, [pc, #92]	@ (80051a8 <lcd_init+0x2c68>)
 800514c:	2280      	movs	r2, #128	@ 0x80
 800514e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005150:	4b15      	ldr	r3, [pc, #84]	@ (80051a8 <lcd_init+0x2c68>)
 8005152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005156:	611a      	str	r2, [r3, #16]
}
 8005158:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 800515a:	20ff      	movs	r0, #255	@ 0xff
 800515c:	f7fc f8b2 	bl	80012c4 <lcd_wr_xdata>
 8005160:	2353      	movs	r3, #83	@ 0x53
 8005162:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005166:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <lcd_init+0x2c68>)
 8005168:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800516c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800516e:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <lcd_init+0x2c68>)
 8005170:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005174:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005176:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800517a:	b29a      	uxth	r2, r3
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <lcd_init+0x2c6c>)
 800517e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005180:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <lcd_init+0x2c68>)
 8005182:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005186:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005188:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <lcd_init+0x2c68>)
 800518a:	2280      	movs	r2, #128	@ 0x80
 800518c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800518e:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <lcd_init+0x2c68>)
 8005190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005194:	611a      	str	r2, [r3, #16]
}
 8005196:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 8005198:	202c      	movs	r0, #44	@ 0x2c
 800519a:	f7fc f893 	bl	80012c4 <lcd_wr_xdata>
 800519e:	2355      	movs	r3, #85	@ 0x55
 80051a0:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 80051a4:	e004      	b.n	80051b0 <lcd_init+0x2c70>
 80051a6:	bf00      	nop
 80051a8:	40011000 	.word	0x40011000
 80051ac:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80051b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005224 <lcd_init+0x2ce4>)
 80051b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051b6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80051b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005224 <lcd_init+0x2ce4>)
 80051ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051be:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80051c0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	4b18      	ldr	r3, [pc, #96]	@ (8005228 <lcd_init+0x2ce8>)
 80051c8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80051ca:	4b16      	ldr	r3, [pc, #88]	@ (8005224 <lcd_init+0x2ce4>)
 80051cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80051d0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80051d2:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <lcd_init+0x2ce4>)
 80051d4:	2280      	movs	r2, #128	@ 0x80
 80051d6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80051d8:	4b12      	ldr	r3, [pc, #72]	@ (8005224 <lcd_init+0x2ce4>)
 80051da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051de:	611a      	str	r2, [r3, #16]
}
 80051e0:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 80051e2:	2082      	movs	r0, #130	@ 0x82
 80051e4:	f7fc f86e 	bl	80012c4 <lcd_wr_xdata>
 80051e8:	232c      	movs	r3, #44	@ 0x2c
 80051ea:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <lcd_init+0x2ce4>)
 80051f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051f4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80051f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <lcd_init+0x2ce4>)
 80051f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051fc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80051fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8005202:	b29a      	uxth	r2, r3
 8005204:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <lcd_init+0x2ce8>)
 8005206:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005208:	4b06      	ldr	r3, [pc, #24]	@ (8005224 <lcd_init+0x2ce4>)
 800520a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800520e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005210:	4b04      	ldr	r3, [pc, #16]	@ (8005224 <lcd_init+0x2ce4>)
 8005212:	2280      	movs	r2, #128	@ 0x80
 8005214:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005216:	4b03      	ldr	r3, [pc, #12]	@ (8005224 <lcd_init+0x2ce4>)
 8005218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800521c:	611a      	str	r2, [r3, #16]
}
 800521e:	f002 b8d8 	b.w	80073d2 <lcd_init+0x4e92>
 8005222:	bf00      	nop
 8005224:	40011000 	.word	0x40011000
 8005228:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 800522c:	4bb4      	ldr	r3, [pc, #720]	@ (8005500 <lcd_init+0x2fc0>)
 800522e:	889b      	ldrh	r3, [r3, #4]
 8005230:	f247 7296 	movw	r2, #30614	@ 0x7796
 8005234:	4293      	cmp	r3, r2
 8005236:	f040 82e3 	bne.w	8005800 <lcd_init+0x32c0>
 800523a:	2311      	movs	r3, #17
 800523c:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005240:	4bb0      	ldr	r3, [pc, #704]	@ (8005504 <lcd_init+0x2fc4>)
 8005242:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005246:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005248:	4bae      	ldr	r3, [pc, #696]	@ (8005504 <lcd_init+0x2fc4>)
 800524a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800524e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005250:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8005254:	b29a      	uxth	r2, r3
 8005256:	4bac      	ldr	r3, [pc, #688]	@ (8005508 <lcd_init+0x2fc8>)
 8005258:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800525a:	4baa      	ldr	r3, [pc, #680]	@ (8005504 <lcd_init+0x2fc4>)
 800525c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005260:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005262:	4ba8      	ldr	r3, [pc, #672]	@ (8005504 <lcd_init+0x2fc4>)
 8005264:	2280      	movs	r2, #128	@ 0x80
 8005266:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005268:	4ba6      	ldr	r3, [pc, #664]	@ (8005504 <lcd_init+0x2fc4>)
 800526a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800526e:	611a      	str	r2, [r3, #16]
}
 8005270:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 8005272:	2078      	movs	r0, #120	@ 0x78
 8005274:	f002 fe16 	bl	8007ea4 <HAL_Delay>
 8005278:	2336      	movs	r3, #54	@ 0x36
 800527a:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800527e:	4ba1      	ldr	r3, [pc, #644]	@ (8005504 <lcd_init+0x2fc4>)
 8005280:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005284:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005286:	4b9f      	ldr	r3, [pc, #636]	@ (8005504 <lcd_init+0x2fc4>)
 8005288:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800528c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800528e:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 8005292:	b29a      	uxth	r2, r3
 8005294:	4b9c      	ldr	r3, [pc, #624]	@ (8005508 <lcd_init+0x2fc8>)
 8005296:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005298:	4b9a      	ldr	r3, [pc, #616]	@ (8005504 <lcd_init+0x2fc4>)
 800529a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800529e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80052a0:	4b98      	ldr	r3, [pc, #608]	@ (8005504 <lcd_init+0x2fc4>)
 80052a2:	2280      	movs	r2, #128	@ 0x80
 80052a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80052a6:	4b97      	ldr	r3, [pc, #604]	@ (8005504 <lcd_init+0x2fc4>)
 80052a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ac:	611a      	str	r2, [r3, #16]
}
 80052ae:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 80052b0:	2048      	movs	r0, #72	@ 0x48
 80052b2:	f7fc f807 	bl	80012c4 <lcd_wr_xdata>
 80052b6:	233a      	movs	r3, #58	@ 0x3a
 80052b8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80052bc:	4b91      	ldr	r3, [pc, #580]	@ (8005504 <lcd_init+0x2fc4>)
 80052be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052c2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80052c4:	4b8f      	ldr	r3, [pc, #572]	@ (8005504 <lcd_init+0x2fc4>)
 80052c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052ca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80052cc:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005508 <lcd_init+0x2fc8>)
 80052d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80052d6:	4b8b      	ldr	r3, [pc, #556]	@ (8005504 <lcd_init+0x2fc4>)
 80052d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80052dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80052de:	4b89      	ldr	r3, [pc, #548]	@ (8005504 <lcd_init+0x2fc4>)
 80052e0:	2280      	movs	r2, #128	@ 0x80
 80052e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80052e4:	4b87      	ldr	r3, [pc, #540]	@ (8005504 <lcd_init+0x2fc4>)
 80052e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ea:	611a      	str	r2, [r3, #16]
}
 80052ec:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 80052ee:	2055      	movs	r0, #85	@ 0x55
 80052f0:	f7fb ffe8 	bl	80012c4 <lcd_wr_xdata>
 80052f4:	23f0      	movs	r3, #240	@ 0xf0
 80052f6:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80052fa:	4b82      	ldr	r3, [pc, #520]	@ (8005504 <lcd_init+0x2fc4>)
 80052fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005300:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005302:	4b80      	ldr	r3, [pc, #512]	@ (8005504 <lcd_init+0x2fc4>)
 8005304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005308:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800530a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800530e:	b29a      	uxth	r2, r3
 8005310:	4b7d      	ldr	r3, [pc, #500]	@ (8005508 <lcd_init+0x2fc8>)
 8005312:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005314:	4b7b      	ldr	r3, [pc, #492]	@ (8005504 <lcd_init+0x2fc4>)
 8005316:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800531a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800531c:	4b79      	ldr	r3, [pc, #484]	@ (8005504 <lcd_init+0x2fc4>)
 800531e:	2280      	movs	r2, #128	@ 0x80
 8005320:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005322:	4b78      	ldr	r3, [pc, #480]	@ (8005504 <lcd_init+0x2fc4>)
 8005324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005328:	611a      	str	r2, [r3, #16]
}
 800532a:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 800532c:	20c3      	movs	r0, #195	@ 0xc3
 800532e:	f7fb ffc9 	bl	80012c4 <lcd_wr_xdata>
 8005332:	23f0      	movs	r3, #240	@ 0xf0
 8005334:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005338:	4b72      	ldr	r3, [pc, #456]	@ (8005504 <lcd_init+0x2fc4>)
 800533a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800533e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005340:	4b70      	ldr	r3, [pc, #448]	@ (8005504 <lcd_init+0x2fc4>)
 8005342:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005346:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005348:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 800534c:	b29a      	uxth	r2, r3
 800534e:	4b6e      	ldr	r3, [pc, #440]	@ (8005508 <lcd_init+0x2fc8>)
 8005350:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005352:	4b6c      	ldr	r3, [pc, #432]	@ (8005504 <lcd_init+0x2fc4>)
 8005354:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005358:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800535a:	4b6a      	ldr	r3, [pc, #424]	@ (8005504 <lcd_init+0x2fc4>)
 800535c:	2280      	movs	r2, #128	@ 0x80
 800535e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005360:	4b68      	ldr	r3, [pc, #416]	@ (8005504 <lcd_init+0x2fc4>)
 8005362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005366:	611a      	str	r2, [r3, #16]
}
 8005368:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 800536a:	2096      	movs	r0, #150	@ 0x96
 800536c:	f7fb ffaa 	bl	80012c4 <lcd_wr_xdata>
 8005370:	23b4      	movs	r3, #180	@ 0xb4
 8005372:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005376:	4b63      	ldr	r3, [pc, #396]	@ (8005504 <lcd_init+0x2fc4>)
 8005378:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800537c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800537e:	4b61      	ldr	r3, [pc, #388]	@ (8005504 <lcd_init+0x2fc4>)
 8005380:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005384:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005386:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 800538a:	b29a      	uxth	r2, r3
 800538c:	4b5e      	ldr	r3, [pc, #376]	@ (8005508 <lcd_init+0x2fc8>)
 800538e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005390:	4b5c      	ldr	r3, [pc, #368]	@ (8005504 <lcd_init+0x2fc4>)
 8005392:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005396:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005398:	4b5a      	ldr	r3, [pc, #360]	@ (8005504 <lcd_init+0x2fc4>)
 800539a:	2280      	movs	r2, #128	@ 0x80
 800539c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800539e:	4b59      	ldr	r3, [pc, #356]	@ (8005504 <lcd_init+0x2fc4>)
 80053a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053a4:	611a      	str	r2, [r3, #16]
}
 80053a6:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 80053a8:	2001      	movs	r0, #1
 80053aa:	f7fb ff8b 	bl	80012c4 <lcd_wr_xdata>
 80053ae:	23b6      	movs	r3, #182	@ 0xb6
 80053b0:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80053b4:	4b53      	ldr	r3, [pc, #332]	@ (8005504 <lcd_init+0x2fc4>)
 80053b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053ba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80053bc:	4b51      	ldr	r3, [pc, #324]	@ (8005504 <lcd_init+0x2fc4>)
 80053be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053c2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80053c4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005508 <lcd_init+0x2fc8>)
 80053cc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80053ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005504 <lcd_init+0x2fc4>)
 80053d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80053d4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80053d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005504 <lcd_init+0x2fc4>)
 80053d8:	2280      	movs	r2, #128	@ 0x80
 80053da:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80053dc:	4b49      	ldr	r3, [pc, #292]	@ (8005504 <lcd_init+0x2fc4>)
 80053de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053e2:	611a      	str	r2, [r3, #16]
}
 80053e4:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 80053e6:	200a      	movs	r0, #10
 80053e8:	f7fb ff6c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 80053ec:	20a2      	movs	r0, #162	@ 0xa2
 80053ee:	f7fb ff69 	bl	80012c4 <lcd_wr_xdata>
 80053f2:	23b7      	movs	r3, #183	@ 0xb7
 80053f4:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80053f8:	4b42      	ldr	r3, [pc, #264]	@ (8005504 <lcd_init+0x2fc4>)
 80053fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053fe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005400:	4b40      	ldr	r3, [pc, #256]	@ (8005504 <lcd_init+0x2fc4>)
 8005402:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005406:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005408:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 800540c:	b29a      	uxth	r2, r3
 800540e:	4b3e      	ldr	r3, [pc, #248]	@ (8005508 <lcd_init+0x2fc8>)
 8005410:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005412:	4b3c      	ldr	r3, [pc, #240]	@ (8005504 <lcd_init+0x2fc4>)
 8005414:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005418:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800541a:	4b3a      	ldr	r3, [pc, #232]	@ (8005504 <lcd_init+0x2fc4>)
 800541c:	2280      	movs	r2, #128	@ 0x80
 800541e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005420:	4b38      	ldr	r3, [pc, #224]	@ (8005504 <lcd_init+0x2fc4>)
 8005422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005426:	611a      	str	r2, [r3, #16]
}
 8005428:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 800542a:	20c6      	movs	r0, #198	@ 0xc6
 800542c:	f7fb ff4a 	bl	80012c4 <lcd_wr_xdata>
 8005430:	23b9      	movs	r3, #185	@ 0xb9
 8005432:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005436:	4b33      	ldr	r3, [pc, #204]	@ (8005504 <lcd_init+0x2fc4>)
 8005438:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800543c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800543e:	4b31      	ldr	r3, [pc, #196]	@ (8005504 <lcd_init+0x2fc4>)
 8005440:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005444:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005446:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 800544a:	b29a      	uxth	r2, r3
 800544c:	4b2e      	ldr	r3, [pc, #184]	@ (8005508 <lcd_init+0x2fc8>)
 800544e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005450:	4b2c      	ldr	r3, [pc, #176]	@ (8005504 <lcd_init+0x2fc4>)
 8005452:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005456:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005458:	4b2a      	ldr	r3, [pc, #168]	@ (8005504 <lcd_init+0x2fc4>)
 800545a:	2280      	movs	r2, #128	@ 0x80
 800545c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800545e:	4b29      	ldr	r3, [pc, #164]	@ (8005504 <lcd_init+0x2fc4>)
 8005460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005464:	611a      	str	r2, [r3, #16]
}
 8005466:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8005468:	2002      	movs	r0, #2
 800546a:	f7fb ff2b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 800546e:	20e0      	movs	r0, #224	@ 0xe0
 8005470:	f7fb ff28 	bl	80012c4 <lcd_wr_xdata>
 8005474:	23c0      	movs	r3, #192	@ 0xc0
 8005476:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800547a:	4b22      	ldr	r3, [pc, #136]	@ (8005504 <lcd_init+0x2fc4>)
 800547c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005480:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005482:	4b20      	ldr	r3, [pc, #128]	@ (8005504 <lcd_init+0x2fc4>)
 8005484:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005488:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800548a:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 800548e:	b29a      	uxth	r2, r3
 8005490:	4b1d      	ldr	r3, [pc, #116]	@ (8005508 <lcd_init+0x2fc8>)
 8005492:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005494:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <lcd_init+0x2fc4>)
 8005496:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800549a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800549c:	4b19      	ldr	r3, [pc, #100]	@ (8005504 <lcd_init+0x2fc4>)
 800549e:	2280      	movs	r2, #128	@ 0x80
 80054a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80054a2:	4b18      	ldr	r3, [pc, #96]	@ (8005504 <lcd_init+0x2fc4>)
 80054a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a8:	611a      	str	r2, [r3, #16]
}
 80054aa:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 80054ac:	2080      	movs	r0, #128	@ 0x80
 80054ae:	f7fb ff09 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 80054b2:	2016      	movs	r0, #22
 80054b4:	f7fb ff06 	bl	80012c4 <lcd_wr_xdata>
 80054b8:	23c1      	movs	r3, #193	@ 0xc1
 80054ba:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80054be:	4b11      	ldr	r3, [pc, #68]	@ (8005504 <lcd_init+0x2fc4>)
 80054c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054c4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80054c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005504 <lcd_init+0x2fc4>)
 80054c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80054cc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80054ce:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <lcd_init+0x2fc8>)
 80054d6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80054d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005504 <lcd_init+0x2fc4>)
 80054da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80054de:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80054e0:	4b08      	ldr	r3, [pc, #32]	@ (8005504 <lcd_init+0x2fc4>)
 80054e2:	2280      	movs	r2, #128	@ 0x80
 80054e4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80054e6:	4b07      	ldr	r3, [pc, #28]	@ (8005504 <lcd_init+0x2fc4>)
 80054e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ec:	611a      	str	r2, [r3, #16]
}
 80054ee:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 80054f0:	2019      	movs	r0, #25
 80054f2:	f7fb fee7 	bl	80012c4 <lcd_wr_xdata>
 80054f6:	23c2      	movs	r3, #194	@ 0xc2
 80054f8:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
 80054fc:	e006      	b.n	800550c <lcd_init+0x2fcc>
 80054fe:	bf00      	nop
 8005500:	20000038 	.word	0x20000038
 8005504:	40011000 	.word	0x40011000
 8005508:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800550c:	4bba      	ldr	r3, [pc, #744]	@ (80057f8 <lcd_init+0x32b8>)
 800550e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005512:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005514:	4bb8      	ldr	r3, [pc, #736]	@ (80057f8 <lcd_init+0x32b8>)
 8005516:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800551a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800551c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8005520:	b29a      	uxth	r2, r3
 8005522:	4bb6      	ldr	r3, [pc, #728]	@ (80057fc <lcd_init+0x32bc>)
 8005524:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005526:	4bb4      	ldr	r3, [pc, #720]	@ (80057f8 <lcd_init+0x32b8>)
 8005528:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800552c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800552e:	4bb2      	ldr	r3, [pc, #712]	@ (80057f8 <lcd_init+0x32b8>)
 8005530:	2280      	movs	r2, #128	@ 0x80
 8005532:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005534:	4bb0      	ldr	r3, [pc, #704]	@ (80057f8 <lcd_init+0x32b8>)
 8005536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800553a:	611a      	str	r2, [r3, #16]
}
 800553c:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 800553e:	20a7      	movs	r0, #167	@ 0xa7
 8005540:	f7fb fec0 	bl	80012c4 <lcd_wr_xdata>
 8005544:	23c5      	movs	r3, #197	@ 0xc5
 8005546:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800554a:	4bab      	ldr	r3, [pc, #684]	@ (80057f8 <lcd_init+0x32b8>)
 800554c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005550:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005552:	4ba9      	ldr	r3, [pc, #676]	@ (80057f8 <lcd_init+0x32b8>)
 8005554:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005558:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800555a:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 800555e:	b29a      	uxth	r2, r3
 8005560:	4ba6      	ldr	r3, [pc, #664]	@ (80057fc <lcd_init+0x32bc>)
 8005562:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005564:	4ba4      	ldr	r3, [pc, #656]	@ (80057f8 <lcd_init+0x32b8>)
 8005566:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800556a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800556c:	4ba2      	ldr	r3, [pc, #648]	@ (80057f8 <lcd_init+0x32b8>)
 800556e:	2280      	movs	r2, #128	@ 0x80
 8005570:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005572:	4ba1      	ldr	r3, [pc, #644]	@ (80057f8 <lcd_init+0x32b8>)
 8005574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005578:	611a      	str	r2, [r3, #16]
}
 800557a:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 800557c:	2016      	movs	r0, #22
 800557e:	f7fb fea1 	bl	80012c4 <lcd_wr_xdata>
 8005582:	23e8      	movs	r3, #232	@ 0xe8
 8005584:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005588:	4b9b      	ldr	r3, [pc, #620]	@ (80057f8 <lcd_init+0x32b8>)
 800558a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800558e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005590:	4b99      	ldr	r3, [pc, #612]	@ (80057f8 <lcd_init+0x32b8>)
 8005592:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005596:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005598:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 800559c:	b29a      	uxth	r2, r3
 800559e:	4b97      	ldr	r3, [pc, #604]	@ (80057fc <lcd_init+0x32bc>)
 80055a0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80055a2:	4b95      	ldr	r3, [pc, #596]	@ (80057f8 <lcd_init+0x32b8>)
 80055a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80055a8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80055aa:	4b93      	ldr	r3, [pc, #588]	@ (80057f8 <lcd_init+0x32b8>)
 80055ac:	2280      	movs	r2, #128	@ 0x80
 80055ae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80055b0:	4b91      	ldr	r3, [pc, #580]	@ (80057f8 <lcd_init+0x32b8>)
 80055b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055b6:	611a      	str	r2, [r3, #16]
}
 80055b8:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 80055ba:	2040      	movs	r0, #64	@ 0x40
 80055bc:	f7fb fe82 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 80055c0:	208a      	movs	r0, #138	@ 0x8a
 80055c2:	f7fb fe7f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80055c6:	2000      	movs	r0, #0
 80055c8:	f7fb fe7c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80055cc:	2000      	movs	r0, #0
 80055ce:	f7fb fe79 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80055d2:	2029      	movs	r0, #41	@ 0x29
 80055d4:	f7fb fe76 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 80055d8:	2019      	movs	r0, #25
 80055da:	f7fb fe73 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 80055de:	20a5      	movs	r0, #165	@ 0xa5
 80055e0:	f7fb fe70 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 80055e4:	2033      	movs	r0, #51	@ 0x33
 80055e6:	f7fb fe6d 	bl	80012c4 <lcd_wr_xdata>
 80055ea:	23e0      	movs	r3, #224	@ 0xe0
 80055ec:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80055f0:	4b81      	ldr	r3, [pc, #516]	@ (80057f8 <lcd_init+0x32b8>)
 80055f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80055f8:	4b7f      	ldr	r3, [pc, #508]	@ (80057f8 <lcd_init+0x32b8>)
 80055fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005600:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8005604:	b29a      	uxth	r2, r3
 8005606:	4b7d      	ldr	r3, [pc, #500]	@ (80057fc <lcd_init+0x32bc>)
 8005608:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800560a:	4b7b      	ldr	r3, [pc, #492]	@ (80057f8 <lcd_init+0x32b8>)
 800560c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005610:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005612:	4b79      	ldr	r3, [pc, #484]	@ (80057f8 <lcd_init+0x32b8>)
 8005614:	2280      	movs	r2, #128	@ 0x80
 8005616:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005618:	4b77      	ldr	r3, [pc, #476]	@ (80057f8 <lcd_init+0x32b8>)
 800561a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800561e:	611a      	str	r2, [r3, #16]
}
 8005620:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 8005622:	20f0      	movs	r0, #240	@ 0xf0
 8005624:	f7fb fe4e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8005628:	2007      	movs	r0, #7
 800562a:	f7fb fe4b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 800562e:	200d      	movs	r0, #13
 8005630:	f7fb fe48 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8005634:	2004      	movs	r0, #4
 8005636:	f7fb fe45 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 800563a:	2005      	movs	r0, #5
 800563c:	f7fb fe42 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8005640:	2014      	movs	r0, #20
 8005642:	f7fb fe3f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8005646:	2036      	movs	r0, #54	@ 0x36
 8005648:	f7fb fe3c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 800564c:	2054      	movs	r0, #84	@ 0x54
 800564e:	f7fb fe39 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8005652:	204c      	movs	r0, #76	@ 0x4c
 8005654:	f7fb fe36 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8005658:	2038      	movs	r0, #56	@ 0x38
 800565a:	f7fb fe33 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 800565e:	2013      	movs	r0, #19
 8005660:	f7fb fe30 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8005664:	2014      	movs	r0, #20
 8005666:	f7fb fe2d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 800566a:	202e      	movs	r0, #46	@ 0x2e
 800566c:	f7fb fe2a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8005670:	2034      	movs	r0, #52	@ 0x34
 8005672:	f7fb fe27 	bl	80012c4 <lcd_wr_xdata>
 8005676:	23e1      	movs	r3, #225	@ 0xe1
 8005678:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800567c:	4b5e      	ldr	r3, [pc, #376]	@ (80057f8 <lcd_init+0x32b8>)
 800567e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005682:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005684:	4b5c      	ldr	r3, [pc, #368]	@ (80057f8 <lcd_init+0x32b8>)
 8005686:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800568a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800568c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8005690:	b29a      	uxth	r2, r3
 8005692:	4b5a      	ldr	r3, [pc, #360]	@ (80057fc <lcd_init+0x32bc>)
 8005694:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005696:	4b58      	ldr	r3, [pc, #352]	@ (80057f8 <lcd_init+0x32b8>)
 8005698:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800569c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800569e:	4b56      	ldr	r3, [pc, #344]	@ (80057f8 <lcd_init+0x32b8>)
 80056a0:	2280      	movs	r2, #128	@ 0x80
 80056a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80056a4:	4b54      	ldr	r3, [pc, #336]	@ (80057f8 <lcd_init+0x32b8>)
 80056a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056aa:	611a      	str	r2, [r3, #16]
}
 80056ac:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 80056ae:	20f0      	movs	r0, #240	@ 0xf0
 80056b0:	f7fb fe08 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80056b4:	2010      	movs	r0, #16
 80056b6:	f7fb fe05 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 80056ba:	2014      	movs	r0, #20
 80056bc:	f7fb fe02 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 80056c0:	200e      	movs	r0, #14
 80056c2:	f7fb fdff 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 80056c6:	200c      	movs	r0, #12
 80056c8:	f7fb fdfc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 80056cc:	2008      	movs	r0, #8
 80056ce:	f7fb fdf9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 80056d2:	2035      	movs	r0, #53	@ 0x35
 80056d4:	f7fb fdf6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80056d8:	2044      	movs	r0, #68	@ 0x44
 80056da:	f7fb fdf3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 80056de:	204c      	movs	r0, #76	@ 0x4c
 80056e0:	f7fb fdf0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80056e4:	2026      	movs	r0, #38	@ 0x26
 80056e6:	f7fb fded 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80056ea:	2010      	movs	r0, #16
 80056ec:	f7fb fdea 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 80056f0:	2012      	movs	r0, #18
 80056f2:	f7fb fde7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80056f6:	202c      	movs	r0, #44	@ 0x2c
 80056f8:	f7fb fde4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80056fc:	2032      	movs	r0, #50	@ 0x32
 80056fe:	f7fb fde1 	bl	80012c4 <lcd_wr_xdata>
 8005702:	23f0      	movs	r3, #240	@ 0xf0
 8005704:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005708:	4b3b      	ldr	r3, [pc, #236]	@ (80057f8 <lcd_init+0x32b8>)
 800570a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800570e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005710:	4b39      	ldr	r3, [pc, #228]	@ (80057f8 <lcd_init+0x32b8>)
 8005712:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005716:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005718:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 800571c:	b29a      	uxth	r2, r3
 800571e:	4b37      	ldr	r3, [pc, #220]	@ (80057fc <lcd_init+0x32bc>)
 8005720:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005722:	4b35      	ldr	r3, [pc, #212]	@ (80057f8 <lcd_init+0x32b8>)
 8005724:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005728:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800572a:	4b33      	ldr	r3, [pc, #204]	@ (80057f8 <lcd_init+0x32b8>)
 800572c:	2280      	movs	r2, #128	@ 0x80
 800572e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005730:	4b31      	ldr	r3, [pc, #196]	@ (80057f8 <lcd_init+0x32b8>)
 8005732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005736:	611a      	str	r2, [r3, #16]
}
 8005738:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 800573a:	203c      	movs	r0, #60	@ 0x3c
 800573c:	f7fb fdc2 	bl	80012c4 <lcd_wr_xdata>
 8005740:	23f0      	movs	r3, #240	@ 0xf0
 8005742:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005746:	4b2c      	ldr	r3, [pc, #176]	@ (80057f8 <lcd_init+0x32b8>)
 8005748:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800574c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800574e:	4b2a      	ldr	r3, [pc, #168]	@ (80057f8 <lcd_init+0x32b8>)
 8005750:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005754:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005756:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 800575a:	b29a      	uxth	r2, r3
 800575c:	4b27      	ldr	r3, [pc, #156]	@ (80057fc <lcd_init+0x32bc>)
 800575e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005760:	4b25      	ldr	r3, [pc, #148]	@ (80057f8 <lcd_init+0x32b8>)
 8005762:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005766:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005768:	4b23      	ldr	r3, [pc, #140]	@ (80057f8 <lcd_init+0x32b8>)
 800576a:	2280      	movs	r2, #128	@ 0x80
 800576c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800576e:	4b22      	ldr	r3, [pc, #136]	@ (80057f8 <lcd_init+0x32b8>)
 8005770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005774:	611a      	str	r2, [r3, #16]
}
 8005776:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 8005778:	2069      	movs	r0, #105	@ 0x69
 800577a:	f7fb fda3 	bl	80012c4 <lcd_wr_xdata>

        HAL_Delay(120);
 800577e:	2078      	movs	r0, #120	@ 0x78
 8005780:	f002 fb90 	bl	8007ea4 <HAL_Delay>
 8005784:	2321      	movs	r3, #33	@ 0x21
 8005786:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800578a:	4b1b      	ldr	r3, [pc, #108]	@ (80057f8 <lcd_init+0x32b8>)
 800578c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005790:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005792:	4b19      	ldr	r3, [pc, #100]	@ (80057f8 <lcd_init+0x32b8>)
 8005794:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005798:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800579a:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 800579e:	b29a      	uxth	r2, r3
 80057a0:	4b16      	ldr	r3, [pc, #88]	@ (80057fc <lcd_init+0x32bc>)
 80057a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80057a4:	4b14      	ldr	r3, [pc, #80]	@ (80057f8 <lcd_init+0x32b8>)
 80057a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80057aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80057ac:	4b12      	ldr	r3, [pc, #72]	@ (80057f8 <lcd_init+0x32b8>)
 80057ae:	2280      	movs	r2, #128	@ 0x80
 80057b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80057b2:	4b11      	ldr	r3, [pc, #68]	@ (80057f8 <lcd_init+0x32b8>)
 80057b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057b8:	611a      	str	r2, [r3, #16]
}
 80057ba:	bf00      	nop
 80057bc:	2329      	movs	r3, #41	@ 0x29
 80057be:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80057c2:	4b0d      	ldr	r3, [pc, #52]	@ (80057f8 <lcd_init+0x32b8>)
 80057c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80057ca:	4b0b      	ldr	r3, [pc, #44]	@ (80057f8 <lcd_init+0x32b8>)
 80057cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80057d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80057d2:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	4b08      	ldr	r3, [pc, #32]	@ (80057fc <lcd_init+0x32bc>)
 80057da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80057dc:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <lcd_init+0x32b8>)
 80057de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80057e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80057e4:	4b04      	ldr	r3, [pc, #16]	@ (80057f8 <lcd_init+0x32b8>)
 80057e6:	2280      	movs	r2, #128	@ 0x80
 80057e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80057ea:	4b03      	ldr	r3, [pc, #12]	@ (80057f8 <lcd_init+0x32b8>)
 80057ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057f0:	611a      	str	r2, [r3, #16]
}
 80057f2:	f001 bdee 	b.w	80073d2 <lcd_init+0x4e92>
 80057f6:	bf00      	nop
 80057f8:	40011000 	.word	0x40011000
 80057fc:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 8005800:	4b03      	ldr	r3, [pc, #12]	@ (8005810 <lcd_init+0x32d0>)
 8005802:	889b      	ldrh	r3, [r3, #4]
 8005804:	f245 5210 	movw	r2, #21776	@ 0x5510
 8005808:	4293      	cmp	r3, r2
 800580a:	f040 87b3 	bne.w	8006774 <lcd_init+0x4234>
 800580e:	e001      	b.n	8005814 <lcd_init+0x32d4>
 8005810:	20000038 	.word	0x20000038
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 8005814:	2155      	movs	r1, #85	@ 0x55
 8005816:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 800581a:	f7fb fd77 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 800581e:	21aa      	movs	r1, #170	@ 0xaa
 8005820:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8005824:	f7fb fd72 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005828:	2152      	movs	r1, #82	@ 0x52
 800582a:	f24f 0002 	movw	r0, #61442	@ 0xf002
 800582e:	f7fb fd6d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8005832:	2108      	movs	r1, #8
 8005834:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005838:	f7fb fd68 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 800583c:	2101      	movs	r1, #1
 800583e:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005842:	f7fb fd63 	bl	800130c <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 8005846:	210d      	movs	r1, #13
 8005848:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 800584c:	f7fb fd5e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8005850:	210d      	movs	r1, #13
 8005852:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8005856:	f7fb fd59 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 800585a:	210d      	movs	r1, #13
 800585c:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8005860:	f7fb fd54 	bl	800130c <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 8005864:	2134      	movs	r1, #52	@ 0x34
 8005866:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 800586a:	f7fb fd4f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 800586e:	2134      	movs	r1, #52	@ 0x34
 8005870:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8005874:	f7fb fd4a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 8005878:	2134      	movs	r1, #52	@ 0x34
 800587a:	f24b 6002 	movw	r0, #46594	@ 0xb602
 800587e:	f7fb fd45 	bl	800130c <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 8005882:	210d      	movs	r1, #13
 8005884:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005888:	f7fb fd40 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 800588c:	210d      	movs	r1, #13
 800588e:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8005892:	f7fb fd3b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 8005896:	210d      	movs	r1, #13
 8005898:	f24b 1002 	movw	r0, #45314	@ 0xb102
 800589c:	f7fb fd36 	bl	800130c <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 80058a0:	2134      	movs	r1, #52	@ 0x34
 80058a2:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 80058a6:	f7fb fd31 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 80058aa:	2134      	movs	r1, #52	@ 0x34
 80058ac:	f24b 7001 	movw	r0, #46849	@ 0xb701
 80058b0:	f7fb fd2c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 80058b4:	2134      	movs	r1, #52	@ 0x34
 80058b6:	f24b 7002 	movw	r0, #46850	@ 0xb702
 80058ba:	f7fb fd27 	bl	800130c <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 80058be:	2100      	movs	r1, #0
 80058c0:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 80058c4:	f7fb fd22 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 80058c8:	2100      	movs	r1, #0
 80058ca:	f24b 2001 	movw	r0, #45569	@ 0xb201
 80058ce:	f7fb fd1d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 80058d2:	2100      	movs	r1, #0
 80058d4:	f24b 2002 	movw	r0, #45570	@ 0xb202
 80058d8:	f7fb fd18 	bl	800130c <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 80058dc:	2124      	movs	r1, #36	@ 0x24
 80058de:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 80058e2:	f7fb fd13 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 80058e6:	2124      	movs	r1, #36	@ 0x24
 80058e8:	f64b 0001 	movw	r0, #47105	@ 0xb801
 80058ec:	f7fb fd0e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 80058f0:	2124      	movs	r1, #36	@ 0x24
 80058f2:	f64b 0002 	movw	r0, #47106	@ 0xb802
 80058f6:	f7fb fd09 	bl	800130c <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 80058fa:	2101      	movs	r1, #1
 80058fc:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8005900:	f7fb fd04 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 8005904:	210f      	movs	r1, #15
 8005906:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 800590a:	f7fb fcff 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 800590e:	210f      	movs	r1, #15
 8005910:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8005914:	f7fb fcfa 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 8005918:	210f      	movs	r1, #15
 800591a:	f24b 3002 	movw	r0, #45826	@ 0xb302
 800591e:	f7fb fcf5 	bl	800130c <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 8005922:	2134      	movs	r1, #52	@ 0x34
 8005924:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8005928:	f7fb fcf0 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 800592c:	2134      	movs	r1, #52	@ 0x34
 800592e:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8005932:	f7fb fceb 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 8005936:	2134      	movs	r1, #52	@ 0x34
 8005938:	f64b 1002 	movw	r0, #47362	@ 0xb902
 800593c:	f7fb fce6 	bl	800130c <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8005940:	2108      	movs	r1, #8
 8005942:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8005946:	f7fb fce1 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 800594a:	2108      	movs	r1, #8
 800594c:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8005950:	f7fb fcdc 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 8005954:	2108      	movs	r1, #8
 8005956:	f24b 5002 	movw	r0, #46338	@ 0xb502
 800595a:	f7fb fcd7 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 800595e:	2103      	movs	r1, #3
 8005960:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 8005964:	f7fb fcd2 	bl	800130c <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 8005968:	2124      	movs	r1, #36	@ 0x24
 800596a:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 800596e:	f7fb fccd 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 8005972:	2124      	movs	r1, #36	@ 0x24
 8005974:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8005978:	f7fb fcc8 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 800597c:	2124      	movs	r1, #36	@ 0x24
 800597e:	f64b 2002 	movw	r0, #47618	@ 0xba02
 8005982:	f7fb fcc3 	bl	800130c <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 8005986:	2100      	movs	r1, #0
 8005988:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 800598c:	f7fb fcbe 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 8005990:	2178      	movs	r1, #120	@ 0x78
 8005992:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005996:	f7fb fcb9 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 800599a:	2100      	movs	r1, #0
 800599c:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 80059a0:	f7fb fcb4 	bl	800130c <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 80059a4:	2100      	movs	r1, #0
 80059a6:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 80059aa:	f7fb fcaf 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 80059ae:	2178      	movs	r1, #120	@ 0x78
 80059b0:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 80059b4:	f7fb fcaa 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 80059b8:	2100      	movs	r1, #0
 80059ba:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 80059be:	f7fb fca5 	bl	800130c <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 80059c2:	2100      	movs	r1, #0
 80059c4:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 80059c8:	f7fb fca0 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 80059cc:	2164      	movs	r1, #100	@ 0x64
 80059ce:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 80059d2:	f7fb fc9b 	bl	800130c <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 80059d6:	2100      	movs	r1, #0
 80059d8:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 80059dc:	f7fb fc96 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 80059e0:	2133      	movs	r1, #51	@ 0x33
 80059e2:	f24d 1001 	movw	r0, #53505	@ 0xd101
 80059e6:	f7fb fc91 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 80059ea:	2100      	movs	r1, #0
 80059ec:	f24d 1002 	movw	r0, #53506	@ 0xd102
 80059f0:	f7fb fc8c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 80059f4:	2134      	movs	r1, #52	@ 0x34
 80059f6:	f24d 1003 	movw	r0, #53507	@ 0xd103
 80059fa:	f7fb fc87 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 80059fe:	2100      	movs	r1, #0
 8005a00:	f24d 1004 	movw	r0, #53508	@ 0xd104
 8005a04:	f7fb fc82 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 8005a08:	213a      	movs	r1, #58	@ 0x3a
 8005a0a:	f24d 1005 	movw	r0, #53509	@ 0xd105
 8005a0e:	f7fb fc7d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 8005a12:	2100      	movs	r1, #0
 8005a14:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8005a18:	f7fb fc78 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 8005a1c:	214a      	movs	r1, #74	@ 0x4a
 8005a1e:	f24d 1007 	movw	r0, #53511	@ 0xd107
 8005a22:	f7fb fc73 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 8005a26:	2100      	movs	r1, #0
 8005a28:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8005a2c:	f7fb fc6e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 8005a30:	215c      	movs	r1, #92	@ 0x5c
 8005a32:	f24d 1009 	movw	r0, #53513	@ 0xd109
 8005a36:	f7fb fc69 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005a40:	f7fb fc64 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 8005a44:	2181      	movs	r1, #129	@ 0x81
 8005a46:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005a4a:	f7fb fc5f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 8005a4e:	2100      	movs	r1, #0
 8005a50:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 8005a54:	f7fb fc5a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 8005a58:	21a6      	movs	r1, #166	@ 0xa6
 8005a5a:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8005a5e:	f7fb fc55 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 8005a62:	2100      	movs	r1, #0
 8005a64:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8005a68:	f7fb fc50 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 8005a6c:	21e5      	movs	r1, #229	@ 0xe5
 8005a6e:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 8005a72:	f7fb fc4b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 8005a76:	2101      	movs	r1, #1
 8005a78:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8005a7c:	f7fb fc46 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 8005a80:	2113      	movs	r1, #19
 8005a82:	f24d 1011 	movw	r0, #53521	@ 0xd111
 8005a86:	f7fb fc41 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8005a90:	f7fb fc3c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 8005a94:	2154      	movs	r1, #84	@ 0x54
 8005a96:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8005a9a:	f7fb fc37 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8005aa4:	f7fb fc32 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 8005aa8:	2182      	movs	r1, #130	@ 0x82
 8005aaa:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8005aae:	f7fb fc2d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8005ab8:	f7fb fc28 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 8005abc:	21ca      	movs	r1, #202	@ 0xca
 8005abe:	f24d 1017 	movw	r0, #53527	@ 0xd117
 8005ac2:	f7fb fc23 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8005acc:	f7fb fc1e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	f24d 1019 	movw	r0, #53529	@ 0xd119
 8005ad6:	f7fb fc19 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 8005ada:	2102      	movs	r1, #2
 8005adc:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8005ae0:	f7fb fc14 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8005aea:	f7fb fc0f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 8005aee:	2102      	movs	r1, #2
 8005af0:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 8005af4:	f7fb fc0a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 8005af8:	2134      	movs	r1, #52	@ 0x34
 8005afa:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8005afe:	f7fb fc05 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 8005b02:	2102      	movs	r1, #2
 8005b04:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8005b08:	f7fb fc00 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 8005b0c:	2167      	movs	r1, #103	@ 0x67
 8005b0e:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 8005b12:	f7fb fbfb 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 8005b16:	2102      	movs	r1, #2
 8005b18:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8005b1c:	f7fb fbf6 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 8005b20:	2184      	movs	r1, #132	@ 0x84
 8005b22:	f24d 1021 	movw	r0, #53537	@ 0xd121
 8005b26:	f7fb fbf1 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8005b30:	f7fb fbec 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 8005b34:	21a4      	movs	r1, #164	@ 0xa4
 8005b36:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8005b3a:	f7fb fbe7 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 8005b3e:	2102      	movs	r1, #2
 8005b40:	f24d 1024 	movw	r0, #53540	@ 0xd124
 8005b44:	f7fb fbe2 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005b48:	21b7      	movs	r1, #183	@ 0xb7
 8005b4a:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8005b4e:	f7fb fbdd 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 8005b52:	2102      	movs	r1, #2
 8005b54:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8005b58:	f7fb fbd8 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 8005b5c:	21cf      	movs	r1, #207	@ 0xcf
 8005b5e:	f24d 1027 	movw	r0, #53543	@ 0xd127
 8005b62:	f7fb fbd3 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 8005b66:	2102      	movs	r1, #2
 8005b68:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8005b6c:	f7fb fbce 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 8005b70:	21de      	movs	r1, #222	@ 0xde
 8005b72:	f24d 1029 	movw	r0, #53545	@ 0xd129
 8005b76:	f7fb fbc9 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8005b80:	f7fb fbc4 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 8005b84:	21f2      	movs	r1, #242	@ 0xf2
 8005b86:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8005b8a:	f7fb fbbf 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 8005b8e:	2102      	movs	r1, #2
 8005b90:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 8005b94:	f7fb fbba 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 8005b98:	21fe      	movs	r1, #254	@ 0xfe
 8005b9a:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8005b9e:	f7fb fbb5 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 8005ba2:	2103      	movs	r1, #3
 8005ba4:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8005ba8:	f7fb fbb0 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 8005bac:	2110      	movs	r1, #16
 8005bae:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 8005bb2:	f7fb fbab 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 8005bb6:	2103      	movs	r1, #3
 8005bb8:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8005bbc:	f7fb fba6 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 8005bc0:	2133      	movs	r1, #51	@ 0x33
 8005bc2:	f24d 1031 	movw	r0, #53553	@ 0xd131
 8005bc6:	f7fb fba1 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 8005bca:	2103      	movs	r1, #3
 8005bcc:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8005bd0:	f7fb fb9c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 8005bd4:	216d      	movs	r1, #109	@ 0x6d
 8005bd6:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8005bda:	f7fb fb97 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 8005bde:	2100      	movs	r1, #0
 8005be0:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 8005be4:	f7fb fb92 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 8005be8:	2133      	movs	r1, #51	@ 0x33
 8005bea:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8005bee:	f7fb fb8d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8005bf8:	f7fb fb88 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 8005bfc:	2134      	movs	r1, #52	@ 0x34
 8005bfe:	f24d 2003 	movw	r0, #53763	@ 0xd203
 8005c02:	f7fb fb83 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 8005c06:	2100      	movs	r1, #0
 8005c08:	f24d 2004 	movw	r0, #53764	@ 0xd204
 8005c0c:	f7fb fb7e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 8005c10:	213a      	movs	r1, #58	@ 0x3a
 8005c12:	f24d 2005 	movw	r0, #53765	@ 0xd205
 8005c16:	f7fb fb79 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8005c20:	f7fb fb74 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 8005c24:	214a      	movs	r1, #74	@ 0x4a
 8005c26:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8005c2a:	f7fb fb6f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 8005c2e:	2100      	movs	r1, #0
 8005c30:	f24d 2008 	movw	r0, #53768	@ 0xd208
 8005c34:	f7fb fb6a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 8005c38:	215c      	movs	r1, #92	@ 0x5c
 8005c3a:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8005c3e:	f7fb fb65 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 8005c42:	2100      	movs	r1, #0
 8005c44:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005c48:	f7fb fb60 	bl	800130c <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 8005c4c:	2181      	movs	r1, #129	@ 0x81
 8005c4e:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 8005c52:	f7fb fb5b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 8005c56:	2100      	movs	r1, #0
 8005c58:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8005c5c:	f7fb fb56 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 8005c60:	21a6      	movs	r1, #166	@ 0xa6
 8005c62:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 8005c66:	f7fb fb51 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8005c70:	f7fb fb4c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 8005c74:	21e5      	movs	r1, #229	@ 0xe5
 8005c76:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8005c7a:	f7fb fb47 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 8005c7e:	2101      	movs	r1, #1
 8005c80:	f24d 2010 	movw	r0, #53776	@ 0xd210
 8005c84:	f7fb fb42 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 8005c88:	2113      	movs	r1, #19
 8005c8a:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8005c8e:	f7fb fb3d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 8005c92:	2101      	movs	r1, #1
 8005c94:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8005c98:	f7fb fb38 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 8005c9c:	2154      	movs	r1, #84	@ 0x54
 8005c9e:	f24d 2013 	movw	r0, #53779	@ 0xd213
 8005ca2:	f7fb fb33 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8005cac:	f7fb fb2e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 8005cb0:	2182      	movs	r1, #130	@ 0x82
 8005cb2:	f24d 2015 	movw	r0, #53781	@ 0xd215
 8005cb6:	f7fb fb29 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 8005cba:	2101      	movs	r1, #1
 8005cbc:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8005cc0:	f7fb fb24 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 8005cc4:	21ca      	movs	r1, #202	@ 0xca
 8005cc6:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8005cca:	f7fb fb1f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 8005cce:	2102      	movs	r1, #2
 8005cd0:	f24d 2018 	movw	r0, #53784	@ 0xd218
 8005cd4:	f7fb fb1a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 8005cd8:	2100      	movs	r1, #0
 8005cda:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8005cde:	f7fb fb15 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8005ce8:	f7fb fb10 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 8005cec:	2101      	movs	r1, #1
 8005cee:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 8005cf2:	f7fb fb0b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 8005cf6:	2102      	movs	r1, #2
 8005cf8:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8005cfc:	f7fb fb06 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 8005d00:	2134      	movs	r1, #52	@ 0x34
 8005d02:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 8005d06:	f7fb fb01 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 8005d0a:	2102      	movs	r1, #2
 8005d0c:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8005d10:	f7fb fafc 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 8005d14:	2167      	movs	r1, #103	@ 0x67
 8005d16:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8005d1a:	f7fb faf7 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 8005d1e:	2102      	movs	r1, #2
 8005d20:	f24d 2020 	movw	r0, #53792	@ 0xd220
 8005d24:	f7fb faf2 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 8005d28:	2184      	movs	r1, #132	@ 0x84
 8005d2a:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8005d2e:	f7fb faed 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 8005d32:	2102      	movs	r1, #2
 8005d34:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8005d38:	f7fb fae8 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 8005d3c:	21a4      	movs	r1, #164	@ 0xa4
 8005d3e:	f24d 2023 	movw	r0, #53795	@ 0xd223
 8005d42:	f7fb fae3 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 8005d46:	2102      	movs	r1, #2
 8005d48:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8005d4c:	f7fb fade 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005d50:	21b7      	movs	r1, #183	@ 0xb7
 8005d52:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8005d56:	f7fb fad9 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8005d60:	f7fb fad4 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 8005d64:	21cf      	movs	r1, #207	@ 0xcf
 8005d66:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8005d6a:	f7fb facf 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 8005d6e:	2102      	movs	r1, #2
 8005d70:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8005d74:	f7fb faca 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 8005d78:	21de      	movs	r1, #222	@ 0xde
 8005d7a:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8005d7e:	f7fb fac5 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 8005d82:	2102      	movs	r1, #2
 8005d84:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8005d88:	f7fb fac0 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 8005d8c:	21f2      	movs	r1, #242	@ 0xf2
 8005d8e:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 8005d92:	f7fb fabb 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 8005d96:	2102      	movs	r1, #2
 8005d98:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8005d9c:	f7fb fab6 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 8005da0:	21fe      	movs	r1, #254	@ 0xfe
 8005da2:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 8005da6:	f7fb fab1 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 8005daa:	2103      	movs	r1, #3
 8005dac:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8005db0:	f7fb faac 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 8005db4:	2110      	movs	r1, #16
 8005db6:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8005dba:	f7fb faa7 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 8005dbe:	2103      	movs	r1, #3
 8005dc0:	f24d 2030 	movw	r0, #53808	@ 0xd230
 8005dc4:	f7fb faa2 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 8005dc8:	2133      	movs	r1, #51	@ 0x33
 8005dca:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8005dce:	f7fb fa9d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 8005dd2:	2103      	movs	r1, #3
 8005dd4:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8005dd8:	f7fb fa98 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 8005ddc:	216d      	movs	r1, #109	@ 0x6d
 8005dde:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8005de2:	f7fb fa93 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 8005de6:	2100      	movs	r1, #0
 8005de8:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8005dec:	f7fb fa8e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 8005df0:	2133      	movs	r1, #51	@ 0x33
 8005df2:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8005df6:	f7fb fa89 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8005e00:	f7fb fa84 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 8005e04:	2134      	movs	r1, #52	@ 0x34
 8005e06:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8005e0a:	f7fb fa7f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 8005e0e:	2100      	movs	r1, #0
 8005e10:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8005e14:	f7fb fa7a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 8005e18:	213a      	movs	r1, #58	@ 0x3a
 8005e1a:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8005e1e:	f7fb fa75 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 8005e22:	2100      	movs	r1, #0
 8005e24:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8005e28:	f7fb fa70 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 8005e2c:	214a      	movs	r1, #74	@ 0x4a
 8005e2e:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8005e32:	f7fb fa6b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 8005e36:	2100      	movs	r1, #0
 8005e38:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8005e3c:	f7fb fa66 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 8005e40:	215c      	movs	r1, #92	@ 0x5c
 8005e42:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8005e46:	f7fb fa61 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8005e50:	f7fb fa5c 	bl	800130c <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 8005e54:	2181      	movs	r1, #129	@ 0x81
 8005e56:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8005e5a:	f7fb fa57 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 8005e5e:	2100      	movs	r1, #0
 8005e60:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8005e64:	f7fb fa52 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 8005e68:	21a6      	movs	r1, #166	@ 0xa6
 8005e6a:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8005e6e:	f7fb fa4d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 8005e72:	2100      	movs	r1, #0
 8005e74:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8005e78:	f7fb fa48 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 8005e7c:	21e5      	movs	r1, #229	@ 0xe5
 8005e7e:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8005e82:	f7fb fa43 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 8005e86:	2101      	movs	r1, #1
 8005e88:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8005e8c:	f7fb fa3e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 8005e90:	2113      	movs	r1, #19
 8005e92:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8005e96:	f7fb fa39 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8005ea0:	f7fb fa34 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 8005ea4:	2154      	movs	r1, #84	@ 0x54
 8005ea6:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8005eaa:	f7fb fa2f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 8005eae:	2101      	movs	r1, #1
 8005eb0:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8005eb4:	f7fb fa2a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 8005eb8:	2182      	movs	r1, #130	@ 0x82
 8005eba:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8005ebe:	f7fb fa25 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8005ec8:	f7fb fa20 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 8005ecc:	21ca      	movs	r1, #202	@ 0xca
 8005ece:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8005ed2:	f7fb fa1b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 8005ed6:	2102      	movs	r1, #2
 8005ed8:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8005edc:	f7fb fa16 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8005ee6:	f7fb fa11 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 8005eea:	2102      	movs	r1, #2
 8005eec:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8005ef0:	f7fb fa0c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8005efa:	f7fb fa07 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 8005efe:	2102      	movs	r1, #2
 8005f00:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8005f04:	f7fb fa02 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 8005f08:	2134      	movs	r1, #52	@ 0x34
 8005f0a:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8005f0e:	f7fb f9fd 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 8005f12:	2102      	movs	r1, #2
 8005f14:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8005f18:	f7fb f9f8 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 8005f1c:	2167      	movs	r1, #103	@ 0x67
 8005f1e:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8005f22:	f7fb f9f3 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 8005f26:	2102      	movs	r1, #2
 8005f28:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8005f2c:	f7fb f9ee 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 8005f30:	2184      	movs	r1, #132	@ 0x84
 8005f32:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8005f36:	f7fb f9e9 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 8005f3a:	2102      	movs	r1, #2
 8005f3c:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8005f40:	f7fb f9e4 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 8005f44:	21a4      	movs	r1, #164	@ 0xa4
 8005f46:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8005f4a:	f7fb f9df 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 8005f4e:	2102      	movs	r1, #2
 8005f50:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8005f54:	f7fb f9da 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 8005f58:	21b7      	movs	r1, #183	@ 0xb7
 8005f5a:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8005f5e:	f7fb f9d5 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 8005f62:	2102      	movs	r1, #2
 8005f64:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8005f68:	f7fb f9d0 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 8005f6c:	21cf      	movs	r1, #207	@ 0xcf
 8005f6e:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8005f72:	f7fb f9cb 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 8005f76:	2102      	movs	r1, #2
 8005f78:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8005f7c:	f7fb f9c6 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 8005f80:	21de      	movs	r1, #222	@ 0xde
 8005f82:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8005f86:	f7fb f9c1 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8005f90:	f7fb f9bc 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 8005f94:	21f2      	movs	r1, #242	@ 0xf2
 8005f96:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8005f9a:	f7fb f9b7 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8005fa4:	f7fb f9b2 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 8005fa8:	21fe      	movs	r1, #254	@ 0xfe
 8005faa:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8005fae:	f7fb f9ad 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 8005fb2:	2103      	movs	r1, #3
 8005fb4:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8005fb8:	f7fb f9a8 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 8005fbc:	2110      	movs	r1, #16
 8005fbe:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8005fc2:	f7fb f9a3 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 8005fc6:	2103      	movs	r1, #3
 8005fc8:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8005fcc:	f7fb f99e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 8005fd0:	2133      	movs	r1, #51	@ 0x33
 8005fd2:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8005fd6:	f7fb f999 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 8005fda:	2103      	movs	r1, #3
 8005fdc:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8005fe0:	f7fb f994 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 8005fe4:	216d      	movs	r1, #109	@ 0x6d
 8005fe6:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8005fea:	f7fb f98f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 8005fee:	2100      	movs	r1, #0
 8005ff0:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8005ff4:	f7fb f98a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 8005ff8:	2133      	movs	r1, #51	@ 0x33
 8005ffa:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8005ffe:	f7fb f985 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 8006002:	2100      	movs	r1, #0
 8006004:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8006008:	f7fb f980 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 800600c:	2134      	movs	r1, #52	@ 0x34
 800600e:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8006012:	f7fb f97b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 8006016:	2100      	movs	r1, #0
 8006018:	f24d 4004 	movw	r0, #54276	@ 0xd404
 800601c:	f7fb f976 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 8006020:	213a      	movs	r1, #58	@ 0x3a
 8006022:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8006026:	f7fb f971 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 800602a:	2100      	movs	r1, #0
 800602c:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8006030:	f7fb f96c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 8006034:	214a      	movs	r1, #74	@ 0x4a
 8006036:	f24d 4007 	movw	r0, #54279	@ 0xd407
 800603a:	f7fb f967 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 800603e:	2100      	movs	r1, #0
 8006040:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8006044:	f7fb f962 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8006048:	215c      	movs	r1, #92	@ 0x5c
 800604a:	f24d 4009 	movw	r0, #54281	@ 0xd409
 800604e:	f7fb f95d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 8006052:	2100      	movs	r1, #0
 8006054:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8006058:	f7fb f958 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 800605c:	2181      	movs	r1, #129	@ 0x81
 800605e:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8006062:	f7fb f953 	bl	800130c <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 8006066:	2100      	movs	r1, #0
 8006068:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 800606c:	f7fb f94e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 8006070:	21a6      	movs	r1, #166	@ 0xa6
 8006072:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8006076:	f7fb f949 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 800607a:	2100      	movs	r1, #0
 800607c:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8006080:	f7fb f944 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 8006084:	21e5      	movs	r1, #229	@ 0xe5
 8006086:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 800608a:	f7fb f93f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 800608e:	2101      	movs	r1, #1
 8006090:	f24d 4010 	movw	r0, #54288	@ 0xd410
 8006094:	f7fb f93a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 8006098:	2113      	movs	r1, #19
 800609a:	f24d 4011 	movw	r0, #54289	@ 0xd411
 800609e:	f7fb f935 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 80060a2:	2101      	movs	r1, #1
 80060a4:	f24d 4012 	movw	r0, #54290	@ 0xd412
 80060a8:	f7fb f930 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 80060ac:	2154      	movs	r1, #84	@ 0x54
 80060ae:	f24d 4013 	movw	r0, #54291	@ 0xd413
 80060b2:	f7fb f92b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 80060b6:	2101      	movs	r1, #1
 80060b8:	f24d 4014 	movw	r0, #54292	@ 0xd414
 80060bc:	f7fb f926 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 80060c0:	2182      	movs	r1, #130	@ 0x82
 80060c2:	f24d 4015 	movw	r0, #54293	@ 0xd415
 80060c6:	f7fb f921 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 80060ca:	2101      	movs	r1, #1
 80060cc:	f24d 4016 	movw	r0, #54294	@ 0xd416
 80060d0:	f7fb f91c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 80060d4:	21ca      	movs	r1, #202	@ 0xca
 80060d6:	f24d 4017 	movw	r0, #54295	@ 0xd417
 80060da:	f7fb f917 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 80060de:	2102      	movs	r1, #2
 80060e0:	f24d 4018 	movw	r0, #54296	@ 0xd418
 80060e4:	f7fb f912 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 80060e8:	2100      	movs	r1, #0
 80060ea:	f24d 4019 	movw	r0, #54297	@ 0xd419
 80060ee:	f7fb f90d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 80060f2:	2102      	movs	r1, #2
 80060f4:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 80060f8:	f7fb f908 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 80060fc:	2101      	movs	r1, #1
 80060fe:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8006102:	f7fb f903 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 8006106:	2102      	movs	r1, #2
 8006108:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 800610c:	f7fb f8fe 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 8006110:	2134      	movs	r1, #52	@ 0x34
 8006112:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 8006116:	f7fb f8f9 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 800611a:	2102      	movs	r1, #2
 800611c:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8006120:	f7fb f8f4 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 8006124:	2167      	movs	r1, #103	@ 0x67
 8006126:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 800612a:	f7fb f8ef 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 800612e:	2102      	movs	r1, #2
 8006130:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8006134:	f7fb f8ea 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 8006138:	2184      	movs	r1, #132	@ 0x84
 800613a:	f24d 4021 	movw	r0, #54305	@ 0xd421
 800613e:	f7fb f8e5 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 8006142:	2102      	movs	r1, #2
 8006144:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8006148:	f7fb f8e0 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 800614c:	21a4      	movs	r1, #164	@ 0xa4
 800614e:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8006152:	f7fb f8db 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 8006156:	2102      	movs	r1, #2
 8006158:	f24d 4024 	movw	r0, #54308	@ 0xd424
 800615c:	f7fb f8d6 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 8006160:	21b7      	movs	r1, #183	@ 0xb7
 8006162:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8006166:	f7fb f8d1 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 800616a:	2102      	movs	r1, #2
 800616c:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8006170:	f7fb f8cc 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 8006174:	21cf      	movs	r1, #207	@ 0xcf
 8006176:	f24d 4027 	movw	r0, #54311	@ 0xd427
 800617a:	f7fb f8c7 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 800617e:	2102      	movs	r1, #2
 8006180:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8006184:	f7fb f8c2 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 8006188:	21de      	movs	r1, #222	@ 0xde
 800618a:	f24d 4029 	movw	r0, #54313	@ 0xd429
 800618e:	f7fb f8bd 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 8006192:	2102      	movs	r1, #2
 8006194:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8006198:	f7fb f8b8 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 800619c:	21f2      	movs	r1, #242	@ 0xf2
 800619e:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 80061a2:	f7fb f8b3 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 80061a6:	2102      	movs	r1, #2
 80061a8:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 80061ac:	f7fb f8ae 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 80061b0:	21fe      	movs	r1, #254	@ 0xfe
 80061b2:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 80061b6:	f7fb f8a9 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 80061ba:	2103      	movs	r1, #3
 80061bc:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 80061c0:	f7fb f8a4 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 80061c4:	2110      	movs	r1, #16
 80061c6:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 80061ca:	f7fb f89f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 80061ce:	2103      	movs	r1, #3
 80061d0:	f24d 4030 	movw	r0, #54320	@ 0xd430
 80061d4:	f7fb f89a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 80061d8:	2133      	movs	r1, #51	@ 0x33
 80061da:	f24d 4031 	movw	r0, #54321	@ 0xd431
 80061de:	f7fb f895 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 80061e2:	2103      	movs	r1, #3
 80061e4:	f24d 4032 	movw	r0, #54322	@ 0xd432
 80061e8:	f7fb f890 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 80061ec:	216d      	movs	r1, #109	@ 0x6d
 80061ee:	f24d 4033 	movw	r0, #54323	@ 0xd433
 80061f2:	f7fb f88b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 80061f6:	2100      	movs	r1, #0
 80061f8:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 80061fc:	f7fb f886 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 8006200:	2133      	movs	r1, #51	@ 0x33
 8006202:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8006206:	f7fb f881 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 800620a:	2100      	movs	r1, #0
 800620c:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8006210:	f7fb f87c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 8006214:	2134      	movs	r1, #52	@ 0x34
 8006216:	f24d 5003 	movw	r0, #54531	@ 0xd503
 800621a:	f7fb f877 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 800621e:	2100      	movs	r1, #0
 8006220:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8006224:	f7fb f872 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 8006228:	213a      	movs	r1, #58	@ 0x3a
 800622a:	f24d 5005 	movw	r0, #54533	@ 0xd505
 800622e:	f7fb f86d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 8006232:	2100      	movs	r1, #0
 8006234:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8006238:	f7fb f868 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 800623c:	214a      	movs	r1, #74	@ 0x4a
 800623e:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8006242:	f7fb f863 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 8006246:	2100      	movs	r1, #0
 8006248:	f24d 5008 	movw	r0, #54536	@ 0xd508
 800624c:	f7fb f85e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8006250:	215c      	movs	r1, #92	@ 0x5c
 8006252:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8006256:	f7fb f859 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 800625a:	2100      	movs	r1, #0
 800625c:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8006260:	f7fb f854 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 8006264:	2181      	movs	r1, #129	@ 0x81
 8006266:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 800626a:	f7fb f84f 	bl	800130c <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 800626e:	2100      	movs	r1, #0
 8006270:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8006274:	f7fb f84a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 8006278:	21a6      	movs	r1, #166	@ 0xa6
 800627a:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 800627e:	f7fb f845 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 8006282:	2100      	movs	r1, #0
 8006284:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8006288:	f7fb f840 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 800628c:	21e5      	movs	r1, #229	@ 0xe5
 800628e:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 8006292:	f7fb f83b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 8006296:	2101      	movs	r1, #1
 8006298:	f24d 5010 	movw	r0, #54544	@ 0xd510
 800629c:	f7fb f836 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 80062a0:	2113      	movs	r1, #19
 80062a2:	f24d 5011 	movw	r0, #54545	@ 0xd511
 80062a6:	f7fb f831 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 80062aa:	2101      	movs	r1, #1
 80062ac:	f24d 5012 	movw	r0, #54546	@ 0xd512
 80062b0:	f7fb f82c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 80062b4:	2154      	movs	r1, #84	@ 0x54
 80062b6:	f24d 5013 	movw	r0, #54547	@ 0xd513
 80062ba:	f7fb f827 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 80062be:	2101      	movs	r1, #1
 80062c0:	f24d 5014 	movw	r0, #54548	@ 0xd514
 80062c4:	f7fb f822 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 80062c8:	2182      	movs	r1, #130	@ 0x82
 80062ca:	f24d 5015 	movw	r0, #54549	@ 0xd515
 80062ce:	f7fb f81d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 80062d2:	2101      	movs	r1, #1
 80062d4:	f24d 5016 	movw	r0, #54550	@ 0xd516
 80062d8:	f7fb f818 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 80062dc:	21ca      	movs	r1, #202	@ 0xca
 80062de:	f24d 5017 	movw	r0, #54551	@ 0xd517
 80062e2:	f7fb f813 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 80062e6:	2102      	movs	r1, #2
 80062e8:	f24d 5018 	movw	r0, #54552	@ 0xd518
 80062ec:	f7fb f80e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 80062f0:	2100      	movs	r1, #0
 80062f2:	f24d 5019 	movw	r0, #54553	@ 0xd519
 80062f6:	f7fb f809 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 80062fa:	2102      	movs	r1, #2
 80062fc:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8006300:	f7fb f804 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 8006304:	2101      	movs	r1, #1
 8006306:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 800630a:	f7fa ffff 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 800630e:	2102      	movs	r1, #2
 8006310:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8006314:	f7fa fffa 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 8006318:	2134      	movs	r1, #52	@ 0x34
 800631a:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 800631e:	f7fa fff5 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 8006322:	2102      	movs	r1, #2
 8006324:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8006328:	f7fa fff0 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 800632c:	2167      	movs	r1, #103	@ 0x67
 800632e:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8006332:	f7fa ffeb 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 8006336:	2102      	movs	r1, #2
 8006338:	f24d 5020 	movw	r0, #54560	@ 0xd520
 800633c:	f7fa ffe6 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 8006340:	2184      	movs	r1, #132	@ 0x84
 8006342:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8006346:	f7fa ffe1 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 800634a:	2102      	movs	r1, #2
 800634c:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8006350:	f7fa ffdc 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 8006354:	21a4      	movs	r1, #164	@ 0xa4
 8006356:	f24d 5023 	movw	r0, #54563	@ 0xd523
 800635a:	f7fa ffd7 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 800635e:	2102      	movs	r1, #2
 8006360:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8006364:	f7fa ffd2 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 8006368:	21b7      	movs	r1, #183	@ 0xb7
 800636a:	f24d 5025 	movw	r0, #54565	@ 0xd525
 800636e:	f7fa ffcd 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 8006372:	2102      	movs	r1, #2
 8006374:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8006378:	f7fa ffc8 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 800637c:	21cf      	movs	r1, #207	@ 0xcf
 800637e:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8006382:	f7fa ffc3 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 8006386:	2102      	movs	r1, #2
 8006388:	f24d 5028 	movw	r0, #54568	@ 0xd528
 800638c:	f7fa ffbe 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 8006390:	21de      	movs	r1, #222	@ 0xde
 8006392:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8006396:	f7fa ffb9 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 800639a:	2102      	movs	r1, #2
 800639c:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 80063a0:	f7fa ffb4 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 80063a4:	21f2      	movs	r1, #242	@ 0xf2
 80063a6:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 80063aa:	f7fa ffaf 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 80063ae:	2102      	movs	r1, #2
 80063b0:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 80063b4:	f7fa ffaa 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 80063b8:	21fe      	movs	r1, #254	@ 0xfe
 80063ba:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 80063be:	f7fa ffa5 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 80063c2:	2103      	movs	r1, #3
 80063c4:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 80063c8:	f7fa ffa0 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 80063cc:	2110      	movs	r1, #16
 80063ce:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 80063d2:	f7fa ff9b 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 80063d6:	2103      	movs	r1, #3
 80063d8:	f24d 5030 	movw	r0, #54576	@ 0xd530
 80063dc:	f7fa ff96 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 80063e0:	2133      	movs	r1, #51	@ 0x33
 80063e2:	f24d 5031 	movw	r0, #54577	@ 0xd531
 80063e6:	f7fa ff91 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 80063ea:	2103      	movs	r1, #3
 80063ec:	f24d 5032 	movw	r0, #54578	@ 0xd532
 80063f0:	f7fa ff8c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 80063f4:	216d      	movs	r1, #109	@ 0x6d
 80063f6:	f24d 5033 	movw	r0, #54579	@ 0xd533
 80063fa:	f7fa ff87 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 80063fe:	2100      	movs	r1, #0
 8006400:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8006404:	f7fa ff82 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 8006408:	2133      	movs	r1, #51	@ 0x33
 800640a:	f24d 6001 	movw	r0, #54785	@ 0xd601
 800640e:	f7fa ff7d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 8006412:	2100      	movs	r1, #0
 8006414:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8006418:	f7fa ff78 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 800641c:	2134      	movs	r1, #52	@ 0x34
 800641e:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8006422:	f7fa ff73 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 8006426:	2100      	movs	r1, #0
 8006428:	f24d 6004 	movw	r0, #54788	@ 0xd604
 800642c:	f7fa ff6e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 8006430:	213a      	movs	r1, #58	@ 0x3a
 8006432:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8006436:	f7fa ff69 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 800643a:	2100      	movs	r1, #0
 800643c:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8006440:	f7fa ff64 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 8006444:	214a      	movs	r1, #74	@ 0x4a
 8006446:	f24d 6007 	movw	r0, #54791	@ 0xd607
 800644a:	f7fa ff5f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 800644e:	2100      	movs	r1, #0
 8006450:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8006454:	f7fa ff5a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8006458:	215c      	movs	r1, #92	@ 0x5c
 800645a:	f24d 6009 	movw	r0, #54793	@ 0xd609
 800645e:	f7fa ff55 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 8006462:	2100      	movs	r1, #0
 8006464:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8006468:	f7fa ff50 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 800646c:	2181      	movs	r1, #129	@ 0x81
 800646e:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8006472:	f7fa ff4b 	bl	800130c <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 8006476:	2100      	movs	r1, #0
 8006478:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 800647c:	f7fa ff46 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 8006480:	21a6      	movs	r1, #166	@ 0xa6
 8006482:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8006486:	f7fa ff41 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 800648a:	2100      	movs	r1, #0
 800648c:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8006490:	f7fa ff3c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 8006494:	21e5      	movs	r1, #229	@ 0xe5
 8006496:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 800649a:	f7fa ff37 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 800649e:	2101      	movs	r1, #1
 80064a0:	f24d 6010 	movw	r0, #54800	@ 0xd610
 80064a4:	f7fa ff32 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 80064a8:	2113      	movs	r1, #19
 80064aa:	f24d 6011 	movw	r0, #54801	@ 0xd611
 80064ae:	f7fa ff2d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 80064b2:	2101      	movs	r1, #1
 80064b4:	f24d 6012 	movw	r0, #54802	@ 0xd612
 80064b8:	f7fa ff28 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 80064bc:	2154      	movs	r1, #84	@ 0x54
 80064be:	f24d 6013 	movw	r0, #54803	@ 0xd613
 80064c2:	f7fa ff23 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 80064c6:	2101      	movs	r1, #1
 80064c8:	f24d 6014 	movw	r0, #54804	@ 0xd614
 80064cc:	f7fa ff1e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 80064d0:	2182      	movs	r1, #130	@ 0x82
 80064d2:	f24d 6015 	movw	r0, #54805	@ 0xd615
 80064d6:	f7fa ff19 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 80064da:	2101      	movs	r1, #1
 80064dc:	f24d 6016 	movw	r0, #54806	@ 0xd616
 80064e0:	f7fa ff14 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 80064e4:	21ca      	movs	r1, #202	@ 0xca
 80064e6:	f24d 6017 	movw	r0, #54807	@ 0xd617
 80064ea:	f7fa ff0f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 80064ee:	2102      	movs	r1, #2
 80064f0:	f24d 6018 	movw	r0, #54808	@ 0xd618
 80064f4:	f7fa ff0a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 80064f8:	2100      	movs	r1, #0
 80064fa:	f24d 6019 	movw	r0, #54809	@ 0xd619
 80064fe:	f7fa ff05 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 8006502:	2102      	movs	r1, #2
 8006504:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8006508:	f7fa ff00 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 800650c:	2101      	movs	r1, #1
 800650e:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8006512:	f7fa fefb 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 8006516:	2102      	movs	r1, #2
 8006518:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 800651c:	f7fa fef6 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8006520:	2134      	movs	r1, #52	@ 0x34
 8006522:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8006526:	f7fa fef1 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 800652a:	2102      	movs	r1, #2
 800652c:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8006530:	f7fa feec 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 8006534:	2167      	movs	r1, #103	@ 0x67
 8006536:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 800653a:	f7fa fee7 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 800653e:	2102      	movs	r1, #2
 8006540:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8006544:	f7fa fee2 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8006548:	2184      	movs	r1, #132	@ 0x84
 800654a:	f24d 6021 	movw	r0, #54817	@ 0xd621
 800654e:	f7fa fedd 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 8006552:	2102      	movs	r1, #2
 8006554:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8006558:	f7fa fed8 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 800655c:	21a4      	movs	r1, #164	@ 0xa4
 800655e:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8006562:	f7fa fed3 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 8006566:	2102      	movs	r1, #2
 8006568:	f24d 6024 	movw	r0, #54820	@ 0xd624
 800656c:	f7fa fece 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8006570:	21b7      	movs	r1, #183	@ 0xb7
 8006572:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8006576:	f7fa fec9 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 800657a:	2102      	movs	r1, #2
 800657c:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8006580:	f7fa fec4 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 8006584:	21cf      	movs	r1, #207	@ 0xcf
 8006586:	f24d 6027 	movw	r0, #54823	@ 0xd627
 800658a:	f7fa febf 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 800658e:	2102      	movs	r1, #2
 8006590:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8006594:	f7fa feba 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 8006598:	21de      	movs	r1, #222	@ 0xde
 800659a:	f24d 6029 	movw	r0, #54825	@ 0xd629
 800659e:	f7fa feb5 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 80065a2:	2102      	movs	r1, #2
 80065a4:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 80065a8:	f7fa feb0 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 80065ac:	21f2      	movs	r1, #242	@ 0xf2
 80065ae:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 80065b2:	f7fa feab 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 80065b6:	2102      	movs	r1, #2
 80065b8:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 80065bc:	f7fa fea6 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 80065c0:	21fe      	movs	r1, #254	@ 0xfe
 80065c2:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 80065c6:	f7fa fea1 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 80065ca:	2103      	movs	r1, #3
 80065cc:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 80065d0:	f7fa fe9c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 80065d4:	2110      	movs	r1, #16
 80065d6:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 80065da:	f7fa fe97 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 80065de:	2103      	movs	r1, #3
 80065e0:	f24d 6030 	movw	r0, #54832	@ 0xd630
 80065e4:	f7fa fe92 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 80065e8:	2133      	movs	r1, #51	@ 0x33
 80065ea:	f24d 6031 	movw	r0, #54833	@ 0xd631
 80065ee:	f7fa fe8d 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 80065f2:	2103      	movs	r1, #3
 80065f4:	f24d 6032 	movw	r0, #54834	@ 0xd632
 80065f8:	f7fa fe88 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 80065fc:	216d      	movs	r1, #109	@ 0x6d
 80065fe:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8006602:	f7fa fe83 	bl	800130c <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 8006606:	2155      	movs	r1, #85	@ 0x55
 8006608:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 800660c:	f7fa fe7e 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8006610:	21aa      	movs	r1, #170	@ 0xaa
 8006612:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8006616:	f7fa fe79 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 800661a:	2152      	movs	r1, #82	@ 0x52
 800661c:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8006620:	f7fa fe74 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8006624:	2108      	movs	r1, #8
 8006626:	f24f 0003 	movw	r0, #61443	@ 0xf003
 800662a:	f7fa fe6f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 800662e:	2100      	movs	r1, #0
 8006630:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8006634:	f7fa fe6a 	bl	800130c <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8006638:	21cc      	movs	r1, #204	@ 0xcc
 800663a:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 800663e:	f7fa fe65 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 8006642:	2100      	movs	r1, #0
 8006644:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8006648:	f7fa fe60 	bl	800130c <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 800664c:	2105      	movs	r1, #5
 800664e:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8006652:	f7fa fe5b 	bl	800130c <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 8006656:	2170      	movs	r1, #112	@ 0x70
 8006658:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 800665c:	f7fa fe56 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8006660:	2170      	movs	r1, #112	@ 0x70
 8006662:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8006666:	f7fa fe51 	bl	800130c <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 800666a:	2101      	movs	r1, #1
 800666c:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8006670:	f7fa fe4c 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 8006674:	2103      	movs	r1, #3
 8006676:	f64b 0001 	movw	r0, #47105	@ 0xb801
 800667a:	f7fa fe47 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 800667e:	2103      	movs	r1, #3
 8006680:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8006684:	f7fa fe42 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 8006688:	2103      	movs	r1, #3
 800668a:	f64b 0003 	movw	r0, #47107	@ 0xb803
 800668e:	f7fa fe3d 	bl	800130c <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 8006692:	2102      	movs	r1, #2
 8006694:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8006698:	f7fa fe38 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 800669c:	2100      	movs	r1, #0
 800669e:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 80066a2:	f7fa fe33 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 80066a6:	2100      	movs	r1, #0
 80066a8:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 80066ac:	f7fa fe2e 	bl	800130c <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 80066b0:	21d0      	movs	r1, #208	@ 0xd0
 80066b2:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 80066b6:	f7fa fe29 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 80066ba:	2102      	movs	r1, #2
 80066bc:	f64c 1001 	movw	r0, #51457	@ 0xc901
 80066c0:	f7fa fe24 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 80066c4:	2150      	movs	r1, #80	@ 0x50
 80066c6:	f64c 1002 	movw	r0, #51458	@ 0xc902
 80066ca:	f7fa fe1f 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 80066ce:	2150      	movs	r1, #80	@ 0x50
 80066d0:	f64c 1003 	movw	r0, #51459	@ 0xc903
 80066d4:	f7fa fe1a 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 80066d8:	2150      	movs	r1, #80	@ 0x50
 80066da:	f64c 1004 	movw	r0, #51460	@ 0xc904
 80066de:	f7fa fe15 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 80066e2:	2100      	movs	r1, #0
 80066e4:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 80066e8:	f7fa fe10 	bl	800130c <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 80066ec:	2155      	movs	r1, #85	@ 0x55
 80066ee:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 80066f2:	f7fa fe0b 	bl	800130c <lcd_write_reg>
 80066f6:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80066fa:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066fe:	4b1b      	ldr	r3, [pc, #108]	@ (800676c <lcd_init+0x422c>)
 8006700:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006704:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006706:	4b19      	ldr	r3, [pc, #100]	@ (800676c <lcd_init+0x422c>)
 8006708:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800670c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800670e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8006712:	b29a      	uxth	r2, r3
 8006714:	4b16      	ldr	r3, [pc, #88]	@ (8006770 <lcd_init+0x4230>)
 8006716:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006718:	4b14      	ldr	r3, [pc, #80]	@ (800676c <lcd_init+0x422c>)
 800671a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800671e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006720:	4b12      	ldr	r3, [pc, #72]	@ (800676c <lcd_init+0x422c>)
 8006722:	2280      	movs	r2, #128	@ 0x80
 8006724:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006726:	4b11      	ldr	r3, [pc, #68]	@ (800676c <lcd_init+0x422c>)
 8006728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800672c:	611a      	str	r2, [r3, #16]
}
 800672e:	bf00      	nop
 8006730:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 8006734:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006738:	4b0c      	ldr	r3, [pc, #48]	@ (800676c <lcd_init+0x422c>)
 800673a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800673e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006740:	4b0a      	ldr	r3, [pc, #40]	@ (800676c <lcd_init+0x422c>)
 8006742:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006746:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006748:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 800674c:	b29a      	uxth	r2, r3
 800674e:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <lcd_init+0x4230>)
 8006750:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006752:	4b06      	ldr	r3, [pc, #24]	@ (800676c <lcd_init+0x422c>)
 8006754:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006758:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800675a:	4b04      	ldr	r3, [pc, #16]	@ (800676c <lcd_init+0x422c>)
 800675c:	2280      	movs	r2, #128	@ 0x80
 800675e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006760:	4b02      	ldr	r3, [pc, #8]	@ (800676c <lcd_init+0x422c>)
 8006762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006766:	611a      	str	r2, [r3, #16]
}
 8006768:	f000 be33 	b.w	80073d2 <lcd_init+0x4e92>
 800676c:	40011000 	.word	0x40011000
 8006770:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 8006774:	4bc3      	ldr	r3, [pc, #780]	@ (8006a84 <lcd_init+0x4544>)
 8006776:	889b      	ldrh	r3, [r3, #4]
 8006778:	f649 0206 	movw	r2, #38918	@ 0x9806
 800677c:	4293      	cmp	r3, r2
 800677e:	f040 8407 	bne.w	8006f90 <lcd_init+0x4a50>
 8006782:	23ff      	movs	r3, #255	@ 0xff
 8006784:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006788:	4bbf      	ldr	r3, [pc, #764]	@ (8006a88 <lcd_init+0x4548>)
 800678a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800678e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006790:	4bbd      	ldr	r3, [pc, #756]	@ (8006a88 <lcd_init+0x4548>)
 8006792:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006796:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006798:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800679c:	b29a      	uxth	r2, r3
 800679e:	4bbb      	ldr	r3, [pc, #748]	@ (8006a8c <lcd_init+0x454c>)
 80067a0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80067a2:	4bb9      	ldr	r3, [pc, #740]	@ (8006a88 <lcd_init+0x4548>)
 80067a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067a8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067aa:	4bb7      	ldr	r3, [pc, #732]	@ (8006a88 <lcd_init+0x4548>)
 80067ac:	2280      	movs	r2, #128	@ 0x80
 80067ae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067b0:	4bb5      	ldr	r3, [pc, #724]	@ (8006a88 <lcd_init+0x4548>)
 80067b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067b6:	611a      	str	r2, [r3, #16]
}
 80067b8:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 80067ba:	20ff      	movs	r0, #255	@ 0xff
 80067bc:	f7fa fd82 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 80067c0:	2098      	movs	r0, #152	@ 0x98
 80067c2:	f7fa fd7f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 80067c6:	2006      	movs	r0, #6
 80067c8:	f7fa fd7c 	bl	80012c4 <lcd_wr_xdata>
 80067cc:	23bc      	movs	r3, #188	@ 0xbc
 80067ce:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067d2:	4bad      	ldr	r3, [pc, #692]	@ (8006a88 <lcd_init+0x4548>)
 80067d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067d8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80067da:	4bab      	ldr	r3, [pc, #684]	@ (8006a88 <lcd_init+0x4548>)
 80067dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067e0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80067e2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	4ba8      	ldr	r3, [pc, #672]	@ (8006a8c <lcd_init+0x454c>)
 80067ea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80067ec:	4ba6      	ldr	r3, [pc, #664]	@ (8006a88 <lcd_init+0x4548>)
 80067ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067f2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067f4:	4ba4      	ldr	r3, [pc, #656]	@ (8006a88 <lcd_init+0x4548>)
 80067f6:	2280      	movs	r2, #128	@ 0x80
 80067f8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067fa:	4ba3      	ldr	r3, [pc, #652]	@ (8006a88 <lcd_init+0x4548>)
 80067fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006800:	611a      	str	r2, [r3, #16]
}
 8006802:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 8006804:	2001      	movs	r0, #1
 8006806:	f7fa fd5d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 800680a:	200f      	movs	r0, #15
 800680c:	f7fa fd5a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8006810:	2061      	movs	r0, #97	@ 0x61
 8006812:	f7fa fd57 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006816:	20ff      	movs	r0, #255	@ 0xff
 8006818:	f7fa fd54 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800681c:	2001      	movs	r0, #1
 800681e:	f7fa fd51 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006822:	2001      	movs	r0, #1
 8006824:	f7fa fd4e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006828:	200b      	movs	r0, #11
 800682a:	f7fa fd4b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 800682e:	2010      	movs	r0, #16
 8006830:	f7fa fd48 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 8006834:	2037      	movs	r0, #55	@ 0x37
 8006836:	f7fa fd45 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 800683a:	2063      	movs	r0, #99	@ 0x63
 800683c:	f7fa fd42 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006840:	20ff      	movs	r0, #255	@ 0xff
 8006842:	f7fa fd3f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006846:	20ff      	movs	r0, #255	@ 0xff
 8006848:	f7fa fd3c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800684c:	2001      	movs	r0, #1
 800684e:	f7fa fd39 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006852:	2001      	movs	r0, #1
 8006854:	f7fa fd36 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006858:	2000      	movs	r0, #0
 800685a:	f7fa fd33 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800685e:	2000      	movs	r0, #0
 8006860:	f7fa fd30 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006864:	20ff      	movs	r0, #255	@ 0xff
 8006866:	f7fa fd2d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 800686a:	2052      	movs	r0, #82	@ 0x52
 800686c:	f7fa fd2a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006870:	2001      	movs	r0, #1
 8006872:	f7fa fd27 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006876:	2000      	movs	r0, #0
 8006878:	f7fa fd24 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 800687c:	2040      	movs	r0, #64	@ 0x40
 800687e:	f7fa fd21 	bl	80012c4 <lcd_wr_xdata>
 8006882:	23bd      	movs	r3, #189	@ 0xbd
 8006884:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006888:	4b7f      	ldr	r3, [pc, #508]	@ (8006a88 <lcd_init+0x4548>)
 800688a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800688e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006890:	4b7d      	ldr	r3, [pc, #500]	@ (8006a88 <lcd_init+0x4548>)
 8006892:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006896:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006898:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800689c:	b29a      	uxth	r2, r3
 800689e:	4b7b      	ldr	r3, [pc, #492]	@ (8006a8c <lcd_init+0x454c>)
 80068a0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068a2:	4b79      	ldr	r3, [pc, #484]	@ (8006a88 <lcd_init+0x4548>)
 80068a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068a8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068aa:	4b77      	ldr	r3, [pc, #476]	@ (8006a88 <lcd_init+0x4548>)
 80068ac:	2280      	movs	r2, #128	@ 0x80
 80068ae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068b0:	4b75      	ldr	r3, [pc, #468]	@ (8006a88 <lcd_init+0x4548>)
 80068b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068b6:	611a      	str	r2, [r3, #16]
}
 80068b8:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 80068ba:	2001      	movs	r0, #1
 80068bc:	f7fa fd02 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80068c0:	2023      	movs	r0, #35	@ 0x23
 80068c2:	f7fa fcff 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80068c6:	2045      	movs	r0, #69	@ 0x45
 80068c8:	f7fa fcfc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80068cc:	2067      	movs	r0, #103	@ 0x67
 80068ce:	f7fa fcf9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80068d2:	2001      	movs	r0, #1
 80068d4:	f7fa fcf6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80068d8:	2023      	movs	r0, #35	@ 0x23
 80068da:	f7fa fcf3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80068de:	2045      	movs	r0, #69	@ 0x45
 80068e0:	f7fa fcf0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80068e4:	2067      	movs	r0, #103	@ 0x67
 80068e6:	f7fa fced 	bl	80012c4 <lcd_wr_xdata>
 80068ea:	23be      	movs	r3, #190	@ 0xbe
 80068ec:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068f0:	4b65      	ldr	r3, [pc, #404]	@ (8006a88 <lcd_init+0x4548>)
 80068f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068f8:	4b63      	ldr	r3, [pc, #396]	@ (8006a88 <lcd_init+0x4548>)
 80068fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006900:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8006904:	b29a      	uxth	r2, r3
 8006906:	4b61      	ldr	r3, [pc, #388]	@ (8006a8c <lcd_init+0x454c>)
 8006908:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800690a:	4b5f      	ldr	r3, [pc, #380]	@ (8006a88 <lcd_init+0x4548>)
 800690c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006910:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006912:	4b5d      	ldr	r3, [pc, #372]	@ (8006a88 <lcd_init+0x4548>)
 8006914:	2280      	movs	r2, #128	@ 0x80
 8006916:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006918:	4b5b      	ldr	r3, [pc, #364]	@ (8006a88 <lcd_init+0x4548>)
 800691a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800691e:	611a      	str	r2, [r3, #16]
}
 8006920:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 8006922:	2000      	movs	r0, #0
 8006924:	f7fa fcce 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006928:	2001      	movs	r0, #1
 800692a:	f7fa fccb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 800692e:	20ab      	movs	r0, #171	@ 0xab
 8006930:	f7fa fcc8 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 8006934:	2060      	movs	r0, #96	@ 0x60
 8006936:	f7fa fcc5 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800693a:	2022      	movs	r0, #34	@ 0x22
 800693c:	f7fa fcc2 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006940:	2022      	movs	r0, #34	@ 0x22
 8006942:	f7fa fcbf 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006946:	2022      	movs	r0, #34	@ 0x22
 8006948:	f7fa fcbc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800694c:	2022      	movs	r0, #34	@ 0x22
 800694e:	f7fa fcb9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006952:	2022      	movs	r0, #34	@ 0x22
 8006954:	f7fa fcb6 	bl	80012c4 <lcd_wr_xdata>
 8006958:	23c7      	movs	r3, #199	@ 0xc7
 800695a:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800695e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a88 <lcd_init+0x4548>)
 8006960:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006964:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006966:	4b48      	ldr	r3, [pc, #288]	@ (8006a88 <lcd_init+0x4548>)
 8006968:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800696c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800696e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8006972:	b29a      	uxth	r2, r3
 8006974:	4b45      	ldr	r3, [pc, #276]	@ (8006a8c <lcd_init+0x454c>)
 8006976:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006978:	4b43      	ldr	r3, [pc, #268]	@ (8006a88 <lcd_init+0x4548>)
 800697a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800697e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006980:	4b41      	ldr	r3, [pc, #260]	@ (8006a88 <lcd_init+0x4548>)
 8006982:	2280      	movs	r2, #128	@ 0x80
 8006984:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006986:	4b40      	ldr	r3, [pc, #256]	@ (8006a88 <lcd_init+0x4548>)
 8006988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800698c:	611a      	str	r2, [r3, #16]
}
 800698e:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 8006990:	2036      	movs	r0, #54	@ 0x36
 8006992:	f7fa fc97 	bl	80012c4 <lcd_wr_xdata>
 8006996:	23ed      	movs	r3, #237	@ 0xed
 8006998:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800699c:	4b3a      	ldr	r3, [pc, #232]	@ (8006a88 <lcd_init+0x4548>)
 800699e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069a4:	4b38      	ldr	r3, [pc, #224]	@ (8006a88 <lcd_init+0x4548>)
 80069a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069ac:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	4b36      	ldr	r3, [pc, #216]	@ (8006a8c <lcd_init+0x454c>)
 80069b4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069b6:	4b34      	ldr	r3, [pc, #208]	@ (8006a88 <lcd_init+0x4548>)
 80069b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069bc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069be:	4b32      	ldr	r3, [pc, #200]	@ (8006a88 <lcd_init+0x4548>)
 80069c0:	2280      	movs	r2, #128	@ 0x80
 80069c2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069c4:	4b30      	ldr	r3, [pc, #192]	@ (8006a88 <lcd_init+0x4548>)
 80069c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ca:	611a      	str	r2, [r3, #16]
}
 80069cc:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 80069ce:	207f      	movs	r0, #127	@ 0x7f
 80069d0:	f7fa fc78 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80069d4:	200f      	movs	r0, #15
 80069d6:	f7fa fc75 	bl	80012c4 <lcd_wr_xdata>
 80069da:	23c0      	movs	r3, #192	@ 0xc0
 80069dc:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069e0:	4b29      	ldr	r3, [pc, #164]	@ (8006a88 <lcd_init+0x4548>)
 80069e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069e8:	4b27      	ldr	r3, [pc, #156]	@ (8006a88 <lcd_init+0x4548>)
 80069ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069f0:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	4b25      	ldr	r3, [pc, #148]	@ (8006a8c <lcd_init+0x454c>)
 80069f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069fa:	4b23      	ldr	r3, [pc, #140]	@ (8006a88 <lcd_init+0x4548>)
 80069fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a00:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a02:	4b21      	ldr	r3, [pc, #132]	@ (8006a88 <lcd_init+0x4548>)
 8006a04:	2280      	movs	r2, #128	@ 0x80
 8006a06:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a08:	4b1f      	ldr	r3, [pc, #124]	@ (8006a88 <lcd_init+0x4548>)
 8006a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a0e:	611a      	str	r2, [r3, #16]
}
 8006a10:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 8006a12:	200f      	movs	r0, #15
 8006a14:	f7fa fc56 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006a18:	200b      	movs	r0, #11
 8006a1a:	f7fa fc53 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 8006a1e:	200a      	movs	r0, #10
 8006a20:	f7fa fc50 	bl	80012c4 <lcd_wr_xdata>
 8006a24:	23fc      	movs	r3, #252	@ 0xfc
 8006a26:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a2a:	4b17      	ldr	r3, [pc, #92]	@ (8006a88 <lcd_init+0x4548>)
 8006a2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a30:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a32:	4b15      	ldr	r3, [pc, #84]	@ (8006a88 <lcd_init+0x4548>)
 8006a34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a38:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a3a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <lcd_init+0x454c>)
 8006a42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a44:	4b10      	ldr	r3, [pc, #64]	@ (8006a88 <lcd_init+0x4548>)
 8006a46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a88 <lcd_init+0x4548>)
 8006a4e:	2280      	movs	r2, #128	@ 0x80
 8006a50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a52:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <lcd_init+0x4548>)
 8006a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a58:	611a      	str	r2, [r3, #16]
}
 8006a5a:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 8006a5c:	2008      	movs	r0, #8
 8006a5e:	f7fa fc31 	bl	80012c4 <lcd_wr_xdata>
 8006a62:	23df      	movs	r3, #223	@ 0xdf
 8006a64:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a68:	4b07      	ldr	r3, [pc, #28]	@ (8006a88 <lcd_init+0x4548>)
 8006a6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a6e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a70:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <lcd_init+0x4548>)
 8006a72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a76:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a78:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	4b03      	ldr	r3, [pc, #12]	@ (8006a8c <lcd_init+0x454c>)
 8006a80:	60da      	str	r2, [r3, #12]
 8006a82:	e005      	b.n	8006a90 <lcd_init+0x4550>
 8006a84:	20000038 	.word	0x20000038
 8006a88:	40011000 	.word	0x40011000
 8006a8c:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006a90:	4bc7      	ldr	r3, [pc, #796]	@ (8006db0 <lcd_init+0x4870>)
 8006a92:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a96:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a98:	4bc5      	ldr	r3, [pc, #788]	@ (8006db0 <lcd_init+0x4870>)
 8006a9a:	2280      	movs	r2, #128	@ 0x80
 8006a9c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a9e:	4bc4      	ldr	r3, [pc, #784]	@ (8006db0 <lcd_init+0x4870>)
 8006aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006aa4:	611a      	str	r2, [r3, #16]
}
 8006aa6:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	f7fa fc0b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006aae:	2000      	movs	r0, #0
 8006ab0:	f7fa fc08 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f7fa fc05 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006aba:	2000      	movs	r0, #0
 8006abc:	f7fa fc02 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f7fa fbff 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 8006ac6:	2020      	movs	r0, #32
 8006ac8:	f7fa fbfc 	bl	80012c4 <lcd_wr_xdata>
 8006acc:	23f3      	movs	r3, #243	@ 0xf3
 8006ace:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006ad2:	4bb7      	ldr	r3, [pc, #732]	@ (8006db0 <lcd_init+0x4870>)
 8006ad4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ad8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ada:	4bb5      	ldr	r3, [pc, #724]	@ (8006db0 <lcd_init+0x4870>)
 8006adc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ae0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006ae2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	4bb2      	ldr	r3, [pc, #712]	@ (8006db4 <lcd_init+0x4874>)
 8006aea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006aec:	4bb0      	ldr	r3, [pc, #704]	@ (8006db0 <lcd_init+0x4870>)
 8006aee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006af2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006af4:	4bae      	ldr	r3, [pc, #696]	@ (8006db0 <lcd_init+0x4870>)
 8006af6:	2280      	movs	r2, #128	@ 0x80
 8006af8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006afa:	4bad      	ldr	r3, [pc, #692]	@ (8006db0 <lcd_init+0x4870>)
 8006afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b00:	611a      	str	r2, [r3, #16]
}
 8006b02:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 8006b04:	2074      	movs	r0, #116	@ 0x74
 8006b06:	f7fa fbdd 	bl	80012c4 <lcd_wr_xdata>
 8006b0a:	23b4      	movs	r3, #180	@ 0xb4
 8006b0c:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b10:	4ba7      	ldr	r3, [pc, #668]	@ (8006db0 <lcd_init+0x4870>)
 8006b12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b16:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b18:	4ba5      	ldr	r3, [pc, #660]	@ (8006db0 <lcd_init+0x4870>)
 8006b1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b1e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b20:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	4ba3      	ldr	r3, [pc, #652]	@ (8006db4 <lcd_init+0x4874>)
 8006b28:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b2a:	4ba1      	ldr	r3, [pc, #644]	@ (8006db0 <lcd_init+0x4870>)
 8006b2c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b30:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b32:	4b9f      	ldr	r3, [pc, #636]	@ (8006db0 <lcd_init+0x4870>)
 8006b34:	2280      	movs	r2, #128	@ 0x80
 8006b36:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b38:	4b9d      	ldr	r3, [pc, #628]	@ (8006db0 <lcd_init+0x4870>)
 8006b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b3e:	611a      	str	r2, [r3, #16]
}
 8006b40:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 8006b42:	2000      	movs	r0, #0
 8006b44:	f7fa fbbe 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f7fa fbbb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f7fa fbb8 	bl	80012c4 <lcd_wr_xdata>
 8006b54:	23f7      	movs	r3, #247	@ 0xf7
 8006b56:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b5a:	4b95      	ldr	r3, [pc, #596]	@ (8006db0 <lcd_init+0x4870>)
 8006b5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b60:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b62:	4b93      	ldr	r3, [pc, #588]	@ (8006db0 <lcd_init+0x4870>)
 8006b64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b68:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b6a:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	4b90      	ldr	r3, [pc, #576]	@ (8006db4 <lcd_init+0x4874>)
 8006b72:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b74:	4b8e      	ldr	r3, [pc, #568]	@ (8006db0 <lcd_init+0x4870>)
 8006b76:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b7a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8006db0 <lcd_init+0x4870>)
 8006b7e:	2280      	movs	r2, #128	@ 0x80
 8006b80:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b82:	4b8b      	ldr	r3, [pc, #556]	@ (8006db0 <lcd_init+0x4870>)
 8006b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b88:	611a      	str	r2, [r3, #16]
}
 8006b8a:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 8006b8c:	2082      	movs	r0, #130	@ 0x82
 8006b8e:	f7fa fb99 	bl	80012c4 <lcd_wr_xdata>
 8006b92:	23b1      	movs	r3, #177	@ 0xb1
 8006b94:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b98:	4b85      	ldr	r3, [pc, #532]	@ (8006db0 <lcd_init+0x4870>)
 8006b9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b9e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ba0:	4b83      	ldr	r3, [pc, #524]	@ (8006db0 <lcd_init+0x4870>)
 8006ba2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ba6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006ba8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	4b81      	ldr	r3, [pc, #516]	@ (8006db4 <lcd_init+0x4874>)
 8006bb0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8006db0 <lcd_init+0x4870>)
 8006bb4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006bb8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006bba:	4b7d      	ldr	r3, [pc, #500]	@ (8006db0 <lcd_init+0x4870>)
 8006bbc:	2280      	movs	r2, #128	@ 0x80
 8006bbe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006bc0:	4b7b      	ldr	r3, [pc, #492]	@ (8006db0 <lcd_init+0x4870>)
 8006bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bc6:	611a      	str	r2, [r3, #16]
}
 8006bc8:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 8006bca:	2000      	movs	r0, #0
 8006bcc:	f7fa fb7a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8006bd0:	2013      	movs	r0, #19
 8006bd2:	f7fa fb77 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8006bd6:	2013      	movs	r0, #19
 8006bd8:	f7fa fb74 	bl	80012c4 <lcd_wr_xdata>
 8006bdc:	23f2      	movs	r3, #242	@ 0xf2
 8006bde:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006be2:	4b73      	ldr	r3, [pc, #460]	@ (8006db0 <lcd_init+0x4870>)
 8006be4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006be8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006bea:	4b71      	ldr	r3, [pc, #452]	@ (8006db0 <lcd_init+0x4870>)
 8006bec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bf0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006bf2:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	4b6e      	ldr	r3, [pc, #440]	@ (8006db4 <lcd_init+0x4874>)
 8006bfa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8006db0 <lcd_init+0x4870>)
 8006bfe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c02:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c04:	4b6a      	ldr	r3, [pc, #424]	@ (8006db0 <lcd_init+0x4870>)
 8006c06:	2280      	movs	r2, #128	@ 0x80
 8006c08:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c0a:	4b69      	ldr	r3, [pc, #420]	@ (8006db0 <lcd_init+0x4870>)
 8006c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c10:	611a      	str	r2, [r3, #16]
}
 8006c12:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 8006c14:	2080      	movs	r0, #128	@ 0x80
 8006c16:	f7fa fb55 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8006c1a:	2004      	movs	r0, #4
 8006c1c:	f7fa fb52 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8006c20:	2040      	movs	r0, #64	@ 0x40
 8006c22:	f7fa fb4f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8006c26:	2028      	movs	r0, #40	@ 0x28
 8006c28:	f7fa fb4c 	bl	80012c4 <lcd_wr_xdata>
 8006c2c:	23c1      	movs	r3, #193	@ 0xc1
 8006c2e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c32:	4b5f      	ldr	r3, [pc, #380]	@ (8006db0 <lcd_init+0x4870>)
 8006c34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c38:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8006db0 <lcd_init+0x4870>)
 8006c3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c40:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006c42:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	4b5a      	ldr	r3, [pc, #360]	@ (8006db4 <lcd_init+0x4874>)
 8006c4a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006c4c:	4b58      	ldr	r3, [pc, #352]	@ (8006db0 <lcd_init+0x4870>)
 8006c4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c52:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c54:	4b56      	ldr	r3, [pc, #344]	@ (8006db0 <lcd_init+0x4870>)
 8006c56:	2280      	movs	r2, #128	@ 0x80
 8006c58:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c5a:	4b55      	ldr	r3, [pc, #340]	@ (8006db0 <lcd_init+0x4870>)
 8006c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c60:	611a      	str	r2, [r3, #16]
}
 8006c62:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 8006c64:	2017      	movs	r0, #23
 8006c66:	f7fa fb2d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 8006c6a:	2088      	movs	r0, #136	@ 0x88
 8006c6c:	f7fa fb2a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 8006c70:	2088      	movs	r0, #136	@ 0x88
 8006c72:	f7fa fb27 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 8006c76:	2020      	movs	r0, #32
 8006c78:	f7fa fb24 	bl	80012c4 <lcd_wr_xdata>
 8006c7c:	23e0      	movs	r3, #224	@ 0xe0
 8006c7e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c82:	4b4b      	ldr	r3, [pc, #300]	@ (8006db0 <lcd_init+0x4870>)
 8006c84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c88:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006c8a:	4b49      	ldr	r3, [pc, #292]	@ (8006db0 <lcd_init+0x4870>)
 8006c8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c90:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006c92:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	4b46      	ldr	r3, [pc, #280]	@ (8006db4 <lcd_init+0x4874>)
 8006c9a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006c9c:	4b44      	ldr	r3, [pc, #272]	@ (8006db0 <lcd_init+0x4870>)
 8006c9e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006ca2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ca4:	4b42      	ldr	r3, [pc, #264]	@ (8006db0 <lcd_init+0x4870>)
 8006ca6:	2280      	movs	r2, #128	@ 0x80
 8006ca8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006caa:	4b41      	ldr	r3, [pc, #260]	@ (8006db0 <lcd_init+0x4870>)
 8006cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cb0:	611a      	str	r2, [r3, #16]
}
 8006cb2:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f7fa fb05 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 8006cba:	200a      	movs	r0, #10
 8006cbc:	f7fa fb02 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 8006cc0:	2012      	movs	r0, #18
 8006cc2:	f7fa faff 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 8006cc6:	2010      	movs	r0, #16
 8006cc8:	f7fa fafc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006ccc:	200e      	movs	r0, #14
 8006cce:	f7fa faf9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 8006cd2:	2020      	movs	r0, #32
 8006cd4:	f7fa faf6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 8006cd8:	20cc      	movs	r0, #204	@ 0xcc
 8006cda:	f7fa faf3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 8006cde:	2007      	movs	r0, #7
 8006ce0:	f7fa faf0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 8006ce4:	2006      	movs	r0, #6
 8006ce6:	f7fa faed 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 8006cea:	200b      	movs	r0, #11
 8006cec:	f7fa faea 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 8006cf0:	200e      	movs	r0, #14
 8006cf2:	f7fa fae7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 8006cf6:	200f      	movs	r0, #15
 8006cf8:	f7fa fae4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 8006cfc:	200d      	movs	r0, #13
 8006cfe:	f7fa fae1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 8006d02:	2015      	movs	r0, #21
 8006d04:	f7fa fade 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 8006d08:	2010      	movs	r0, #16
 8006d0a:	f7fa fadb 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 8006d0e:	2000      	movs	r0, #0
 8006d10:	f7fa fad8 	bl	80012c4 <lcd_wr_xdata>
 8006d14:	23e1      	movs	r3, #225	@ 0xe1
 8006d16:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006d1a:	4b25      	ldr	r3, [pc, #148]	@ (8006db0 <lcd_init+0x4870>)
 8006d1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d20:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006d22:	4b23      	ldr	r3, [pc, #140]	@ (8006db0 <lcd_init+0x4870>)
 8006d24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d28:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006d2a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	4b20      	ldr	r3, [pc, #128]	@ (8006db4 <lcd_init+0x4874>)
 8006d32:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006d34:	4b1e      	ldr	r3, [pc, #120]	@ (8006db0 <lcd_init+0x4870>)
 8006d36:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006d3a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8006db0 <lcd_init+0x4870>)
 8006d3e:	2280      	movs	r2, #128	@ 0x80
 8006d40:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006d42:	4b1b      	ldr	r3, [pc, #108]	@ (8006db0 <lcd_init+0x4870>)
 8006d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d48:	611a      	str	r2, [r3, #16]
}
 8006d4a:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	f7fa fab9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 8006d52:	200b      	movs	r0, #11
 8006d54:	f7fa fab6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 8006d58:	2013      	movs	r0, #19
 8006d5a:	f7fa fab3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 8006d5e:	200d      	movs	r0, #13
 8006d60:	f7fa fab0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006d64:	200e      	movs	r0, #14
 8006d66:	f7fa faad 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 8006d6a:	201b      	movs	r0, #27
 8006d6c:	f7fa faaa 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 8006d70:	2071      	movs	r0, #113	@ 0x71
 8006d72:	f7fa faa7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 8006d76:	2006      	movs	r0, #6
 8006d78:	f7fa faa4 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 8006d7c:	2006      	movs	r0, #6
 8006d7e:	f7fa faa1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 8006d82:	200a      	movs	r0, #10
 8006d84:	f7fa fa9e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 8006d88:	200f      	movs	r0, #15
 8006d8a:	f7fa fa9b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 8006d8e:	200e      	movs	r0, #14
 8006d90:	f7fa fa98 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 8006d94:	200f      	movs	r0, #15
 8006d96:	f7fa fa95 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 8006d9a:	2015      	movs	r0, #21
 8006d9c:	f7fa fa92 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 8006da0:	200c      	movs	r0, #12
 8006da2:	f7fa fa8f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 8006da6:	2000      	movs	r0, #0
 8006da8:	f7fa fa8c 	bl	80012c4 <lcd_wr_xdata>
 8006dac:	e004      	b.n	8006db8 <lcd_init+0x4878>
 8006dae:	bf00      	nop
 8006db0:	40011000 	.word	0x40011000
 8006db4:	40010c00 	.word	0x40010c00
 8006db8:	232a      	movs	r3, #42	@ 0x2a
 8006dba:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006dbe:	4b72      	ldr	r3, [pc, #456]	@ (8006f88 <lcd_init+0x4a48>)
 8006dc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006dc4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006dc6:	4b70      	ldr	r3, [pc, #448]	@ (8006f88 <lcd_init+0x4a48>)
 8006dc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006dcc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006dce:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	4b6d      	ldr	r3, [pc, #436]	@ (8006f8c <lcd_init+0x4a4c>)
 8006dd6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8006f88 <lcd_init+0x4a48>)
 8006dda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006dde:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006de0:	4b69      	ldr	r3, [pc, #420]	@ (8006f88 <lcd_init+0x4a48>)
 8006de2:	2280      	movs	r2, #128	@ 0x80
 8006de4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006de6:	4b68      	ldr	r3, [pc, #416]	@ (8006f88 <lcd_init+0x4a48>)
 8006de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dec:	611a      	str	r2, [r3, #16]
}
 8006dee:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 8006df0:	2000      	movs	r0, #0
 8006df2:	f7fa fa67 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006df6:	2000      	movs	r0, #0
 8006df8:	f7fa fa64 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	f7fa fa61 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 8006e02:	20df      	movs	r0, #223	@ 0xdf
 8006e04:	f7fa fa5e 	bl	80012c4 <lcd_wr_xdata>
 8006e08:	232b      	movs	r3, #43	@ 0x2b
 8006e0a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006e0e:	4b5e      	ldr	r3, [pc, #376]	@ (8006f88 <lcd_init+0x4a48>)
 8006e10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006e16:	4b5c      	ldr	r3, [pc, #368]	@ (8006f88 <lcd_init+0x4a48>)
 8006e18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006e1e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	4b59      	ldr	r3, [pc, #356]	@ (8006f8c <lcd_init+0x4a4c>)
 8006e26:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006e28:	4b57      	ldr	r3, [pc, #348]	@ (8006f88 <lcd_init+0x4a48>)
 8006e2a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006e2e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006e30:	4b55      	ldr	r3, [pc, #340]	@ (8006f88 <lcd_init+0x4a48>)
 8006e32:	2280      	movs	r2, #128	@ 0x80
 8006e34:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006e36:	4b54      	ldr	r3, [pc, #336]	@ (8006f88 <lcd_init+0x4a48>)
 8006e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e3c:	611a      	str	r2, [r3, #16]
}
 8006e3e:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 8006e40:	2000      	movs	r0, #0
 8006e42:	f7fa fa3f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006e46:	2000      	movs	r0, #0
 8006e48:	f7fa fa3c 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8006e4c:	2003      	movs	r0, #3
 8006e4e:	f7fa fa39 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 8006e52:	201f      	movs	r0, #31
 8006e54:	f7fa fa36 	bl	80012c4 <lcd_wr_xdata>
 8006e58:	233a      	movs	r3, #58	@ 0x3a
 8006e5a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f88 <lcd_init+0x4a48>)
 8006e60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e64:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006e66:	4b48      	ldr	r3, [pc, #288]	@ (8006f88 <lcd_init+0x4a48>)
 8006e68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e6c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006e6e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	4b45      	ldr	r3, [pc, #276]	@ (8006f8c <lcd_init+0x4a4c>)
 8006e76:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006e78:	4b43      	ldr	r3, [pc, #268]	@ (8006f88 <lcd_init+0x4a48>)
 8006e7a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006e7e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006e80:	4b41      	ldr	r3, [pc, #260]	@ (8006f88 <lcd_init+0x4a48>)
 8006e82:	2280      	movs	r2, #128	@ 0x80
 8006e84:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006e86:	4b40      	ldr	r3, [pc, #256]	@ (8006f88 <lcd_init+0x4a48>)
 8006e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e8c:	611a      	str	r2, [r3, #16]
}
 8006e8e:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 8006e90:	2055      	movs	r0, #85	@ 0x55
 8006e92:	f7fa fa17 	bl	80012c4 <lcd_wr_xdata>
 8006e96:	2336      	movs	r3, #54	@ 0x36
 8006e98:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8006f88 <lcd_init+0x4a48>)
 8006e9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ea2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ea4:	4b38      	ldr	r3, [pc, #224]	@ (8006f88 <lcd_init+0x4a48>)
 8006ea6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006eaa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006eac:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	4b36      	ldr	r3, [pc, #216]	@ (8006f8c <lcd_init+0x4a4c>)
 8006eb4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006eb6:	4b34      	ldr	r3, [pc, #208]	@ (8006f88 <lcd_init+0x4a48>)
 8006eb8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006ebc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ebe:	4b32      	ldr	r3, [pc, #200]	@ (8006f88 <lcd_init+0x4a48>)
 8006ec0:	2280      	movs	r2, #128	@ 0x80
 8006ec2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006ec4:	4b30      	ldr	r3, [pc, #192]	@ (8006f88 <lcd_init+0x4a48>)
 8006ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006eca:	611a      	str	r2, [r3, #16]
}
 8006ecc:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7fa f9f8 	bl	80012c4 <lcd_wr_xdata>
 8006ed4:	2311      	movs	r3, #17
 8006ed6:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006eda:	4b2b      	ldr	r3, [pc, #172]	@ (8006f88 <lcd_init+0x4a48>)
 8006edc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ee0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ee2:	4b29      	ldr	r3, [pc, #164]	@ (8006f88 <lcd_init+0x4a48>)
 8006ee4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ee8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006eea:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	4b26      	ldr	r3, [pc, #152]	@ (8006f8c <lcd_init+0x4a4c>)
 8006ef2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006ef4:	4b24      	ldr	r3, [pc, #144]	@ (8006f88 <lcd_init+0x4a48>)
 8006ef6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006efa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006efc:	4b22      	ldr	r3, [pc, #136]	@ (8006f88 <lcd_init+0x4a48>)
 8006efe:	2280      	movs	r2, #128	@ 0x80
 8006f00:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006f02:	4b21      	ldr	r3, [pc, #132]	@ (8006f88 <lcd_init+0x4a48>)
 8006f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f08:	611a      	str	r2, [r3, #16]
}
 8006f0a:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 8006f0c:	2078      	movs	r0, #120	@ 0x78
 8006f0e:	f000 ffc9 	bl	8007ea4 <HAL_Delay>
 8006f12:	2329      	movs	r3, #41	@ 0x29
 8006f14:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006f18:	4b1b      	ldr	r3, [pc, #108]	@ (8006f88 <lcd_init+0x4a48>)
 8006f1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f1e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006f20:	4b19      	ldr	r3, [pc, #100]	@ (8006f88 <lcd_init+0x4a48>)
 8006f22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f26:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006f28:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	4b17      	ldr	r3, [pc, #92]	@ (8006f8c <lcd_init+0x4a4c>)
 8006f30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006f32:	4b15      	ldr	r3, [pc, #84]	@ (8006f88 <lcd_init+0x4a48>)
 8006f34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006f38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006f3a:	4b13      	ldr	r3, [pc, #76]	@ (8006f88 <lcd_init+0x4a48>)
 8006f3c:	2280      	movs	r2, #128	@ 0x80
 8006f3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006f40:	4b11      	ldr	r3, [pc, #68]	@ (8006f88 <lcd_init+0x4a48>)
 8006f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f46:	611a      	str	r2, [r3, #16]
}
 8006f48:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 8006f4a:	2014      	movs	r0, #20
 8006f4c:	f000 ffaa 	bl	8007ea4 <HAL_Delay>
 8006f50:	232c      	movs	r3, #44	@ 0x2c
 8006f52:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006f56:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <lcd_init+0x4a48>)
 8006f58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f5c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f88 <lcd_init+0x4a48>)
 8006f60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f64:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006f66:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	4b07      	ldr	r3, [pc, #28]	@ (8006f8c <lcd_init+0x4a4c>)
 8006f6e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006f70:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <lcd_init+0x4a48>)
 8006f72:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006f76:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006f78:	4b03      	ldr	r3, [pc, #12]	@ (8006f88 <lcd_init+0x4a48>)
 8006f7a:	2280      	movs	r2, #128	@ 0x80
 8006f7c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006f7e:	4b02      	ldr	r3, [pc, #8]	@ (8006f88 <lcd_init+0x4a48>)
 8006f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f84:	611a      	str	r2, [r3, #16]
}
 8006f86:	e224      	b.n	80073d2 <lcd_init+0x4e92>
 8006f88:	40011000 	.word	0x40011000
 8006f8c:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 8006f90:	4bbe      	ldr	r3, [pc, #760]	@ (800728c <lcd_init+0x4d4c>)
 8006f92:	889b      	ldrh	r3, [r3, #4]
 8006f94:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	f040 821a 	bne.w	80073d2 <lcd_init+0x4e92>
 8006f9e:	23e2      	movs	r3, #226	@ 0xe2
 8006fa0:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006fa4:	4bba      	ldr	r3, [pc, #744]	@ (8007290 <lcd_init+0x4d50>)
 8006fa6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006faa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006fac:	4bb8      	ldr	r3, [pc, #736]	@ (8007290 <lcd_init+0x4d50>)
 8006fae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006fb2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006fb4:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	4bb6      	ldr	r3, [pc, #728]	@ (8007294 <lcd_init+0x4d54>)
 8006fbc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006fbe:	4bb4      	ldr	r3, [pc, #720]	@ (8007290 <lcd_init+0x4d50>)
 8006fc0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006fc4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006fc6:	4bb2      	ldr	r3, [pc, #712]	@ (8007290 <lcd_init+0x4d50>)
 8006fc8:	2280      	movs	r2, #128	@ 0x80
 8006fca:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006fcc:	4bb0      	ldr	r3, [pc, #704]	@ (8007290 <lcd_init+0x4d50>)
 8006fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fd2:	611a      	str	r2, [r3, #16]
}
 8006fd4:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 8006fd6:	201d      	movs	r0, #29
 8006fd8:	f7fa f974 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 8006fdc:	2002      	movs	r0, #2
 8006fde:	f7fa f971 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 8006fe2:	2004      	movs	r0, #4
 8006fe4:	f7fa f96e 	bl	80012c4 <lcd_wr_xdata>
 8006fe8:	23e0      	movs	r3, #224	@ 0xe0
 8006fea:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006fee:	4ba8      	ldr	r3, [pc, #672]	@ (8007290 <lcd_init+0x4d50>)
 8006ff0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ff4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ff6:	4ba6      	ldr	r3, [pc, #664]	@ (8007290 <lcd_init+0x4d50>)
 8006ff8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ffc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006ffe:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 8007002:	b29a      	uxth	r2, r3
 8007004:	4ba3      	ldr	r3, [pc, #652]	@ (8007294 <lcd_init+0x4d54>)
 8007006:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007008:	4ba1      	ldr	r3, [pc, #644]	@ (8007290 <lcd_init+0x4d50>)
 800700a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800700e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007010:	4b9f      	ldr	r3, [pc, #636]	@ (8007290 <lcd_init+0x4d50>)
 8007012:	2280      	movs	r2, #128	@ 0x80
 8007014:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007016:	4b9e      	ldr	r3, [pc, #632]	@ (8007290 <lcd_init+0x4d50>)
 8007018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800701c:	611a      	str	r2, [r3, #16]
}
 800701e:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 8007020:	2001      	movs	r0, #1
 8007022:	f7fa f94f 	bl	80012c4 <lcd_wr_xdata>
        HAL_Delay(10);
 8007026:	200a      	movs	r0, #10
 8007028:	f000 ff3c 	bl	8007ea4 <HAL_Delay>
 800702c:	23e0      	movs	r3, #224	@ 0xe0
 800702e:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007032:	4b97      	ldr	r3, [pc, #604]	@ (8007290 <lcd_init+0x4d50>)
 8007034:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007038:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800703a:	4b95      	ldr	r3, [pc, #596]	@ (8007290 <lcd_init+0x4d50>)
 800703c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007040:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007042:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8007046:	b29a      	uxth	r2, r3
 8007048:	4b92      	ldr	r3, [pc, #584]	@ (8007294 <lcd_init+0x4d54>)
 800704a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800704c:	4b90      	ldr	r3, [pc, #576]	@ (8007290 <lcd_init+0x4d50>)
 800704e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007052:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007054:	4b8e      	ldr	r3, [pc, #568]	@ (8007290 <lcd_init+0x4d50>)
 8007056:	2280      	movs	r2, #128	@ 0x80
 8007058:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800705a:	4b8d      	ldr	r3, [pc, #564]	@ (8007290 <lcd_init+0x4d50>)
 800705c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007060:	611a      	str	r2, [r3, #16]
}
 8007062:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 8007064:	2003      	movs	r0, #3
 8007066:	f7fa f92d 	bl	80012c4 <lcd_wr_xdata>
        HAL_Delay(12);
 800706a:	200c      	movs	r0, #12
 800706c:	f000 ff1a 	bl	8007ea4 <HAL_Delay>
 8007070:	2301      	movs	r3, #1
 8007072:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007076:	4b86      	ldr	r3, [pc, #536]	@ (8007290 <lcd_init+0x4d50>)
 8007078:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800707c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800707e:	4b84      	ldr	r3, [pc, #528]	@ (8007290 <lcd_init+0x4d50>)
 8007080:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007084:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007086:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 800708a:	b29a      	uxth	r2, r3
 800708c:	4b81      	ldr	r3, [pc, #516]	@ (8007294 <lcd_init+0x4d54>)
 800708e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007090:	4b7f      	ldr	r3, [pc, #508]	@ (8007290 <lcd_init+0x4d50>)
 8007092:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007096:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007098:	4b7d      	ldr	r3, [pc, #500]	@ (8007290 <lcd_init+0x4d50>)
 800709a:	2280      	movs	r2, #128	@ 0x80
 800709c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800709e:	4b7c      	ldr	r3, [pc, #496]	@ (8007290 <lcd_init+0x4d50>)
 80070a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070a4:	611a      	str	r2, [r3, #16]
}
 80070a6:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 80070a8:	200a      	movs	r0, #10
 80070aa:	f000 fefb 	bl	8007ea4 <HAL_Delay>
 80070ae:	23e6      	movs	r3, #230	@ 0xe6
 80070b0:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80070b4:	4b76      	ldr	r3, [pc, #472]	@ (8007290 <lcd_init+0x4d50>)
 80070b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070ba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80070bc:	4b74      	ldr	r3, [pc, #464]	@ (8007290 <lcd_init+0x4d50>)
 80070be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80070c2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80070c4:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	4b72      	ldr	r3, [pc, #456]	@ (8007294 <lcd_init+0x4d54>)
 80070cc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80070ce:	4b70      	ldr	r3, [pc, #448]	@ (8007290 <lcd_init+0x4d50>)
 80070d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80070d4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80070d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007290 <lcd_init+0x4d50>)
 80070d8:	2280      	movs	r2, #128	@ 0x80
 80070da:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80070dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007290 <lcd_init+0x4d50>)
 80070de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070e2:	611a      	str	r2, [r3, #16]
}
 80070e4:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 80070e6:	202f      	movs	r0, #47	@ 0x2f
 80070e8:	f7fa f8ec 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80070ec:	20ff      	movs	r0, #255	@ 0xff
 80070ee:	f7fa f8e9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80070f2:	20ff      	movs	r0, #255	@ 0xff
 80070f4:	f7fa f8e6 	bl	80012c4 <lcd_wr_xdata>
 80070f8:	23b0      	movs	r3, #176	@ 0xb0
 80070fa:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80070fe:	4b64      	ldr	r3, [pc, #400]	@ (8007290 <lcd_init+0x4d50>)
 8007100:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007104:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007106:	4b62      	ldr	r3, [pc, #392]	@ (8007290 <lcd_init+0x4d50>)
 8007108:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800710c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800710e:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 8007112:	b29a      	uxth	r2, r3
 8007114:	4b5f      	ldr	r3, [pc, #380]	@ (8007294 <lcd_init+0x4d54>)
 8007116:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007118:	4b5d      	ldr	r3, [pc, #372]	@ (8007290 <lcd_init+0x4d50>)
 800711a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800711e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007120:	4b5b      	ldr	r3, [pc, #364]	@ (8007290 <lcd_init+0x4d50>)
 8007122:	2280      	movs	r2, #128	@ 0x80
 8007124:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007126:	4b5a      	ldr	r3, [pc, #360]	@ (8007290 <lcd_init+0x4d50>)
 8007128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800712c:	611a      	str	r2, [r3, #16]
}
 800712e:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 8007130:	2020      	movs	r0, #32
 8007132:	f7fa f8c7 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 8007136:	2000      	movs	r0, #0
 8007138:	f7fa f8c4 	bl	80012c4 <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 800713c:	2003      	movs	r0, #3
 800713e:	f7fa f8c1 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 8007142:	f240 301f 	movw	r0, #799	@ 0x31f
 8007146:	f7fa f8bd 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 800714a:	2001      	movs	r0, #1
 800714c:	f7fa f8ba 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8007150:	f240 10df 	movw	r0, #479	@ 0x1df
 8007154:	f7fa f8b6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 8007158:	2000      	movs	r0, #0
 800715a:	f7fa f8b3 	bl	80012c4 <lcd_wr_xdata>
 800715e:	23b4      	movs	r3, #180	@ 0xb4
 8007160:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007164:	4b4a      	ldr	r3, [pc, #296]	@ (8007290 <lcd_init+0x4d50>)
 8007166:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800716a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800716c:	4b48      	ldr	r3, [pc, #288]	@ (8007290 <lcd_init+0x4d50>)
 800716e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007172:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007174:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8007178:	b29a      	uxth	r2, r3
 800717a:	4b46      	ldr	r3, [pc, #280]	@ (8007294 <lcd_init+0x4d54>)
 800717c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800717e:	4b44      	ldr	r3, [pc, #272]	@ (8007290 <lcd_init+0x4d50>)
 8007180:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007184:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007186:	4b42      	ldr	r3, [pc, #264]	@ (8007290 <lcd_init+0x4d50>)
 8007188:	2280      	movs	r2, #128	@ 0x80
 800718a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800718c:	4b40      	ldr	r3, [pc, #256]	@ (8007290 <lcd_init+0x4d50>)
 800718e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007192:	611a      	str	r2, [r3, #16]
}
 8007194:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 8007196:	2004      	movs	r0, #4
 8007198:	f7fa f894 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 800719c:	f240 401f 	movw	r0, #1055	@ 0x41f
 80071a0:	f7fa f890 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 80071a4:	2000      	movs	r0, #0
 80071a6:	f7fa f88d 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 80071aa:	202e      	movs	r0, #46	@ 0x2e
 80071ac:	f7fa f88a 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 80071b0:	2000      	movs	r0, #0
 80071b2:	f7fa f887 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80071b6:	2000      	movs	r0, #0
 80071b8:	f7fa f884 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80071bc:	2000      	movs	r0, #0
 80071be:	f7fa f881 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80071c2:	2000      	movs	r0, #0
 80071c4:	f7fa f87e 	bl	80012c4 <lcd_wr_xdata>
 80071c8:	23b6      	movs	r3, #182	@ 0xb6
 80071ca:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80071ce:	4b30      	ldr	r3, [pc, #192]	@ (8007290 <lcd_init+0x4d50>)
 80071d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071d4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80071d6:	4b2e      	ldr	r3, [pc, #184]	@ (8007290 <lcd_init+0x4d50>)
 80071d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80071dc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80071de:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007294 <lcd_init+0x4d54>)
 80071e6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80071e8:	4b29      	ldr	r3, [pc, #164]	@ (8007290 <lcd_init+0x4d50>)
 80071ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80071ee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80071f0:	4b27      	ldr	r3, [pc, #156]	@ (8007290 <lcd_init+0x4d50>)
 80071f2:	2280      	movs	r2, #128	@ 0x80
 80071f4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80071f6:	4b26      	ldr	r3, [pc, #152]	@ (8007290 <lcd_init+0x4d50>)
 80071f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071fc:	611a      	str	r2, [r3, #16]
}
 80071fe:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 8007200:	2002      	movs	r0, #2
 8007202:	f7fa f85f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 8007206:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 800720a:	f7fa f85b 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 800720e:	2000      	movs	r0, #0
 8007210:	f7fa f858 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 8007214:	2017      	movs	r0, #23
 8007216:	f7fa f855 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 800721a:	2015      	movs	r0, #21
 800721c:	f7fa f852 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8007220:	2000      	movs	r0, #0
 8007222:	f7fa f84f 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8007226:	2000      	movs	r0, #0
 8007228:	f7fa f84c 	bl	80012c4 <lcd_wr_xdata>
 800722c:	23f0      	movs	r3, #240	@ 0xf0
 800722e:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007232:	4b17      	ldr	r3, [pc, #92]	@ (8007290 <lcd_init+0x4d50>)
 8007234:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007238:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800723a:	4b15      	ldr	r3, [pc, #84]	@ (8007290 <lcd_init+0x4d50>)
 800723c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007240:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007242:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8007246:	b29a      	uxth	r2, r3
 8007248:	4b12      	ldr	r3, [pc, #72]	@ (8007294 <lcd_init+0x4d54>)
 800724a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800724c:	4b10      	ldr	r3, [pc, #64]	@ (8007290 <lcd_init+0x4d50>)
 800724e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007252:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007254:	4b0e      	ldr	r3, [pc, #56]	@ (8007290 <lcd_init+0x4d50>)
 8007256:	2280      	movs	r2, #128	@ 0x80
 8007258:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800725a:	4b0d      	ldr	r3, [pc, #52]	@ (8007290 <lcd_init+0x4d50>)
 800725c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007260:	611a      	str	r2, [r3, #16]
}
 8007262:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 8007264:	2003      	movs	r0, #3
 8007266:	f7fa f82d 	bl	80012c4 <lcd_wr_xdata>
 800726a:	2329      	movs	r3, #41	@ 0x29
 800726c:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007270:	4b07      	ldr	r3, [pc, #28]	@ (8007290 <lcd_init+0x4d50>)
 8007272:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007276:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007278:	4b05      	ldr	r3, [pc, #20]	@ (8007290 <lcd_init+0x4d50>)
 800727a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800727e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007280:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 8007284:	b29a      	uxth	r2, r3
 8007286:	4b03      	ldr	r3, [pc, #12]	@ (8007294 <lcd_init+0x4d54>)
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	e005      	b.n	8007298 <lcd_init+0x4d58>
 800728c:	20000038 	.word	0x20000038
 8007290:	40011000 	.word	0x40011000
 8007294:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8007298:	4b56      	ldr	r3, [pc, #344]	@ (80073f4 <lcd_init+0x4eb4>)
 800729a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800729e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80072a0:	4b54      	ldr	r3, [pc, #336]	@ (80073f4 <lcd_init+0x4eb4>)
 80072a2:	2280      	movs	r2, #128	@ 0x80
 80072a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80072a6:	4b53      	ldr	r3, [pc, #332]	@ (80073f4 <lcd_init+0x4eb4>)
 80072a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ac:	611a      	str	r2, [r3, #16]
}
 80072ae:	bf00      	nop
 80072b0:	23d0      	movs	r3, #208	@ 0xd0
 80072b2:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80072b6:	4b4f      	ldr	r3, [pc, #316]	@ (80073f4 <lcd_init+0x4eb4>)
 80072b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80072be:	4b4d      	ldr	r3, [pc, #308]	@ (80073f4 <lcd_init+0x4eb4>)
 80072c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80072c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80072c6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	4b4a      	ldr	r3, [pc, #296]	@ (80073f8 <lcd_init+0x4eb8>)
 80072ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80072d0:	4b48      	ldr	r3, [pc, #288]	@ (80073f4 <lcd_init+0x4eb4>)
 80072d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80072d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80072d8:	4b46      	ldr	r3, [pc, #280]	@ (80073f4 <lcd_init+0x4eb4>)
 80072da:	2280      	movs	r2, #128	@ 0x80
 80072dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80072de:	4b45      	ldr	r3, [pc, #276]	@ (80073f4 <lcd_init+0x4eb4>)
 80072e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072e4:	611a      	str	r2, [r3, #16]
}
 80072e6:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 80072e8:	2000      	movs	r0, #0
 80072ea:	f7f9 ffeb 	bl	80012c4 <lcd_wr_xdata>
 80072ee:	23be      	movs	r3, #190	@ 0xbe
 80072f0:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80072f4:	4b3f      	ldr	r3, [pc, #252]	@ (80073f4 <lcd_init+0x4eb4>)
 80072f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072fa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80072fc:	4b3d      	ldr	r3, [pc, #244]	@ (80073f4 <lcd_init+0x4eb4>)
 80072fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007302:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007304:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8007308:	b29a      	uxth	r2, r3
 800730a:	4b3b      	ldr	r3, [pc, #236]	@ (80073f8 <lcd_init+0x4eb8>)
 800730c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800730e:	4b39      	ldr	r3, [pc, #228]	@ (80073f4 <lcd_init+0x4eb4>)
 8007310:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007314:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007316:	4b37      	ldr	r3, [pc, #220]	@ (80073f4 <lcd_init+0x4eb4>)
 8007318:	2280      	movs	r2, #128	@ 0x80
 800731a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800731c:	4b35      	ldr	r3, [pc, #212]	@ (80073f4 <lcd_init+0x4eb4>)
 800731e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007322:	611a      	str	r2, [r3, #16]
}
 8007324:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 8007326:	2005      	movs	r0, #5
 8007328:	f7f9 ffcc 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 800732c:	20fe      	movs	r0, #254	@ 0xfe
 800732e:	f7f9 ffc9 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 8007332:	2001      	movs	r0, #1
 8007334:	f7f9 ffc6 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 8007338:	2000      	movs	r0, #0
 800733a:	f7f9 ffc3 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 800733e:	2000      	movs	r0, #0
 8007340:	f7f9 ffc0 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 8007344:	2000      	movs	r0, #0
 8007346:	f7f9 ffbd 	bl	80012c4 <lcd_wr_xdata>
 800734a:	23b8      	movs	r3, #184	@ 0xb8
 800734c:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007350:	4b28      	ldr	r3, [pc, #160]	@ (80073f4 <lcd_init+0x4eb4>)
 8007352:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007356:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007358:	4b26      	ldr	r3, [pc, #152]	@ (80073f4 <lcd_init+0x4eb4>)
 800735a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800735e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007360:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8007364:	b29a      	uxth	r2, r3
 8007366:	4b24      	ldr	r3, [pc, #144]	@ (80073f8 <lcd_init+0x4eb8>)
 8007368:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800736a:	4b22      	ldr	r3, [pc, #136]	@ (80073f4 <lcd_init+0x4eb4>)
 800736c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007370:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007372:	4b20      	ldr	r3, [pc, #128]	@ (80073f4 <lcd_init+0x4eb4>)
 8007374:	2280      	movs	r2, #128	@ 0x80
 8007376:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007378:	4b1e      	ldr	r3, [pc, #120]	@ (80073f4 <lcd_init+0x4eb4>)
 800737a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800737e:	611a      	str	r2, [r3, #16]
}
 8007380:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 8007382:	2003      	movs	r0, #3
 8007384:	f7f9 ff9e 	bl	80012c4 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 8007388:	2001      	movs	r0, #1
 800738a:	f7f9 ff9b 	bl	80012c4 <lcd_wr_xdata>
 800738e:	23ba      	movs	r3, #186	@ 0xba
 8007390:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007394:	4b17      	ldr	r3, [pc, #92]	@ (80073f4 <lcd_init+0x4eb4>)
 8007396:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800739a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800739c:	4b15      	ldr	r3, [pc, #84]	@ (80073f4 <lcd_init+0x4eb4>)
 800739e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80073a2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80073a4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	4b13      	ldr	r3, [pc, #76]	@ (80073f8 <lcd_init+0x4eb8>)
 80073ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80073ae:	4b11      	ldr	r3, [pc, #68]	@ (80073f4 <lcd_init+0x4eb4>)
 80073b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80073b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80073b6:	4b0f      	ldr	r3, [pc, #60]	@ (80073f4 <lcd_init+0x4eb4>)
 80073b8:	2280      	movs	r2, #128	@ 0x80
 80073ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80073bc:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <lcd_init+0x4eb4>)
 80073be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073c2:	611a      	str	r2, [r3, #16]
}
 80073c4:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 80073c6:	2001      	movs	r0, #1
 80073c8:	f7f9 ff7c 	bl	80012c4 <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 80073cc:	2064      	movs	r0, #100	@ 0x64
 80073ce:	f7fa ff1f 	bl	8002210 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 80073d2:	2000      	movs	r0, #0
 80073d4:	f7fa ffdc 	bl	8002390 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 80073d8:	4b06      	ldr	r3, [pc, #24]	@ (80073f4 <lcd_init+0x4eb4>)
 80073da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80073de:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 80073e0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80073e4:	f000 f80a 	bl	80073fc <lcd_clear>
}
 80073e8:	bf00      	nop
 80073ea:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40011000 	.word	0x40011000
 80073f8:	40010c00 	.word	0x40010c00

080073fc <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 800740a:	4b27      	ldr	r3, [pc, #156]	@ (80074a8 <lcd_clear+0xac>)
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 8007410:	4b25      	ldr	r3, [pc, #148]	@ (80074a8 <lcd_clear+0xac>)
 8007412:	885b      	ldrh	r3, [r3, #2]
 8007414:	461a      	mov	r2, r3
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	fb02 f303 	mul.w	r3, r2, r3
 800741c:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 800741e:	2100      	movs	r1, #0
 8007420:	2000      	movs	r0, #0
 8007422:	f7fa f809 	bl	8001438 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8007426:	4b20      	ldr	r3, [pc, #128]	@ (80074a8 <lcd_clear+0xac>)
 8007428:	891b      	ldrh	r3, [r3, #8]
 800742a:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800742c:	4b1f      	ldr	r3, [pc, #124]	@ (80074ac <lcd_clear+0xb0>)
 800742e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007432:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007434:	4b1d      	ldr	r3, [pc, #116]	@ (80074ac <lcd_clear+0xb0>)
 8007436:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800743a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	b29a      	uxth	r2, r3
 8007440:	4b1b      	ldr	r3, [pc, #108]	@ (80074b0 <lcd_clear+0xb4>)
 8007442:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007444:	4b19      	ldr	r3, [pc, #100]	@ (80074ac <lcd_clear+0xb0>)
 8007446:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800744a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800744c:	4b17      	ldr	r3, [pc, #92]	@ (80074ac <lcd_clear+0xb0>)
 800744e:	2280      	movs	r2, #128	@ 0x80
 8007450:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007452:	4b16      	ldr	r3, [pc, #88]	@ (80074ac <lcd_clear+0xb0>)
 8007454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007458:	611a      	str	r2, [r3, #16]
}
 800745a:	bf00      	nop
}
 800745c:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 800745e:	4b13      	ldr	r3, [pc, #76]	@ (80074ac <lcd_clear+0xb0>)
 8007460:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007464:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007466:	4b11      	ldr	r3, [pc, #68]	@ (80074ac <lcd_clear+0xb0>)
 8007468:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800746c:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	e00c      	b.n	800748e <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 8007474:	4a0e      	ldr	r2, [pc, #56]	@ (80074b0 <lcd_clear+0xb4>)
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 800747a:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <lcd_clear+0xb0>)
 800747c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007480:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8007482:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <lcd_clear+0xb0>)
 8007484:	2280      	movs	r2, #128	@ 0x80
 8007486:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	3301      	adds	r3, #1
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	429a      	cmp	r2, r3
 8007494:	d3ee      	bcc.n	8007474 <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 8007496:	4b05      	ldr	r3, [pc, #20]	@ (80074ac <lcd_clear+0xb0>)
 8007498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800749c:	611a      	str	r2, [r3, #16]
}
 800749e:	bf00      	nop
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000038 	.word	0x20000038
 80074ac:	40011000 	.word	0x40011000
 80074b0:	40010c00 	.word	0x40010c00

080074b4 <lcd_fill>:
 * @param       (sx,sy),(ex,ey):�����ζԽ�����,�����СΪ:(ex - sx + 1) * (ey - sy + 1)
 * @param       color: Ҫ������ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint32_t color)
{
 80074b4:	b590      	push	{r4, r7, lr}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	461a      	mov	r2, r3
 80074c2:	4623      	mov	r3, r4
 80074c4:	80fb      	strh	r3, [r7, #6]
 80074c6:	4603      	mov	r3, r0
 80074c8:	80bb      	strh	r3, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	807b      	strh	r3, [r7, #2]
 80074ce:	4613      	mov	r3, r2
 80074d0:	803b      	strh	r3, [r7, #0]
    uint16_t i, j;
    uint16_t xlen = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	817b      	strh	r3, [r7, #10]
    xlen = ex - sx + 1;
 80074d6:	887a      	ldrh	r2, [r7, #2]
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3301      	adds	r3, #1
 80074e0:	817b      	strh	r3, [r7, #10]

    for (i = sy; i <= ey; i++)
 80074e2:	88bb      	ldrh	r3, [r7, #4]
 80074e4:	81fb      	strh	r3, [r7, #14]
 80074e6:	e044      	b.n	8007572 <lcd_fill+0xbe>
    {
        lcd_set_cursor(sx, i);      /* ���ù��λ�� */
 80074e8:	89fa      	ldrh	r2, [r7, #14]
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7f9 ffa2 	bl	8001438 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 80074f4:	4b23      	ldr	r3, [pc, #140]	@ (8007584 <lcd_fill+0xd0>)
 80074f6:	891b      	ldrh	r3, [r3, #8]
 80074f8:	813b      	strh	r3, [r7, #8]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80074fa:	4b23      	ldr	r3, [pc, #140]	@ (8007588 <lcd_fill+0xd4>)
 80074fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007500:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007502:	4b21      	ldr	r3, [pc, #132]	@ (8007588 <lcd_fill+0xd4>)
 8007504:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007508:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800750a:	893b      	ldrh	r3, [r7, #8]
 800750c:	b29a      	uxth	r2, r3
 800750e:	4b1f      	ldr	r3, [pc, #124]	@ (800758c <lcd_fill+0xd8>)
 8007510:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007512:	4b1d      	ldr	r3, [pc, #116]	@ (8007588 <lcd_fill+0xd4>)
 8007514:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007518:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800751a:	4b1b      	ldr	r3, [pc, #108]	@ (8007588 <lcd_fill+0xd4>)
 800751c:	2280      	movs	r2, #128	@ 0x80
 800751e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007520:	4b19      	ldr	r3, [pc, #100]	@ (8007588 <lcd_fill+0xd4>)
 8007522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007526:	611a      	str	r2, [r3, #16]
}
 8007528:	bf00      	nop
}
 800752a:	bf00      	nop
        lcd_write_ram_prepare();    /* ��ʼд��GRAM */

        for (j = 0; j < xlen; j++)
 800752c:	2300      	movs	r3, #0
 800752e:	81bb      	strh	r3, [r7, #12]
 8007530:	e018      	b.n	8007564 <lcd_fill+0xb0>
        {
            lcd_wr_data(color);     /* д������ */
 8007532:	4b15      	ldr	r3, [pc, #84]	@ (8007588 <lcd_fill+0xd4>)
 8007534:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007538:	611a      	str	r2, [r3, #16]
 800753a:	4b13      	ldr	r3, [pc, #76]	@ (8007588 <lcd_fill+0xd4>)
 800753c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007540:	611a      	str	r2, [r3, #16]
 8007542:	4a12      	ldr	r2, [pc, #72]	@ (800758c <lcd_fill+0xd8>)
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	60d3      	str	r3, [r2, #12]
 8007548:	4b0f      	ldr	r3, [pc, #60]	@ (8007588 <lcd_fill+0xd4>)
 800754a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800754e:	611a      	str	r2, [r3, #16]
 8007550:	4b0d      	ldr	r3, [pc, #52]	@ (8007588 <lcd_fill+0xd4>)
 8007552:	2280      	movs	r2, #128	@ 0x80
 8007554:	611a      	str	r2, [r3, #16]
 8007556:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <lcd_fill+0xd4>)
 8007558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800755c:	611a      	str	r2, [r3, #16]
        for (j = 0; j < xlen; j++)
 800755e:	89bb      	ldrh	r3, [r7, #12]
 8007560:	3301      	adds	r3, #1
 8007562:	81bb      	strh	r3, [r7, #12]
 8007564:	89ba      	ldrh	r2, [r7, #12]
 8007566:	897b      	ldrh	r3, [r7, #10]
 8007568:	429a      	cmp	r2, r3
 800756a:	d3e2      	bcc.n	8007532 <lcd_fill+0x7e>
    for (i = sy; i <= ey; i++)
 800756c:	89fb      	ldrh	r3, [r7, #14]
 800756e:	3301      	adds	r3, #1
 8007570:	81fb      	strh	r3, [r7, #14]
 8007572:	89fa      	ldrh	r2, [r7, #14]
 8007574:	883b      	ldrh	r3, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d9b6      	bls.n	80074e8 <lcd_fill+0x34>
        }
    }
}
 800757a:	bf00      	nop
 800757c:	bf00      	nop
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	bd90      	pop	{r4, r7, pc}
 8007584:	20000038 	.word	0x20000038
 8007588:	40011000 	.word	0x40011000
 800758c:	40010c00 	.word	0x40010c00

08007590 <lcd_draw_hline>:
 * @param       len  : �߳���
 * @param       color: ���ε���ɫ
 * @retval      ��
 */
void lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b085      	sub	sp, #20
 8007594:	af02      	add	r7, sp, #8
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	461a      	mov	r2, r3
 800759e:	4623      	mov	r3, r4
 80075a0:	80fb      	strh	r3, [r7, #6]
 80075a2:	4603      	mov	r3, r0
 80075a4:	80bb      	strh	r3, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	807b      	strh	r3, [r7, #2]
 80075aa:	4613      	mov	r3, r2
 80075ac:	803b      	strh	r3, [r7, #0]
    if ((len == 0) || (x > lcddev.width) || (y > lcddev.height))return;
 80075ae:	887b      	ldrh	r3, [r7, #2]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d018      	beq.n	80075e6 <lcd_draw_hline+0x56>
 80075b4:	4b0e      	ldr	r3, [pc, #56]	@ (80075f0 <lcd_draw_hline+0x60>)
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d813      	bhi.n	80075e6 <lcd_draw_hline+0x56>
 80075be:	4b0c      	ldr	r3, [pc, #48]	@ (80075f0 <lcd_draw_hline+0x60>)
 80075c0:	885b      	ldrh	r3, [r3, #2]
 80075c2:	88ba      	ldrh	r2, [r7, #4]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d80e      	bhi.n	80075e6 <lcd_draw_hline+0x56>

    lcd_fill(x, y, x + len - 1, y, color);
 80075c8:	88fa      	ldrh	r2, [r7, #6]
 80075ca:	887b      	ldrh	r3, [r7, #2]
 80075cc:	4413      	add	r3, r2
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	883b      	ldrh	r3, [r7, #0]
 80075d6:	88bc      	ldrh	r4, [r7, #4]
 80075d8:	88b9      	ldrh	r1, [r7, #4]
 80075da:	88f8      	ldrh	r0, [r7, #6]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4623      	mov	r3, r4
 80075e0:	f7ff ff68 	bl	80074b4 <lcd_fill>
 80075e4:	e000      	b.n	80075e8 <lcd_draw_hline+0x58>
    if ((len == 0) || (x > lcddev.width) || (y > lcddev.height))return;
 80075e6:	bf00      	nop
}
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd90      	pop	{r4, r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20000038 	.word	0x20000038

080075f4 <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 80075f4:	b590      	push	{r4, r7, lr}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	4611      	mov	r1, r2
 8007600:	461a      	mov	r2, r3
 8007602:	4623      	mov	r3, r4
 8007604:	80fb      	strh	r3, [r7, #6]
 8007606:	4603      	mov	r3, r0
 8007608:	80bb      	strh	r3, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
 800760e:	4613      	mov	r3, r2
 8007610:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8007612:	88bb      	ldrh	r3, [r7, #4]
 8007614:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 800761e:	78bb      	ldrb	r3, [r7, #2]
 8007620:	08db      	lsrs	r3, r3, #3
 8007622:	b2db      	uxtb	r3, r3
 8007624:	461a      	mov	r2, r3
 8007626:	78bb      	ldrb	r3, [r7, #2]
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	bf14      	ite	ne
 8007632:	2301      	movne	r3, #1
 8007634:	2300      	moveq	r3, #0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	4413      	add	r3, r2
 800763a:	b2db      	uxtb	r3, r3
 800763c:	78ba      	ldrb	r2, [r7, #2]
 800763e:	0852      	lsrs	r2, r2, #1
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	fb02 f303 	mul.w	r3, r2, r3
 8007646:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 8007648:	78fb      	ldrb	r3, [r7, #3]
 800764a:	3b20      	subs	r3, #32
 800764c:	70fb      	strb	r3, [r7, #3]

    switch (size)
 800764e:	78bb      	ldrb	r3, [r7, #2]
 8007650:	3b0c      	subs	r3, #12
 8007652:	2b14      	cmp	r3, #20
 8007654:	f200 80b1 	bhi.w	80077ba <lcd_show_char+0x1c6>
 8007658:	a201      	add	r2, pc, #4	@ (adr r2, 8007660 <lcd_show_char+0x6c>)
 800765a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765e:	bf00      	nop
 8007660:	080076b5 	.word	0x080076b5
 8007664:	080077bb 	.word	0x080077bb
 8007668:	080077bb 	.word	0x080077bb
 800766c:	080077bb 	.word	0x080077bb
 8007670:	080076c7 	.word	0x080076c7
 8007674:	080077bb 	.word	0x080077bb
 8007678:	080077bb 	.word	0x080077bb
 800767c:	080077bb 	.word	0x080077bb
 8007680:	080077bb 	.word	0x080077bb
 8007684:	080077bb 	.word	0x080077bb
 8007688:	080077bb 	.word	0x080077bb
 800768c:	080077bb 	.word	0x080077bb
 8007690:	080076d3 	.word	0x080076d3
 8007694:	080077bb 	.word	0x080077bb
 8007698:	080077bb 	.word	0x080077bb
 800769c:	080077bb 	.word	0x080077bb
 80076a0:	080077bb 	.word	0x080077bb
 80076a4:	080077bb 	.word	0x080077bb
 80076a8:	080077bb 	.word	0x080077bb
 80076ac:	080077bb 	.word	0x080077bb
 80076b0:	080076e5 	.word	0x080076e5
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 80076b4:	78fa      	ldrb	r2, [r7, #3]
 80076b6:	4613      	mov	r3, r2
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4a42      	ldr	r2, [pc, #264]	@ (80077c8 <lcd_show_char+0x1d4>)
 80076c0:	4413      	add	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]
            break;
 80076c4:	e014      	b.n	80076f0 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	4a40      	ldr	r2, [pc, #256]	@ (80077cc <lcd_show_char+0x1d8>)
 80076cc:	4413      	add	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
            break;
 80076d0:	e00e      	b.n	80076f0 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	4613      	mov	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4a3c      	ldr	r2, [pc, #240]	@ (80077d0 <lcd_show_char+0x1dc>)
 80076de:	4413      	add	r3, r2
 80076e0:	613b      	str	r3, [r7, #16]
            break;
 80076e2:	e005      	b.n	80076f0 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 80076e4:	78fb      	ldrb	r3, [r7, #3]
 80076e6:	019b      	lsls	r3, r3, #6
 80076e8:	4a3a      	ldr	r2, [pc, #232]	@ (80077d4 <lcd_show_char+0x1e0>)
 80076ea:	4413      	add	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]
            break;
 80076ee:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 80076f0:	2300      	movs	r3, #0
 80076f2:	757b      	strb	r3, [r7, #21]
 80076f4:	e05c      	b.n	80077b0 <lcd_show_char+0x1bc>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 80076f6:	7d7b      	ldrb	r3, [r7, #21]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8007700:	2300      	movs	r3, #0
 8007702:	75bb      	strb	r3, [r7, #22]
 8007704:	e04c      	b.n	80077a0 <lcd_show_char+0x1ac>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 8007706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800770a:	2b00      	cmp	r3, #0
 800770c:	da06      	bge.n	800771c <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 800770e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007710:	88b9      	ldrh	r1, [r7, #4]
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	4618      	mov	r0, r3
 8007716:	f7fa fd2f 	bl	8002178 <lcd_draw_point>
 800771a:	e022      	b.n	8007762 <lcd_show_char+0x16e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 800771c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	d107      	bne.n	8007734 <lcd_show_char+0x140>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 8007724:	4b2c      	ldr	r3, [pc, #176]	@ (80077d8 <lcd_show_char+0x1e4>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	88b9      	ldrh	r1, [r7, #4]
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	4618      	mov	r0, r3
 800772e:	f7fa fd23 	bl	8002178 <lcd_draw_point>
 8007732:	e016      	b.n	8007762 <lcd_show_char+0x16e>
            } else if (mode == 1)
 8007734:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007738:	2b01      	cmp	r3, #1
 800773a:	d107      	bne.n	800774c <lcd_show_char+0x158>
            {
            	lcd_draw_point(x, y, RED);
 800773c:	88b9      	ldrh	r1, [r7, #4]
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8007744:	4618      	mov	r0, r3
 8007746:	f7fa fd17 	bl	8002178 <lcd_draw_point>
 800774a:	e00a      	b.n	8007762 <lcd_show_char+0x16e>
            } else if (mode == 2)
 800774c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007750:	2b02      	cmp	r3, #2
 8007752:	d106      	bne.n	8007762 <lcd_show_char+0x16e>
            {
            	lcd_draw_point(x, y, GREEN);
 8007754:	88b9      	ldrh	r1, [r7, #4]
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800775c:	4618      	mov	r0, r3
 800775e:	f7fa fd0b 	bl	8002178 <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
            y++;
 8007768:	88bb      	ldrh	r3, [r7, #4]
 800776a:	3301      	adds	r3, #1
 800776c:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 800776e:	4b1b      	ldr	r3, [pc, #108]	@ (80077dc <lcd_show_char+0x1e8>)
 8007770:	885b      	ldrh	r3, [r3, #2]
 8007772:	88ba      	ldrh	r2, [r7, #4]
 8007774:	429a      	cmp	r2, r3
 8007776:	d222      	bcs.n	80077be <lcd_show_char+0x1ca>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 8007778:	88ba      	ldrh	r2, [r7, #4]
 800777a:	89fb      	ldrh	r3, [r7, #14]
 800777c:	1ad2      	subs	r2, r2, r3
 800777e:	78bb      	ldrb	r3, [r7, #2]
 8007780:	429a      	cmp	r2, r3
 8007782:	d10a      	bne.n	800779a <lcd_show_char+0x1a6>
            {
                y = y0; /* y���긴λ */
 8007784:	89fb      	ldrh	r3, [r7, #14]
 8007786:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	3301      	adds	r3, #1
 800778c:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 800778e:	4b13      	ldr	r3, [pc, #76]	@ (80077dc <lcd_show_char+0x1e8>)
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	88fa      	ldrh	r2, [r7, #6]
 8007794:	429a      	cmp	r2, r3
 8007796:	d307      	bcc.n	80077a8 <lcd_show_char+0x1b4>
 8007798:	e012      	b.n	80077c0 <lcd_show_char+0x1cc>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 800779a:	7dbb      	ldrb	r3, [r7, #22]
 800779c:	3301      	adds	r3, #1
 800779e:	75bb      	strb	r3, [r7, #22]
 80077a0:	7dbb      	ldrb	r3, [r7, #22]
 80077a2:	2b07      	cmp	r3, #7
 80077a4:	d9af      	bls.n	8007706 <lcd_show_char+0x112>
 80077a6:	e000      	b.n	80077aa <lcd_show_char+0x1b6>

                break;
 80077a8:	bf00      	nop
    for (t = 0; t < csize; t++)
 80077aa:	7d7b      	ldrb	r3, [r7, #21]
 80077ac:	3301      	adds	r3, #1
 80077ae:	757b      	strb	r3, [r7, #21]
 80077b0:	7d7a      	ldrb	r2, [r7, #21]
 80077b2:	7b7b      	ldrb	r3, [r7, #13]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d39e      	bcc.n	80076f6 <lcd_show_char+0x102>
 80077b8:	e002      	b.n	80077c0 <lcd_show_char+0x1cc>
            return ;
 80077ba:	bf00      	nop
 80077bc:	e000      	b.n	80077c0 <lcd_show_char+0x1cc>
            if (y >= lcddev.height)return;  /* �������� */
 80077be:	bf00      	nop
            }
        }
    }
}
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd90      	pop	{r4, r7, pc}
 80077c6:	bf00      	nop
 80077c8:	08008de8 	.word	0x08008de8
 80077cc:	0800925c 	.word	0x0800925c
 80077d0:	0800984c 	.word	0x0800984c
 80077d4:	0800a5a8 	.word	0x0800a5a8
 80077d8:	20000000 	.word	0x20000000
 80077dc:	20000038 	.word	0x20000038

080077e0 <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 80077e0:	b590      	push	{r4, r7, lr}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	4611      	mov	r1, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	4623      	mov	r3, r4
 80077f0:	80fb      	strh	r3, [r7, #6]
 80077f2:	4603      	mov	r3, r0
 80077f4:	80bb      	strh	r3, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	807b      	strh	r3, [r7, #2]
 80077fa:	4613      	mov	r3, r2
 80077fc:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 80077fe:	88fb      	ldrh	r3, [r7, #6]
 8007800:	73fb      	strb	r3, [r7, #15]
    width += x;
 8007802:	887a      	ldrh	r2, [r7, #2]
 8007804:	88fb      	ldrh	r3, [r7, #6]
 8007806:	4413      	add	r3, r2
 8007808:	807b      	strh	r3, [r7, #2]
    height += y;
 800780a:	883a      	ldrh	r2, [r7, #0]
 800780c:	88bb      	ldrh	r3, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))
 8007812:	e027      	b.n	8007864 <lcd_show_string+0x84>
    {
        if (x >= width)
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	887b      	ldrh	r3, [r7, #2]
 8007818:	429a      	cmp	r2, r3
 800781a:	d307      	bcc.n	800782c <lcd_show_string+0x4c>
        {
            x = x0;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	80fb      	strh	r3, [r7, #6]
            y += size;
 8007820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007824:	b29a      	uxth	r2, r3
 8007826:	88bb      	ldrh	r3, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height) break;
 800782c:	88ba      	ldrh	r2, [r7, #4]
 800782e:	883b      	ldrh	r3, [r7, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d220      	bcs.n	8007876 <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8007834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	f897 4020 	ldrb.w	r4, [r7, #32]
 800783c:	88b9      	ldrh	r1, [r7, #4]
 800783e:	88f8      	ldrh	r0, [r7, #6]
 8007840:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	2300      	movs	r3, #0
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	4623      	mov	r3, r4
 800784a:	f7ff fed3 	bl	80075f4 <lcd_show_char>
        x += size / 2;
 800784e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	b2db      	uxtb	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	4413      	add	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
        p++;
 800785e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007860:	3301      	adds	r3, #1
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b7e      	cmp	r3, #126	@ 0x7e
 800786a:	d805      	bhi.n	8007878 <lcd_show_string+0x98>
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b1f      	cmp	r3, #31
 8007872:	d8cf      	bhi.n	8007814 <lcd_show_string+0x34>
    }
}
 8007874:	e000      	b.n	8007878 <lcd_show_string+0x98>
        if (y >= height) break;
 8007876:	bf00      	nop
}
 8007878:	bf00      	nop
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	bd90      	pop	{r4, r7, pc}

08007880 <lcd_show_string_highlight>:

void lcd_show_string_highlight(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color, uint32_t nth)
{
 8007880:	b590      	push	{r4, r7, lr}
 8007882:	b087      	sub	sp, #28
 8007884:	af02      	add	r7, sp, #8
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	4611      	mov	r1, r2
 800788c:	461a      	mov	r2, r3
 800788e:	4623      	mov	r3, r4
 8007890:	80fb      	strh	r3, [r7, #6]
 8007892:	4603      	mov	r3, r0
 8007894:	80bb      	strh	r3, [r7, #4]
 8007896:	460b      	mov	r3, r1
 8007898:	807b      	strh	r3, [r7, #2]
 800789a:	4613      	mov	r3, r2
 800789c:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	72fb      	strb	r3, [r7, #11]
    uint32_t count = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
    width += x;
 80078a6:	887a      	ldrh	r2, [r7, #2]
 80078a8:	88fb      	ldrh	r3, [r7, #6]
 80078aa:	4413      	add	r3, r2
 80078ac:	807b      	strh	r3, [r7, #2]
    height += y;
 80078ae:	883a      	ldrh	r2, [r7, #0]
 80078b0:	88bb      	ldrh	r3, [r7, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))
 80078b6:	e04f      	b.n	8007958 <lcd_show_string_highlight+0xd8>
    {
        if (x >= width)
 80078b8:	88fa      	ldrh	r2, [r7, #6]
 80078ba:	887b      	ldrh	r3, [r7, #2]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d307      	bcc.n	80078d0 <lcd_show_string_highlight+0x50>
        {
            x = x0;
 80078c0:	7afb      	ldrb	r3, [r7, #11]
 80078c2:	80fb      	strh	r3, [r7, #6]
            y += size;
 80078c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	88bb      	ldrh	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height) break;
 80078d0:	88ba      	ldrh	r2, [r7, #4]
 80078d2:	883b      	ldrh	r3, [r7, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d248      	bcs.n	800796a <lcd_show_string_highlight+0xea>

        if (count != nth) {
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078dc:	429a      	cmp	r2, r3
 80078de:	d00c      	beq.n	80078fa <lcd_show_string_highlight+0x7a>
        	lcd_show_char(x, y, *p, size, 0, BLACK);
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078e8:	88b9      	ldrh	r1, [r7, #4]
 80078ea:	88f8      	ldrh	r0, [r7, #6]
 80078ec:	2400      	movs	r4, #0
 80078ee:	9401      	str	r4, [sp, #4]
 80078f0:	2400      	movs	r4, #0
 80078f2:	9400      	str	r4, [sp, #0]
 80078f4:	f7ff fe7e 	bl	80075f4 <lcd_show_char>
 80078f8:	e020      	b.n	800793c <lcd_show_string_highlight+0xbc>
        } else if (color == RED) {
 80078fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80078fc:	f5b3 4f78 	cmp.w	r3, #63488	@ 0xf800
 8007900:	d10c      	bne.n	800791c <lcd_show_string_highlight+0x9c>
        	lcd_show_char(x, y, *p, size, 1, BLACK);
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	781a      	ldrb	r2, [r3, #0]
 8007906:	f897 3020 	ldrb.w	r3, [r7, #32]
 800790a:	88b9      	ldrh	r1, [r7, #4]
 800790c:	88f8      	ldrh	r0, [r7, #6]
 800790e:	2400      	movs	r4, #0
 8007910:	9401      	str	r4, [sp, #4]
 8007912:	2401      	movs	r4, #1
 8007914:	9400      	str	r4, [sp, #0]
 8007916:	f7ff fe6d 	bl	80075f4 <lcd_show_char>
 800791a:	e00f      	b.n	800793c <lcd_show_string_highlight+0xbc>
        } else if (color == GREEN) {
 800791c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800791e:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 8007922:	d10b      	bne.n	800793c <lcd_show_string_highlight+0xbc>
        	lcd_show_char(x, y, *p, size, 2, BLACK);
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	781a      	ldrb	r2, [r3, #0]
 8007928:	f897 3020 	ldrb.w	r3, [r7, #32]
 800792c:	88b9      	ldrh	r1, [r7, #4]
 800792e:	88f8      	ldrh	r0, [r7, #6]
 8007930:	2400      	movs	r4, #0
 8007932:	9401      	str	r4, [sp, #4]
 8007934:	2402      	movs	r4, #2
 8007936:	9400      	str	r4, [sp, #0]
 8007938:	f7ff fe5c 	bl	80075f4 <lcd_show_char>
        }

        x += size / 2;
 800793c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007940:	085b      	lsrs	r3, r3, #1
 8007942:	b2db      	uxtb	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	4413      	add	r3, r2
 800794a:	80fb      	strh	r3, [r7, #6]
        p++;
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	3301      	adds	r3, #1
 8007950:	627b      	str	r3, [r7, #36]	@ 0x24
        count++;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3301      	adds	r3, #1
 8007956:	60fb      	str	r3, [r7, #12]
    while ((*p <= '~') && (*p >= ' '))
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b7e      	cmp	r3, #126	@ 0x7e
 800795e:	d805      	bhi.n	800796c <lcd_show_string_highlight+0xec>
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b1f      	cmp	r3, #31
 8007966:	d8a7      	bhi.n	80078b8 <lcd_show_string_highlight+0x38>
    }
}
 8007968:	e000      	b.n	800796c <lcd_show_string_highlight+0xec>
        if (y >= height) break;
 800796a:	bf00      	nop
}
 800796c:	bf00      	nop
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	bd90      	pop	{r4, r7, pc}

08007974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007978:	f000 fa32 	bl	8007de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800797c:	f000 f834 	bl	80079e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007980:	f7f8 ff58 	bl	8000834 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8007984:	f7fa fddc 	bl	8002540 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  print_screen();
 8007988:	f7f9 fa38 	bl	8000dfc <print_screen>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 800798c:	2120      	movs	r1, #32
 800798e:	4813      	ldr	r0, [pc, #76]	@ (80079dc <main+0x68>)
 8007990:	f000 fd4e 	bl	8008430 <HAL_GPIO_ReadPin>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <main+0x34>
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800799a:	2200      	movs	r2, #0
 800799c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80079a0:	480f      	ldr	r0, [pc, #60]	@ (80079e0 <main+0x6c>)
 80079a2:	f000 fd5c 	bl	800845e <HAL_GPIO_WritePin>
 80079a6:	e7f1      	b.n	800798c <main+0x18>
	  } else if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 80079a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079ac:	480c      	ldr	r0, [pc, #48]	@ (80079e0 <main+0x6c>)
 80079ae:	f000 fd3f 	bl	8008430 <HAL_GPIO_ReadPin>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <main+0x50>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80079b8:	2200      	movs	r2, #0
 80079ba:	2104      	movs	r1, #4
 80079bc:	4809      	ldr	r0, [pc, #36]	@ (80079e4 <main+0x70>)
 80079be:	f000 fd4e 	bl	800845e <HAL_GPIO_WritePin>
 80079c2:	e7e3      	b.n	800798c <main+0x18>
	  } else {
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80079c4:	2201      	movs	r2, #1
 80079c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80079ca:	4805      	ldr	r0, [pc, #20]	@ (80079e0 <main+0x6c>)
 80079cc:	f000 fd47 	bl	800845e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80079d0:	2201      	movs	r2, #1
 80079d2:	2104      	movs	r1, #4
 80079d4:	4803      	ldr	r0, [pc, #12]	@ (80079e4 <main+0x70>)
 80079d6:	f000 fd42 	bl	800845e <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 80079da:	e7d7      	b.n	800798c <main+0x18>
 80079dc:	40011000 	.word	0x40011000
 80079e0:	40010800 	.word	0x40010800
 80079e4:	40011400 	.word	0x40011400

080079e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b090      	sub	sp, #64	@ 0x40
 80079ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079ee:	f107 0318 	add.w	r3, r7, #24
 80079f2:	2228      	movs	r2, #40	@ 0x28
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 f94a 	bl	8008c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079fc:	1d3b      	adds	r3, r7, #4
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	605a      	str	r2, [r3, #4]
 8007a04:	609a      	str	r2, [r3, #8]
 8007a06:	60da      	str	r2, [r3, #12]
 8007a08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007a14:	2300      	movs	r3, #0
 8007a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007a26:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8007a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a2c:	f107 0318 	add.w	r3, r7, #24
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fd45 	bl	80084c0 <HAL_RCC_OscConfig>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007a3c:	f000 f819 	bl	8007a72 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a40:	230f      	movs	r3, #15
 8007a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a44:	2302      	movs	r3, #2
 8007a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	2102      	movs	r1, #2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 ffb2 	bl	80089c4 <HAL_RCC_ClockConfig>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007a66:	f000 f804 	bl	8007a72 <Error_Handler>
  }
}
 8007a6a:	bf00      	nop
 8007a6c:	3740      	adds	r7, #64	@ 0x40
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a72:	b480      	push	{r7}
 8007a74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007a76:	b672      	cpsid	i
}
 8007a78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <Error_Handler+0x8>
	...

08007a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007a86:	4b16      	ldr	r3, [pc, #88]	@ (8007ae0 <HAL_MspInit+0x60>)
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	4a15      	ldr	r2, [pc, #84]	@ (8007ae0 <HAL_MspInit+0x60>)
 8007a8c:	f043 0301 	orr.w	r3, r3, #1
 8007a90:	6193      	str	r3, [r2, #24]
 8007a92:	4b13      	ldr	r3, [pc, #76]	@ (8007ae0 <HAL_MspInit+0x60>)
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	60bb      	str	r3, [r7, #8]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ae0 <HAL_MspInit+0x60>)
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8007ae0 <HAL_MspInit+0x60>)
 8007aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aa8:	61d3      	str	r3, [r2, #28]
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <HAL_MspInit+0x60>)
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ab2:	607b      	str	r3, [r7, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8007ab6:	2005      	movs	r0, #5
 8007ab8:	f000 fae4 	bl	8008084 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007abc:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <HAL_MspInit+0x64>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	4a04      	ldr	r2, [pc, #16]	@ (8007ae4 <HAL_MspInit+0x64>)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40021000 	.word	0x40021000
 8007ae4:	40010000 	.word	0x40010000

08007ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007aec:	bf00      	nop
 8007aee:	e7fd      	b.n	8007aec <NMI_Handler+0x4>

08007af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <HardFault_Handler+0x4>

08007af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007afc:	bf00      	nop
 8007afe:	e7fd      	b.n	8007afc <MemManage_Handler+0x4>

08007b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b04:	bf00      	nop
 8007b06:	e7fd      	b.n	8007b04 <BusFault_Handler+0x4>

08007b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b0c:	bf00      	nop
 8007b0e:	e7fd      	b.n	8007b0c <UsageFault_Handler+0x4>

08007b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007b14:	bf00      	nop
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr

08007b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b20:	bf00      	nop
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007b2c:	bf00      	nop
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007b38:	f000 f998 	bl	8007e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007b3c:	bf00      	nop
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007b44:	2001      	movs	r0, #1
 8007b46:	f000 fca3 	bl	8008490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007b4a:	bf00      	nop
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007b52:	2020      	movs	r0, #32
 8007b54:	f000 fc9c 	bl	8008490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007b58:	bf00      	nop
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007b60:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007b64:	f000 fc94 	bl	8008490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007b68:	bf00      	nop
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8007b76:	2064      	movs	r0, #100	@ 0x64
 8007b78:	f000 f994 	bl	8007ea4 <HAL_Delay>
	uint32_t limit = mode ? HAMMING_DECODING_LENGTH : HAMMING_ENCODING_LENGTH;
 8007b7c:	4b7c      	ldr	r3, [pc, #496]	@ (8007d70 <HAL_GPIO_EXTI_Callback+0x204>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_GPIO_EXTI_Callback+0x1c>
 8007b84:	2308      	movs	r3, #8
 8007b86:	e000      	b.n	8007b8a <HAL_GPIO_EXTI_Callback+0x1e>
 8007b88:	2304      	movs	r3, #4
 8007b8a:	60fb      	str	r3, [r7, #12]
	switch (GPIO_Pin) {
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b92:	d04b      	beq.n	8007c2c <HAL_GPIO_EXTI_Callback+0xc0>
 8007b94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b98:	f300 80df 	bgt.w	8007d5a <HAL_GPIO_EXTI_Callback+0x1ee>
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	f000 8088 	beq.w	8007cb2 <HAL_GPIO_EXTI_Callback+0x146>
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	f040 80d9 	bne.w	8007d5a <HAL_GPIO_EXTI_Callback+0x1ee>
		case KEY0_Pin:
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8007ba8:	2120      	movs	r1, #32
 8007baa:	4872      	ldr	r0, [pc, #456]	@ (8007d74 <HAL_GPIO_EXTI_Callback+0x208>)
 8007bac:	f000 fc40 	bl	8008430 <HAL_GPIO_ReadPin>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f040 80d3 	bne.w	8007d5e <HAL_GPIO_EXTI_Callback+0x1f2>
				// if both keys pressed, clear the screen and input.
				if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007bb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007bbc:	486e      	ldr	r0, [pc, #440]	@ (8007d78 <HAL_GPIO_EXTI_Callback+0x20c>)
 8007bbe:	f000 fc37 	bl	8008430 <HAL_GPIO_ReadPin>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d109      	bne.n	8007bdc <HAL_GPIO_EXTI_Callback+0x70>
					input_data = input_length = 0; // clear input
 8007bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	4b6b      	ldr	r3, [pc, #428]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a6b      	ldr	r2, [pc, #428]	@ (8007d80 <HAL_GPIO_EXTI_Callback+0x214>)
 8007bd4:	6013      	str	r3, [r2, #0]
					print_screen(); // clear screen
 8007bd6:	f7f9 f911 	bl	8000dfc <print_screen>
					break;
 8007bda:	e0c5      	b.n	8007d68 <HAL_GPIO_EXTI_Callback+0x1fc>
				}

				// input 0
				if (input_length < limit) input_data = input_data << 1;
 8007bdc:	4b67      	ldr	r3, [pc, #412]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d904      	bls.n	8007bf0 <HAL_GPIO_EXTI_Callback+0x84>
 8007be6:	4b66      	ldr	r3, [pc, #408]	@ (8007d80 <HAL_GPIO_EXTI_Callback+0x214>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	4a64      	ldr	r2, [pc, #400]	@ (8007d80 <HAL_GPIO_EXTI_Callback+0x214>)
 8007bee:	6013      	str	r3, [r2, #0]

				// constrain input when reach the input limit, refresh to input
				input_length = input_length >= limit ? limit : input_length + 1;
 8007bf0:	4b62      	ldr	r3, [pc, #392]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d903      	bls.n	8007c02 <HAL_GPIO_EXTI_Callback+0x96>
 8007bfa:	4b60      	ldr	r3, [pc, #384]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	e000      	b.n	8007c04 <HAL_GPIO_EXTI_Callback+0x98>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4a5d      	ldr	r2, [pc, #372]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007c06:	6013      	str	r3, [r2, #0]

				// refresh specific zone
				if (mode == HAMMING_ENCODING_MODE) fresh_origin();
 8007c08:	4b59      	ldr	r3, [pc, #356]	@ (8007d70 <HAL_GPIO_EXTI_Callback+0x204>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <HAL_GPIO_EXTI_Callback+0xaa>
 8007c10:	f7f8 feb4 	bl	800097c <fresh_origin>
 8007c14:	e001      	b.n	8007c1a <HAL_GPIO_EXTI_Callback+0xae>
				else fresh_hamming();
 8007c16:	f7f8 fefd 	bl	8000a14 <fresh_hamming>

				if (input_length == limit) print_result(); // print result at the end
 8007c1a:	4b58      	ldr	r3, [pc, #352]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	f040 809c 	bne.w	8007d5e <HAL_GPIO_EXTI_Callback+0x1f2>
 8007c26:	f7f8 ff3f 	bl	8000aa8 <print_result>
			}
			break;
 8007c2a:	e098      	b.n	8007d5e <HAL_GPIO_EXTI_Callback+0x1f2>

		case KEY1_Pin:
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007c2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c30:	4851      	ldr	r0, [pc, #324]	@ (8007d78 <HAL_GPIO_EXTI_Callback+0x20c>)
 8007c32:	f000 fbfd 	bl	8008430 <HAL_GPIO_ReadPin>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f040 8092 	bne.w	8007d62 <HAL_GPIO_EXTI_Callback+0x1f6>
				// if both keys pressed, clear the screen and input.
				if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8007c3e:	2120      	movs	r1, #32
 8007c40:	484c      	ldr	r0, [pc, #304]	@ (8007d74 <HAL_GPIO_EXTI_Callback+0x208>)
 8007c42:	f000 fbf5 	bl	8008430 <HAL_GPIO_ReadPin>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d109      	bne.n	8007c60 <HAL_GPIO_EXTI_Callback+0xf4>
					input_data = input_length = 0; // clear input
 8007c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	4b4a      	ldr	r3, [pc, #296]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a4a      	ldr	r2, [pc, #296]	@ (8007d80 <HAL_GPIO_EXTI_Callback+0x214>)
 8007c58:	6013      	str	r3, [r2, #0]
					print_screen(); // clear screen
 8007c5a:	f7f9 f8cf 	bl	8000dfc <print_screen>
					break;
 8007c5e:	e083      	b.n	8007d68 <HAL_GPIO_EXTI_Callback+0x1fc>
				}

				// input 1
				if (input_length < limit) input_data = input_data << 1 | 1;
 8007c60:	4b46      	ldr	r3, [pc, #280]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d906      	bls.n	8007c78 <HAL_GPIO_EXTI_Callback+0x10c>
 8007c6a:	4b45      	ldr	r3, [pc, #276]	@ (8007d80 <HAL_GPIO_EXTI_Callback+0x214>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	4a42      	ldr	r2, [pc, #264]	@ (8007d80 <HAL_GPIO_EXTI_Callback+0x214>)
 8007c76:	6013      	str	r3, [r2, #0]

				// constrain input when reach the input limit, refresh to input
				input_length = input_length >= limit ? limit : input_length + 1;
 8007c78:	4b40      	ldr	r3, [pc, #256]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d903      	bls.n	8007c8a <HAL_GPIO_EXTI_Callback+0x11e>
 8007c82:	4b3e      	ldr	r3, [pc, #248]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3301      	adds	r3, #1
 8007c88:	e000      	b.n	8007c8c <HAL_GPIO_EXTI_Callback+0x120>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007c8e:	6013      	str	r3, [r2, #0]

				// refresh specific zone
				if (mode == HAMMING_ENCODING_MODE) fresh_origin();
 8007c90:	4b37      	ldr	r3, [pc, #220]	@ (8007d70 <HAL_GPIO_EXTI_Callback+0x204>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <HAL_GPIO_EXTI_Callback+0x132>
 8007c98:	f7f8 fe70 	bl	800097c <fresh_origin>
 8007c9c:	e001      	b.n	8007ca2 <HAL_GPIO_EXTI_Callback+0x136>
				else fresh_hamming();
 8007c9e:	f7f8 feb9 	bl	8000a14 <fresh_hamming>

				if (input_length == limit) print_result(); // print result at the end
 8007ca2:	4b36      	ldr	r3, [pc, #216]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d15a      	bne.n	8007d62 <HAL_GPIO_EXTI_Callback+0x1f6>
 8007cac:	f7f8 fefc 	bl	8000aa8 <print_result>
			}
			break;
 8007cb0:	e057      	b.n	8007d62 <HAL_GPIO_EXTI_Callback+0x1f6>

		case WK_UP_Pin:
			if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) == GPIO_PIN_SET) {
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	4830      	ldr	r0, [pc, #192]	@ (8007d78 <HAL_GPIO_EXTI_Callback+0x20c>)
 8007cb6:	f000 fbbb 	bl	8008430 <HAL_GPIO_ReadPin>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d152      	bne.n	8007d66 <HAL_GPIO_EXTI_Callback+0x1fa>
				mode = mode ? 0 : 1; // change mode
 8007cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8007d70 <HAL_GPIO_EXTI_Callback+0x204>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2301      	moveq	r3, #1
 8007cca:	2300      	movne	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4b27      	ldr	r3, [pc, #156]	@ (8007d70 <HAL_GPIO_EXTI_Callback+0x204>)
 8007cd2:	601a      	str	r2, [r3, #0]
				input_data = input_length = 0; // clear input
 8007cd4:	4b29      	ldr	r3, [pc, #164]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	4b28      	ldr	r3, [pc, #160]	@ (8007d7c <HAL_GPIO_EXTI_Callback+0x210>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a28      	ldr	r2, [pc, #160]	@ (8007d80 <HAL_GPIO_EXTI_Callback+0x214>)
 8007ce0:	6013      	str	r3, [r2, #0]
				print_screen(); // clear screen
 8007ce2:	f7f9 f88b 	bl	8000dfc <print_screen>

				// flash leds
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007cec:	4822      	ldr	r0, [pc, #136]	@ (8007d78 <HAL_GPIO_EXTI_Callback+0x20c>)
 8007cee:	f000 fbb6 	bl	800845e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2104      	movs	r1, #4
 8007cf6:	4823      	ldr	r0, [pc, #140]	@ (8007d84 <HAL_GPIO_EXTI_Callback+0x218>)
 8007cf8:	f000 fbb1 	bl	800845e <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8007cfc:	2064      	movs	r0, #100	@ 0x64
 8007cfe:	f000 f8d1 	bl	8007ea4 <HAL_Delay>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8007d02:	2201      	movs	r2, #1
 8007d04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007d08:	481b      	ldr	r0, [pc, #108]	@ (8007d78 <HAL_GPIO_EXTI_Callback+0x20c>)
 8007d0a:	f000 fba8 	bl	800845e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007d0e:	2201      	movs	r2, #1
 8007d10:	2104      	movs	r1, #4
 8007d12:	481c      	ldr	r0, [pc, #112]	@ (8007d84 <HAL_GPIO_EXTI_Callback+0x218>)
 8007d14:	f000 fba3 	bl	800845e <HAL_GPIO_WritePin>

				// flash a second time when changing from decode to encode
				if (mode == HAMMING_ENCODING_MODE) {
 8007d18:	4b15      	ldr	r3, [pc, #84]	@ (8007d70 <HAL_GPIO_EXTI_Callback+0x204>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d122      	bne.n	8007d66 <HAL_GPIO_EXTI_Callback+0x1fa>
					HAL_Delay(100);
 8007d20:	2064      	movs	r0, #100	@ 0x64
 8007d22:	f000 f8bf 	bl	8007ea4 <HAL_Delay>
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8007d26:	2200      	movs	r2, #0
 8007d28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007d2c:	4812      	ldr	r0, [pc, #72]	@ (8007d78 <HAL_GPIO_EXTI_Callback+0x20c>)
 8007d2e:	f000 fb96 	bl	800845e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8007d32:	2200      	movs	r2, #0
 8007d34:	2104      	movs	r1, #4
 8007d36:	4813      	ldr	r0, [pc, #76]	@ (8007d84 <HAL_GPIO_EXTI_Callback+0x218>)
 8007d38:	f000 fb91 	bl	800845e <HAL_GPIO_WritePin>
					HAL_Delay(100);
 8007d3c:	2064      	movs	r0, #100	@ 0x64
 8007d3e:	f000 f8b1 	bl	8007ea4 <HAL_Delay>
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8007d42:	2201      	movs	r2, #1
 8007d44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007d48:	480b      	ldr	r0, [pc, #44]	@ (8007d78 <HAL_GPIO_EXTI_Callback+0x20c>)
 8007d4a:	f000 fb88 	bl	800845e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007d4e:	2201      	movs	r2, #1
 8007d50:	2104      	movs	r1, #4
 8007d52:	480c      	ldr	r0, [pc, #48]	@ (8007d84 <HAL_GPIO_EXTI_Callback+0x218>)
 8007d54:	f000 fb83 	bl	800845e <HAL_GPIO_WritePin>
				}
			}
			break;
 8007d58:	e005      	b.n	8007d66 <HAL_GPIO_EXTI_Callback+0x1fa>
		default: break;
 8007d5a:	bf00      	nop
 8007d5c:	e004      	b.n	8007d68 <HAL_GPIO_EXTI_Callback+0x1fc>
			break;
 8007d5e:	bf00      	nop
 8007d60:	e002      	b.n	8007d68 <HAL_GPIO_EXTI_Callback+0x1fc>
			break;
 8007d62:	bf00      	nop
 8007d64:	e000      	b.n	8007d68 <HAL_GPIO_EXTI_Callback+0x1fc>
			break;
 8007d66:	bf00      	nop
	}
}
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	2000002c 	.word	0x2000002c
 8007d74:	40011000 	.word	0x40011000
 8007d78:	40010800 	.word	0x40010800
 8007d7c:	20000034 	.word	0x20000034
 8007d80:	20000030 	.word	0x20000030
 8007d84:	40011400 	.word	0x40011400

08007d88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d8c:	bf00      	nop
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr

08007d94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007d94:	480c      	ldr	r0, [pc, #48]	@ (8007dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007d96:	490d      	ldr	r1, [pc, #52]	@ (8007dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007d98:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007d9c:	e002      	b.n	8007da4 <LoopCopyDataInit>

08007d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007da2:	3304      	adds	r3, #4

08007da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007da8:	d3f9      	bcc.n	8007d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007daa:	4a0a      	ldr	r2, [pc, #40]	@ (8007dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007dac:	4c0a      	ldr	r4, [pc, #40]	@ (8007dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007db0:	e001      	b.n	8007db6 <LoopFillZerobss>

08007db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007db4:	3204      	adds	r2, #4

08007db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007db8:	d3fb      	bcc.n	8007db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007dba:	f7ff ffe5 	bl	8007d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007dbe:	f000 ff6f 	bl	8008ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007dc2:	f7ff fdd7 	bl	8007974 <main>
  bx lr
 8007dc6:	4770      	bx	lr
  ldr r0, =_sdata
 8007dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007dcc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8007dd0:	0800bd80 	.word	0x0800bd80
  ldr r2, =_sbss
 8007dd4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8007dd8:	2000004c 	.word	0x2000004c

08007ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007ddc:	e7fe      	b.n	8007ddc <ADC1_2_IRQHandler>
	...

08007de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007de4:	4b08      	ldr	r3, [pc, #32]	@ (8007e08 <HAL_Init+0x28>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a07      	ldr	r2, [pc, #28]	@ (8007e08 <HAL_Init+0x28>)
 8007dea:	f043 0310 	orr.w	r3, r3, #16
 8007dee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007df0:	2003      	movs	r0, #3
 8007df2:	f000 f947 	bl	8008084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007df6:	2000      	movs	r0, #0
 8007df8:	f000 f808 	bl	8007e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007dfc:	f7ff fe40 	bl	8007a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	40022000 	.word	0x40022000

08007e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e14:	4b12      	ldr	r3, [pc, #72]	@ (8007e60 <HAL_InitTick+0x54>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	4b12      	ldr	r3, [pc, #72]	@ (8007e64 <HAL_InitTick+0x58>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f95f 	bl	80080ee <HAL_SYSTICK_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e00e      	b.n	8007e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b0f      	cmp	r3, #15
 8007e3e:	d80a      	bhi.n	8007e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e40:	2200      	movs	r2, #0
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e48:	f000 f927 	bl	800809a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e4c:	4a06      	ldr	r2, [pc, #24]	@ (8007e68 <HAL_InitTick+0x5c>)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	e000      	b.n	8007e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20000004 	.word	0x20000004
 8007e64:	2000000c 	.word	0x2000000c
 8007e68:	20000008 	.word	0x20000008

08007e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e70:	4b05      	ldr	r3, [pc, #20]	@ (8007e88 <HAL_IncTick+0x1c>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <HAL_IncTick+0x20>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	4a03      	ldr	r2, [pc, #12]	@ (8007e8c <HAL_IncTick+0x20>)
 8007e7e:	6013      	str	r3, [r2, #0]
}
 8007e80:	bf00      	nop
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bc80      	pop	{r7}
 8007e86:	4770      	bx	lr
 8007e88:	2000000c 	.word	0x2000000c
 8007e8c:	20000048 	.word	0x20000048

08007e90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  return uwTick;
 8007e94:	4b02      	ldr	r3, [pc, #8]	@ (8007ea0 <HAL_GetTick+0x10>)
 8007e96:	681b      	ldr	r3, [r3, #0]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr
 8007ea0:	20000048 	.word	0x20000048

08007ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007eac:	f7ff fff0 	bl	8007e90 <HAL_GetTick>
 8007eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ebc:	d005      	beq.n	8007eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee8 <HAL_Delay+0x44>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007eca:	bf00      	nop
 8007ecc:	f7ff ffe0 	bl	8007e90 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d8f7      	bhi.n	8007ecc <HAL_Delay+0x28>
  {
  }
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	2000000c 	.word	0x2000000c

08007eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007efc:	4b0c      	ldr	r3, [pc, #48]	@ (8007f30 <__NVIC_SetPriorityGrouping+0x44>)
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007f08:	4013      	ands	r3, r2
 8007f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f1e:	4a04      	ldr	r2, [pc, #16]	@ (8007f30 <__NVIC_SetPriorityGrouping+0x44>)
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	60d3      	str	r3, [r2, #12]
}
 8007f24:	bf00      	nop
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	e000ed00 	.word	0xe000ed00

08007f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f34:	b480      	push	{r7}
 8007f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f38:	4b04      	ldr	r3, [pc, #16]	@ (8007f4c <__NVIC_GetPriorityGrouping+0x18>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	0a1b      	lsrs	r3, r3, #8
 8007f3e:	f003 0307 	and.w	r3, r3, #7
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	e000ed00 	.word	0xe000ed00

08007f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	db0b      	blt.n	8007f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	f003 021f 	and.w	r2, r3, #31
 8007f68:	4906      	ldr	r1, [pc, #24]	@ (8007f84 <__NVIC_EnableIRQ+0x34>)
 8007f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	2001      	movs	r0, #1
 8007f72:	fa00 f202 	lsl.w	r2, r0, r2
 8007f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr
 8007f84:	e000e100 	.word	0xe000e100

08007f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db0a      	blt.n	8007fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	490c      	ldr	r1, [pc, #48]	@ (8007fd4 <__NVIC_SetPriority+0x4c>)
 8007fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fa6:	0112      	lsls	r2, r2, #4
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	440b      	add	r3, r1
 8007fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007fb0:	e00a      	b.n	8007fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	4908      	ldr	r1, [pc, #32]	@ (8007fd8 <__NVIC_SetPriority+0x50>)
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	3b04      	subs	r3, #4
 8007fc0:	0112      	lsls	r2, r2, #4
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	761a      	strb	r2, [r3, #24]
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bc80      	pop	{r7}
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	e000e100 	.word	0xe000e100
 8007fd8:	e000ed00 	.word	0xe000ed00

08007fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b089      	sub	sp, #36	@ 0x24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f003 0307 	and.w	r3, r3, #7
 8007fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f1c3 0307 	rsb	r3, r3, #7
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	bf28      	it	cs
 8007ffa:	2304      	movcs	r3, #4
 8007ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	3304      	adds	r3, #4
 8008002:	2b06      	cmp	r3, #6
 8008004:	d902      	bls.n	800800c <NVIC_EncodePriority+0x30>
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	3b03      	subs	r3, #3
 800800a:	e000      	b.n	800800e <NVIC_EncodePriority+0x32>
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008010:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	43da      	mvns	r2, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	401a      	ands	r2, r3
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008024:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	fa01 f303 	lsl.w	r3, r1, r3
 800802e:	43d9      	mvns	r1, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008034:	4313      	orrs	r3, r2
         );
}
 8008036:	4618      	mov	r0, r3
 8008038:	3724      	adds	r7, #36	@ 0x24
 800803a:	46bd      	mov	sp, r7
 800803c:	bc80      	pop	{r7}
 800803e:	4770      	bx	lr

08008040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3b01      	subs	r3, #1
 800804c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008050:	d301      	bcc.n	8008056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008052:	2301      	movs	r3, #1
 8008054:	e00f      	b.n	8008076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008056:	4a0a      	ldr	r2, [pc, #40]	@ (8008080 <SysTick_Config+0x40>)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3b01      	subs	r3, #1
 800805c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800805e:	210f      	movs	r1, #15
 8008060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008064:	f7ff ff90 	bl	8007f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008068:	4b05      	ldr	r3, [pc, #20]	@ (8008080 <SysTick_Config+0x40>)
 800806a:	2200      	movs	r2, #0
 800806c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800806e:	4b04      	ldr	r3, [pc, #16]	@ (8008080 <SysTick_Config+0x40>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	e000e010 	.word	0xe000e010

08008084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff ff2d 	bl	8007eec <__NVIC_SetPriorityGrouping>
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800809a:	b580      	push	{r7, lr}
 800809c:	b086      	sub	sp, #24
 800809e:	af00      	add	r7, sp, #0
 80080a0:	4603      	mov	r3, r0
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080ac:	f7ff ff42 	bl	8007f34 <__NVIC_GetPriorityGrouping>
 80080b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	6978      	ldr	r0, [r7, #20]
 80080b8:	f7ff ff90 	bl	8007fdc <NVIC_EncodePriority>
 80080bc:	4602      	mov	r2, r0
 80080be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff ff5f 	bl	8007f88 <__NVIC_SetPriority>
}
 80080ca:	bf00      	nop
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	4603      	mov	r3, r0
 80080da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff ff35 	bl	8007f50 <__NVIC_EnableIRQ>
}
 80080e6:	bf00      	nop
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff ffa2 	bl	8008040 <SysTick_Config>
 80080fc:	4603      	mov	r3, r0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008108:	b480      	push	{r7}
 800810a:	b08b      	sub	sp, #44	@ 0x2c
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008112:	2300      	movs	r3, #0
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008116:	2300      	movs	r3, #0
 8008118:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800811a:	e179      	b.n	8008410 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800811c:	2201      	movs	r2, #1
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	fa02 f303 	lsl.w	r3, r2, r3
 8008124:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	4013      	ands	r3, r2
 800812e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	429a      	cmp	r2, r3
 8008136:	f040 8168 	bne.w	800840a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	4a96      	ldr	r2, [pc, #600]	@ (8008398 <HAL_GPIO_Init+0x290>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d05e      	beq.n	8008202 <HAL_GPIO_Init+0xfa>
 8008144:	4a94      	ldr	r2, [pc, #592]	@ (8008398 <HAL_GPIO_Init+0x290>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d875      	bhi.n	8008236 <HAL_GPIO_Init+0x12e>
 800814a:	4a94      	ldr	r2, [pc, #592]	@ (800839c <HAL_GPIO_Init+0x294>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d058      	beq.n	8008202 <HAL_GPIO_Init+0xfa>
 8008150:	4a92      	ldr	r2, [pc, #584]	@ (800839c <HAL_GPIO_Init+0x294>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d86f      	bhi.n	8008236 <HAL_GPIO_Init+0x12e>
 8008156:	4a92      	ldr	r2, [pc, #584]	@ (80083a0 <HAL_GPIO_Init+0x298>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d052      	beq.n	8008202 <HAL_GPIO_Init+0xfa>
 800815c:	4a90      	ldr	r2, [pc, #576]	@ (80083a0 <HAL_GPIO_Init+0x298>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d869      	bhi.n	8008236 <HAL_GPIO_Init+0x12e>
 8008162:	4a90      	ldr	r2, [pc, #576]	@ (80083a4 <HAL_GPIO_Init+0x29c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d04c      	beq.n	8008202 <HAL_GPIO_Init+0xfa>
 8008168:	4a8e      	ldr	r2, [pc, #568]	@ (80083a4 <HAL_GPIO_Init+0x29c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d863      	bhi.n	8008236 <HAL_GPIO_Init+0x12e>
 800816e:	4a8e      	ldr	r2, [pc, #568]	@ (80083a8 <HAL_GPIO_Init+0x2a0>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d046      	beq.n	8008202 <HAL_GPIO_Init+0xfa>
 8008174:	4a8c      	ldr	r2, [pc, #560]	@ (80083a8 <HAL_GPIO_Init+0x2a0>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d85d      	bhi.n	8008236 <HAL_GPIO_Init+0x12e>
 800817a:	2b12      	cmp	r3, #18
 800817c:	d82a      	bhi.n	80081d4 <HAL_GPIO_Init+0xcc>
 800817e:	2b12      	cmp	r3, #18
 8008180:	d859      	bhi.n	8008236 <HAL_GPIO_Init+0x12e>
 8008182:	a201      	add	r2, pc, #4	@ (adr r2, 8008188 <HAL_GPIO_Init+0x80>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	08008203 	.word	0x08008203
 800818c:	080081dd 	.word	0x080081dd
 8008190:	080081ef 	.word	0x080081ef
 8008194:	08008231 	.word	0x08008231
 8008198:	08008237 	.word	0x08008237
 800819c:	08008237 	.word	0x08008237
 80081a0:	08008237 	.word	0x08008237
 80081a4:	08008237 	.word	0x08008237
 80081a8:	08008237 	.word	0x08008237
 80081ac:	08008237 	.word	0x08008237
 80081b0:	08008237 	.word	0x08008237
 80081b4:	08008237 	.word	0x08008237
 80081b8:	08008237 	.word	0x08008237
 80081bc:	08008237 	.word	0x08008237
 80081c0:	08008237 	.word	0x08008237
 80081c4:	08008237 	.word	0x08008237
 80081c8:	08008237 	.word	0x08008237
 80081cc:	080081e5 	.word	0x080081e5
 80081d0:	080081f9 	.word	0x080081f9
 80081d4:	4a75      	ldr	r2, [pc, #468]	@ (80083ac <HAL_GPIO_Init+0x2a4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d013      	beq.n	8008202 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80081da:	e02c      	b.n	8008236 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	623b      	str	r3, [r7, #32]
          break;
 80081e2:	e029      	b.n	8008238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	3304      	adds	r3, #4
 80081ea:	623b      	str	r3, [r7, #32]
          break;
 80081ec:	e024      	b.n	8008238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	3308      	adds	r3, #8
 80081f4:	623b      	str	r3, [r7, #32]
          break;
 80081f6:	e01f      	b.n	8008238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	330c      	adds	r3, #12
 80081fe:	623b      	str	r3, [r7, #32]
          break;
 8008200:	e01a      	b.n	8008238 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800820a:	2304      	movs	r3, #4
 800820c:	623b      	str	r3, [r7, #32]
          break;
 800820e:	e013      	b.n	8008238 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d105      	bne.n	8008224 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008218:	2308      	movs	r3, #8
 800821a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	611a      	str	r2, [r3, #16]
          break;
 8008222:	e009      	b.n	8008238 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008224:	2308      	movs	r3, #8
 8008226:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	615a      	str	r2, [r3, #20]
          break;
 800822e:	e003      	b.n	8008238 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008230:	2300      	movs	r3, #0
 8008232:	623b      	str	r3, [r7, #32]
          break;
 8008234:	e000      	b.n	8008238 <HAL_GPIO_Init+0x130>
          break;
 8008236:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2bff      	cmp	r3, #255	@ 0xff
 800823c:	d801      	bhi.n	8008242 <HAL_GPIO_Init+0x13a>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	e001      	b.n	8008246 <HAL_GPIO_Init+0x13e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3304      	adds	r3, #4
 8008246:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	2bff      	cmp	r3, #255	@ 0xff
 800824c:	d802      	bhi.n	8008254 <HAL_GPIO_Init+0x14c>
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	e002      	b.n	800825a <HAL_GPIO_Init+0x152>
 8008254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008256:	3b08      	subs	r3, #8
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	210f      	movs	r1, #15
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	fa01 f303 	lsl.w	r3, r1, r3
 8008268:	43db      	mvns	r3, r3
 800826a:	401a      	ands	r2, r3
 800826c:	6a39      	ldr	r1, [r7, #32]
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	fa01 f303 	lsl.w	r3, r1, r3
 8008274:	431a      	orrs	r2, r3
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80c1 	beq.w	800840a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008288:	4b49      	ldr	r3, [pc, #292]	@ (80083b0 <HAL_GPIO_Init+0x2a8>)
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	4a48      	ldr	r2, [pc, #288]	@ (80083b0 <HAL_GPIO_Init+0x2a8>)
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	6193      	str	r3, [r2, #24]
 8008294:	4b46      	ldr	r3, [pc, #280]	@ (80083b0 <HAL_GPIO_Init+0x2a8>)
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	60bb      	str	r3, [r7, #8]
 800829e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80082a0:	4a44      	ldr	r2, [pc, #272]	@ (80083b4 <HAL_GPIO_Init+0x2ac>)
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	089b      	lsrs	r3, r3, #2
 80082a6:	3302      	adds	r3, #2
 80082a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	220f      	movs	r2, #15
 80082b8:	fa02 f303 	lsl.w	r3, r2, r3
 80082bc:	43db      	mvns	r3, r3
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4013      	ands	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a3c      	ldr	r2, [pc, #240]	@ (80083b8 <HAL_GPIO_Init+0x2b0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d01f      	beq.n	800830c <HAL_GPIO_Init+0x204>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a3b      	ldr	r2, [pc, #236]	@ (80083bc <HAL_GPIO_Init+0x2b4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d019      	beq.n	8008308 <HAL_GPIO_Init+0x200>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a3a      	ldr	r2, [pc, #232]	@ (80083c0 <HAL_GPIO_Init+0x2b8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d013      	beq.n	8008304 <HAL_GPIO_Init+0x1fc>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a39      	ldr	r2, [pc, #228]	@ (80083c4 <HAL_GPIO_Init+0x2bc>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d00d      	beq.n	8008300 <HAL_GPIO_Init+0x1f8>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a38      	ldr	r2, [pc, #224]	@ (80083c8 <HAL_GPIO_Init+0x2c0>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d007      	beq.n	80082fc <HAL_GPIO_Init+0x1f4>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a37      	ldr	r2, [pc, #220]	@ (80083cc <HAL_GPIO_Init+0x2c4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d101      	bne.n	80082f8 <HAL_GPIO_Init+0x1f0>
 80082f4:	2305      	movs	r3, #5
 80082f6:	e00a      	b.n	800830e <HAL_GPIO_Init+0x206>
 80082f8:	2306      	movs	r3, #6
 80082fa:	e008      	b.n	800830e <HAL_GPIO_Init+0x206>
 80082fc:	2304      	movs	r3, #4
 80082fe:	e006      	b.n	800830e <HAL_GPIO_Init+0x206>
 8008300:	2303      	movs	r3, #3
 8008302:	e004      	b.n	800830e <HAL_GPIO_Init+0x206>
 8008304:	2302      	movs	r3, #2
 8008306:	e002      	b.n	800830e <HAL_GPIO_Init+0x206>
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <HAL_GPIO_Init+0x206>
 800830c:	2300      	movs	r3, #0
 800830e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008310:	f002 0203 	and.w	r2, r2, #3
 8008314:	0092      	lsls	r2, r2, #2
 8008316:	4093      	lsls	r3, r2
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800831e:	4925      	ldr	r1, [pc, #148]	@ (80083b4 <HAL_GPIO_Init+0x2ac>)
 8008320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008322:	089b      	lsrs	r3, r3, #2
 8008324:	3302      	adds	r3, #2
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d006      	beq.n	8008346 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008338:	4b25      	ldr	r3, [pc, #148]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	4924      	ldr	r1, [pc, #144]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	4313      	orrs	r3, r2
 8008342:	600b      	str	r3, [r1, #0]
 8008344:	e006      	b.n	8008354 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008346:	4b22      	ldr	r3, [pc, #136]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	43db      	mvns	r3, r3
 800834e:	4920      	ldr	r1, [pc, #128]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 8008350:	4013      	ands	r3, r2
 8008352:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d006      	beq.n	800836e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008360:	4b1b      	ldr	r3, [pc, #108]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	491a      	ldr	r1, [pc, #104]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	4313      	orrs	r3, r2
 800836a:	604b      	str	r3, [r1, #4]
 800836c:	e006      	b.n	800837c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800836e:	4b18      	ldr	r3, [pc, #96]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	43db      	mvns	r3, r3
 8008376:	4916      	ldr	r1, [pc, #88]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 8008378:	4013      	ands	r3, r2
 800837a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d025      	beq.n	80083d4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008388:	4b11      	ldr	r3, [pc, #68]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	4910      	ldr	r1, [pc, #64]	@ (80083d0 <HAL_GPIO_Init+0x2c8>)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	4313      	orrs	r3, r2
 8008392:	608b      	str	r3, [r1, #8]
 8008394:	e025      	b.n	80083e2 <HAL_GPIO_Init+0x2da>
 8008396:	bf00      	nop
 8008398:	10320000 	.word	0x10320000
 800839c:	10310000 	.word	0x10310000
 80083a0:	10220000 	.word	0x10220000
 80083a4:	10210000 	.word	0x10210000
 80083a8:	10120000 	.word	0x10120000
 80083ac:	10110000 	.word	0x10110000
 80083b0:	40021000 	.word	0x40021000
 80083b4:	40010000 	.word	0x40010000
 80083b8:	40010800 	.word	0x40010800
 80083bc:	40010c00 	.word	0x40010c00
 80083c0:	40011000 	.word	0x40011000
 80083c4:	40011400 	.word	0x40011400
 80083c8:	40011800 	.word	0x40011800
 80083cc:	40011c00 	.word	0x40011c00
 80083d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80083d4:	4b15      	ldr	r3, [pc, #84]	@ (800842c <HAL_GPIO_Init+0x324>)
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	43db      	mvns	r3, r3
 80083dc:	4913      	ldr	r1, [pc, #76]	@ (800842c <HAL_GPIO_Init+0x324>)
 80083de:	4013      	ands	r3, r2
 80083e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d006      	beq.n	80083fc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80083ee:	4b0f      	ldr	r3, [pc, #60]	@ (800842c <HAL_GPIO_Init+0x324>)
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	490e      	ldr	r1, [pc, #56]	@ (800842c <HAL_GPIO_Init+0x324>)
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60cb      	str	r3, [r1, #12]
 80083fa:	e006      	b.n	800840a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80083fc:	4b0b      	ldr	r3, [pc, #44]	@ (800842c <HAL_GPIO_Init+0x324>)
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	43db      	mvns	r3, r3
 8008404:	4909      	ldr	r1, [pc, #36]	@ (800842c <HAL_GPIO_Init+0x324>)
 8008406:	4013      	ands	r3, r2
 8008408:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	3301      	adds	r3, #1
 800840e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	f47f ae7e 	bne.w	800811c <HAL_GPIO_Init+0x14>
  }
}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	372c      	adds	r7, #44	@ 0x2c
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr
 800842c:	40010400 	.word	0x40010400

08008430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	887b      	ldrh	r3, [r7, #2]
 8008442:	4013      	ands	r3, r2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	e001      	b.n	8008452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr

0800845e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	807b      	strh	r3, [r7, #2]
 800846a:	4613      	mov	r3, r2
 800846c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800846e:	787b      	ldrb	r3, [r7, #1]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008474:	887a      	ldrh	r2, [r7, #2]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800847a:	e003      	b.n	8008484 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800847c:	887b      	ldrh	r3, [r7, #2]
 800847e:	041a      	lsls	r2, r3, #16
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	611a      	str	r2, [r3, #16]
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr
	...

08008490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800849a:	4b08      	ldr	r3, [pc, #32]	@ (80084bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800849c:	695a      	ldr	r2, [r3, #20]
 800849e:	88fb      	ldrh	r3, [r7, #6]
 80084a0:	4013      	ands	r3, r2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d006      	beq.n	80084b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80084a6:	4a05      	ldr	r2, [pc, #20]	@ (80084bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80084ac:	88fb      	ldrh	r3, [r7, #6]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff fb5c 	bl	8007b6c <HAL_GPIO_EXTI_Callback>
  }
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40010400 	.word	0x40010400

080084c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e272      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 8087 	beq.w	80085ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80084e0:	4b92      	ldr	r3, [pc, #584]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f003 030c 	and.w	r3, r3, #12
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d00c      	beq.n	8008506 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80084ec:	4b8f      	ldr	r3, [pc, #572]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f003 030c 	and.w	r3, r3, #12
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d112      	bne.n	800851e <HAL_RCC_OscConfig+0x5e>
 80084f8:	4b8c      	ldr	r3, [pc, #560]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008504:	d10b      	bne.n	800851e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008506:	4b89      	ldr	r3, [pc, #548]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d06c      	beq.n	80085ec <HAL_RCC_OscConfig+0x12c>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d168      	bne.n	80085ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e24c      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008526:	d106      	bne.n	8008536 <HAL_RCC_OscConfig+0x76>
 8008528:	4b80      	ldr	r3, [pc, #512]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a7f      	ldr	r2, [pc, #508]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 800852e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	e02e      	b.n	8008594 <HAL_RCC_OscConfig+0xd4>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10c      	bne.n	8008558 <HAL_RCC_OscConfig+0x98>
 800853e:	4b7b      	ldr	r3, [pc, #492]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a7a      	ldr	r2, [pc, #488]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	4b78      	ldr	r3, [pc, #480]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a77      	ldr	r2, [pc, #476]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008550:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e01d      	b.n	8008594 <HAL_RCC_OscConfig+0xd4>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008560:	d10c      	bne.n	800857c <HAL_RCC_OscConfig+0xbc>
 8008562:	4b72      	ldr	r3, [pc, #456]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a71      	ldr	r2, [pc, #452]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	4b6f      	ldr	r3, [pc, #444]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a6e      	ldr	r2, [pc, #440]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	e00b      	b.n	8008594 <HAL_RCC_OscConfig+0xd4>
 800857c:	4b6b      	ldr	r3, [pc, #428]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a6a      	ldr	r2, [pc, #424]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4b68      	ldr	r3, [pc, #416]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a67      	ldr	r2, [pc, #412]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 800858e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008592:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d013      	beq.n	80085c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800859c:	f7ff fc78 	bl	8007e90 <HAL_GetTick>
 80085a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085a4:	f7ff fc74 	bl	8007e90 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b64      	cmp	r3, #100	@ 0x64
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e200      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085b6:	4b5d      	ldr	r3, [pc, #372]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0f0      	beq.n	80085a4 <HAL_RCC_OscConfig+0xe4>
 80085c2:	e014      	b.n	80085ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085c4:	f7ff fc64 	bl	8007e90 <HAL_GetTick>
 80085c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ca:	e008      	b.n	80085de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085cc:	f7ff fc60 	bl	8007e90 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b64      	cmp	r3, #100	@ 0x64
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e1ec      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085de:	4b53      	ldr	r3, [pc, #332]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f0      	bne.n	80085cc <HAL_RCC_OscConfig+0x10c>
 80085ea:	e000      	b.n	80085ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d063      	beq.n	80086c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80085fa:	4b4c      	ldr	r3, [pc, #304]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f003 030c 	and.w	r3, r3, #12
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008606:	4b49      	ldr	r3, [pc, #292]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f003 030c 	and.w	r3, r3, #12
 800860e:	2b08      	cmp	r3, #8
 8008610:	d11c      	bne.n	800864c <HAL_RCC_OscConfig+0x18c>
 8008612:	4b46      	ldr	r3, [pc, #280]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d116      	bne.n	800864c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800861e:	4b43      	ldr	r3, [pc, #268]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <HAL_RCC_OscConfig+0x176>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d001      	beq.n	8008636 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e1c0      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008636:	4b3d      	ldr	r3, [pc, #244]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	4939      	ldr	r1, [pc, #228]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008646:	4313      	orrs	r3, r2
 8008648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800864a:	e03a      	b.n	80086c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d020      	beq.n	8008696 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008654:	4b36      	ldr	r3, [pc, #216]	@ (8008730 <HAL_RCC_OscConfig+0x270>)
 8008656:	2201      	movs	r2, #1
 8008658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800865a:	f7ff fc19 	bl	8007e90 <HAL_GetTick>
 800865e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008660:	e008      	b.n	8008674 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008662:	f7ff fc15 	bl	8007e90 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e1a1      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008674:	4b2d      	ldr	r3, [pc, #180]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f0      	beq.n	8008662 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008680:	4b2a      	ldr	r3, [pc, #168]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	4927      	ldr	r1, [pc, #156]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 8008690:	4313      	orrs	r3, r2
 8008692:	600b      	str	r3, [r1, #0]
 8008694:	e015      	b.n	80086c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008696:	4b26      	ldr	r3, [pc, #152]	@ (8008730 <HAL_RCC_OscConfig+0x270>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800869c:	f7ff fbf8 	bl	8007e90 <HAL_GetTick>
 80086a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086a4:	f7ff fbf4 	bl	8007e90 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e180      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086b6:	4b1d      	ldr	r3, [pc, #116]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1f0      	bne.n	80086a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d03a      	beq.n	8008744 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d019      	beq.n	800870a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086d6:	4b17      	ldr	r3, [pc, #92]	@ (8008734 <HAL_RCC_OscConfig+0x274>)
 80086d8:	2201      	movs	r2, #1
 80086da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086dc:	f7ff fbd8 	bl	8007e90 <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086e4:	f7ff fbd4 	bl	8007e90 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e160      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086f6:	4b0d      	ldr	r3, [pc, #52]	@ (800872c <HAL_RCC_OscConfig+0x26c>)
 80086f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0f0      	beq.n	80086e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008702:	2001      	movs	r0, #1
 8008704:	f000 faa6 	bl	8008c54 <RCC_Delay>
 8008708:	e01c      	b.n	8008744 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800870a:	4b0a      	ldr	r3, [pc, #40]	@ (8008734 <HAL_RCC_OscConfig+0x274>)
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008710:	f7ff fbbe 	bl	8007e90 <HAL_GetTick>
 8008714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008716:	e00f      	b.n	8008738 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008718:	f7ff fbba 	bl	8007e90 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d908      	bls.n	8008738 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e146      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
 800872a:	bf00      	nop
 800872c:	40021000 	.word	0x40021000
 8008730:	42420000 	.word	0x42420000
 8008734:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008738:	4b92      	ldr	r3, [pc, #584]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 800873a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e9      	bne.n	8008718 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80a6 	beq.w	800889e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008752:	2300      	movs	r3, #0
 8008754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008756:	4b8b      	ldr	r3, [pc, #556]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10d      	bne.n	800877e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008762:	4b88      	ldr	r3, [pc, #544]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	4a87      	ldr	r2, [pc, #540]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800876c:	61d3      	str	r3, [r2, #28]
 800876e:	4b85      	ldr	r3, [pc, #532]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008776:	60bb      	str	r3, [r7, #8]
 8008778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800877a:	2301      	movs	r3, #1
 800877c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800877e:	4b82      	ldr	r3, [pc, #520]	@ (8008988 <HAL_RCC_OscConfig+0x4c8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008786:	2b00      	cmp	r3, #0
 8008788:	d118      	bne.n	80087bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800878a:	4b7f      	ldr	r3, [pc, #508]	@ (8008988 <HAL_RCC_OscConfig+0x4c8>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a7e      	ldr	r2, [pc, #504]	@ (8008988 <HAL_RCC_OscConfig+0x4c8>)
 8008790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008796:	f7ff fb7b 	bl	8007e90 <HAL_GetTick>
 800879a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800879c:	e008      	b.n	80087b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800879e:	f7ff fb77 	bl	8007e90 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b64      	cmp	r3, #100	@ 0x64
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e103      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087b0:	4b75      	ldr	r3, [pc, #468]	@ (8008988 <HAL_RCC_OscConfig+0x4c8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0f0      	beq.n	800879e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d106      	bne.n	80087d2 <HAL_RCC_OscConfig+0x312>
 80087c4:	4b6f      	ldr	r3, [pc, #444]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	4a6e      	ldr	r2, [pc, #440]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80087ca:	f043 0301 	orr.w	r3, r3, #1
 80087ce:	6213      	str	r3, [r2, #32]
 80087d0:	e02d      	b.n	800882e <HAL_RCC_OscConfig+0x36e>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10c      	bne.n	80087f4 <HAL_RCC_OscConfig+0x334>
 80087da:	4b6a      	ldr	r3, [pc, #424]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	4a69      	ldr	r2, [pc, #420]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80087e0:	f023 0301 	bic.w	r3, r3, #1
 80087e4:	6213      	str	r3, [r2, #32]
 80087e6:	4b67      	ldr	r3, [pc, #412]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	4a66      	ldr	r2, [pc, #408]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80087ec:	f023 0304 	bic.w	r3, r3, #4
 80087f0:	6213      	str	r3, [r2, #32]
 80087f2:	e01c      	b.n	800882e <HAL_RCC_OscConfig+0x36e>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	2b05      	cmp	r3, #5
 80087fa:	d10c      	bne.n	8008816 <HAL_RCC_OscConfig+0x356>
 80087fc:	4b61      	ldr	r3, [pc, #388]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	4a60      	ldr	r2, [pc, #384]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008802:	f043 0304 	orr.w	r3, r3, #4
 8008806:	6213      	str	r3, [r2, #32]
 8008808:	4b5e      	ldr	r3, [pc, #376]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	4a5d      	ldr	r2, [pc, #372]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 800880e:	f043 0301 	orr.w	r3, r3, #1
 8008812:	6213      	str	r3, [r2, #32]
 8008814:	e00b      	b.n	800882e <HAL_RCC_OscConfig+0x36e>
 8008816:	4b5b      	ldr	r3, [pc, #364]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	4a5a      	ldr	r2, [pc, #360]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	6213      	str	r3, [r2, #32]
 8008822:	4b58      	ldr	r3, [pc, #352]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	4a57      	ldr	r2, [pc, #348]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008828:	f023 0304 	bic.w	r3, r3, #4
 800882c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d015      	beq.n	8008862 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008836:	f7ff fb2b 	bl	8007e90 <HAL_GetTick>
 800883a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800883c:	e00a      	b.n	8008854 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800883e:	f7ff fb27 	bl	8007e90 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800884c:	4293      	cmp	r3, r2
 800884e:	d901      	bls.n	8008854 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e0b1      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008854:	4b4b      	ldr	r3, [pc, #300]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0ee      	beq.n	800883e <HAL_RCC_OscConfig+0x37e>
 8008860:	e014      	b.n	800888c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008862:	f7ff fb15 	bl	8007e90 <HAL_GetTick>
 8008866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008868:	e00a      	b.n	8008880 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800886a:	f7ff fb11 	bl	8007e90 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008878:	4293      	cmp	r3, r2
 800887a:	d901      	bls.n	8008880 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e09b      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008880:	4b40      	ldr	r3, [pc, #256]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1ee      	bne.n	800886a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800888c:	7dfb      	ldrb	r3, [r7, #23]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d105      	bne.n	800889e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008892:	4b3c      	ldr	r3, [pc, #240]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	4a3b      	ldr	r2, [pc, #236]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008898:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800889c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8087 	beq.w	80089b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088a8:	4b36      	ldr	r3, [pc, #216]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f003 030c 	and.w	r3, r3, #12
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d061      	beq.n	8008978 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d146      	bne.n	800894a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088bc:	4b33      	ldr	r3, [pc, #204]	@ (800898c <HAL_RCC_OscConfig+0x4cc>)
 80088be:	2200      	movs	r2, #0
 80088c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088c2:	f7ff fae5 	bl	8007e90 <HAL_GetTick>
 80088c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088c8:	e008      	b.n	80088dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088ca:	f7ff fae1 	bl	8007e90 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e06d      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088dc:	4b29      	ldr	r3, [pc, #164]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1f0      	bne.n	80088ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088f0:	d108      	bne.n	8008904 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80088f2:	4b24      	ldr	r3, [pc, #144]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	4921      	ldr	r1, [pc, #132]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008900:	4313      	orrs	r3, r2
 8008902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008904:	4b1f      	ldr	r3, [pc, #124]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a19      	ldr	r1, [r3, #32]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008914:	430b      	orrs	r3, r1
 8008916:	491b      	ldr	r1, [pc, #108]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 8008918:	4313      	orrs	r3, r2
 800891a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800891c:	4b1b      	ldr	r3, [pc, #108]	@ (800898c <HAL_RCC_OscConfig+0x4cc>)
 800891e:	2201      	movs	r2, #1
 8008920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008922:	f7ff fab5 	bl	8007e90 <HAL_GetTick>
 8008926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008928:	e008      	b.n	800893c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800892a:	f7ff fab1 	bl	8007e90 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e03d      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800893c:	4b11      	ldr	r3, [pc, #68]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0f0      	beq.n	800892a <HAL_RCC_OscConfig+0x46a>
 8008948:	e035      	b.n	80089b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800894a:	4b10      	ldr	r3, [pc, #64]	@ (800898c <HAL_RCC_OscConfig+0x4cc>)
 800894c:	2200      	movs	r2, #0
 800894e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008950:	f7ff fa9e 	bl	8007e90 <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008956:	e008      	b.n	800896a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008958:	f7ff fa9a 	bl	8007e90 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e026      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800896a:	4b06      	ldr	r3, [pc, #24]	@ (8008984 <HAL_RCC_OscConfig+0x4c4>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1f0      	bne.n	8008958 <HAL_RCC_OscConfig+0x498>
 8008976:	e01e      	b.n	80089b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d107      	bne.n	8008990 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e019      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
 8008984:	40021000 	.word	0x40021000
 8008988:	40007000 	.word	0x40007000
 800898c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008990:	4b0b      	ldr	r3, [pc, #44]	@ (80089c0 <HAL_RCC_OscConfig+0x500>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d106      	bne.n	80089b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d001      	beq.n	80089b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	40021000 	.word	0x40021000

080089c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e0d0      	b.n	8008b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089d8:	4b6a      	ldr	r3, [pc, #424]	@ (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0307 	and.w	r3, r3, #7
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d910      	bls.n	8008a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089e6:	4b67      	ldr	r3, [pc, #412]	@ (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f023 0207 	bic.w	r2, r3, #7
 80089ee:	4965      	ldr	r1, [pc, #404]	@ (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f6:	4b63      	ldr	r3, [pc, #396]	@ (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0307 	and.w	r3, r3, #7
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d001      	beq.n	8008a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e0b8      	b.n	8008b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d020      	beq.n	8008a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a20:	4b59      	ldr	r3, [pc, #356]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4a58      	ldr	r2, [pc, #352]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008a26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0308 	and.w	r3, r3, #8
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a38:	4b53      	ldr	r3, [pc, #332]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	4a52      	ldr	r2, [pc, #328]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008a3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a44:	4b50      	ldr	r3, [pc, #320]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	494d      	ldr	r1, [pc, #308]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d040      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d107      	bne.n	8008a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a6a:	4b47      	ldr	r3, [pc, #284]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d115      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e07f      	b.n	8008b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d107      	bne.n	8008a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a82:	4b41      	ldr	r3, [pc, #260]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e073      	b.n	8008b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a92:	4b3d      	ldr	r3, [pc, #244]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e06b      	b.n	8008b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008aa2:	4b39      	ldr	r3, [pc, #228]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f023 0203 	bic.w	r2, r3, #3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	4936      	ldr	r1, [pc, #216]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ab4:	f7ff f9ec 	bl	8007e90 <HAL_GetTick>
 8008ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aba:	e00a      	b.n	8008ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008abc:	f7ff f9e8 	bl	8007e90 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e053      	b.n	8008b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f003 020c 	and.w	r2, r3, #12
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d1eb      	bne.n	8008abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ae4:	4b27      	ldr	r3, [pc, #156]	@ (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d210      	bcs.n	8008b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008af2:	4b24      	ldr	r3, [pc, #144]	@ (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f023 0207 	bic.w	r2, r3, #7
 8008afa:	4922      	ldr	r1, [pc, #136]	@ (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b02:	4b20      	ldr	r3, [pc, #128]	@ (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d001      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e032      	b.n	8008b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b20:	4b19      	ldr	r3, [pc, #100]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	4916      	ldr	r1, [pc, #88]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0308 	and.w	r3, r3, #8
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d009      	beq.n	8008b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008b3e:	4b12      	ldr	r3, [pc, #72]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	490e      	ldr	r1, [pc, #56]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008b52:	f000 f821 	bl	8008b98 <HAL_RCC_GetSysClockFreq>
 8008b56:	4602      	mov	r2, r0
 8008b58:	4b0b      	ldr	r3, [pc, #44]	@ (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	091b      	lsrs	r3, r3, #4
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	490a      	ldr	r1, [pc, #40]	@ (8008b8c <HAL_RCC_ClockConfig+0x1c8>)
 8008b64:	5ccb      	ldrb	r3, [r1, r3]
 8008b66:	fa22 f303 	lsr.w	r3, r2, r3
 8008b6a:	4a09      	ldr	r2, [pc, #36]	@ (8008b90 <HAL_RCC_ClockConfig+0x1cc>)
 8008b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008b6e:	4b09      	ldr	r3, [pc, #36]	@ (8008b94 <HAL_RCC_ClockConfig+0x1d0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff f94a 	bl	8007e0c <HAL_InitTick>

  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40022000 	.word	0x40022000
 8008b88:	40021000 	.word	0x40021000
 8008b8c:	0800bd68 	.word	0x0800bd68
 8008b90:	20000004 	.word	0x20000004
 8008b94:	20000008 	.word	0x20000008

08008b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b98:	b490      	push	{r4, r7}
 8008b9a:	b08a      	sub	sp, #40	@ 0x28
 8008b9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008b9e:	4b29      	ldr	r3, [pc, #164]	@ (8008c44 <HAL_RCC_GetSysClockFreq+0xac>)
 8008ba0:	1d3c      	adds	r4, r7, #4
 8008ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008ba8:	f240 2301 	movw	r3, #513	@ 0x201
 8008bac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61bb      	str	r3, [r7, #24]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008bc2:	4b21      	ldr	r3, [pc, #132]	@ (8008c48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f003 030c 	and.w	r3, r3, #12
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d002      	beq.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d003      	beq.n	8008bde <HAL_RCC_GetSysClockFreq+0x46>
 8008bd6:	e02b      	b.n	8008c30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008bda:	623b      	str	r3, [r7, #32]
      break;
 8008bdc:	e02b      	b.n	8008c36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	0c9b      	lsrs	r3, r3, #18
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	3328      	adds	r3, #40	@ 0x28
 8008be8:	443b      	add	r3, r7
 8008bea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008bee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d012      	beq.n	8008c20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008bfa:	4b13      	ldr	r3, [pc, #76]	@ (8008c48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	0c5b      	lsrs	r3, r3, #17
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	3328      	adds	r3, #40	@ 0x28
 8008c06:	443b      	add	r3, r7
 8008c08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	4a0e      	ldr	r2, [pc, #56]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008c12:	fb03 f202 	mul.w	r2, r3, r2
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c1e:	e004      	b.n	8008c2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	4a0b      	ldr	r2, [pc, #44]	@ (8008c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c24:	fb02 f303 	mul.w	r3, r2, r3
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2c:	623b      	str	r3, [r7, #32]
      break;
 8008c2e:	e002      	b.n	8008c36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008c30:	4b06      	ldr	r3, [pc, #24]	@ (8008c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008c32:	623b      	str	r3, [r7, #32]
      break;
 8008c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c36:	6a3b      	ldr	r3, [r7, #32]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3728      	adds	r7, #40	@ 0x28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bc90      	pop	{r4, r7}
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	08008dd8 	.word	0x08008dd8
 8008c48:	40021000 	.word	0x40021000
 8008c4c:	007a1200 	.word	0x007a1200
 8008c50:	003d0900 	.word	0x003d0900

08008c54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <RCC_Delay+0x34>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a0a      	ldr	r2, [pc, #40]	@ (8008c8c <RCC_Delay+0x38>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	0a5b      	lsrs	r3, r3, #9
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	fb02 f303 	mul.w	r3, r2, r3
 8008c6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008c70:	bf00      	nop
  }
  while (Delay --);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	1e5a      	subs	r2, r3, #1
 8008c76:	60fa      	str	r2, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1f9      	bne.n	8008c70 <RCC_Delay+0x1c>
}
 8008c7c:	bf00      	nop
 8008c7e:	bf00      	nop
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bc80      	pop	{r7}
 8008c86:	4770      	bx	lr
 8008c88:	20000004 	.word	0x20000004
 8008c8c:	10624dd3 	.word	0x10624dd3

08008c90 <memset>:
 8008c90:	4603      	mov	r3, r0
 8008c92:	4402      	add	r2, r0
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d100      	bne.n	8008c9a <memset+0xa>
 8008c98:	4770      	bx	lr
 8008c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c9e:	e7f9      	b.n	8008c94 <memset+0x4>

08008ca0 <__libc_init_array>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	4d0c      	ldr	r5, [pc, #48]	@ (8008cd8 <__libc_init_array+0x38>)
 8008ca6:	4c0d      	ldr	r4, [pc, #52]	@ (8008cdc <__libc_init_array+0x3c>)
 8008ca8:	1b64      	subs	r4, r4, r5
 8008caa:	10a4      	asrs	r4, r4, #2
 8008cac:	42a6      	cmp	r6, r4
 8008cae:	d109      	bne.n	8008cc4 <__libc_init_array+0x24>
 8008cb0:	f000 f81a 	bl	8008ce8 <_init>
 8008cb4:	2600      	movs	r6, #0
 8008cb6:	4d0a      	ldr	r5, [pc, #40]	@ (8008ce0 <__libc_init_array+0x40>)
 8008cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8008ce4 <__libc_init_array+0x44>)
 8008cba:	1b64      	subs	r4, r4, r5
 8008cbc:	10a4      	asrs	r4, r4, #2
 8008cbe:	42a6      	cmp	r6, r4
 8008cc0:	d105      	bne.n	8008cce <__libc_init_array+0x2e>
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc8:	4798      	blx	r3
 8008cca:	3601      	adds	r6, #1
 8008ccc:	e7ee      	b.n	8008cac <__libc_init_array+0xc>
 8008cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd2:	4798      	blx	r3
 8008cd4:	3601      	adds	r6, #1
 8008cd6:	e7f2      	b.n	8008cbe <__libc_init_array+0x1e>
 8008cd8:	0800bd78 	.word	0x0800bd78
 8008cdc:	0800bd78 	.word	0x0800bd78
 8008ce0:	0800bd78 	.word	0x0800bd78
 8008ce4:	0800bd7c 	.word	0x0800bd7c

08008ce8 <_init>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr

08008cf4 <_fini>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	bf00      	nop
 8008cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfa:	bc08      	pop	{r3}
 8008cfc:	469e      	mov	lr, r3
 8008cfe:	4770      	bx	lr
