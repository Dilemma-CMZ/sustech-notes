
assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c18  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000308c  08008e00  08008e00  00009e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be8c  0800be8c  0000d010  2**0
                  CONTENTS
  4 .ARM          00000000  0800be8c  0800be8c  0000d010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be8c  0800be8c  0000d010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be8c  0800be8c  0000ce8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be90  0800be90  0000ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800be94  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000010  0800bea4  0000d010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  0800bea4  0000d04c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005cba  00000000  00000000  0000d039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015be  00000000  00000000  00012cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  000142b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000411  00000000  00000000  00014828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001906d  00000000  00000000  00014c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085b1  00000000  00000000  0002dca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd48  00000000  00000000  00036257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3f9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014cc  00000000  00000000  000c3fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  000c54b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	08008de8 	.word	0x08008de8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	08008de8 	.word	0x08008de8

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a45      	ldr	r2, [pc, #276]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a3f      	ldr	r2, [pc, #252]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x130>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	4b3a      	ldr	r3, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a39      	ldr	r2, [pc, #228]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b37      	ldr	r3, [pc, #220]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000896:	4834      	ldr	r0, [pc, #208]	@ (8000968 <MX_GPIO_Init+0x134>)
 8000898:	f007 fe61 	bl	800855e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2104      	movs	r1, #4
 80008a0:	4832      	ldr	r0, [pc, #200]	@ (800096c <MX_GPIO_Init+0x138>)
 80008a2:	f007 fe5c 	bl	800855e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_GPIO_Init+0x13c>)
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	482b      	ldr	r0, [pc, #172]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008ba:	f007 fca5 	bl	8008208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	4829      	ldr	r0, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x144>)
 80008d2:	f007 fc99 	bl	8008208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	481e      	ldr	r0, [pc, #120]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008f0:	f007 fc8a 	bl	8008208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4817      	ldr	r0, [pc, #92]	@ (8000968 <MX_GPIO_Init+0x134>)
 800090a:	f007 fc7d 	bl	8008208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800090e:	2304      	movs	r3, #4
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	@ (800096c <MX_GPIO_Init+0x138>)
 8000926:	f007 fc6f 	bl	8008208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	2006      	movs	r0, #6
 8000930:	f007 fc33 	bl	800819a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000934:	2006      	movs	r0, #6
 8000936:	f007 fc4c 	bl	80081d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	2017      	movs	r0, #23
 8000940:	f007 fc2b 	bl	800819a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000944:	2017      	movs	r0, #23
 8000946:	f007 fc44 	bl	80081d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800094a:	2202      	movs	r2, #2
 800094c:	2101      	movs	r1, #1
 800094e:	2028      	movs	r0, #40	@ 0x28
 8000950:	f007 fc23 	bl	800819a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000954:	2028      	movs	r0, #40	@ 0x28
 8000956:	f007 fc3c 	bl	80081d2 <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	40011400 	.word	0x40011400
 8000970:	10110000 	.word	0x10110000
 8000974:	10210000 	.word	0x10210000
 8000978:	40011000 	.word	0x40011000

0800097c <fresh_origin>:
uint32_t input_length = 0;

/*
 *	Refresh only the Zone 2 when typing, to avoid fresh the whole screen.
 */
void fresh_origin() {
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af04      	add	r7, sp, #16
	char p[HAMMING_ENCODING_LENGTH + 1] = "0000";
 8000982:	4a20      	ldr	r2, [pc, #128]	@ (8000a04 <fresh_origin+0x88>)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800098a:	6018      	str	r0, [r3, #0]
 800098c:	3304      	adds	r3, #4
 800098e:	7019      	strb	r1, [r3, #0]
	for(int i = 0; i < HAMMING_ENCODING_LENGTH; ++i) {
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e023      	b.n	80009de <fresh_origin+0x62>
		if (i < input_length) {
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <fresh_origin+0x8c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d216      	bcs.n	80009ce <fresh_origin+0x52>
			p[i] += nthbit(input_data, HAMMING_ENCODING_LENGTH - 1 - i);
 80009a0:	1d3a      	adds	r2, r7, #4
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	4413      	add	r3, r2
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <fresh_origin+0x90>)
 80009aa:	6819      	ldr	r1, [r3, #0]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f1c3 0303 	rsb	r3, r3, #3
 80009b2:	fa21 f303 	lsr.w	r3, r1, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4413      	add	r3, r2
 80009c0:	b2d9      	uxtb	r1, r3
 80009c2:	1d3a      	adds	r2, r7, #4
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	460a      	mov	r2, r1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e004      	b.n	80009d8 <fresh_origin+0x5c>
		} else {
			p[i] = ' ';
 80009ce:	1d3a      	adds	r2, r7, #4
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	2220      	movs	r2, #32
 80009d6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < HAMMING_ENCODING_LENGTH; ++i) {
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	ddd8      	ble.n	8000996 <fresh_origin+0x1a>
		}
	}
	lcd_show_string(20, 85, 200, 24, 24, p, BLACK);
 80009e4:	2300      	movs	r3, #0
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	2318      	movs	r3, #24
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2318      	movs	r3, #24
 80009f2:	22c8      	movs	r2, #200	@ 0xc8
 80009f4:	2155      	movs	r1, #85	@ 0x55
 80009f6:	2014      	movs	r0, #20
 80009f8:	f006 ff7a 	bl	80078f0 <lcd_show_string>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	08008e00 	.word	0x08008e00
 8000a08:	20000034 	.word	0x20000034
 8000a0c:	20000030 	.word	0x20000030

08000a10 <fresh_hamming>:

/*
 *	Refresh only the Zone 3 when typing, to avoid fresh the whole screen.
 */
void fresh_hamming() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af04      	add	r7, sp, #16
	char p[HAMMING_DECODING_LENGTH + 1] = "00000000";
 8000a16:	4a1f      	ldr	r2, [pc, #124]	@ (8000a94 <fresh_hamming+0x84>)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a1c:	c303      	stmia	r3!, {r0, r1}
 8000a1e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e023      	b.n	8000a6e <fresh_hamming+0x5e>
		if (i < input_length) {
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <fresh_hamming+0x88>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d216      	bcs.n	8000a5e <fresh_hamming+0x4e>
			p[i] += nthbit(input_data, HAMMING_DECODING_LENGTH - 1 - i);
 8000a30:	463a      	mov	r2, r7
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4413      	add	r3, r2
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <fresh_hamming+0x8c>)
 8000a3a:	6819      	ldr	r1, [r3, #0]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	fa21 f303 	lsr.w	r3, r1, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4413      	add	r3, r2
 8000a50:	b2d9      	uxtb	r1, r3
 8000a52:	463a      	mov	r2, r7
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	460a      	mov	r2, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e004      	b.n	8000a68 <fresh_hamming+0x58>
		} else {
			p[i] = ' ';
 8000a5e:	463a      	mov	r2, r7
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	2220      	movs	r2, #32
 8000a66:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b07      	cmp	r3, #7
 8000a72:	ddd8      	ble.n	8000a26 <fresh_hamming+0x16>
		}
	}
	lcd_show_string(20, 150, 200, 24, 24, p, BLACK);
 8000a74:	2300      	movs	r3, #0
 8000a76:	9302      	str	r3, [sp, #8]
 8000a78:	463b      	mov	r3, r7
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	2318      	movs	r3, #24
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2318      	movs	r3, #24
 8000a82:	22c8      	movs	r2, #200	@ 0xc8
 8000a84:	2196      	movs	r1, #150	@ 0x96
 8000a86:	2014      	movs	r0, #20
 8000a88:	f006 ff32 	bl	80078f0 <lcd_show_string>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	08008e08 	.word	0x08008e08
 8000a98:	20000034 	.word	0x20000034
 8000a9c:	20000030 	.word	0x20000030

08000aa0 <print_result>:

/*
 * Print results in encoding or decoding mode. Only invoke once when finished.
 */
void print_result() {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b09e      	sub	sp, #120	@ 0x78
 8000aa4:	af04      	add	r7, sp, #16
	if (mode == HAMMING_ENCODING_MODE){
 8000aa6:	4b92      	ldr	r3, [pc, #584]	@ (8000cf0 <print_result+0x250>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d145      	bne.n	8000b3a <print_result+0x9a>
		// Zone 3
		uint32_t result = encode(input_data);
 8000aae:	4b91      	ldr	r3, [pc, #580]	@ (8000cf4 <print_result+0x254>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fae6 	bl	8001084 <encode>
 8000ab8:	64b8      	str	r0, [r7, #72]	@ 0x48
		char p[HAMMING_DECODING_LENGTH + 1] = "00000000";
 8000aba:	4a8f      	ldr	r2, [pc, #572]	@ (8000cf8 <print_result+0x258>)
 8000abc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ac0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac2:	c303      	stmia	r3!, {r0, r1}
 8000ac4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	667b      	str	r3, [r7, #100]	@ 0x64
 8000aca:	e019      	b.n	8000b00 <print_result+0x60>
			p[i] += nthbit(result, HAMMING_DECODING_LENGTH - 1 - i);
 8000acc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000ad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ad8:	f1c3 0307 	rsb	r3, r3, #7
 8000adc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000ade:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4413      	add	r3, r2
 8000aec:	b2d9      	uxtb	r1, r3
 8000aee:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000af2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000af4:	4413      	add	r3, r2
 8000af6:	460a      	mov	r2, r1
 8000af8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000afc:	3301      	adds	r3, #1
 8000afe:	667b      	str	r3, [r7, #100]	@ 0x64
 8000b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	dde2      	ble.n	8000acc <print_result+0x2c>
		}
		lcd_show_string(20, 165, 200, 24, 24, p, BLACK);
 8000b06:	2300      	movs	r3, #0
 8000b08:	9302      	str	r3, [sp, #8]
 8000b0a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	2318      	movs	r3, #24
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2318      	movs	r3, #24
 8000b16:	22c8      	movs	r2, #200	@ 0xc8
 8000b18:	21a5      	movs	r1, #165	@ 0xa5
 8000b1a:	2014      	movs	r0, #20
 8000b1c:	f006 fee8 	bl	80078f0 <lcd_show_string>

		// Zone 4
		lcd_show_string(20, 250, 200, 16, 16, "No errors", BLACK);
 8000b20:	2300      	movs	r3, #0
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	4b75      	ldr	r3, [pc, #468]	@ (8000cfc <print_result+0x25c>)
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	2310      	movs	r3, #16
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	22c8      	movs	r2, #200	@ 0xc8
 8000b30:	21fa      	movs	r1, #250	@ 0xfa
 8000b32:	2014      	movs	r0, #20
 8000b34:	f006 fedc 	bl	80078f0 <lcd_show_string>
            char f[7] = "PP = 0";
            f[5] += nthbit(result.syndrome, HAMMING_PARITY_BITS - 1);
            lcd_show_string(135, 275, 200, 16, 16, f, BLACK);
		}
	}
}
 8000b38:	e1cf      	b.n	8000eda <print_result+0x43a>
		decode_result result = decode();
 8000b3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fb7e 	bl	8001240 <decode>
		char p[HAMMING_ENCODING_LENGTH + 1] = "0000";
 8000b44:	4a6e      	ldr	r2, [pc, #440]	@ (8000d00 <print_result+0x260>)
 8000b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4e:	6018      	str	r0, [r3, #0]
 8000b50:	3304      	adds	r3, #4
 8000b52:	7019      	strb	r1, [r3, #0]
		for(int i = 0; i < HAMMING_ENCODING_LENGTH; ++i) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	663b      	str	r3, [r7, #96]	@ 0x60
 8000b58:	e019      	b.n	8000b8e <print_result+0xee>
			p[i] += nthbit(result.result, HAMMING_ENCODING_LENGTH - 1 - i);
 8000b5a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b60:	4413      	add	r3, r2
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b68:	f1c3 0303 	rsb	r3, r3, #3
 8000b6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	4413      	add	r3, r2
 8000b7a:	b2d9      	uxtb	r1, r3
 8000b7c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000b80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b82:	4413      	add	r3, r2
 8000b84:	460a      	mov	r2, r1
 8000b86:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < HAMMING_ENCODING_LENGTH; ++i) {
 8000b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8000b8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	dde2      	ble.n	8000b5a <print_result+0xba>
		lcd_show_string(20, 85, 200, 24, 24, p, BLACK);
 8000b94:	2300      	movs	r3, #0
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2318      	movs	r3, #24
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2318      	movs	r3, #24
 8000ba4:	22c8      	movs	r2, #200	@ 0xc8
 8000ba6:	2155      	movs	r1, #85	@ 0x55
 8000ba8:	2014      	movs	r0, #20
 8000baa:	f006 fea1 	bl	80078f0 <lcd_show_string>
		lcd_show_string(20, 180, 200, 16, 16, "with ", BLACK);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	4b54      	ldr	r3, [pc, #336]	@ (8000d04 <print_result+0x264>)
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2310      	movs	r3, #16
 8000bbc:	22c8      	movs	r2, #200	@ 0xc8
 8000bbe:	21b4      	movs	r1, #180	@ 0xb4
 8000bc0:	2014      	movs	r0, #20
 8000bc2:	f006 fe95 	bl	80078f0 <lcd_show_string>
		lcd_show_string(57, 175, 200, 24, 24, "4", BLACK);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9302      	str	r3, [sp, #8]
 8000bca:	4b4f      	ldr	r3, [pc, #316]	@ (8000d08 <print_result+0x268>)
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	2318      	movs	r3, #24
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2318      	movs	r3, #24
 8000bd4:	22c8      	movs	r2, #200	@ 0xc8
 8000bd6:	21af      	movs	r1, #175	@ 0xaf
 8000bd8:	2039      	movs	r0, #57	@ 0x39
 8000bda:	f006 fe89 	bl	80078f0 <lcd_show_string>
		lcd_show_string(67, 180, 200, 16, 16, " parity bits", BLACK);
 8000bde:	2300      	movs	r3, #0
 8000be0:	9302      	str	r3, [sp, #8]
 8000be2:	4b4a      	ldr	r3, [pc, #296]	@ (8000d0c <print_result+0x26c>)
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	2310      	movs	r3, #16
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	2310      	movs	r3, #16
 8000bec:	22c8      	movs	r2, #200	@ 0xc8
 8000bee:	21b4      	movs	r1, #180	@ 0xb4
 8000bf0:	2043      	movs	r0, #67	@ 0x43
 8000bf2:	f006 fe7d 	bl	80078f0 <lcd_show_string>
		if (result.syndrome == 0 || input_length < HAMMING_DECODING_LENGTH){
 8000bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <print_result+0x164>
 8000bfc:	4b44      	ldr	r3, [pc, #272]	@ (8000d10 <print_result+0x270>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b07      	cmp	r3, #7
 8000c02:	d80c      	bhi.n	8000c1e <print_result+0x17e>
			lcd_show_string(20, 250, 200, 16, 16, "No errors", BLACK);
 8000c04:	2300      	movs	r3, #0
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	4b3c      	ldr	r3, [pc, #240]	@ (8000cfc <print_result+0x25c>)
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2310      	movs	r3, #16
 8000c12:	22c8      	movs	r2, #200	@ 0xc8
 8000c14:	21fa      	movs	r1, #250	@ 0xfa
 8000c16:	2014      	movs	r0, #20
 8000c18:	f006 fe6a 	bl	80078f0 <lcd_show_string>
}
 8000c1c:	e15d      	b.n	8000eda <print_result+0x43a>
			 if (!nthbit(result.syndrome, HAMMING_PARITY_BITS - 1)) {
 8000c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d118      	bne.n	8000c5a <print_result+0x1ba>
				lcd_show_string(20, 211, 200, 24, 24, "2", BLACK);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	9302      	str	r3, [sp, #8]
 8000c2c:	4b39      	ldr	r3, [pc, #228]	@ (8000d14 <print_result+0x274>)
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	2318      	movs	r3, #24
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2318      	movs	r3, #24
 8000c36:	22c8      	movs	r2, #200	@ 0xc8
 8000c38:	21d3      	movs	r1, #211	@ 0xd3
 8000c3a:	2014      	movs	r0, #20
 8000c3c:	f006 fe58 	bl	80078f0 <lcd_show_string>
				lcd_show_string(32, 217, 200, 16, 16, " errors occur, P = ", BLACK);
 8000c40:	2300      	movs	r3, #0
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	4b34      	ldr	r3, [pc, #208]	@ (8000d18 <print_result+0x278>)
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	2310      	movs	r3, #16
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	22c8      	movs	r2, #200	@ 0xc8
 8000c50:	21d9      	movs	r1, #217	@ 0xd9
 8000c52:	2020      	movs	r0, #32
 8000c54:	f006 fe4c 	bl	80078f0 <lcd_show_string>
 8000c58:	e017      	b.n	8000c8a <print_result+0x1ea>
				lcd_show_string(20, 211, 200, 24, 24, "1", BLACK);
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <print_result+0x27c>)
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	2318      	movs	r3, #24
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2318      	movs	r3, #24
 8000c68:	22c8      	movs	r2, #200	@ 0xc8
 8000c6a:	21d3      	movs	r1, #211	@ 0xd3
 8000c6c:	2014      	movs	r0, #20
 8000c6e:	f006 fe3f 	bl	80078f0 <lcd_show_string>
				lcd_show_string(32, 217, 200, 16, 16, " error occurs, P = ", BLACK);
 8000c72:	2300      	movs	r3, #0
 8000c74:	9302      	str	r3, [sp, #8]
 8000c76:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <print_result+0x280>)
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2310      	movs	r3, #16
 8000c80:	22c8      	movs	r2, #200	@ 0xc8
 8000c82:	21d9      	movs	r1, #217	@ 0xd9
 8000c84:	2020      	movs	r0, #32
 8000c86:	f006 fe33 	bl	80078f0 <lcd_show_string>
			char p[2] = "0"; p[0] += result.syndrome & ((1 << (HAMMING_PARITY_BITS - 1)) - 1);
 8000c8a:	2330      	movs	r3, #48	@ 0x30
 8000c8c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000c8e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcd_show_string(178, 211, 200, 24, 24, p, BLACK);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	2318      	movs	r3, #24
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2318      	movs	r3, #24
 8000cb4:	22c8      	movs	r2, #200	@ 0xc8
 8000cb6:	21d3      	movs	r1, #211	@ 0xd3
 8000cb8:	20b2      	movs	r0, #178	@ 0xb2
 8000cba:	f006 fe19 	bl	80078f0 <lcd_show_string>
			uint32_t error_index = result.syndrome & ((1 << (HAMMING_PARITY_BITS - 1)) - 1);
 8000cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	653b      	str	r3, [r7, #80]	@ 0x50
			lcd_show_string(20, 235, 200, 16, 16, "Corrupted: ", BLACK);
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9302      	str	r3, [sp, #8]
 8000cca:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <print_result+0x284>)
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	2310      	movs	r3, #16
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	22c8      	movs	r2, #200	@ 0xc8
 8000cd6:	21eb      	movs	r1, #235	@ 0xeb
 8000cd8:	2014      	movs	r0, #20
 8000cda:	f006 fe09 	bl	80078f0 <lcd_show_string>
			char d[HAMMING_DECODING_LENGTH + 1] = "00000000";
 8000cde:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <print_result+0x258>)
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ce6:	c303      	stmia	r3!, {r0, r1}
 8000ce8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000cee:	e036      	b.n	8000d5e <print_result+0x2be>
 8000cf0:	2000002c 	.word	0x2000002c
 8000cf4:	20000030 	.word	0x20000030
 8000cf8:	08008e08 	.word	0x08008e08
 8000cfc:	08008e14 	.word	0x08008e14
 8000d00:	08008e00 	.word	0x08008e00
 8000d04:	08008e20 	.word	0x08008e20
 8000d08:	08008e28 	.word	0x08008e28
 8000d0c:	08008e2c 	.word	0x08008e2c
 8000d10:	20000034 	.word	0x20000034
 8000d14:	08008e3c 	.word	0x08008e3c
 8000d18:	08008e40 	.word	0x08008e40
 8000d1c:	08008e54 	.word	0x08008e54
 8000d20:	08008e58 	.word	0x08008e58
 8000d24:	08008e6c 	.word	0x08008e6c
				d[i] += nthbit(input_data, HAMMING_DECODING_LENGTH - 1 - i);
 8000d28:	f107 021c 	add.w	r2, r7, #28
 8000d2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d2e:	4413      	add	r3, r2
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	4b6c      	ldr	r3, [pc, #432]	@ (8000ee4 <print_result+0x444>)
 8000d34:	6819      	ldr	r1, [r3, #0]
 8000d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d38:	f1c3 0307 	rsb	r3, r3, #7
 8000d3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2d9      	uxtb	r1, r3
 8000d4c:	f107 021c 	add.w	r2, r7, #28
 8000d50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d52:	4413      	add	r3, r2
 8000d54:	460a      	mov	r2, r1
 8000d56:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	dde1      	ble.n	8000d28 <print_result+0x288>
			lcd_show_string_highlight(110, 235, 200, 16, 16, d, RED, error_index);
 8000d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d66:	9303      	str	r3, [sp, #12]
 8000d68:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2310      	movs	r3, #16
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2310      	movs	r3, #16
 8000d7a:	22c8      	movs	r2, #200	@ 0xc8
 8000d7c:	21eb      	movs	r1, #235	@ 0xeb
 8000d7e:	206e      	movs	r0, #110	@ 0x6e
 8000d80:	f006 fe06 	bl	8007990 <lcd_show_string_highlight>
			lcd_show_string(20, 255, 200, 16, 16, "Corrected: ", BLACK);
 8000d84:	2300      	movs	r3, #0
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	4b57      	ldr	r3, [pc, #348]	@ (8000ee8 <print_result+0x448>)
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2310      	movs	r3, #16
 8000d92:	22c8      	movs	r2, #200	@ 0xc8
 8000d94:	21ff      	movs	r1, #255	@ 0xff
 8000d96:	2014      	movs	r0, #20
 8000d98:	f006 fdaa 	bl	80078f0 <lcd_show_string>
			uint32_t correct = input_data ^= 1 << (HAMMING_DECODING_LENGTH - 1 - error_index);
 8000d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2201      	movs	r2, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee4 <print_result+0x444>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4053      	eors	r3, r2
 8000db0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ee4 <print_result+0x444>)
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee4 <print_result+0x444>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			char c[HAMMING_DECODING_LENGTH + 1] = "00000000";
 8000dba:	4a4c      	ldr	r2, [pc, #304]	@ (8000eec <print_result+0x44c>)
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dc2:	c303      	stmia	r3!, {r0, r1}
 8000dc4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000dca:	e019      	b.n	8000e00 <print_result+0x360>
				c[i] += nthbit(correct, HAMMING_DECODING_LENGTH - 1 - i);
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dd8:	f1c3 0307 	rsb	r3, r3, #7
 8000ddc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000dde:	fa21 f303 	lsr.w	r3, r1, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2d9      	uxtb	r1, r3
 8000dee:	f107 0210 	add.w	r2, r7, #16
 8000df2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000df4:	4413      	add	r3, r2
 8000df6:	460a      	mov	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8000dfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000e00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e02:	2b07      	cmp	r3, #7
 8000e04:	dde2      	ble.n	8000dcc <print_result+0x32c>
			lcd_show_string_highlight(110, 255, 200, 16, 16, c, GREEN, error_index);
 8000e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e08:	9303      	str	r3, [sp, #12]
 8000e0a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	2310      	movs	r3, #16
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	22c8      	movs	r2, #200	@ 0xc8
 8000e1e:	21ff      	movs	r1, #255	@ 0xff
 8000e20:	206e      	movs	r0, #110	@ 0x6e
 8000e22:	f006 fdb5 	bl	8007990 <lcd_show_string_highlight>
			lcd_show_string(20, 275, 200, 16, 16, "P4P2P1 = ", BLACK);
 8000e26:	2300      	movs	r3, #0
 8000e28:	9302      	str	r3, [sp, #8]
 8000e2a:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <print_result+0x450>)
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	2310      	movs	r3, #16
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2310      	movs	r3, #16
 8000e34:	22c8      	movs	r2, #200	@ 0xc8
 8000e36:	f240 1113 	movw	r1, #275	@ 0x113
 8000e3a:	2014      	movs	r0, #20
 8000e3c:	f006 fd58 	bl	80078f0 <lcd_show_string>
            for(int i = 0; i < HAMMING_PARITY_BITS - 1; ++i) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8000e44:	e023      	b.n	8000e8e <print_result+0x3ee>
                char a[2] = "0";
 8000e46:	2330      	movs	r3, #48	@ 0x30
 8000e48:	80bb      	strh	r3, [r7, #4]
                a[0] += nthbit(result.syndrome, i);
 8000e4a:	793a      	ldrb	r2, [r7, #4]
 8000e4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e50:	fa21 f303 	lsr.w	r3, r1, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	713b      	strb	r3, [r7, #4]
                lcd_show_string(108 - (8 * i), 275, 200, 16, 16, a, BLACK);
 8000e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	f1c3 036c 	rsb	r3, r3, #108	@ 0x6c
 8000e6e:	b298      	uxth	r0, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	2310      	movs	r3, #16
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	22c8      	movs	r2, #200	@ 0xc8
 8000e80:	f240 1113 	movw	r1, #275	@ 0x113
 8000e84:	f006 fd34 	bl	80078f0 <lcd_show_string>
            for(int i = 0; i < HAMMING_PARITY_BITS - 1; ++i) {
 8000e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8000e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	ddd8      	ble.n	8000e46 <print_result+0x3a6>
            char f[7] = "PP = 0";
 8000e94:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <print_result+0x454>)
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9e:	6018      	str	r0, [r3, #0]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	8019      	strh	r1, [r3, #0]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	0c0a      	lsrs	r2, r1, #16
 8000ea8:	701a      	strb	r2, [r3, #0]
            f[5] += nthbit(result.syndrome, HAMMING_PARITY_BITS - 1);
 8000eaa:	7b7a      	ldrb	r2, [r7, #13]
 8000eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4413      	add	r3, r2
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	737b      	strb	r3, [r7, #13]
            lcd_show_string(135, 275, 200, 16, 16, f, BLACK);
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9302      	str	r3, [sp, #8]
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2310      	movs	r3, #16
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2310      	movs	r3, #16
 8000ece:	22c8      	movs	r2, #200	@ 0xc8
 8000ed0:	f240 1113 	movw	r1, #275	@ 0x113
 8000ed4:	2087      	movs	r0, #135	@ 0x87
 8000ed6:	f006 fd0b 	bl	80078f0 <lcd_show_string>
}
 8000eda:	bf00      	nop
 8000edc:	3768      	adds	r7, #104	@ 0x68
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000030 	.word	0x20000030
 8000ee8:	08008e78 	.word	0x08008e78
 8000eec:	08008e08 	.word	0x08008e08
 8000ef0:	08008e84 	.word	0x08008e84
 8000ef4:	08008e90 	.word	0x08008e90

08000ef8 <print_screen>:

/*
 * Print or refresh the interface, without any data but basic information.
 */
void print_screen() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af04      	add	r7, sp, #16
	lcd_clear(WHITE);
 8000efe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f02:	f006 fb03 	bl	800750c <lcd_clear>

	// Zone 1
	lcd_show_string(20, 13, 200, 24, 24, mode ? "Decoding Mode" : "Encoding Mode", BLACK);
 8000f06:	4b29      	ldr	r3, [pc, #164]	@ (8000fac <print_screen+0xb4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <print_screen+0x1a>
 8000f0e:	4b28      	ldr	r3, [pc, #160]	@ (8000fb0 <print_screen+0xb8>)
 8000f10:	e000      	b.n	8000f14 <print_screen+0x1c>
 8000f12:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <print_screen+0xbc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	9202      	str	r2, [sp, #8]
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	2318      	movs	r3, #24
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2318      	movs	r3, #24
 8000f20:	22c8      	movs	r2, #200	@ 0xc8
 8000f22:	210d      	movs	r1, #13
 8000f24:	2014      	movs	r0, #20
 8000f26:	f006 fce3 	bl	80078f0 <lcd_show_string>

	// Zone 2
	lcd_draw_hline(10, 50, 220, BLACK);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	22dc      	movs	r2, #220	@ 0xdc
 8000f2e:	2132      	movs	r1, #50	@ 0x32
 8000f30:	200a      	movs	r0, #10
 8000f32:	f006 fbb5 	bl	80076a0 <lcd_draw_hline>
	lcd_show_string(20, 65, 200, 16, 16, "Original Data", BLACK);
 8000f36:	2300      	movs	r3, #0
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <print_screen+0xc0>)
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	2310      	movs	r3, #16
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2310      	movs	r3, #16
 8000f44:	22c8      	movs	r2, #200	@ 0xc8
 8000f46:	2141      	movs	r1, #65	@ 0x41
 8000f48:	2014      	movs	r0, #20
 8000f4a:	f006 fcd1 	bl	80078f0 <lcd_show_string>

	// Zone 3
	lcd_draw_hline(10, 120, 220, BLACK);
 8000f4e:	2300      	movs	r3, #0
 8000f50:	22dc      	movs	r2, #220	@ 0xdc
 8000f52:	2178      	movs	r1, #120	@ 0x78
 8000f54:	200a      	movs	r0, #10
 8000f56:	f006 fba3 	bl	80076a0 <lcd_draw_hline>
	lcd_show_string(20, (mode == HAMMING_ENCODING_MODE ? 145 : 130), 200, 16, 16, "Hamming Code", BLACK);
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <print_screen+0xb4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <print_screen+0x6e>
 8000f62:	2191      	movs	r1, #145	@ 0x91
 8000f64:	e000      	b.n	8000f68 <print_screen+0x70>
 8000f66:	2182      	movs	r1, #130	@ 0x82
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <print_screen+0xc4>)
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	2310      	movs	r3, #16
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2310      	movs	r3, #16
 8000f76:	22c8      	movs	r2, #200	@ 0xc8
 8000f78:	2014      	movs	r0, #20
 8000f7a:	f006 fcb9 	bl	80078f0 <lcd_show_string>

	// Zone 4
	lcd_draw_hline(10, 210, 220, BLACK);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	22dc      	movs	r2, #220	@ 0xdc
 8000f82:	21d2      	movs	r1, #210	@ 0xd2
 8000f84:	200a      	movs	r0, #10
 8000f86:	f006 fb8b 	bl	80076a0 <lcd_draw_hline>
	lcd_show_string(120, 300, 200, 12, 12, "Hamming code (8, 4)", BLACK);
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <print_screen+0xc8>)
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	230c      	movs	r3, #12
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	230c      	movs	r3, #12
 8000f98:	22c8      	movs	r2, #200	@ 0xc8
 8000f9a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000f9e:	2078      	movs	r0, #120	@ 0x78
 8000fa0:	f006 fca6 	bl	80078f0 <lcd_show_string>
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000002c 	.word	0x2000002c
 8000fb0:	08008e98 	.word	0x08008e98
 8000fb4:	08008ea8 	.word	0x08008ea8
 8000fb8:	08008eb8 	.word	0x08008eb8
 8000fbc:	08008ec8 	.word	0x08008ec8
 8000fc0:	08008ed8 	.word	0x08008ed8

08000fc4 <is_parity>:

/*
 * Check the if the ith index in hamming code is a parity bit
 */
uint32_t is_parity(uint32_t i) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    for(int j = 0; j < HAMMING_R; ++j) if(i == (1 << j)) return 1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	e00a      	b.n	8000fe8 <is_parity+0x24>
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d101      	bne.n	8000fe2 <is_parity+0x1e>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e006      	b.n	8000ff0 <is_parity+0x2c>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	ddf1      	ble.n	8000fd2 <is_parity+0xe>
    return 0;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <flip_bit>:

/*
 * Reverse 8 bits in a hamming code.
 */
uint32_t flip_bit(uint32_t data) {
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < HAMMING_DECODING_LENGTH; i += 2) {
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	e034      	b.n	8001072 <flip_bit+0x78>
        uint32_t tmp = nthbit(data, i);
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
        data &= ~(1 << i);
 8001016:	2201      	movs	r2, #1
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4013      	ands	r3, r2
 8001026:	607b      	str	r3, [r7, #4]
        data |= nthbit(data, HAMMING_DECODING_LENGTH - 1 - i) << i;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	fa22 f303 	lsr.w	r3, r2, r3
 8001034:	f003 0201 	and.w	r2, r3, #1
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4313      	orrs	r3, r2
 8001042:	607b      	str	r3, [r7, #4]
        data &= ~(1 << (HAMMING_DECODING_LENGTH - 1 - i));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2201      	movs	r2, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	461a      	mov	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4013      	ands	r3, r2
 8001058:	607b      	str	r3, [r7, #4]
        data |= tmp << (HAMMING_DECODING_LENGTH - 1 - i);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1c3 0307 	rsb	r3, r3, #7
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	607b      	str	r3, [r7, #4]
    for(int i = 0; i < HAMMING_DECODING_LENGTH; i += 2) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3302      	adds	r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b07      	cmp	r3, #7
 8001076:	ddc7      	ble.n	8001008 <flip_bit+0xe>
    }
    return data;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <encode>:

/*
 * Encode a data to hamming code from data.
 * Return a a hamming code of the input data without errors.
 */
uint32_t encode(uint32_t data) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	@ 0x50
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    uint32_t result = 0, x = 0, y = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001090:	2300      	movs	r3, #0
 8001092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001094:	2300      	movs	r3, #0
 8001096:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t parity_index[HAMMING_R], data_index[HAMMING_R];

    // get indices of data bits and parity bits
    for(int i = 1; i < HAMMING_DECODING_LENGTH; ++i) {
 8001098:	2301      	movs	r3, #1
 800109a:	643b      	str	r3, [r7, #64]	@ 0x40
 800109c:	e02a      	b.n	80010f4 <encode+0x70>
        if (!is_parity(i)) {
 800109e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff8f 	bl	8000fc4 <is_parity>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d117      	bne.n	80010dc <encode+0x58>
        	// place the data bits into hamming code
            result |= nthbit(data, HAMMING_ENCODING_LENGTH - 1 - x) << i;
 80010ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ae:	f1c3 0303 	rsb	r3, r3, #3
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	fa22 f303 	lsr.w	r3, r2, r3
 80010b8:	f003 0201 	and.w	r2, r3, #1
 80010bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010c4:	4313      	orrs	r3, r2
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            data_index[x++] = i;
 80010c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80010ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	3350      	adds	r3, #80	@ 0x50
 80010d4:	443b      	add	r3, r7
 80010d6:	f843 2c44 	str.w	r2, [r3, #-68]
 80010da:	e008      	b.n	80010ee <encode+0x6a>
        } else parity_index[y++] = i;
 80010dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	647a      	str	r2, [r7, #68]	@ 0x44
 80010e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	3350      	adds	r3, #80	@ 0x50
 80010e8:	443b      	add	r3, r7
 80010ea:	f843 2c34 	str.w	r2, [r3, #-52]
    for(int i = 1; i < HAMMING_DECODING_LENGTH; ++i) {
 80010ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010f0:	3301      	adds	r3, #1
 80010f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80010f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	ddd1      	ble.n	800109e <encode+0x1a>
    }

    // place the parity bits
    for(int i = 0; i < y; ++i) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010fe:	e048      	b.n	8001192 <encode+0x10e>
    	// calculate the xored result of parity bits
        for(int j = 0; j < x; ++j) {
 8001100:	2300      	movs	r3, #0
 8001102:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001104:	e03e      	b.n	8001184 <encode+0x100>
            if (nthbit(data_index[j], i)) {
 8001106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	3350      	adds	r3, #80	@ 0x50
 800110c:	443b      	add	r3, r7
 800110e:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8001112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d02e      	beq.n	800117e <encode+0xfa>
                uint32_t new_parity = nthbit(result, parity_index[i]) ^ nthbit(result, data_index[j]); // get new parity
 8001120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	3350      	adds	r3, #80	@ 0x50
 8001126:	443b      	add	r3, r7
 8001128:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800112c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800112e:	40da      	lsrs	r2, r3
 8001130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	3350      	adds	r3, #80	@ 0x50
 8001136:	443b      	add	r3, r7
 8001138:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800113c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800113e:	fa21 f303 	lsr.w	r3, r1, r3
 8001142:	4053      	eors	r3, r2
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
                result &= ~(1 << parity_index[i]); // clear parity bit
 800114a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	3350      	adds	r3, #80	@ 0x50
 8001150:	443b      	add	r3, r7
 8001152:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001156:	2201      	movs	r2, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001162:	4013      	ands	r3, r2
 8001164:	64fb      	str	r3, [r7, #76]	@ 0x4c
                result |= new_parity << parity_index[i]; // put new parity
 8001166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	3350      	adds	r3, #80	@ 0x50
 800116c:	443b      	add	r3, r7
 800116e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800117a:	4313      	orrs	r3, r2
 800117c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for(int j = 0; j < x; ++j) {
 800117e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001180:	3301      	adds	r3, #1
 8001182:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001188:	429a      	cmp	r2, r3
 800118a:	d8bc      	bhi.n	8001106 <encode+0x82>
    for(int i = 0; i < y; ++i) {
 800118c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800118e:	3301      	adds	r3, #1
 8001190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001196:	429a      	cmp	r2, r3
 8001198:	d8b2      	bhi.n	8001100 <encode+0x7c>
            }
        } 
    }

    // place the PP parity at the beginning
    for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
 800119e:	e012      	b.n	80011c6 <encode+0x142>
        uint32_t new_parity = nthbit(result, i) ^ nthbit(result, 0);
 80011a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a4:	40da      	lsrs	r2, r3
 80011a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011a8:	4053      	eors	r3, r2
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	633b      	str	r3, [r7, #48]	@ 0x30
        result &= ~(1 << 0);
 80011b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        result |= new_parity << 0;
 80011b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011bc:	4313      	orrs	r3, r2
 80011be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 80011c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011c2:	3301      	adds	r3, #1
 80011c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80011c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011c8:	2b07      	cmp	r3, #7
 80011ca:	dde9      	ble.n	80011a0 <encode+0x11c>
    }

    return flip_bit(result);
 80011cc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80011ce:	f7ff ff14 	bl	8000ffa <flip_bit>
 80011d2:	4603      	mov	r3, r0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3750      	adds	r7, #80	@ 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <get_parity>:

/*
 * Get parity bits and packed into a continous bits from hamming code, helper function of decode.
 * Return a uint32_t with {PP, P4, P2, P1}
 */
uint32_t get_parity(uint32_t code, uint32_t y) {
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    uint32_t parity = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < y; ++i) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	e013      	b.n	8001218 <get_parity+0x3c>
    	// concatenate the bits, the Px bits at 2^x, and put at parity[3 - x]
        parity |= nthbit(code, HAMMING_DECODING_LENGTH - 1 - (1 << i)) << i;
 80011f0:	2201      	movs	r2, #1
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	f1c3 0307 	rsb	r3, r3, #7
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < y; ++i) {
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3301      	adds	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8e7      	bhi.n	80011f0 <get_parity+0x14>
    }
    parity |= nthbit(code, HAMMING_DECODING_LENGTH - 1) << y; // PP
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	09db      	lsrs	r3, r3, #7
 8001224:	f003 0201 	and.w	r2, r3, #1
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
    return parity;
 8001234:	68fb      	ldr	r3, [r7, #12]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <decode>:
 * Return a decode result:
 *  - result: uint32_t, the correct original data
 *  - syndrome: uint32_t, the parity result, syndrome[3] for whether 2 errors occur,
 *  	syndrome[2:0] for the error bits detected, syndrome is zero when no errors.
 */
decode_result decode() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b092      	sub	sp, #72	@ 0x48
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    uint32_t data = 0, x = 0, y = 0, hamming = input_data;
 8001248:	2300      	movs	r3, #0
 800124a:	647b      	str	r3, [r7, #68]	@ 0x44
 800124c:	2300      	movs	r3, #0
 800124e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001250:	2300      	movs	r3, #0
 8001252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001254:	4b5f      	ldr	r3, [pc, #380]	@ (80013d4 <decode+0x194>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t data_index[HAMMING_R];

    // get index of data bits in hamming code.
    for(int i = 1; i < HAMMING_DECODING_LENGTH; ++i) {
 800125a:	2301      	movs	r3, #1
 800125c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800125e:	e026      	b.n	80012ae <decode+0x6e>
        if (!is_parity(i)) {
 8001260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff feae 	bl	8000fc4 <is_parity>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d119      	bne.n	80012a2 <decode+0x62>
            data |= nthbit(hamming, HAMMING_DECODING_LENGTH - 1 - i) << (HAMMING_ENCODING_LENGTH - 1 - x);
 800126e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001270:	f1c3 0307 	rsb	r3, r3, #7
 8001274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001276:	fa22 f303 	lsr.w	r3, r2, r3
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001280:	f1c3 0303 	rsb	r3, r3, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800128a:	4313      	orrs	r3, r2
 800128c:	647b      	str	r3, [r7, #68]	@ 0x44
            data_index[x++] = i;
 800128e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	643a      	str	r2, [r7, #64]	@ 0x40
 8001294:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	3348      	adds	r3, #72	@ 0x48
 800129a:	443b      	add	r3, r7
 800129c:	f843 2c38 	str.w	r2, [r3, #-56]
 80012a0:	e002      	b.n	80012a8 <decode+0x68>
        } else y++;
 80012a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a4:	3301      	adds	r3, #1
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for(int i = 1; i < HAMMING_DECODING_LENGTH; ++i) {
 80012a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012aa:	3301      	adds	r3, #1
 80012ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	ddd5      	ble.n	8001260 <decode+0x20>
    }

    uint32_t xor = hamming ^ encode(data);
 80012b4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80012b6:	f7ff fee5 	bl	8001084 <encode>
 80012ba:	4602      	mov	r2, r0
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	4053      	eors	r3, r2
 80012c0:	623b      	str	r3, [r7, #32]
    decode_result result = { 0 };
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]

    result.syndrome = get_parity(xor, y);
 80012cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80012ce:	6a38      	ldr	r0, [r7, #32]
 80012d0:	f7ff ff84 	bl	80011dc <get_parity>
 80012d4:	4603      	mov	r3, r0
 80012d6:	60fb      	str	r3, [r7, #12]
    result.result = data;
 80012d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012da:	60bb      	str	r3, [r7, #8]

    if (result.syndrome == (1 << (HAMMING_PARITY_BITS - 1))) {
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d108      	bne.n	80012f4 <decode+0xb4>
    	return result;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	461a      	mov	r2, r3
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ee:	e882 0003 	stmia.w	r2, {r0, r1}
 80012f2:	e06a      	b.n	80013ca <decode+0x18a>
    }

    if (result.syndrome != 0) {
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d05f      	beq.n	80013ba <decode+0x17a>
        uint32_t old_input = input_data;
 80012fa:	4b36      	ldr	r3, [pc, #216]	@ (80013d4 <decode+0x194>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	637b      	str	r3, [r7, #52]	@ 0x34
        if (result.syndrome != (1 << y))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2101      	movs	r1, #1
 8001304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001306:	fa01 f202 	lsl.w	r2, r1, r2
 800130a:	4293      	cmp	r3, r2
 800130c:	d00f      	beq.n	800132e <decode+0xee>
        	old_input ^= 1 << (HAMMING_DECODING_LENGTH - 1 - (result.syndrome & ((1 << y) - 1)));
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2101      	movs	r1, #1
 8001312:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	3a01      	subs	r2, #1
 800131a:	4013      	ands	r3, r2
 800131c:	f1c3 0307 	rsb	r3, r3, #7
 8001320:	2201      	movs	r2, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	461a      	mov	r2, r3
 8001328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800132a:	4053      	eors	r3, r2
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34

        uint32_t parity = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	633b      	str	r3, [r7, #48]	@ 0x30
        for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001336:	e00b      	b.n	8001350 <decode+0x110>
            parity ^= nthbit(old_input, i);
 8001338:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001346:	4053      	eors	r3, r2
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30
        for(int i = 0; i < HAMMING_DECODING_LENGTH; ++i) {
 800134a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134c:	3301      	adds	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001352:	2b07      	cmp	r3, #7
 8001354:	ddf0      	ble.n	8001338 <decode+0xf8>
        }

        if (parity) result.syndrome &= (1 << (HAMMING_PARITY_BITS - 1)) - 1;
 8001356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <decode+0x126>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e006      	b.n	8001374 <decode+0x134>
        else result.syndrome |= 1 << y;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2101      	movs	r1, #1
 800136a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800136c:	fa01 f202 	lsl.w	r2, r1, r2
 8001370:	4313      	orrs	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]

        data = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	647b      	str	r3, [r7, #68]	@ 0x44
        for(int i = 0; i < x; ++i) {
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800137c:	e017      	b.n	80013ae <decode+0x16e>
            data |= nthbit(old_input, HAMMING_DECODING_LENGTH - 1 - data_index[i]) << (HAMMING_ENCODING_LENGTH - 1 - i);
 800137e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	3348      	adds	r3, #72	@ 0x48
 8001384:	443b      	add	r3, r7
 8001386:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	f003 0201 	and.w	r2, r3, #1
 8001398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139a:	f1c3 0303 	rsb	r3, r3, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013a4:	4313      	orrs	r3, r2
 80013a6:	647b      	str	r3, [r7, #68]	@ 0x44
        for(int i = 0; i < x; ++i) {
 80013a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013aa:	3301      	adds	r3, #1
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8e3      	bhi.n	800137e <decode+0x13e>
        }
        result.result = data;
 80013b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013b8:	60bb      	str	r3, [r7, #8]
    }

    return result;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	461a      	mov	r2, r3
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	3748      	adds	r7, #72	@ 0x48
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000030 	.word	0x20000030

080013d8 <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <lcd_wr_xdata+0x40>)
 80013e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <lcd_wr_xdata+0x40>)
 80013ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <lcd_wr_xdata+0x44>)
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 80013f8:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <lcd_wr_xdata+0x40>)
 80013fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013fe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <lcd_wr_xdata+0x40>)
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <lcd_wr_xdata+0x40>)
 8001408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800140c:	611a      	str	r2, [r3, #16]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40011000 	.word	0x40011000
 800141c:	40010c00 	.word	0x40010c00

08001420 <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	80bb      	strh	r3, [r7, #4]
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <lcd_write_reg+0x7c>)
 8001436:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800143a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <lcd_write_reg+0x7c>)
 800143e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001442:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <lcd_write_reg+0x80>)
 800144a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <lcd_write_reg+0x7c>)
 800144e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001452:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <lcd_write_reg+0x7c>)
 8001456:	2280      	movs	r2, #128	@ 0x80
 8001458:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <lcd_write_reg+0x7c>)
 800145c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001460:	611a      	str	r2, [r3, #16]
}
 8001462:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 8001464:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <lcd_write_reg+0x7c>)
 8001466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <lcd_write_reg+0x7c>)
 800146e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <lcd_write_reg+0x80>)
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	60d3      	str	r3, [r2, #12]
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <lcd_write_reg+0x7c>)
 800147c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <lcd_write_reg+0x7c>)
 8001484:	2280      	movs	r2, #128	@ 0x80
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <lcd_write_reg+0x7c>)
 800148a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800148e:	611a      	str	r2, [r3, #16]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40011000 	.word	0x40011000
 80014a0:	40010c00 	.word	0x40010c00

080014a4 <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    while (i--);
 80014ac:	bf00      	nop
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1fa      	bne.n	80014ae <lcd_opt_delay+0xa>
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 80014ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ce:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4818      	ldr	r0, [pc, #96]	@ (8001544 <lcd_rd_data+0x80>)
 80014e2:	f006 fe91 	bl	8008208 <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <lcd_rd_data+0x84>)
 80014e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <lcd_rd_data+0x84>)
 80014f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014f4:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <lcd_rd_data+0x84>)
 80014f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014fc:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 80014fe:	2002      	movs	r0, #2
 8001500:	f7ff ffd0 	bl	80014a4 <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <lcd_rd_data+0x80>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	b29b      	uxth	r3, r3
 800150a:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 800150c:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <lcd_rd_data+0x84>)
 800150e:	2240      	movs	r2, #64	@ 0x40
 8001510:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <lcd_rd_data+0x84>)
 8001514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001518:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 800151a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800151e:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <lcd_rd_data+0x80>)
 8001532:	f006 fe69 	bl	8008208 <HAL_GPIO_Init>

    return ram;
 8001536:	8afb      	ldrh	r3, [r7, #22]
 8001538:	b29b      	uxth	r3, r3
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40010c00 	.word	0x40010c00
 8001548:	40011000 	.word	0x40011000

0800154c <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	@ 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	80fb      	strh	r3, [r7, #6]
 8001558:	4613      	mov	r3, r2
 800155a:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 800155c:	4b44      	ldr	r3, [pc, #272]	@ (8001670 <lcd_set_cursor+0x124>)
 800155e:	889b      	ldrh	r3, [r3, #4]
 8001560:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001564:	4293      	cmp	r3, r2
 8001566:	f040 8189 	bne.w	800187c <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 800156a:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <lcd_set_cursor+0x124>)
 800156c:	799b      	ldrb	r3, [r3, #6]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 8084 	bne.w	800167c <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8001574:	4b3e      	ldr	r3, [pc, #248]	@ (8001670 <lcd_set_cursor+0x124>)
 8001576:	881a      	ldrh	r2, [r3, #0]
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b01      	subs	r3, #1
 8001580:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8001582:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <lcd_set_cursor+0x124>)
 8001584:	895b      	ldrh	r3, [r3, #10]
 8001586:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001588:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <lcd_set_cursor+0x128>)
 800158a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800158e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001590:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <lcd_set_cursor+0x128>)
 8001592:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001596:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <lcd_set_cursor+0x12c>)
 800159e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80015a0:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <lcd_set_cursor+0x128>)
 80015a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80015a8:	4b32      	ldr	r3, [pc, #200]	@ (8001674 <lcd_set_cursor+0x128>)
 80015aa:	2280      	movs	r2, #128	@ 0x80
 80015ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80015ae:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <lcd_set_cursor+0x128>)
 80015b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b4:	611a      	str	r2, [r3, #16]
}
 80015b6:	bf00      	nop
            lcd_wr_data(0);
 80015b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <lcd_set_cursor+0x128>)
 80015ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <lcd_set_cursor+0x128>)
 80015c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <lcd_set_cursor+0x12c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <lcd_set_cursor+0x128>)
 80015d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <lcd_set_cursor+0x128>)
 80015d8:	2280      	movs	r2, #128	@ 0x80
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <lcd_set_cursor+0x128>)
 80015de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e2:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 80015e4:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <lcd_set_cursor+0x128>)
 80015e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <lcd_set_cursor+0x128>)
 80015ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <lcd_set_cursor+0x12c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <lcd_set_cursor+0x128>)
 80015fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <lcd_set_cursor+0x128>)
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <lcd_set_cursor+0x128>)
 800160a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800160e:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 8001610:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <lcd_set_cursor+0x128>)
 8001612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <lcd_set_cursor+0x128>)
 800161a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <lcd_set_cursor+0x12c>)
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <lcd_set_cursor+0x128>)
 800162c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <lcd_set_cursor+0x128>)
 8001634:	2280      	movs	r2, #128	@ 0x80
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <lcd_set_cursor+0x128>)
 800163a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163e:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <lcd_set_cursor+0x128>)
 8001642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <lcd_set_cursor+0x128>)
 800164a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800164e:	611a      	str	r2, [r3, #16]
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <lcd_set_cursor+0x12c>)
 8001654:	b2db      	uxtb	r3, r3
 8001656:	60d3      	str	r3, [r2, #12]
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <lcd_set_cursor+0x128>)
 800165a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <lcd_set_cursor+0x128>)
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <lcd_set_cursor+0x128>)
 8001668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	e081      	b.n	8001774 <lcd_set_cursor+0x228>
 8001670:	20000038 	.word	0x20000038
 8001674:	40011000 	.word	0x40011000
 8001678:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 800167c:	4b7c      	ldr	r3, [pc, #496]	@ (8001870 <lcd_set_cursor+0x324>)
 800167e:	895b      	ldrh	r3, [r3, #10]
 8001680:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001682:	4b7c      	ldr	r3, [pc, #496]	@ (8001874 <lcd_set_cursor+0x328>)
 8001684:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001688:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800168a:	4b7a      	ldr	r3, [pc, #488]	@ (8001874 <lcd_set_cursor+0x328>)
 800168c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001690:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001692:	8a3b      	ldrh	r3, [r7, #16]
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b78      	ldr	r3, [pc, #480]	@ (8001878 <lcd_set_cursor+0x32c>)
 8001698:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800169a:	4b76      	ldr	r3, [pc, #472]	@ (8001874 <lcd_set_cursor+0x328>)
 800169c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016a0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80016a2:	4b74      	ldr	r3, [pc, #464]	@ (8001874 <lcd_set_cursor+0x328>)
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80016a8:	4b72      	ldr	r3, [pc, #456]	@ (8001874 <lcd_set_cursor+0x328>)
 80016aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ae:	611a      	str	r2, [r3, #16]
}
 80016b0:	bf00      	nop
            lcd_wr_data(x >> 8);
 80016b2:	4b70      	ldr	r3, [pc, #448]	@ (8001874 <lcd_set_cursor+0x328>)
 80016b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001874 <lcd_set_cursor+0x328>)
 80016bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001878 <lcd_set_cursor+0x32c>)
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	4b69      	ldr	r3, [pc, #420]	@ (8001874 <lcd_set_cursor+0x328>)
 80016ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	4b67      	ldr	r3, [pc, #412]	@ (8001874 <lcd_set_cursor+0x328>)
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	611a      	str	r2, [r3, #16]
 80016da:	4b66      	ldr	r3, [pc, #408]	@ (8001874 <lcd_set_cursor+0x328>)
 80016dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e0:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 80016e2:	4b64      	ldr	r3, [pc, #400]	@ (8001874 <lcd_set_cursor+0x328>)
 80016e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	4b62      	ldr	r3, [pc, #392]	@ (8001874 <lcd_set_cursor+0x328>)
 80016ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4a60      	ldr	r2, [pc, #384]	@ (8001878 <lcd_set_cursor+0x32c>)
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	60d3      	str	r3, [r2, #12]
 80016fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001874 <lcd_set_cursor+0x328>)
 80016fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	4b5c      	ldr	r3, [pc, #368]	@ (8001874 <lcd_set_cursor+0x328>)
 8001704:	2280      	movs	r2, #128	@ 0x80
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	4b5a      	ldr	r3, [pc, #360]	@ (8001874 <lcd_set_cursor+0x328>)
 800170a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800170e:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 8001710:	4b58      	ldr	r3, [pc, #352]	@ (8001874 <lcd_set_cursor+0x328>)
 8001712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	4b56      	ldr	r3, [pc, #344]	@ (8001874 <lcd_set_cursor+0x328>)
 800171a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	4b53      	ldr	r3, [pc, #332]	@ (8001870 <lcd_set_cursor+0x324>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	3b01      	subs	r3, #1
 8001726:	121a      	asrs	r2, r3, #8
 8001728:	4b53      	ldr	r3, [pc, #332]	@ (8001878 <lcd_set_cursor+0x32c>)
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	4b51      	ldr	r3, [pc, #324]	@ (8001874 <lcd_set_cursor+0x328>)
 800172e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	4b4f      	ldr	r3, [pc, #316]	@ (8001874 <lcd_set_cursor+0x328>)
 8001736:	2280      	movs	r2, #128	@ 0x80
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	4b4e      	ldr	r3, [pc, #312]	@ (8001874 <lcd_set_cursor+0x328>)
 800173c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001740:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8001742:	4b4c      	ldr	r3, [pc, #304]	@ (8001874 <lcd_set_cursor+0x328>)
 8001744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	4b4a      	ldr	r3, [pc, #296]	@ (8001874 <lcd_set_cursor+0x328>)
 800174c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <lcd_set_cursor+0x324>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	3b01      	subs	r3, #1
 8001758:	4a47      	ldr	r2, [pc, #284]	@ (8001878 <lcd_set_cursor+0x32c>)
 800175a:	b2db      	uxtb	r3, r3
 800175c:	60d3      	str	r3, [r2, #12]
 800175e:	4b45      	ldr	r3, [pc, #276]	@ (8001874 <lcd_set_cursor+0x328>)
 8001760:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	4b43      	ldr	r3, [pc, #268]	@ (8001874 <lcd_set_cursor+0x328>)
 8001768:	2280      	movs	r2, #128	@ 0x80
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <lcd_set_cursor+0x328>)
 800176e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001772:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8001774:	4b3e      	ldr	r3, [pc, #248]	@ (8001870 <lcd_set_cursor+0x324>)
 8001776:	899b      	ldrh	r3, [r3, #12]
 8001778:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800177a:	4b3e      	ldr	r3, [pc, #248]	@ (8001874 <lcd_set_cursor+0x328>)
 800177c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001780:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001782:	4b3c      	ldr	r3, [pc, #240]	@ (8001874 <lcd_set_cursor+0x328>)
 8001784:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001788:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800178a:	8a7b      	ldrh	r3, [r7, #18]
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b3a      	ldr	r3, [pc, #232]	@ (8001878 <lcd_set_cursor+0x32c>)
 8001790:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001792:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <lcd_set_cursor+0x328>)
 8001794:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001798:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800179a:	4b36      	ldr	r3, [pc, #216]	@ (8001874 <lcd_set_cursor+0x328>)
 800179c:	2280      	movs	r2, #128	@ 0x80
 800179e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80017a0:	4b34      	ldr	r3, [pc, #208]	@ (8001874 <lcd_set_cursor+0x328>)
 80017a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a6:	611a      	str	r2, [r3, #16]
}
 80017a8:	bf00      	nop
        lcd_wr_data(y >> 8);
 80017aa:	4b32      	ldr	r3, [pc, #200]	@ (8001874 <lcd_set_cursor+0x328>)
 80017ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	4b30      	ldr	r3, [pc, #192]	@ (8001874 <lcd_set_cursor+0x328>)
 80017b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	88bb      	ldrh	r3, [r7, #4]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <lcd_set_cursor+0x32c>)
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <lcd_set_cursor+0x328>)
 80017c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017ca:	611a      	str	r2, [r3, #16]
 80017cc:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <lcd_set_cursor+0x328>)
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <lcd_set_cursor+0x328>)
 80017d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d8:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <lcd_set_cursor+0x328>)
 80017dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <lcd_set_cursor+0x328>)
 80017e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	4a22      	ldr	r2, [pc, #136]	@ (8001878 <lcd_set_cursor+0x32c>)
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	60d3      	str	r3, [r2, #12]
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <lcd_set_cursor+0x328>)
 80017f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <lcd_set_cursor+0x328>)
 80017fc:	2280      	movs	r2, #128	@ 0x80
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <lcd_set_cursor+0x328>)
 8001802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001806:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <lcd_set_cursor+0x328>)
 800180a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <lcd_set_cursor+0x328>)
 8001812:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <lcd_set_cursor+0x324>)
 800181a:	885b      	ldrh	r3, [r3, #2]
 800181c:	3b01      	subs	r3, #1
 800181e:	121a      	asrs	r2, r3, #8
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <lcd_set_cursor+0x32c>)
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <lcd_set_cursor+0x328>)
 8001826:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <lcd_set_cursor+0x328>)
 800182e:	2280      	movs	r2, #128	@ 0x80
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <lcd_set_cursor+0x328>)
 8001834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001838:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <lcd_set_cursor+0x328>)
 800183c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <lcd_set_cursor+0x328>)
 8001844:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <lcd_set_cursor+0x324>)
 800184c:	885b      	ldrh	r3, [r3, #2]
 800184e:	3b01      	subs	r3, #1
 8001850:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <lcd_set_cursor+0x32c>)
 8001852:	b2db      	uxtb	r3, r3
 8001854:	60d3      	str	r3, [r2, #12]
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <lcd_set_cursor+0x328>)
 8001858:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <lcd_set_cursor+0x328>)
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	611a      	str	r2, [r3, #16]
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <lcd_set_cursor+0x328>)
 8001866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186a:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 800186c:	e176      	b.n	8001b5c <lcd_set_cursor+0x610>
 800186e:	bf00      	nop
 8001870:	20000038 	.word	0x20000038
 8001874:	40011000 	.word	0x40011000
 8001878:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 800187c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a28 <lcd_set_cursor+0x4dc>)
 800187e:	889b      	ldrh	r3, [r3, #4]
 8001880:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001884:	4293      	cmp	r3, r2
 8001886:	f040 80d5 	bne.w	8001a34 <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 800188a:	4b67      	ldr	r3, [pc, #412]	@ (8001a28 <lcd_set_cursor+0x4dc>)
 800188c:	895b      	ldrh	r3, [r3, #10]
 800188e:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001890:	4b66      	ldr	r3, [pc, #408]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001892:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001896:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001898:	4b64      	ldr	r3, [pc, #400]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 800189a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800189e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80018a0:	8b7b      	ldrh	r3, [r7, #26]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b62      	ldr	r3, [pc, #392]	@ (8001a30 <lcd_set_cursor+0x4e4>)
 80018a6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80018a8:	4b60      	ldr	r3, [pc, #384]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80018aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018ae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80018b0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80018b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80018b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018bc:	611a      	str	r2, [r3, #16]
}
 80018be:	bf00      	nop
        lcd_wr_data(x >> 8);
 80018c0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80018c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	4b58      	ldr	r3, [pc, #352]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80018ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b56      	ldr	r3, [pc, #344]	@ (8001a30 <lcd_set_cursor+0x4e4>)
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	4b54      	ldr	r3, [pc, #336]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80018dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	4b52      	ldr	r3, [pc, #328]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80018e4:	2280      	movs	r2, #128	@ 0x80
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	4b50      	ldr	r3, [pc, #320]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80018ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ee:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 80018f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a28 <lcd_set_cursor+0x4dc>)
 80018f2:	895b      	ldrh	r3, [r3, #10]
 80018f4:	3301      	adds	r3, #1
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80018fa:	4b4c      	ldr	r3, [pc, #304]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80018fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001900:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001902:	4b4a      	ldr	r3, [pc, #296]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001904:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001908:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800190a:	8b3b      	ldrh	r3, [r7, #24]
 800190c:	b29a      	uxth	r2, r3
 800190e:	4b48      	ldr	r3, [pc, #288]	@ (8001a30 <lcd_set_cursor+0x4e4>)
 8001910:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001912:	4b46      	ldr	r3, [pc, #280]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001914:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001918:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800191a:	4b44      	ldr	r3, [pc, #272]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 800191c:	2280      	movs	r2, #128	@ 0x80
 800191e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001920:	4b42      	ldr	r3, [pc, #264]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001926:	611a      	str	r2, [r3, #16]
}
 8001928:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 800192a:	4b40      	ldr	r3, [pc, #256]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 800192c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	4b3e      	ldr	r3, [pc, #248]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001934:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a30 <lcd_set_cursor+0x4e4>)
 800193e:	b2db      	uxtb	r3, r3
 8001940:	60d3      	str	r3, [r2, #12]
 8001942:	4b3a      	ldr	r3, [pc, #232]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001944:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	4b38      	ldr	r3, [pc, #224]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 800194c:	2280      	movs	r2, #128	@ 0x80
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	4b36      	ldr	r3, [pc, #216]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001956:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001958:	4b33      	ldr	r3, [pc, #204]	@ (8001a28 <lcd_set_cursor+0x4dc>)
 800195a:	899b      	ldrh	r3, [r3, #12]
 800195c:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800195e:	4b33      	ldr	r3, [pc, #204]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001960:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001964:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001966:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001968:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800196c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800196e:	8afb      	ldrh	r3, [r7, #22]
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <lcd_set_cursor+0x4e4>)
 8001974:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001976:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001978:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800197c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800197e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001980:	2280      	movs	r2, #128	@ 0x80
 8001982:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001984:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198a:	611a      	str	r2, [r3, #16]
}
 800198c:	bf00      	nop
        lcd_wr_data(y >> 8);
 800198e:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001990:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001998:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <lcd_set_cursor+0x4e4>)
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80019aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80019b2:	2280      	movs	r2, #128	@ 0x80
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80019b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019bc:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <lcd_set_cursor+0x4dc>)
 80019c0:	899b      	ldrh	r3, [r3, #12]
 80019c2:	3301      	adds	r3, #1
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80019c8:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80019ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019ce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80019d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019d6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80019d8:	8abb      	ldrh	r3, [r7, #20]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <lcd_set_cursor+0x4e4>)
 80019de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80019e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80019e8:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80019f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f4:	611a      	str	r2, [r3, #16]
}
 80019f6:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 80019fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001a02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	4a09      	ldr	r2, [pc, #36]	@ (8001a30 <lcd_set_cursor+0x4e4>)
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	60d3      	str	r3, [r2, #12]
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001a12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a16:	611a      	str	r2, [r3, #16]
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001a1a:	2280      	movs	r2, #128	@ 0x80
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <lcd_set_cursor+0x4e0>)
 8001a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a24:	611a      	str	r2, [r3, #16]
}
 8001a26:	e099      	b.n	8001b5c <lcd_set_cursor+0x610>
 8001a28:	20000038 	.word	0x20000038
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 8001a34:	4b4c      	ldr	r3, [pc, #304]	@ (8001b68 <lcd_set_cursor+0x61c>)
 8001a36:	895b      	ldrh	r3, [r3, #10]
 8001a38:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a40:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001a42:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a48:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001a4a:	8bfb      	ldrh	r3, [r7, #30]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b48      	ldr	r3, [pc, #288]	@ (8001b70 <lcd_set_cursor+0x624>)
 8001a50:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001a52:	4b46      	ldr	r3, [pc, #280]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a58:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001a5a:	4b44      	ldr	r3, [pc, #272]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a5c:	2280      	movs	r2, #128	@ 0x80
 8001a5e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001a60:	4b42      	ldr	r3, [pc, #264]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a66:	611a      	str	r2, [r3, #16]
}
 8001a68:	bf00      	nop
        lcd_wr_data(x >> 8);
 8001a6a:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	4b3e      	ldr	r3, [pc, #248]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a78:	611a      	str	r2, [r3, #16]
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <lcd_set_cursor+0x624>)
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	4b39      	ldr	r3, [pc, #228]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	4b37      	ldr	r3, [pc, #220]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	4b36      	ldr	r3, [pc, #216]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a98:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 8001a9a:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4a30      	ldr	r2, [pc, #192]	@ (8001b70 <lcd_set_cursor+0x624>)
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	60d3      	str	r3, [r2, #12]
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001ab4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001abc:	2280      	movs	r2, #128	@ 0x80
 8001abe:	611a      	str	r2, [r3, #16]
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ac6:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <lcd_set_cursor+0x61c>)
 8001aca:	899b      	ldrh	r3, [r3, #12]
 8001acc:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001ace:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001ad0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ad4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001ad6:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001ad8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001adc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001ade:	8bbb      	ldrh	r3, [r7, #28]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <lcd_set_cursor+0x624>)
 8001ae4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001ae6:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001ae8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001aec:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001aee:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001af0:	2280      	movs	r2, #128	@ 0x80
 8001af2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001afa:	611a      	str	r2, [r3, #16]
}
 8001afc:	bf00      	nop
        lcd_wr_data(y >> 8);
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	88bb      	ldrh	r3, [r7, #4]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <lcd_set_cursor+0x624>)
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b1a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b22:	2280      	movs	r2, #128	@ 0x80
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b2c:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b3c:	611a      	str	r2, [r3, #16]
 8001b3e:	88bb      	ldrh	r3, [r7, #4]
 8001b40:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <lcd_set_cursor+0x624>)
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	60d3      	str	r3, [r2, #12]
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b48:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b50:	2280      	movs	r2, #128	@ 0x80
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <lcd_set_cursor+0x620>)
 8001b56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b5a:	611a      	str	r2, [r3, #16]
}
 8001b5c:	bf00      	nop
 8001b5e:	3724      	adds	r7, #36	@ 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000038 	.word	0x20000038
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	40010c00 	.word	0x40010c00

08001b74 <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t dirreg = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 8001b86:	4b5f      	ldr	r3, [pc, #380]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001b88:	799b      	ldrb	r3, [r3, #6]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d105      	bne.n	8001b9a <lcd_scan_dir+0x26>
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001b90:	889b      	ldrh	r3, [r3, #4]
 8001b92:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d109      	bne.n	8001bae <lcd_scan_dir+0x3a>
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001b9c:	799b      	ldrb	r3, [r3, #6]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d134      	bne.n	8001c0c <lcd_scan_dir+0x98>
 8001ba2:	4b58      	ldr	r3, [pc, #352]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001ba4:	889b      	ldrh	r3, [r3, #4]
 8001ba6:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d12e      	bne.n	8001c0c <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b07      	cmp	r3, #7
 8001bb2:	d82b      	bhi.n	8001c0c <lcd_scan_dir+0x98>
 8001bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <lcd_scan_dir+0x48>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001bdd 	.word	0x08001bdd
 8001bc0:	08001be3 	.word	0x08001be3
 8001bc4:	08001be9 	.word	0x08001be9
 8001bc8:	08001bef 	.word	0x08001bef
 8001bcc:	08001bf5 	.word	0x08001bf5
 8001bd0:	08001bfb 	.word	0x08001bfb
 8001bd4:	08001c01 	.word	0x08001c01
 8001bd8:	08001c07 	.word	0x08001c07
        {
            case 0:
                dir = 6;
 8001bdc:	2306      	movs	r3, #6
 8001bde:	71fb      	strb	r3, [r7, #7]
                break;
 8001be0:	e014      	b.n	8001c0c <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 8001be2:	2307      	movs	r3, #7
 8001be4:	71fb      	strb	r3, [r7, #7]
                break;
 8001be6:	e011      	b.n	8001c0c <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 8001be8:	2304      	movs	r3, #4
 8001bea:	71fb      	strb	r3, [r7, #7]
                break;
 8001bec:	e00e      	b.n	8001c0c <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	71fb      	strb	r3, [r7, #7]
                break;
 8001bf2:	e00b      	b.n	8001c0c <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	71fb      	strb	r3, [r7, #7]
                break;
 8001bf8:	e008      	b.n	8001c0c <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	71fb      	strb	r3, [r7, #7]
                break;
 8001bfe:	e005      	b.n	8001c0c <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 8001c00:	2303      	movs	r3, #3
 8001c02:	71fb      	strb	r3, [r7, #7]
                break;
 8001c04:	e002      	b.n	8001c0c <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	71fb      	strb	r3, [r7, #7]
                break;
 8001c0a:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b07      	cmp	r3, #7
 8001c10:	d835      	bhi.n	8001c7e <lcd_scan_dir+0x10a>
 8001c12:	a201      	add	r2, pc, #4	@ (adr r2, 8001c18 <lcd_scan_dir+0xa4>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c7f 	.word	0x08001c7f
 8001c1c:	08001c39 	.word	0x08001c39
 8001c20:	08001c43 	.word	0x08001c43
 8001c24:	08001c4d 	.word	0x08001c4d
 8001c28:	08001c57 	.word	0x08001c57
 8001c2c:	08001c61 	.word	0x08001c61
 8001c30:	08001c6b 	.word	0x08001c6b
 8001c34:	08001c75 	.word	0x08001c75
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001c38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001c40:	e01d      	b.n	8001c7e <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001c42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c48:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001c4a:	e018      	b.n	8001c7e <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001c4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c52:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001c54:	e013      	b.n	8001c7e <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8001c56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c58:	f043 0320 	orr.w	r3, r3, #32
 8001c5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001c5e:	e00e      	b.n	8001c7e <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001c60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c66:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001c68:	e009      	b.n	8001c7e <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001c6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c6c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001c70:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001c72:	e004      	b.n	8001c7e <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001c74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c76:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001c7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001c7c:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 8001c7e:	2336      	movs	r3, #54	@ 0x36
 8001c80:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (lcddev.id == 0X5510)
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001c84:	889b      	ldrh	r3, [r3, #4]
 8001c86:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d102      	bne.n	8001c94 <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 8001c8e:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 8001c92:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 8001c94:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001c96:	889b      	ldrh	r3, [r3, #4]
 8001c98:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00b      	beq.n	8001cb8 <lcd_scan_dir+0x144>
 8001ca0:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001ca2:	889b      	ldrh	r3, [r3, #4]
 8001ca4:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d005      	beq.n	8001cb8 <lcd_scan_dir+0x144>
 8001cac:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001cae:	889b      	ldrh	r3, [r3, #4]
 8001cb0:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d103      	bne.n	8001cc0 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 8001cb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001cba:	f043 0308 	orr.w	r3, r3, #8
 8001cbe:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lcd_write_reg(dirreg, regval);
 8001cc0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001cc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fbaa 	bl	8001420 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001cce:	889b      	ldrh	r3, [r3, #4]
 8001cd0:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d027      	beq.n	8001d28 <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 8001cd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d012      	beq.n	8001d08 <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001ce4:	881a      	ldrh	r2, [r3, #0]
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001ce8:	885b      	ldrh	r3, [r3, #2]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d21c      	bcs.n	8001d28 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001cf6:	885a      	ldrh	r2, [r3, #2]
 8001cf8:	4b02      	ldr	r3, [pc, #8]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001cfa:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001cfc:	4a01      	ldr	r2, [pc, #4]	@ (8001d04 <lcd_scan_dir+0x190>)
 8001cfe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d00:	8053      	strh	r3, [r2, #2]
 8001d02:	e011      	b.n	8001d28 <lcd_scan_dir+0x1b4>
 8001d04:	20000038 	.word	0x20000038
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 8001d08:	4b9c      	ldr	r3, [pc, #624]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001d0a:	881a      	ldrh	r2, [r3, #0]
 8001d0c:	4b9b      	ldr	r3, [pc, #620]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001d0e:	885b      	ldrh	r3, [r3, #2]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d909      	bls.n	8001d28 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001d14:	4b99      	ldr	r3, [pc, #612]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 8001d1a:	4b98      	ldr	r3, [pc, #608]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001d1c:	885a      	ldrh	r2, [r3, #2]
 8001d1e:	4b97      	ldr	r3, [pc, #604]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001d20:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001d22:	4a96      	ldr	r2, [pc, #600]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001d24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d26:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 8001d28:	4b94      	ldr	r3, [pc, #592]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001d2a:	889b      	ldrh	r3, [r3, #4]
 8001d2c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001d30:	4293      	cmp	r3, r2
 8001d32:	f040 81af 	bne.w	8002094 <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 8001d36:	4b91      	ldr	r3, [pc, #580]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001d38:	895b      	ldrh	r3, [r3, #10]
 8001d3a:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001d3c:	4b90      	ldr	r3, [pc, #576]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d42:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001d44:	4b8e      	ldr	r3, [pc, #568]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d4a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001d4c:	8bbb      	ldrh	r3, [r7, #28]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b8c      	ldr	r3, [pc, #560]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001d52:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001d54:	4b8a      	ldr	r3, [pc, #552]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d5a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001d5c:	4b88      	ldr	r3, [pc, #544]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d5e:	2280      	movs	r2, #128	@ 0x80
 8001d60:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001d62:	4b87      	ldr	r3, [pc, #540]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d68:	611a      	str	r2, [r3, #16]
}
 8001d6a:	bf00      	nop
        lcd_wr_data(0);
 8001d6c:	4b84      	ldr	r3, [pc, #528]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	4b82      	ldr	r3, [pc, #520]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	4b81      	ldr	r3, [pc, #516]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	4b7f      	ldr	r3, [pc, #508]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d84:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d8c:	2280      	movs	r2, #128	@ 0x80
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	4b7b      	ldr	r3, [pc, #492]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001d92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d96:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8001d98:	4b78      	ldr	r3, [pc, #480]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001d9a:	895b      	ldrh	r3, [r3, #10]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001da2:	4b77      	ldr	r3, [pc, #476]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001da4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001da8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001daa:	4b75      	ldr	r3, [pc, #468]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001dac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001db0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001db2:	8b7b      	ldrh	r3, [r7, #26]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001db8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001dba:	4b71      	ldr	r3, [pc, #452]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001dbc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001dc0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001dc4:	2280      	movs	r2, #128	@ 0x80
 8001dc6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001dc8:	4b6d      	ldr	r3, [pc, #436]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dce:	611a      	str	r2, [r3, #16]
}
 8001dd0:	bf00      	nop
        lcd_wr_data(0);
 8001dd2:	4b6b      	ldr	r3, [pc, #428]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001dd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dd8:	611a      	str	r2, [r3, #16]
 8001dda:	4b69      	ldr	r3, [pc, #420]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001ddc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	4b68      	ldr	r3, [pc, #416]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	4b65      	ldr	r3, [pc, #404]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001dea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	4b63      	ldr	r3, [pc, #396]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001df2:	2280      	movs	r2, #128	@ 0x80
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	4b62      	ldr	r3, [pc, #392]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dfc:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001e00:	895b      	ldrh	r3, [r3, #10]
 8001e02:	3302      	adds	r3, #2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001e08:	4b5d      	ldr	r3, [pc, #372]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e0e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001e10:	4b5b      	ldr	r3, [pc, #364]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e16:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001e18:	8b3b      	ldrh	r3, [r7, #24]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b59      	ldr	r3, [pc, #356]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001e1e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001e20:	4b57      	ldr	r3, [pc, #348]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e26:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001e28:	4b55      	ldr	r3, [pc, #340]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e2a:	2280      	movs	r2, #128	@ 0x80
 8001e2c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001e2e:	4b54      	ldr	r3, [pc, #336]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e34:	611a      	str	r2, [r3, #16]
}
 8001e36:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 8001e38:	4b51      	ldr	r3, [pc, #324]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	4b4f      	ldr	r3, [pc, #316]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	4b4c      	ldr	r3, [pc, #304]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	121a      	asrs	r2, r3, #8
 8001e50:	4b4c      	ldr	r3, [pc, #304]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	4b4a      	ldr	r3, [pc, #296]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e5a:	611a      	str	r2, [r3, #16]
 8001e5c:	4b48      	ldr	r3, [pc, #288]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	4b47      	ldr	r3, [pc, #284]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e68:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 8001e6a:	4b44      	ldr	r3, [pc, #272]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001e6c:	895b      	ldrh	r3, [r3, #10]
 8001e6e:	3303      	adds	r3, #3
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001e74:	4b42      	ldr	r3, [pc, #264]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e7a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001e7c:	4b40      	ldr	r3, [pc, #256]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e82:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001e84:	8afb      	ldrh	r3, [r7, #22]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b3e      	ldr	r3, [pc, #248]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001e8a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e8e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e92:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001e94:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001e9a:	4b39      	ldr	r3, [pc, #228]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea0:	611a      	str	r2, [r3, #16]
}
 8001ea2:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8001ea4:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001ea6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001eae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	4a32      	ldr	r2, [pc, #200]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	60d3      	str	r3, [r2, #12]
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001ec2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ec6:	611a      	str	r2, [r3, #16]
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	4b2c      	ldr	r3, [pc, #176]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed4:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001ed6:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001ed8:	899b      	ldrh	r3, [r3, #12]
 8001eda:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001edc:	4b28      	ldr	r3, [pc, #160]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001ede:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ee2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001ee4:	4b26      	ldr	r3, [pc, #152]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001ee6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001eec:	8abb      	ldrh	r3, [r7, #20]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	4b24      	ldr	r3, [pc, #144]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001ef2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001ef4:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001ef6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001efa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001efc:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001f02:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f08:	611a      	str	r2, [r3, #16]
}
 8001f0a:	bf00      	nop
        lcd_wr_data(0);
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f12:	611a      	str	r2, [r3, #16]
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f1a:	611a      	str	r2, [r3, #16]
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f2c:	2280      	movs	r2, #128	@ 0x80
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f36:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8001f38:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <lcd_scan_dir+0x408>)
 8001f3a:	899b      	ldrh	r3, [r3, #12]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001f52:	8a7b      	ldrh	r3, [r7, #18]
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <lcd_scan_dir+0x410>)
 8001f58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001f62:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f64:	2280      	movs	r2, #128	@ 0x80
 8001f66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f6e:	611a      	str	r2, [r3, #16]
}
 8001f70:	bf00      	nop
        lcd_wr_data(0);
 8001f72:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <lcd_scan_dir+0x40c>)
 8001f74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	e005      	b.n	8001f88 <lcd_scan_dir+0x414>
 8001f7c:	20000038 	.word	0x20000038
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40010c00 	.word	0x40010c00
 8001f88:	4b3f      	ldr	r3, [pc, #252]	@ (8002088 <lcd_scan_dir+0x514>)
 8001f8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	4b3e      	ldr	r3, [pc, #248]	@ (800208c <lcd_scan_dir+0x518>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	4b3c      	ldr	r3, [pc, #240]	@ (8002088 <lcd_scan_dir+0x514>)
 8001f98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002088 <lcd_scan_dir+0x514>)
 8001fa0:	2280      	movs	r2, #128	@ 0x80
 8001fa2:	611a      	str	r2, [r3, #16]
 8001fa4:	4b38      	ldr	r3, [pc, #224]	@ (8002088 <lcd_scan_dir+0x514>)
 8001fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001faa:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 8001fac:	4b38      	ldr	r3, [pc, #224]	@ (8002090 <lcd_scan_dir+0x51c>)
 8001fae:	899b      	ldrh	r3, [r3, #12]
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001fb6:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <lcd_scan_dir+0x514>)
 8001fb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fbc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001fbe:	4b32      	ldr	r3, [pc, #200]	@ (8002088 <lcd_scan_dir+0x514>)
 8001fc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fc4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001fc6:	8a3b      	ldrh	r3, [r7, #16]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b30      	ldr	r3, [pc, #192]	@ (800208c <lcd_scan_dir+0x518>)
 8001fcc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001fce:	4b2e      	ldr	r3, [pc, #184]	@ (8002088 <lcd_scan_dir+0x514>)
 8001fd0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001fd4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <lcd_scan_dir+0x514>)
 8001fd8:	2280      	movs	r2, #128	@ 0x80
 8001fda:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <lcd_scan_dir+0x514>)
 8001fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe2:	611a      	str	r2, [r3, #16]
}
 8001fe4:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 8001fe6:	4b28      	ldr	r3, [pc, #160]	@ (8002088 <lcd_scan_dir+0x514>)
 8001fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <lcd_scan_dir+0x514>)
 8001ff0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	4b26      	ldr	r3, [pc, #152]	@ (8002090 <lcd_scan_dir+0x51c>)
 8001ff8:	885b      	ldrh	r3, [r3, #2]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	121a      	asrs	r2, r3, #8
 8001ffe:	4b23      	ldr	r3, [pc, #140]	@ (800208c <lcd_scan_dir+0x518>)
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <lcd_scan_dir+0x514>)
 8002004:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	4b1f      	ldr	r3, [pc, #124]	@ (8002088 <lcd_scan_dir+0x514>)
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <lcd_scan_dir+0x514>)
 8002012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002016:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 8002018:	4b1d      	ldr	r3, [pc, #116]	@ (8002090 <lcd_scan_dir+0x51c>)
 800201a:	899b      	ldrh	r3, [r3, #12]
 800201c:	3303      	adds	r3, #3
 800201e:	b29b      	uxth	r3, r3
 8002020:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002022:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <lcd_scan_dir+0x514>)
 8002024:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002028:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800202a:	4b17      	ldr	r3, [pc, #92]	@ (8002088 <lcd_scan_dir+0x514>)
 800202c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002030:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002032:	89fb      	ldrh	r3, [r7, #14]
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <lcd_scan_dir+0x518>)
 8002038:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800203a:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <lcd_scan_dir+0x514>)
 800203c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002040:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002042:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <lcd_scan_dir+0x514>)
 8002044:	2280      	movs	r2, #128	@ 0x80
 8002046:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002048:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <lcd_scan_dir+0x514>)
 800204a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800204e:	611a      	str	r2, [r3, #16]
}
 8002050:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8002052:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <lcd_scan_dir+0x514>)
 8002054:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <lcd_scan_dir+0x514>)
 800205c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002060:	611a      	str	r2, [r3, #16]
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <lcd_scan_dir+0x51c>)
 8002064:	885b      	ldrh	r3, [r3, #2]
 8002066:	3b01      	subs	r3, #1
 8002068:	4a08      	ldr	r2, [pc, #32]	@ (800208c <lcd_scan_dir+0x518>)
 800206a:	b2db      	uxtb	r3, r3
 800206c:	60d3      	str	r3, [r2, #12]
 800206e:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <lcd_scan_dir+0x514>)
 8002070:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <lcd_scan_dir+0x514>)
 8002078:	2280      	movs	r2, #128	@ 0x80
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <lcd_scan_dir+0x514>)
 800207e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002082:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 8002084:	e0f8      	b.n	8002278 <lcd_scan_dir+0x704>
 8002086:	bf00      	nop
 8002088:	40011000 	.word	0x40011000
 800208c:	40010c00 	.word	0x40010c00
 8002090:	20000038 	.word	0x20000038
        lcd_wr_regno(lcddev.setxcmd);
 8002094:	4b7a      	ldr	r3, [pc, #488]	@ (8002280 <lcd_scan_dir+0x70c>)
 8002096:	895b      	ldrh	r3, [r3, #10]
 8002098:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800209a:	4b7a      	ldr	r3, [pc, #488]	@ (8002284 <lcd_scan_dir+0x710>)
 800209c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80020a2:	4b78      	ldr	r3, [pc, #480]	@ (8002284 <lcd_scan_dir+0x710>)
 80020a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80020aa:	8c3b      	ldrh	r3, [r7, #32]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b76      	ldr	r3, [pc, #472]	@ (8002288 <lcd_scan_dir+0x714>)
 80020b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80020b2:	4b74      	ldr	r3, [pc, #464]	@ (8002284 <lcd_scan_dir+0x710>)
 80020b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80020ba:	4b72      	ldr	r3, [pc, #456]	@ (8002284 <lcd_scan_dir+0x710>)
 80020bc:	2280      	movs	r2, #128	@ 0x80
 80020be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80020c0:	4b70      	ldr	r3, [pc, #448]	@ (8002284 <lcd_scan_dir+0x710>)
 80020c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020c6:	611a      	str	r2, [r3, #16]
}
 80020c8:	bf00      	nop
        lcd_wr_data(0);
 80020ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002284 <lcd_scan_dir+0x710>)
 80020cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002284 <lcd_scan_dir+0x710>)
 80020d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020d8:	611a      	str	r2, [r3, #16]
 80020da:	4b6b      	ldr	r3, [pc, #428]	@ (8002288 <lcd_scan_dir+0x714>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	4b68      	ldr	r3, [pc, #416]	@ (8002284 <lcd_scan_dir+0x710>)
 80020e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020e6:	611a      	str	r2, [r3, #16]
 80020e8:	4b66      	ldr	r3, [pc, #408]	@ (8002284 <lcd_scan_dir+0x710>)
 80020ea:	2280      	movs	r2, #128	@ 0x80
 80020ec:	611a      	str	r2, [r3, #16]
 80020ee:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <lcd_scan_dir+0x710>)
 80020f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f4:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 80020f6:	4b63      	ldr	r3, [pc, #396]	@ (8002284 <lcd_scan_dir+0x710>)
 80020f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020fc:	611a      	str	r2, [r3, #16]
 80020fe:	4b61      	ldr	r3, [pc, #388]	@ (8002284 <lcd_scan_dir+0x710>)
 8002100:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002104:	611a      	str	r2, [r3, #16]
 8002106:	4b60      	ldr	r3, [pc, #384]	@ (8002288 <lcd_scan_dir+0x714>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	4b5d      	ldr	r3, [pc, #372]	@ (8002284 <lcd_scan_dir+0x710>)
 800210e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002112:	611a      	str	r2, [r3, #16]
 8002114:	4b5b      	ldr	r3, [pc, #364]	@ (8002284 <lcd_scan_dir+0x710>)
 8002116:	2280      	movs	r2, #128	@ 0x80
 8002118:	611a      	str	r2, [r3, #16]
 800211a:	4b5a      	ldr	r3, [pc, #360]	@ (8002284 <lcd_scan_dir+0x710>)
 800211c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002120:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 8002122:	4b58      	ldr	r3, [pc, #352]	@ (8002284 <lcd_scan_dir+0x710>)
 8002124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002128:	611a      	str	r2, [r3, #16]
 800212a:	4b56      	ldr	r3, [pc, #344]	@ (8002284 <lcd_scan_dir+0x710>)
 800212c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002130:	611a      	str	r2, [r3, #16]
 8002132:	4b53      	ldr	r3, [pc, #332]	@ (8002280 <lcd_scan_dir+0x70c>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	3b01      	subs	r3, #1
 8002138:	121a      	asrs	r2, r3, #8
 800213a:	4b53      	ldr	r3, [pc, #332]	@ (8002288 <lcd_scan_dir+0x714>)
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	4b51      	ldr	r3, [pc, #324]	@ (8002284 <lcd_scan_dir+0x710>)
 8002140:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002144:	611a      	str	r2, [r3, #16]
 8002146:	4b4f      	ldr	r3, [pc, #316]	@ (8002284 <lcd_scan_dir+0x710>)
 8002148:	2280      	movs	r2, #128	@ 0x80
 800214a:	611a      	str	r2, [r3, #16]
 800214c:	4b4d      	ldr	r3, [pc, #308]	@ (8002284 <lcd_scan_dir+0x710>)
 800214e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002152:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8002154:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <lcd_scan_dir+0x710>)
 8002156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	4b49      	ldr	r3, [pc, #292]	@ (8002284 <lcd_scan_dir+0x710>)
 800215e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	4b46      	ldr	r3, [pc, #280]	@ (8002280 <lcd_scan_dir+0x70c>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	3b01      	subs	r3, #1
 800216a:	4a47      	ldr	r2, [pc, #284]	@ (8002288 <lcd_scan_dir+0x714>)
 800216c:	b2db      	uxtb	r3, r3
 800216e:	60d3      	str	r3, [r2, #12]
 8002170:	4b44      	ldr	r3, [pc, #272]	@ (8002284 <lcd_scan_dir+0x710>)
 8002172:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	4b42      	ldr	r3, [pc, #264]	@ (8002284 <lcd_scan_dir+0x710>)
 800217a:	2280      	movs	r2, #128	@ 0x80
 800217c:	611a      	str	r2, [r3, #16]
 800217e:	4b41      	ldr	r3, [pc, #260]	@ (8002284 <lcd_scan_dir+0x710>)
 8002180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002184:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8002186:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <lcd_scan_dir+0x70c>)
 8002188:	899b      	ldrh	r3, [r3, #12]
 800218a:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800218c:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <lcd_scan_dir+0x710>)
 800218e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002192:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002194:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <lcd_scan_dir+0x710>)
 8002196:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800219a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800219c:	8bfb      	ldrh	r3, [r7, #30]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	4b39      	ldr	r3, [pc, #228]	@ (8002288 <lcd_scan_dir+0x714>)
 80021a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80021a4:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <lcd_scan_dir+0x710>)
 80021a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80021ac:	4b35      	ldr	r3, [pc, #212]	@ (8002284 <lcd_scan_dir+0x710>)
 80021ae:	2280      	movs	r2, #128	@ 0x80
 80021b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80021b2:	4b34      	ldr	r3, [pc, #208]	@ (8002284 <lcd_scan_dir+0x710>)
 80021b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021b8:	611a      	str	r2, [r3, #16]
}
 80021ba:	bf00      	nop
        lcd_wr_data(0);
 80021bc:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <lcd_scan_dir+0x710>)
 80021be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021c2:	611a      	str	r2, [r3, #16]
 80021c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002284 <lcd_scan_dir+0x710>)
 80021c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002288 <lcd_scan_dir+0x714>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <lcd_scan_dir+0x710>)
 80021d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <lcd_scan_dir+0x710>)
 80021dc:	2280      	movs	r2, #128	@ 0x80
 80021de:	611a      	str	r2, [r3, #16]
 80021e0:	4b28      	ldr	r3, [pc, #160]	@ (8002284 <lcd_scan_dir+0x710>)
 80021e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021e6:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 80021e8:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <lcd_scan_dir+0x710>)
 80021ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <lcd_scan_dir+0x710>)
 80021f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	4b23      	ldr	r3, [pc, #140]	@ (8002288 <lcd_scan_dir+0x714>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <lcd_scan_dir+0x710>)
 8002200:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002204:	611a      	str	r2, [r3, #16]
 8002206:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <lcd_scan_dir+0x710>)
 8002208:	2280      	movs	r2, #128	@ 0x80
 800220a:	611a      	str	r2, [r3, #16]
 800220c:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <lcd_scan_dir+0x710>)
 800220e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002212:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <lcd_scan_dir+0x710>)
 8002216:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <lcd_scan_dir+0x710>)
 800221e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002222:	611a      	str	r2, [r3, #16]
 8002224:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <lcd_scan_dir+0x70c>)
 8002226:	885b      	ldrh	r3, [r3, #2]
 8002228:	3b01      	subs	r3, #1
 800222a:	121a      	asrs	r2, r3, #8
 800222c:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <lcd_scan_dir+0x714>)
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <lcd_scan_dir+0x710>)
 8002232:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002236:	611a      	str	r2, [r3, #16]
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <lcd_scan_dir+0x710>)
 800223a:	2280      	movs	r2, #128	@ 0x80
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <lcd_scan_dir+0x710>)
 8002240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002244:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <lcd_scan_dir+0x710>)
 8002248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <lcd_scan_dir+0x710>)
 8002250:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002254:	611a      	str	r2, [r3, #16]
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <lcd_scan_dir+0x70c>)
 8002258:	885b      	ldrh	r3, [r3, #2]
 800225a:	3b01      	subs	r3, #1
 800225c:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <lcd_scan_dir+0x714>)
 800225e:	b2db      	uxtb	r3, r3
 8002260:	60d3      	str	r3, [r2, #12]
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <lcd_scan_dir+0x710>)
 8002264:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002268:	611a      	str	r2, [r3, #16]
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <lcd_scan_dir+0x710>)
 800226c:	2280      	movs	r2, #128	@ 0x80
 800226e:	611a      	str	r2, [r3, #16]
 8002270:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <lcd_scan_dir+0x710>)
 8002272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002276:	611a      	str	r2, [r3, #16]
}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	@ 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000038 	.word	0x20000038
 8002284:	40011000 	.word	0x40011000
 8002288:	40010c00 	.word	0x40010c00

0800228c <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	603a      	str	r2, [r7, #0]
 8002296:	80fb      	strh	r3, [r7, #6]
 8002298:	460b      	mov	r3, r1
 800229a:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 800229c:	88ba      	ldrh	r2, [r7, #4]
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff f952 	bl	800154c <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 80022a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <lcd_draw_point+0x88>)
 80022aa:	891b      	ldrh	r3, [r3, #8]
 80022ac:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80022ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <lcd_draw_point+0x8c>)
 80022b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022b4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <lcd_draw_point+0x8c>)
 80022b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022bc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80022be:	89fb      	ldrh	r3, [r7, #14]
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <lcd_draw_point+0x90>)
 80022c4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <lcd_draw_point+0x8c>)
 80022c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022cc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <lcd_draw_point+0x8c>)
 80022d0:	2280      	movs	r2, #128	@ 0x80
 80022d2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80022d4:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <lcd_draw_point+0x8c>)
 80022d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022da:	611a      	str	r2, [r3, #16]
}
 80022dc:	bf00      	nop
}
 80022de:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 80022e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <lcd_draw_point+0x8c>)
 80022e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022e6:	611a      	str	r2, [r3, #16]
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <lcd_draw_point+0x8c>)
 80022ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ee:	611a      	str	r2, [r3, #16]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <lcd_draw_point+0x90>)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	60d3      	str	r3, [r2, #12]
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <lcd_draw_point+0x8c>)
 80022f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022fc:	611a      	str	r2, [r3, #16]
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <lcd_draw_point+0x8c>)
 8002300:	2280      	movs	r2, #128	@ 0x80
 8002302:	611a      	str	r2, [r3, #16]
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <lcd_draw_point+0x8c>)
 8002306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800230a:	611a      	str	r2, [r3, #16]
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000038 	.word	0x20000038
 8002318:	40011000 	.word	0x40011000
 800231c:	40010c00 	.word	0x40010c00

08002320 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	23be      	movs	r3, #190	@ 0xbe
 800232c:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800232e:	4b5a      	ldr	r3, [pc, #360]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002330:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002334:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002336:	4b58      	ldr	r3, [pc, #352]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002338:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800233c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800233e:	89fb      	ldrh	r3, [r7, #14]
 8002340:	b29a      	uxth	r2, r3
 8002342:	4b56      	ldr	r3, [pc, #344]	@ (800249c <lcd_ssd_backlight_set+0x17c>)
 8002344:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002346:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002348:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800234c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800234e:	4b52      	ldr	r3, [pc, #328]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002350:	2280      	movs	r2, #128	@ 0x80
 8002352:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002354:	4b50      	ldr	r3, [pc, #320]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800235a:	611a      	str	r2, [r3, #16]
}
 800235c:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 800235e:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002360:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	4b4c      	ldr	r3, [pc, #304]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002368:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800236c:	611a      	str	r2, [r3, #16]
 800236e:	4b4b      	ldr	r3, [pc, #300]	@ (800249c <lcd_ssd_backlight_set+0x17c>)
 8002370:	2205      	movs	r2, #5
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	4b48      	ldr	r3, [pc, #288]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002376:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800237a:	611a      	str	r2, [r3, #16]
 800237c:	4b46      	ldr	r3, [pc, #280]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 800237e:	2280      	movs	r2, #128	@ 0x80
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	4b45      	ldr	r3, [pc, #276]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002388:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 800238a:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 800238c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002394:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f9bf 	bl	8000720 <__aeabi_i2d>
 80023a2:	a33b      	add	r3, pc, #236	@ (adr r3, 8002490 <lcd_ssd_backlight_set+0x170>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fd ff3e 	bl	8000228 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4c3a      	ldr	r4, [pc, #232]	@ (800249c <lcd_ssd_backlight_set+0x17c>)
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	f7fe fa1d 	bl	80007f4 <__aeabi_d2uiz>
 80023ba:	4603      	mov	r3, r0
 80023bc:	60e3      	str	r3, [r4, #12]
 80023be:	4b36      	ldr	r3, [pc, #216]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 80023c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023c4:	611a      	str	r2, [r3, #16]
 80023c6:	4b34      	ldr	r3, [pc, #208]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 80023c8:	2280      	movs	r2, #128	@ 0x80
 80023ca:	611a      	str	r2, [r3, #16]
 80023cc:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 80023ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d2:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 80023d4:	4b30      	ldr	r3, [pc, #192]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 80023d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023da:	611a      	str	r2, [r3, #16]
 80023dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 80023de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023e2:	611a      	str	r2, [r3, #16]
 80023e4:	4b2d      	ldr	r3, [pc, #180]	@ (800249c <lcd_ssd_backlight_set+0x17c>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 80023ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023f0:	611a      	str	r2, [r3, #16]
 80023f2:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 80023f4:	2280      	movs	r2, #128	@ 0x80
 80023f6:	611a      	str	r2, [r3, #16]
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 80023fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023fe:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 800240a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	4b22      	ldr	r3, [pc, #136]	@ (800249c <lcd_ssd_backlight_set+0x17c>)
 8002412:	22ff      	movs	r2, #255	@ 0xff
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002418:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800241c:	611a      	str	r2, [r3, #16]
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002420:	2280      	movs	r2, #128	@ 0x80
 8002422:	611a      	str	r2, [r3, #16]
 8002424:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242a:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 800242c:	4b1a      	ldr	r3, [pc, #104]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 800242e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002432:	611a      	str	r2, [r3, #16]
 8002434:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002436:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	4b17      	ldr	r3, [pc, #92]	@ (800249c <lcd_ssd_backlight_set+0x17c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002444:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002448:	611a      	str	r2, [r3, #16]
 800244a:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 800244c:	2280      	movs	r2, #128	@ 0x80
 800244e:	611a      	str	r2, [r3, #16]
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002456:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8002458:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 800245a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800245e:	611a      	str	r2, [r3, #16]
 8002460:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002462:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002466:	611a      	str	r2, [r3, #16]
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <lcd_ssd_backlight_set+0x17c>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002470:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 8002478:	2280      	movs	r2, #128	@ 0x80
 800247a:	611a      	str	r2, [r3, #16]
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <lcd_ssd_backlight_set+0x178>)
 800247e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002482:	611a      	str	r2, [r3, #16]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	f3af 8000 	nop.w
 8002490:	66666666 	.word	0x66666666
 8002494:	40046666 	.word	0x40046666
 8002498:	40011000 	.word	0x40011000
 800249c:	40010c00 	.word	0x40010c00

080024a0 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 80024aa:	4a68      	ldr	r2, [pc, #416]	@ (800264c <lcd_display_dir+0x1ac>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d165      	bne.n	8002582 <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 80024b6:	4b65      	ldr	r3, [pc, #404]	@ (800264c <lcd_display_dir+0x1ac>)
 80024b8:	22f0      	movs	r2, #240	@ 0xf0
 80024ba:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 80024bc:	4b63      	ldr	r3, [pc, #396]	@ (800264c <lcd_display_dir+0x1ac>)
 80024be:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80024c2:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 80024c4:	4b61      	ldr	r3, [pc, #388]	@ (800264c <lcd_display_dir+0x1ac>)
 80024c6:	889b      	ldrh	r3, [r3, #4]
 80024c8:	f245 5210 	movw	r2, #21776	@ 0x5510
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d114      	bne.n	80024fa <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 80024d0:	4b5e      	ldr	r3, [pc, #376]	@ (800264c <lcd_display_dir+0x1ac>)
 80024d2:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80024d6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 80024d8:	4b5c      	ldr	r3, [pc, #368]	@ (800264c <lcd_display_dir+0x1ac>)
 80024da:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80024de:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 80024e0:	4b5a      	ldr	r3, [pc, #360]	@ (800264c <lcd_display_dir+0x1ac>)
 80024e2:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80024e6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 80024e8:	4b58      	ldr	r3, [pc, #352]	@ (800264c <lcd_display_dir+0x1ac>)
 80024ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80024ee:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 80024f0:	4b56      	ldr	r3, [pc, #344]	@ (800264c <lcd_display_dir+0x1ac>)
 80024f2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80024f6:	805a      	strh	r2, [r3, #2]
 80024f8:	e020      	b.n	800253c <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <lcd_display_dir+0x1ac>)
 80024fc:	889b      	ldrh	r3, [r3, #4]
 80024fe:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002502:	4293      	cmp	r3, r2
 8002504:	d111      	bne.n	800252a <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8002506:	4b51      	ldr	r3, [pc, #324]	@ (800264c <lcd_display_dir+0x1ac>)
 8002508:	222c      	movs	r2, #44	@ 0x2c
 800250a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 800250c:	4b4f      	ldr	r3, [pc, #316]	@ (800264c <lcd_display_dir+0x1ac>)
 800250e:	222b      	movs	r2, #43	@ 0x2b
 8002510:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 8002512:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <lcd_display_dir+0x1ac>)
 8002514:	222a      	movs	r2, #42	@ 0x2a
 8002516:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 8002518:	4b4c      	ldr	r3, [pc, #304]	@ (800264c <lcd_display_dir+0x1ac>)
 800251a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800251e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 8002520:	4b4a      	ldr	r3, [pc, #296]	@ (800264c <lcd_display_dir+0x1ac>)
 8002522:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002526:	805a      	strh	r2, [r3, #2]
 8002528:	e008      	b.n	800253c <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 800252a:	4b48      	ldr	r3, [pc, #288]	@ (800264c <lcd_display_dir+0x1ac>)
 800252c:	222c      	movs	r2, #44	@ 0x2c
 800252e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8002530:	4b46      	ldr	r3, [pc, #280]	@ (800264c <lcd_display_dir+0x1ac>)
 8002532:	222a      	movs	r2, #42	@ 0x2a
 8002534:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8002536:	4b45      	ldr	r3, [pc, #276]	@ (800264c <lcd_display_dir+0x1ac>)
 8002538:	222b      	movs	r2, #43	@ 0x2b
 800253a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 800253c:	4b43      	ldr	r3, [pc, #268]	@ (800264c <lcd_display_dir+0x1ac>)
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002544:	4293      	cmp	r3, r2
 8002546:	d005      	beq.n	8002554 <lcd_display_dir+0xb4>
 8002548:	4b40      	ldr	r3, [pc, #256]	@ (800264c <lcd_display_dir+0x1ac>)
 800254a:	889b      	ldrh	r3, [r3, #4]
 800254c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002550:	4293      	cmp	r3, r2
 8002552:	d107      	bne.n	8002564 <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8002554:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <lcd_display_dir+0x1ac>)
 8002556:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800255a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 800255c:	4b3b      	ldr	r3, [pc, #236]	@ (800264c <lcd_display_dir+0x1ac>)
 800255e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002562:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 8002564:	4b39      	ldr	r3, [pc, #228]	@ (800264c <lcd_display_dir+0x1ac>)
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	f649 0206 	movw	r2, #38918	@ 0x9806
 800256c:	4293      	cmp	r3, r2
 800256e:	d165      	bne.n	800263c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8002570:	4b36      	ldr	r3, [pc, #216]	@ (800264c <lcd_display_dir+0x1ac>)
 8002572:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002576:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8002578:	4b34      	ldr	r3, [pc, #208]	@ (800264c <lcd_display_dir+0x1ac>)
 800257a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800257e:	805a      	strh	r2, [r3, #2]
 8002580:	e05c      	b.n	800263c <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 8002582:	4b32      	ldr	r3, [pc, #200]	@ (800264c <lcd_display_dir+0x1ac>)
 8002584:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002588:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 800258a:	4b30      	ldr	r3, [pc, #192]	@ (800264c <lcd_display_dir+0x1ac>)
 800258c:	22f0      	movs	r2, #240	@ 0xf0
 800258e:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8002590:	4b2e      	ldr	r3, [pc, #184]	@ (800264c <lcd_display_dir+0x1ac>)
 8002592:	889b      	ldrh	r3, [r3, #4]
 8002594:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002598:	4293      	cmp	r3, r2
 800259a:	d114      	bne.n	80025c6 <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 800259c:	4b2b      	ldr	r3, [pc, #172]	@ (800264c <lcd_display_dir+0x1ac>)
 800259e:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80025a2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 80025a4:	4b29      	ldr	r3, [pc, #164]	@ (800264c <lcd_display_dir+0x1ac>)
 80025a6:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80025aa:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 80025ac:	4b27      	ldr	r3, [pc, #156]	@ (800264c <lcd_display_dir+0x1ac>)
 80025ae:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80025b2:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 80025b4:	4b25      	ldr	r3, [pc, #148]	@ (800264c <lcd_display_dir+0x1ac>)
 80025b6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80025ba:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80025bc:	4b23      	ldr	r3, [pc, #140]	@ (800264c <lcd_display_dir+0x1ac>)
 80025be:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80025c2:	805a      	strh	r2, [r3, #2]
 80025c4:	e026      	b.n	8002614 <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 80025c6:	4b21      	ldr	r3, [pc, #132]	@ (800264c <lcd_display_dir+0x1ac>)
 80025c8:	889b      	ldrh	r3, [r3, #4]
 80025ca:	f641 1263 	movw	r2, #6499	@ 0x1963
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d005      	beq.n	80025de <lcd_display_dir+0x13e>
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <lcd_display_dir+0x1ac>)
 80025d4:	889b      	ldrh	r3, [r3, #4]
 80025d6:	f649 0206 	movw	r2, #38918	@ 0x9806
 80025da:	4293      	cmp	r3, r2
 80025dc:	d111      	bne.n	8002602 <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <lcd_display_dir+0x1ac>)
 80025e0:	222c      	movs	r2, #44	@ 0x2c
 80025e2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <lcd_display_dir+0x1ac>)
 80025e6:	222a      	movs	r2, #42	@ 0x2a
 80025e8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <lcd_display_dir+0x1ac>)
 80025ec:	222b      	movs	r2, #43	@ 0x2b
 80025ee:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 80025f0:	4b16      	ldr	r3, [pc, #88]	@ (800264c <lcd_display_dir+0x1ac>)
 80025f2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80025f6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <lcd_display_dir+0x1ac>)
 80025fa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80025fe:	805a      	strh	r2, [r3, #2]
 8002600:	e008      	b.n	8002614 <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8002602:	4b12      	ldr	r3, [pc, #72]	@ (800264c <lcd_display_dir+0x1ac>)
 8002604:	222c      	movs	r2, #44	@ 0x2c
 8002606:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8002608:	4b10      	ldr	r3, [pc, #64]	@ (800264c <lcd_display_dir+0x1ac>)
 800260a:	222a      	movs	r2, #42	@ 0x2a
 800260c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <lcd_display_dir+0x1ac>)
 8002610:	222b      	movs	r2, #43	@ 0x2b
 8002612:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8002614:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <lcd_display_dir+0x1ac>)
 8002616:	889b      	ldrh	r3, [r3, #4]
 8002618:	f245 3210 	movw	r2, #21264	@ 0x5310
 800261c:	4293      	cmp	r3, r2
 800261e:	d005      	beq.n	800262c <lcd_display_dir+0x18c>
 8002620:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <lcd_display_dir+0x1ac>)
 8002622:	889b      	ldrh	r3, [r3, #4]
 8002624:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002628:	4293      	cmp	r3, r2
 800262a:	d107      	bne.n	800263c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 800262c:	4b07      	ldr	r3, [pc, #28]	@ (800264c <lcd_display_dir+0x1ac>)
 800262e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002632:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <lcd_display_dir+0x1ac>)
 8002636:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800263a:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 800263c:	2000      	movs	r0, #0
 800263e:	f7ff fa99 	bl	8001b74 <lcd_scan_dir>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000038 	.word	0x20000038

08002650 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0da      	sub	sp, #360	@ 0x168
 8002654:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 8002656:	4bbe      	ldr	r3, [pc, #760]	@ (8002950 <lcd_init+0x300>)
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	4abd      	ldr	r2, [pc, #756]	@ (8002950 <lcd_init+0x300>)
 800265c:	f043 0310 	orr.w	r3, r3, #16
 8002660:	6193      	str	r3, [r2, #24]
 8002662:	4bbb      	ldr	r3, [pc, #748]	@ (8002950 <lcd_init+0x300>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0210 	and.w	r2, r3, #16
 800266a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800266e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002678:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800267c:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 800267e:	4bb4      	ldr	r3, [pc, #720]	@ (8002950 <lcd_init+0x300>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	4ab3      	ldr	r2, [pc, #716]	@ (8002950 <lcd_init+0x300>)
 8002684:	f043 0310 	orr.w	r3, r3, #16
 8002688:	6193      	str	r3, [r2, #24]
 800268a:	4bb1      	ldr	r3, [pc, #708]	@ (8002950 <lcd_init+0x300>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0210 	and.w	r2, r3, #16
 8002692:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002696:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026a4:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 80026a6:	4baa      	ldr	r3, [pc, #680]	@ (8002950 <lcd_init+0x300>)
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	4aa9      	ldr	r2, [pc, #676]	@ (8002950 <lcd_init+0x300>)
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	6193      	str	r3, [r2, #24]
 80026b2:	4ba7      	ldr	r3, [pc, #668]	@ (8002950 <lcd_init+0x300>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f003 0210 	and.w	r2, r3, #16
 80026ba:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026be:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026c8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80026cc:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 80026ce:	4ba0      	ldr	r3, [pc, #640]	@ (8002950 <lcd_init+0x300>)
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	4a9f      	ldr	r2, [pc, #636]	@ (8002950 <lcd_init+0x300>)
 80026d4:	f043 0310 	orr.w	r3, r3, #16
 80026d8:	6193      	str	r3, [r2, #24]
 80026da:	4b9d      	ldr	r3, [pc, #628]	@ (8002950 <lcd_init+0x300>)
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f003 0210 	and.w	r2, r3, #16
 80026e2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026e6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026f0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80026f4:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 80026f6:	4b96      	ldr	r3, [pc, #600]	@ (8002950 <lcd_init+0x300>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	4a95      	ldr	r2, [pc, #596]	@ (8002950 <lcd_init+0x300>)
 80026fc:	f043 0310 	orr.w	r3, r3, #16
 8002700:	6193      	str	r3, [r2, #24]
 8002702:	4b93      	ldr	r3, [pc, #588]	@ (8002950 <lcd_init+0x300>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0210 	and.w	r2, r3, #16
 800270a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800270e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002718:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800271c:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 800271e:	4b8c      	ldr	r3, [pc, #560]	@ (8002950 <lcd_init+0x300>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	4a8b      	ldr	r2, [pc, #556]	@ (8002950 <lcd_init+0x300>)
 8002724:	f043 0308 	orr.w	r3, r3, #8
 8002728:	6193      	str	r3, [r2, #24]
 800272a:	4b89      	ldr	r3, [pc, #548]	@ (8002950 <lcd_init+0x300>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0208 	and.w	r2, r3, #8
 8002732:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002736:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002740:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002744:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8002746:	4b82      	ldr	r3, [pc, #520]	@ (8002950 <lcd_init+0x300>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4a81      	ldr	r2, [pc, #516]	@ (8002950 <lcd_init+0x300>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6193      	str	r3, [r2, #24]
 8002752:	4b7f      	ldr	r3, [pc, #508]	@ (8002950 <lcd_init+0x300>)
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0201 	and.w	r2, r3, #1
 800275a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800275e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002768:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800276c:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 800276e:	4b79      	ldr	r3, [pc, #484]	@ (8002954 <lcd_init+0x304>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002776:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800277a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800277e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002782:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002786:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800278a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800278e:	4a71      	ldr	r2, [pc, #452]	@ (8002954 <lcd_init+0x304>)
 8002790:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002794:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8002796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800279a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 800279e:	2301      	movs	r3, #1
 80027a0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 80027a4:	2301      	movs	r3, #1
 80027a6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 80027aa:	2303      	movs	r3, #3
 80027ac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 80027b0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80027b4:	4619      	mov	r1, r3
 80027b6:	4868      	ldr	r0, [pc, #416]	@ (8002958 <lcd_init+0x308>)
 80027b8:	f005 fd26 	bl	8008208 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 80027bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027c0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 80027c4:	2301      	movs	r3, #1
 80027c6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 80027ca:	2301      	movs	r3, #1
 80027cc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 80027d0:	2303      	movs	r3, #3
 80027d2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 80027d6:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80027da:	4619      	mov	r1, r3
 80027dc:	485e      	ldr	r0, [pc, #376]	@ (8002958 <lcd_init+0x308>)
 80027de:	f005 fd13 	bl	8008208 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 80027e8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80027ec:	4619      	mov	r1, r3
 80027ee:	485a      	ldr	r0, [pc, #360]	@ (8002958 <lcd_init+0x308>)
 80027f0:	f005 fd0a 	bl	8008208 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 80027f4:	2340      	movs	r3, #64	@ 0x40
 80027f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 80027fa:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80027fe:	4619      	mov	r1, r3
 8002800:	4855      	ldr	r0, [pc, #340]	@ (8002958 <lcd_init+0x308>)
 8002802:	f005 fd01 	bl	8008208 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 8002806:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800280a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 800280e:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002812:	4619      	mov	r1, r3
 8002814:	4850      	ldr	r0, [pc, #320]	@ (8002958 <lcd_init+0x308>)
 8002816:	f005 fcf7 	bl	8008208 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 800281a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800281e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 8002822:	2301      	movs	r3, #1
 8002824:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8002828:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800282c:	4619      	mov	r1, r3
 800282e:	484b      	ldr	r0, [pc, #300]	@ (800295c <lcd_init+0x30c>)
 8002830:	f005 fcea 	bl	8008208 <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 8002834:	4b48      	ldr	r3, [pc, #288]	@ (8002958 <lcd_init+0x308>)
 8002836:	2280      	movs	r2, #128	@ 0x80
 8002838:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 800283a:	4b47      	ldr	r3, [pc, #284]	@ (8002958 <lcd_init+0x308>)
 800283c:	2240      	movs	r2, #64	@ 0x40
 800283e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8002840:	4b45      	ldr	r3, [pc, #276]	@ (8002958 <lcd_init+0x308>)
 8002842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002846:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8002848:	4b43      	ldr	r3, [pc, #268]	@ (8002958 <lcd_init+0x308>)
 800284a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800284e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8002850:	4b42      	ldr	r3, [pc, #264]	@ (800295c <lcd_init+0x30c>)
 8002852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002856:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8002858:	4841      	ldr	r0, [pc, #260]	@ (8002960 <lcd_init+0x310>)
 800285a:	f7fe fe23 	bl	80014a4 <lcd_opt_delay>
 800285e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002862:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002866:	22d3      	movs	r2, #211	@ 0xd3
 8002868:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800286a:	4b3b      	ldr	r3, [pc, #236]	@ (8002958 <lcd_init+0x308>)
 800286c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002870:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002872:	4b39      	ldr	r3, [pc, #228]	@ (8002958 <lcd_init+0x308>)
 8002874:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002878:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800287a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800287e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b35      	ldr	r3, [pc, #212]	@ (800295c <lcd_init+0x30c>)
 8002888:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800288a:	4b33      	ldr	r3, [pc, #204]	@ (8002958 <lcd_init+0x308>)
 800288c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002890:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <lcd_init+0x308>)
 8002894:	2280      	movs	r2, #128	@ 0x80
 8002896:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002898:	4b2f      	ldr	r3, [pc, #188]	@ (8002958 <lcd_init+0x308>)
 800289a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800289e:	611a      	str	r2, [r3, #16]
}
 80028a0:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 80028a2:	f7fe fe0f 	bl	80014c4 <lcd_rd_data>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002964 <lcd_init+0x314>)
 80028ac:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 80028ae:	f7fe fe09 	bl	80014c4 <lcd_rd_data>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <lcd_init+0x314>)
 80028b8:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 80028ba:	f7fe fe03 	bl	80014c4 <lcd_rd_data>
 80028be:	4603      	mov	r3, r0
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <lcd_init+0x314>)
 80028c4:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 80028c6:	4b27      	ldr	r3, [pc, #156]	@ (8002964 <lcd_init+0x314>)
 80028c8:	889b      	ldrh	r3, [r3, #4]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b25      	ldr	r3, [pc, #148]	@ (8002964 <lcd_init+0x314>)
 80028d0:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 80028d2:	f7fe fdf7 	bl	80014c4 <lcd_rd_data>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4b22      	ldr	r3, [pc, #136]	@ (8002964 <lcd_init+0x314>)
 80028dc:	889b      	ldrh	r3, [r3, #4]
 80028de:	4313      	orrs	r3, r2
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	4b20      	ldr	r3, [pc, #128]	@ (8002964 <lcd_init+0x314>)
 80028e4:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 80028e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <lcd_init+0x314>)
 80028e8:	889b      	ldrh	r3, [r3, #4]
 80028ea:	f249 3241 	movw	r2, #37697	@ 0x9341
 80028ee:	4293      	cmp	r3, r2
 80028f0:	f000 820e 	beq.w	8002d10 <lcd_init+0x6c0>
 80028f4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80028f8:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 80028fc:	2204      	movs	r2, #4
 80028fe:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002900:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <lcd_init+0x308>)
 8002902:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002906:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002908:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <lcd_init+0x308>)
 800290a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800290e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002910:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002914:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29a      	uxth	r2, r3
 800291c:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <lcd_init+0x30c>)
 800291e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002920:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <lcd_init+0x308>)
 8002922:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002926:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <lcd_init+0x308>)
 800292a:	2280      	movs	r2, #128	@ 0x80
 800292c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800292e:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <lcd_init+0x308>)
 8002930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002934:	611a      	str	r2, [r3, #16]
}
 8002936:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8002938:	f7fe fdc4 	bl	80014c4 <lcd_rd_data>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <lcd_init+0x314>)
 8002942:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 8002944:	f7fe fdbe 	bl	80014c4 <lcd_rd_data>
 8002948:	4603      	mov	r3, r0
 800294a:	461a      	mov	r2, r3
 800294c:	e00c      	b.n	8002968 <lcd_init+0x318>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	40010000 	.word	0x40010000
 8002958:	40011000 	.word	0x40011000
 800295c:	40010c00 	.word	0x40010c00
 8002960:	0001ffff 	.word	0x0001ffff
 8002964:	20000038 	.word	0x20000038
 8002968:	4bb1      	ldr	r3, [pc, #708]	@ (8002c30 <lcd_init+0x5e0>)
 800296a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 800296c:	f7fe fdaa 	bl	80014c4 <lcd_rd_data>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	4bae      	ldr	r3, [pc, #696]	@ (8002c30 <lcd_init+0x5e0>)
 8002976:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8002978:	4bad      	ldr	r3, [pc, #692]	@ (8002c30 <lcd_init+0x5e0>)
 800297a:	889b      	ldrh	r3, [r3, #4]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	b29a      	uxth	r2, r3
 8002980:	4bab      	ldr	r3, [pc, #684]	@ (8002c30 <lcd_init+0x5e0>)
 8002982:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 8002984:	f7fe fd9e 	bl	80014c4 <lcd_rd_data>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	4ba8      	ldr	r3, [pc, #672]	@ (8002c30 <lcd_init+0x5e0>)
 800298e:	889b      	ldrh	r3, [r3, #4]
 8002990:	4313      	orrs	r3, r2
 8002992:	b29a      	uxth	r2, r3
 8002994:	4ba6      	ldr	r3, [pc, #664]	@ (8002c30 <lcd_init+0x5e0>)
 8002996:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 8002998:	4ba5      	ldr	r3, [pc, #660]	@ (8002c30 <lcd_init+0x5e0>)
 800299a:	889b      	ldrh	r3, [r3, #4]
 800299c:	f248 5252 	movw	r2, #34130	@ 0x8552
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 80029a4:	4ba2      	ldr	r3, [pc, #648]	@ (8002c30 <lcd_init+0x5e0>)
 80029a6:	f247 7289 	movw	r2, #30601	@ 0x7789
 80029aa:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 80029ac:	4ba0      	ldr	r3, [pc, #640]	@ (8002c30 <lcd_init+0x5e0>)
 80029ae:	889b      	ldrh	r3, [r3, #4]
 80029b0:	f247 7289 	movw	r2, #30601	@ 0x7789
 80029b4:	4293      	cmp	r3, r2
 80029b6:	f000 81ab 	beq.w	8002d10 <lcd_init+0x6c0>
 80029ba:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80029be:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029c2:	22d4      	movs	r2, #212	@ 0xd4
 80029c4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029c6:	4b9b      	ldr	r3, [pc, #620]	@ (8002c34 <lcd_init+0x5e4>)
 80029c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029ce:	4b99      	ldr	r3, [pc, #612]	@ (8002c34 <lcd_init+0x5e4>)
 80029d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80029da:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b95      	ldr	r3, [pc, #596]	@ (8002c38 <lcd_init+0x5e8>)
 80029e4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029e6:	4b93      	ldr	r3, [pc, #588]	@ (8002c34 <lcd_init+0x5e4>)
 80029e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029ec:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029ee:	4b91      	ldr	r3, [pc, #580]	@ (8002c34 <lcd_init+0x5e4>)
 80029f0:	2280      	movs	r2, #128	@ 0x80
 80029f2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002c34 <lcd_init+0x5e4>)
 80029f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029fa:	611a      	str	r2, [r3, #16]
}
 80029fc:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 80029fe:	f7fe fd61 	bl	80014c4 <lcd_rd_data>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b8a      	ldr	r3, [pc, #552]	@ (8002c30 <lcd_init+0x5e0>)
 8002a08:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 8002a0a:	f7fe fd5b 	bl	80014c4 <lcd_rd_data>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b87      	ldr	r3, [pc, #540]	@ (8002c30 <lcd_init+0x5e0>)
 8002a14:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 8002a16:	f7fe fd55 	bl	80014c4 <lcd_rd_data>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b84      	ldr	r3, [pc, #528]	@ (8002c30 <lcd_init+0x5e0>)
 8002a20:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8002a22:	4b83      	ldr	r3, [pc, #524]	@ (8002c30 <lcd_init+0x5e0>)
 8002a24:	889b      	ldrh	r3, [r3, #4]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b81      	ldr	r3, [pc, #516]	@ (8002c30 <lcd_init+0x5e0>)
 8002a2c:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 8002a2e:	f7fe fd49 	bl	80014c4 <lcd_rd_data>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b7e      	ldr	r3, [pc, #504]	@ (8002c30 <lcd_init+0x5e0>)
 8002a38:	889b      	ldrh	r3, [r3, #4]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c30 <lcd_init+0x5e0>)
 8002a40:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 8002a42:	4b7b      	ldr	r3, [pc, #492]	@ (8002c30 <lcd_init+0x5e0>)
 8002a44:	889b      	ldrh	r3, [r3, #4]
 8002a46:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	f000 8160 	beq.w	8002d10 <lcd_init+0x6c0>
 8002a50:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a54:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002a58:	22d3      	movs	r2, #211	@ 0xd3
 8002a5a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a5c:	4b75      	ldr	r3, [pc, #468]	@ (8002c34 <lcd_init+0x5e4>)
 8002a5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a62:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a64:	4b73      	ldr	r3, [pc, #460]	@ (8002c34 <lcd_init+0x5e4>)
 8002a66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a6a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a6c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a70:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	4b6f      	ldr	r3, [pc, #444]	@ (8002c38 <lcd_init+0x5e8>)
 8002a7a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8002c34 <lcd_init+0x5e4>)
 8002a7e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a82:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a84:	4b6b      	ldr	r3, [pc, #428]	@ (8002c34 <lcd_init+0x5e4>)
 8002a86:	2280      	movs	r2, #128	@ 0x80
 8002a88:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002c34 <lcd_init+0x5e4>)
 8002a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a90:	611a      	str	r2, [r3, #16]
}
 8002a92:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 8002a94:	f7fe fd16 	bl	80014c4 <lcd_rd_data>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b64      	ldr	r3, [pc, #400]	@ (8002c30 <lcd_init+0x5e0>)
 8002a9e:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002aa0:	f7fe fd10 	bl	80014c4 <lcd_rd_data>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b61      	ldr	r3, [pc, #388]	@ (8002c30 <lcd_init+0x5e0>)
 8002aaa:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 8002aac:	f7fe fd0a 	bl	80014c4 <lcd_rd_data>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c30 <lcd_init+0x5e0>)
 8002ab6:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8002ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8002c30 <lcd_init+0x5e0>)
 8002aba:	889b      	ldrh	r3, [r3, #4]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	4b5b      	ldr	r3, [pc, #364]	@ (8002c30 <lcd_init+0x5e0>)
 8002ac2:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 8002ac4:	f7fe fcfe 	bl	80014c4 <lcd_rd_data>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b58      	ldr	r3, [pc, #352]	@ (8002c30 <lcd_init+0x5e0>)
 8002ace:	889b      	ldrh	r3, [r3, #4]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	4b56      	ldr	r3, [pc, #344]	@ (8002c30 <lcd_init+0x5e0>)
 8002ad6:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 8002ad8:	4b55      	ldr	r3, [pc, #340]	@ (8002c30 <lcd_init+0x5e0>)
 8002ada:	889b      	ldrh	r3, [r3, #4]
 8002adc:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	f000 8115 	beq.w	8002d10 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 8002ae6:	2155      	movs	r1, #85	@ 0x55
 8002ae8:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8002aec:	f7fe fc98 	bl	8001420 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8002af0:	21aa      	movs	r1, #170	@ 0xaa
 8002af2:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8002af6:	f7fe fc93 	bl	8001420 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 8002afa:	2152      	movs	r1, #82	@ 0x52
 8002afc:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8002b00:	f7fe fc8e 	bl	8001420 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 8002b04:	2108      	movs	r1, #8
 8002b06:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8002b0a:	f7fe fc89 	bl	8001420 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8002b14:	f7fe fc84 	bl	8001420 <lcd_write_reg>
 8002b18:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b1c:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002b20:	f44f 4245 	mov.w	r2, #50432	@ 0xc500
 8002b24:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b26:	4b43      	ldr	r3, [pc, #268]	@ (8002c34 <lcd_init+0x5e4>)
 8002b28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b2c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b2e:	4b41      	ldr	r3, [pc, #260]	@ (8002c34 <lcd_init+0x5e4>)
 8002b30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b34:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b36:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b3a:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	4b3d      	ldr	r3, [pc, #244]	@ (8002c38 <lcd_init+0x5e8>)
 8002b44:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b46:	4b3b      	ldr	r3, [pc, #236]	@ (8002c34 <lcd_init+0x5e4>)
 8002b48:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b4c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b4e:	4b39      	ldr	r3, [pc, #228]	@ (8002c34 <lcd_init+0x5e4>)
 8002b50:	2280      	movs	r2, #128	@ 0x80
 8002b52:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b54:	4b37      	ldr	r3, [pc, #220]	@ (8002c34 <lcd_init+0x5e4>)
 8002b56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b5a:	611a      	str	r2, [r3, #16]
}
 8002b5c:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 8002b5e:	f7fe fcb1 	bl	80014c4 <lcd_rd_data>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <lcd_init+0x5e0>)
 8002b68:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8002b6a:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <lcd_init+0x5e0>)
 8002b6c:	889b      	ldrh	r3, [r3, #4]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b2f      	ldr	r3, [pc, #188]	@ (8002c30 <lcd_init+0x5e0>)
 8002b74:	809a      	strh	r2, [r3, #4]
 8002b76:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b7a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b7e:	f24c 5201 	movw	r2, #50433	@ 0xc501
 8002b82:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b84:	4b2b      	ldr	r3, [pc, #172]	@ (8002c34 <lcd_init+0x5e4>)
 8002b86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b8a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b8c:	4b29      	ldr	r3, [pc, #164]	@ (8002c34 <lcd_init+0x5e4>)
 8002b8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b92:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b94:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b98:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <lcd_init+0x5e8>)
 8002ba2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ba4:	4b23      	ldr	r3, [pc, #140]	@ (8002c34 <lcd_init+0x5e4>)
 8002ba6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002baa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002bac:	4b21      	ldr	r3, [pc, #132]	@ (8002c34 <lcd_init+0x5e4>)
 8002bae:	2280      	movs	r2, #128	@ 0x80
 8002bb0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002bb2:	4b20      	ldr	r3, [pc, #128]	@ (8002c34 <lcd_init+0x5e4>)
 8002bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb8:	611a      	str	r2, [r3, #16]
}
 8002bba:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 8002bbc:	f7fe fc82 	bl	80014c4 <lcd_rd_data>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <lcd_init+0x5e0>)
 8002bc6:	889b      	ldrh	r3, [r3, #4]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <lcd_init+0x5e0>)
 8002bce:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 8002bd0:	4b17      	ldr	r3, [pc, #92]	@ (8002c30 <lcd_init+0x5e0>)
 8002bd2:	889b      	ldrh	r3, [r3, #4]
 8002bd4:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f000 8099 	beq.w	8002d10 <lcd_init+0x6c0>
 8002bde:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002be2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002be6:	22d3      	movs	r2, #211	@ 0xd3
 8002be8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002bea:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <lcd_init+0x5e4>)
 8002bec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bf0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <lcd_init+0x5e4>)
 8002bf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bf8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bfa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bfe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <lcd_init+0x5e8>)
 8002c08:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <lcd_init+0x5e4>)
 8002c0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c10:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <lcd_init+0x5e4>)
 8002c14:	2280      	movs	r2, #128	@ 0x80
 8002c16:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <lcd_init+0x5e4>)
 8002c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c1e:	611a      	str	r2, [r3, #16]
}
 8002c20:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8002c22:	f7fe fc4f 	bl	80014c4 <lcd_rd_data>
 8002c26:	4603      	mov	r3, r0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b01      	ldr	r3, [pc, #4]	@ (8002c30 <lcd_init+0x5e0>)
 8002c2c:	809a      	strh	r2, [r3, #4]
 8002c2e:	e005      	b.n	8002c3c <lcd_init+0x5ec>
 8002c30:	20000038 	.word	0x20000038
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002c3c:	f7fe fc42 	bl	80014c4 <lcd_rd_data>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	4bb2      	ldr	r3, [pc, #712]	@ (8002f10 <lcd_init+0x8c0>)
 8002c46:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 8002c48:	f7fe fc3c 	bl	80014c4 <lcd_rd_data>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4baf      	ldr	r3, [pc, #700]	@ (8002f10 <lcd_init+0x8c0>)
 8002c52:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8002c54:	4bae      	ldr	r3, [pc, #696]	@ (8002f10 <lcd_init+0x8c0>)
 8002c56:	889b      	ldrh	r3, [r3, #4]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	4bac      	ldr	r3, [pc, #688]	@ (8002f10 <lcd_init+0x8c0>)
 8002c5e:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002c60:	f7fe fc30 	bl	80014c4 <lcd_rd_data>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461a      	mov	r2, r3
 8002c68:	4ba9      	ldr	r3, [pc, #676]	@ (8002f10 <lcd_init+0x8c0>)
 8002c6a:	889b      	ldrh	r3, [r3, #4]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4ba7      	ldr	r3, [pc, #668]	@ (8002f10 <lcd_init+0x8c0>)
 8002c72:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 8002c74:	4ba6      	ldr	r3, [pc, #664]	@ (8002f10 <lcd_init+0x8c0>)
 8002c76:	889b      	ldrh	r3, [r3, #4]
 8002c78:	f649 0206 	movw	r2, #38918	@ 0x9806
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d047      	beq.n	8002d10 <lcd_init+0x6c0>
 8002c80:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c84:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002c88:	22a1      	movs	r2, #161	@ 0xa1
 8002c8a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8002f14 <lcd_init+0x8c4>)
 8002c8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c92:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c94:	4b9f      	ldr	r3, [pc, #636]	@ (8002f14 <lcd_init+0x8c4>)
 8002c96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c9a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c9c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ca0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b9b      	ldr	r3, [pc, #620]	@ (8002f18 <lcd_init+0x8c8>)
 8002caa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cac:	4b99      	ldr	r3, [pc, #612]	@ (8002f14 <lcd_init+0x8c4>)
 8002cae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cb2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002cb4:	4b97      	ldr	r3, [pc, #604]	@ (8002f14 <lcd_init+0x8c4>)
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cba:	4b96      	ldr	r3, [pc, #600]	@ (8002f14 <lcd_init+0x8c4>)
 8002cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc0:	611a      	str	r2, [r3, #16]
}
 8002cc2:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 8002cc4:	f7fe fbfe 	bl	80014c4 <lcd_rd_data>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b90      	ldr	r3, [pc, #576]	@ (8002f10 <lcd_init+0x8c0>)
 8002cce:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 8002cd0:	f7fe fbf8 	bl	80014c4 <lcd_rd_data>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b8d      	ldr	r3, [pc, #564]	@ (8002f10 <lcd_init+0x8c0>)
 8002cda:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8002cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8002f10 <lcd_init+0x8c0>)
 8002cde:	889b      	ldrh	r3, [r3, #4]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b8a      	ldr	r3, [pc, #552]	@ (8002f10 <lcd_init+0x8c0>)
 8002ce6:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 8002ce8:	f7fe fbec 	bl	80014c4 <lcd_rd_data>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b87      	ldr	r3, [pc, #540]	@ (8002f10 <lcd_init+0x8c0>)
 8002cf2:	889b      	ldrh	r3, [r3, #4]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b85      	ldr	r3, [pc, #532]	@ (8002f10 <lcd_init+0x8c0>)
 8002cfa:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 8002cfc:	4b84      	ldr	r3, [pc, #528]	@ (8002f10 <lcd_init+0x8c0>)
 8002cfe:	889b      	ldrh	r3, [r3, #4]
 8002d00:	f245 7261 	movw	r2, #22369	@ 0x5761
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <lcd_init+0x6c0>
 8002d08:	4b81      	ldr	r3, [pc, #516]	@ (8002f10 <lcd_init+0x8c0>)
 8002d0a:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002d0e:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 8002d10:	4b7f      	ldr	r3, [pc, #508]	@ (8002f10 <lcd_init+0x8c0>)
 8002d12:	889b      	ldrh	r3, [r3, #4]
 8002d14:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f040 82f3 	bne.w	8003304 <lcd_init+0xcb4>
 8002d1e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d26:	2211      	movs	r2, #17
 8002d28:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f14 <lcd_init+0x8c4>)
 8002d2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d30:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d32:	4b78      	ldr	r3, [pc, #480]	@ (8002f14 <lcd_init+0x8c4>)
 8002d34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d38:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d3a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	4b74      	ldr	r3, [pc, #464]	@ (8002f18 <lcd_init+0x8c8>)
 8002d48:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d4a:	4b72      	ldr	r3, [pc, #456]	@ (8002f14 <lcd_init+0x8c4>)
 8002d4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d50:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d52:	4b70      	ldr	r3, [pc, #448]	@ (8002f14 <lcd_init+0x8c4>)
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d58:	4b6e      	ldr	r3, [pc, #440]	@ (8002f14 <lcd_init+0x8c4>)
 8002d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d5e:	611a      	str	r2, [r3, #16]
}
 8002d60:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 8002d62:	2078      	movs	r0, #120	@ 0x78
 8002d64:	f005 f91e 	bl	8007fa4 <HAL_Delay>
 8002d68:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d6c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002d70:	2236      	movs	r2, #54	@ 0x36
 8002d72:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d74:	4b67      	ldr	r3, [pc, #412]	@ (8002f14 <lcd_init+0x8c4>)
 8002d76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d7a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d7c:	4b65      	ldr	r3, [pc, #404]	@ (8002f14 <lcd_init+0x8c4>)
 8002d7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d82:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d84:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d88:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4b61      	ldr	r3, [pc, #388]	@ (8002f18 <lcd_init+0x8c8>)
 8002d92:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d94:	4b5f      	ldr	r3, [pc, #380]	@ (8002f14 <lcd_init+0x8c4>)
 8002d96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d9a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8002f14 <lcd_init+0x8c4>)
 8002d9e:	2280      	movs	r2, #128	@ 0x80
 8002da0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002da2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f14 <lcd_init+0x8c4>)
 8002da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da8:	611a      	str	r2, [r3, #16]
}
 8002daa:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fb13 	bl	80013d8 <lcd_wr_xdata>
 8002db2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002db6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dba:	223a      	movs	r2, #58	@ 0x3a
 8002dbc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002dbe:	4b55      	ldr	r3, [pc, #340]	@ (8002f14 <lcd_init+0x8c4>)
 8002dc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002dc4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002dc6:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <lcd_init+0x8c4>)
 8002dc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dcc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002dce:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002dd2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	4b4f      	ldr	r3, [pc, #316]	@ (8002f18 <lcd_init+0x8c8>)
 8002ddc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002dde:	4b4d      	ldr	r3, [pc, #308]	@ (8002f14 <lcd_init+0x8c4>)
 8002de0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002de4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002de6:	4b4b      	ldr	r3, [pc, #300]	@ (8002f14 <lcd_init+0x8c4>)
 8002de8:	2280      	movs	r2, #128	@ 0x80
 8002dea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002dec:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <lcd_init+0x8c4>)
 8002dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df2:	611a      	str	r2, [r3, #16]
}
 8002df4:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 8002df6:	2005      	movs	r0, #5
 8002df8:	f7fe faee 	bl	80013d8 <lcd_wr_xdata>
 8002dfc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e00:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002e04:	22b2      	movs	r2, #178	@ 0xb2
 8002e06:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e08:	4b42      	ldr	r3, [pc, #264]	@ (8002f14 <lcd_init+0x8c4>)
 8002e0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e0e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e10:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <lcd_init+0x8c4>)
 8002e12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e16:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e18:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e1c:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b3c      	ldr	r3, [pc, #240]	@ (8002f18 <lcd_init+0x8c8>)
 8002e26:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e28:	4b3a      	ldr	r3, [pc, #232]	@ (8002f14 <lcd_init+0x8c4>)
 8002e2a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e2e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e30:	4b38      	ldr	r3, [pc, #224]	@ (8002f14 <lcd_init+0x8c4>)
 8002e32:	2280      	movs	r2, #128	@ 0x80
 8002e34:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e36:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <lcd_init+0x8c4>)
 8002e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3c:	611a      	str	r2, [r3, #16]
}
 8002e3e:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 8002e40:	200c      	movs	r0, #12
 8002e42:	f7fe fac9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8002e46:	200c      	movs	r0, #12
 8002e48:	f7fe fac6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7fe fac3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002e52:	2033      	movs	r0, #51	@ 0x33
 8002e54:	f7fe fac0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002e58:	2033      	movs	r0, #51	@ 0x33
 8002e5a:	f7fe fabd 	bl	80013d8 <lcd_wr_xdata>
 8002e5e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e62:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e66:	22b7      	movs	r2, #183	@ 0xb7
 8002e68:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <lcd_init+0x8c4>)
 8002e6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e70:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e72:	4b28      	ldr	r3, [pc, #160]	@ (8002f14 <lcd_init+0x8c4>)
 8002e74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e78:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e7a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e7e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <lcd_init+0x8c8>)
 8002e88:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e8a:	4b22      	ldr	r3, [pc, #136]	@ (8002f14 <lcd_init+0x8c4>)
 8002e8c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e90:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e92:	4b20      	ldr	r3, [pc, #128]	@ (8002f14 <lcd_init+0x8c4>)
 8002e94:	2280      	movs	r2, #128	@ 0x80
 8002e96:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e98:	4b1e      	ldr	r3, [pc, #120]	@ (8002f14 <lcd_init+0x8c4>)
 8002e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e9e:	611a      	str	r2, [r3, #16]
}
 8002ea0:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 8002ea2:	2035      	movs	r0, #53	@ 0x35
 8002ea4:	f7fe fa98 	bl	80013d8 <lcd_wr_xdata>
 8002ea8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002eac:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002eb0:	22bb      	movs	r2, #187	@ 0xbb
 8002eb2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002eb4:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <lcd_init+0x8c4>)
 8002eb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002eba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ebc:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <lcd_init+0x8c4>)
 8002ebe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ec2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ec4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ec8:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <lcd_init+0x8c8>)
 8002ed2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <lcd_init+0x8c4>)
 8002ed6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002eda:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <lcd_init+0x8c4>)
 8002ede:	2280      	movs	r2, #128	@ 0x80
 8002ee0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <lcd_init+0x8c4>)
 8002ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee8:	611a      	str	r2, [r3, #16]
}
 8002eea:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 8002eec:	2032      	movs	r0, #50	@ 0x32
 8002eee:	f7fe fa73 	bl	80013d8 <lcd_wr_xdata>
 8002ef2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ef6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002efa:	22c0      	movs	r2, #192	@ 0xc0
 8002efc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002efe:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <lcd_init+0x8c4>)
 8002f00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f04:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f06:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <lcd_init+0x8c4>)
 8002f08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f0c:	611a      	str	r2, [r3, #16]
 8002f0e:	e005      	b.n	8002f1c <lcd_init+0x8cc>
 8002f10:	20000038 	.word	0x20000038
 8002f14:	40011000 	.word	0x40011000
 8002f18:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f1c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f20:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4bbf      	ldr	r3, [pc, #764]	@ (8003228 <lcd_init+0xbd8>)
 8002f2a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f2c:	4bbf      	ldr	r3, [pc, #764]	@ (800322c <lcd_init+0xbdc>)
 8002f2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f32:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f34:	4bbd      	ldr	r3, [pc, #756]	@ (800322c <lcd_init+0xbdc>)
 8002f36:	2280      	movs	r2, #128	@ 0x80
 8002f38:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f3a:	4bbc      	ldr	r3, [pc, #752]	@ (800322c <lcd_init+0xbdc>)
 8002f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f40:	611a      	str	r2, [r3, #16]
}
 8002f42:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 8002f44:	200c      	movs	r0, #12
 8002f46:	f7fe fa47 	bl	80013d8 <lcd_wr_xdata>
 8002f4a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f4e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002f52:	22c2      	movs	r2, #194	@ 0xc2
 8002f54:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f56:	4bb5      	ldr	r3, [pc, #724]	@ (800322c <lcd_init+0xbdc>)
 8002f58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f5c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f5e:	4bb3      	ldr	r3, [pc, #716]	@ (800322c <lcd_init+0xbdc>)
 8002f60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f64:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f66:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f6a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	4bad      	ldr	r3, [pc, #692]	@ (8003228 <lcd_init+0xbd8>)
 8002f74:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f76:	4bad      	ldr	r3, [pc, #692]	@ (800322c <lcd_init+0xbdc>)
 8002f78:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f7c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f7e:	4bab      	ldr	r3, [pc, #684]	@ (800322c <lcd_init+0xbdc>)
 8002f80:	2280      	movs	r2, #128	@ 0x80
 8002f82:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f84:	4ba9      	ldr	r3, [pc, #676]	@ (800322c <lcd_init+0xbdc>)
 8002f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f8a:	611a      	str	r2, [r3, #16]
}
 8002f8c:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f7fe fa22 	bl	80013d8 <lcd_wr_xdata>
 8002f94:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f9c:	22c3      	movs	r2, #195	@ 0xc3
 8002f9e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fa0:	4ba2      	ldr	r3, [pc, #648]	@ (800322c <lcd_init+0xbdc>)
 8002fa2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fa6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fa8:	4ba0      	ldr	r3, [pc, #640]	@ (800322c <lcd_init+0xbdc>)
 8002faa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fb0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	4b9a      	ldr	r3, [pc, #616]	@ (8003228 <lcd_init+0xbd8>)
 8002fbe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fc0:	4b9a      	ldr	r3, [pc, #616]	@ (800322c <lcd_init+0xbdc>)
 8002fc2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fc6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fc8:	4b98      	ldr	r3, [pc, #608]	@ (800322c <lcd_init+0xbdc>)
 8002fca:	2280      	movs	r2, #128	@ 0x80
 8002fcc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fce:	4b97      	ldr	r3, [pc, #604]	@ (800322c <lcd_init+0xbdc>)
 8002fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fd4:	611a      	str	r2, [r3, #16]
}
 8002fd6:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 8002fd8:	2010      	movs	r0, #16
 8002fda:	f7fe f9fd 	bl	80013d8 <lcd_wr_xdata>
 8002fde:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fe2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8002fe6:	22c4      	movs	r2, #196	@ 0xc4
 8002fe8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fea:	4b90      	ldr	r3, [pc, #576]	@ (800322c <lcd_init+0xbdc>)
 8002fec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ff0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ff2:	4b8e      	ldr	r3, [pc, #568]	@ (800322c <lcd_init+0xbdc>)
 8002ff4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ff8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ffa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ffe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b88      	ldr	r3, [pc, #544]	@ (8003228 <lcd_init+0xbd8>)
 8003008:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800300a:	4b88      	ldr	r3, [pc, #544]	@ (800322c <lcd_init+0xbdc>)
 800300c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003010:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003012:	4b86      	ldr	r3, [pc, #536]	@ (800322c <lcd_init+0xbdc>)
 8003014:	2280      	movs	r2, #128	@ 0x80
 8003016:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003018:	4b84      	ldr	r3, [pc, #528]	@ (800322c <lcd_init+0xbdc>)
 800301a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800301e:	611a      	str	r2, [r3, #16]
}
 8003020:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 8003022:	2020      	movs	r0, #32
 8003024:	f7fe f9d8 	bl	80013d8 <lcd_wr_xdata>
 8003028:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800302c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003030:	22c6      	movs	r2, #198	@ 0xc6
 8003032:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003034:	4b7d      	ldr	r3, [pc, #500]	@ (800322c <lcd_init+0xbdc>)
 8003036:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800303a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800303c:	4b7b      	ldr	r3, [pc, #492]	@ (800322c <lcd_init+0xbdc>)
 800303e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003042:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003044:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003048:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b75      	ldr	r3, [pc, #468]	@ (8003228 <lcd_init+0xbd8>)
 8003052:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003054:	4b75      	ldr	r3, [pc, #468]	@ (800322c <lcd_init+0xbdc>)
 8003056:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800305a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800305c:	4b73      	ldr	r3, [pc, #460]	@ (800322c <lcd_init+0xbdc>)
 800305e:	2280      	movs	r2, #128	@ 0x80
 8003060:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003062:	4b72      	ldr	r3, [pc, #456]	@ (800322c <lcd_init+0xbdc>)
 8003064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003068:	611a      	str	r2, [r3, #16]
}
 800306a:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 800306c:	200f      	movs	r0, #15
 800306e:	f7fe f9b3 	bl	80013d8 <lcd_wr_xdata>
 8003072:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003076:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800307a:	22d0      	movs	r2, #208	@ 0xd0
 800307c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800307e:	4b6b      	ldr	r3, [pc, #428]	@ (800322c <lcd_init+0xbdc>)
 8003080:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003084:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003086:	4b69      	ldr	r3, [pc, #420]	@ (800322c <lcd_init+0xbdc>)
 8003088:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800308c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800308e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003092:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29a      	uxth	r2, r3
 800309a:	4b63      	ldr	r3, [pc, #396]	@ (8003228 <lcd_init+0xbd8>)
 800309c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800309e:	4b63      	ldr	r3, [pc, #396]	@ (800322c <lcd_init+0xbdc>)
 80030a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030a6:	4b61      	ldr	r3, [pc, #388]	@ (800322c <lcd_init+0xbdc>)
 80030a8:	2280      	movs	r2, #128	@ 0x80
 80030aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030ac:	4b5f      	ldr	r3, [pc, #380]	@ (800322c <lcd_init+0xbdc>)
 80030ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b2:	611a      	str	r2, [r3, #16]
}
 80030b4:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 80030b6:	20a4      	movs	r0, #164	@ 0xa4
 80030b8:	f7fe f98e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 80030bc:	20a1      	movs	r0, #161	@ 0xa1
 80030be:	f7fe f98b 	bl	80013d8 <lcd_wr_xdata>
 80030c2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80030c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80030ca:	22e0      	movs	r2, #224	@ 0xe0
 80030cc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030ce:	4b57      	ldr	r3, [pc, #348]	@ (800322c <lcd_init+0xbdc>)
 80030d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030d4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030d6:	4b55      	ldr	r3, [pc, #340]	@ (800322c <lcd_init+0xbdc>)
 80030d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030dc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030de:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80030e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003228 <lcd_init+0xbd8>)
 80030ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030ee:	4b4f      	ldr	r3, [pc, #316]	@ (800322c <lcd_init+0xbdc>)
 80030f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030f6:	4b4d      	ldr	r3, [pc, #308]	@ (800322c <lcd_init+0xbdc>)
 80030f8:	2280      	movs	r2, #128	@ 0x80
 80030fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030fc:	4b4b      	ldr	r3, [pc, #300]	@ (800322c <lcd_init+0xbdc>)
 80030fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003102:	611a      	str	r2, [r3, #16]
}
 8003104:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 8003106:	20d0      	movs	r0, #208	@ 0xd0
 8003108:	f7fe f966 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fe f963 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003112:	2002      	movs	r0, #2
 8003114:	f7fe f960 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8003118:	2007      	movs	r0, #7
 800311a:	f7fe f95d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 800311e:	200a      	movs	r0, #10
 8003120:	f7fe f95a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8003124:	2028      	movs	r0, #40	@ 0x28
 8003126:	f7fe f957 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 800312a:	2032      	movs	r0, #50	@ 0x32
 800312c:	f7fe f954 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 8003130:	2044      	movs	r0, #68	@ 0x44
 8003132:	f7fe f951 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 8003136:	2042      	movs	r0, #66	@ 0x42
 8003138:	f7fe f94e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 800313c:	2006      	movs	r0, #6
 800313e:	f7fe f94b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 8003142:	200e      	movs	r0, #14
 8003144:	f7fe f948 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8003148:	2012      	movs	r0, #18
 800314a:	f7fe f945 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 800314e:	2014      	movs	r0, #20
 8003150:	f7fe f942 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003154:	2017      	movs	r0, #23
 8003156:	f7fe f93f 	bl	80013d8 <lcd_wr_xdata>
 800315a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800315e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8003162:	22e1      	movs	r2, #225	@ 0xe1
 8003164:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003166:	4b31      	ldr	r3, [pc, #196]	@ (800322c <lcd_init+0xbdc>)
 8003168:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800316c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800316e:	4b2f      	ldr	r3, [pc, #188]	@ (800322c <lcd_init+0xbdc>)
 8003170:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003174:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003176:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800317a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29a      	uxth	r2, r3
 8003182:	4b29      	ldr	r3, [pc, #164]	@ (8003228 <lcd_init+0xbd8>)
 8003184:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003186:	4b29      	ldr	r3, [pc, #164]	@ (800322c <lcd_init+0xbdc>)
 8003188:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800318c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800318e:	4b27      	ldr	r3, [pc, #156]	@ (800322c <lcd_init+0xbdc>)
 8003190:	2280      	movs	r2, #128	@ 0x80
 8003192:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003194:	4b25      	ldr	r3, [pc, #148]	@ (800322c <lcd_init+0xbdc>)
 8003196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800319a:	611a      	str	r2, [r3, #16]
}
 800319c:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 800319e:	20d0      	movs	r0, #208	@ 0xd0
 80031a0:	f7fe f91a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fe f917 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80031aa:	2002      	movs	r0, #2
 80031ac:	f7fe f914 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80031b0:	2007      	movs	r0, #7
 80031b2:	f7fe f911 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 80031b6:	200a      	movs	r0, #10
 80031b8:	f7fe f90e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80031bc:	2028      	movs	r0, #40	@ 0x28
 80031be:	f7fe f90b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 80031c2:	2031      	movs	r0, #49	@ 0x31
 80031c4:	f7fe f908 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 80031c8:	2054      	movs	r0, #84	@ 0x54
 80031ca:	f7fe f905 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 80031ce:	2047      	movs	r0, #71	@ 0x47
 80031d0:	f7fe f902 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 80031d4:	200e      	movs	r0, #14
 80031d6:	f7fe f8ff 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 80031da:	201c      	movs	r0, #28
 80031dc:	f7fe f8fc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80031e0:	2017      	movs	r0, #23
 80031e2:	f7fe f8f9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 80031e6:	201b      	movs	r0, #27
 80031e8:	f7fe f8f6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 80031ec:	201e      	movs	r0, #30
 80031ee:	f7fe f8f3 	bl	80013d8 <lcd_wr_xdata>
 80031f2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80031f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031fa:	222a      	movs	r2, #42	@ 0x2a
 80031fc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031fe:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <lcd_init+0xbdc>)
 8003200:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003204:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003206:	4b09      	ldr	r3, [pc, #36]	@ (800322c <lcd_init+0xbdc>)
 8003208:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800320c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800320e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003212:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29a      	uxth	r2, r3
 800321a:	4b03      	ldr	r3, [pc, #12]	@ (8003228 <lcd_init+0xbd8>)
 800321c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800321e:	4b03      	ldr	r3, [pc, #12]	@ (800322c <lcd_init+0xbdc>)
 8003220:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003224:	611a      	str	r2, [r3, #16]
 8003226:	e003      	b.n	8003230 <lcd_init+0xbe0>
 8003228:	40010c00 	.word	0x40010c00
 800322c:	40011000 	.word	0x40011000
    LCD_WR(1);
 8003230:	4b32      	ldr	r3, [pc, #200]	@ (80032fc <lcd_init+0xcac>)
 8003232:	2280      	movs	r2, #128	@ 0x80
 8003234:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003236:	4b31      	ldr	r3, [pc, #196]	@ (80032fc <lcd_init+0xcac>)
 8003238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800323c:	611a      	str	r2, [r3, #16]
}
 800323e:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8003240:	2000      	movs	r0, #0
 8003242:	f7fe f8c9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fe f8c6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800324c:	2000      	movs	r0, #0
 800324e:	f7fe f8c3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8003252:	20ef      	movs	r0, #239	@ 0xef
 8003254:	f7fe f8c0 	bl	80013d8 <lcd_wr_xdata>
 8003258:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800325c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8003260:	222b      	movs	r2, #43	@ 0x2b
 8003262:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003264:	4b25      	ldr	r3, [pc, #148]	@ (80032fc <lcd_init+0xcac>)
 8003266:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800326a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800326c:	4b23      	ldr	r3, [pc, #140]	@ (80032fc <lcd_init+0xcac>)
 800326e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003272:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003274:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003278:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29a      	uxth	r2, r3
 8003280:	4b1f      	ldr	r3, [pc, #124]	@ (8003300 <lcd_init+0xcb0>)
 8003282:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003284:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <lcd_init+0xcac>)
 8003286:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800328a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800328c:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <lcd_init+0xcac>)
 800328e:	2280      	movs	r2, #128	@ 0x80
 8003290:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003292:	4b1a      	ldr	r3, [pc, #104]	@ (80032fc <lcd_init+0xcac>)
 8003294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003298:	611a      	str	r2, [r3, #16]
}
 800329a:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 800329c:	2000      	movs	r0, #0
 800329e:	f7fe f89b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7fe f898 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f7fe f895 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 80032ae:	203f      	movs	r0, #63	@ 0x3f
 80032b0:	f7fe f892 	bl	80013d8 <lcd_wr_xdata>
 80032b4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80032b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032bc:	2229      	movs	r2, #41	@ 0x29
 80032be:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032c0:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <lcd_init+0xcac>)
 80032c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032c6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <lcd_init+0xcac>)
 80032ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032d0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80032d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29a      	uxth	r2, r3
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <lcd_init+0xcb0>)
 80032de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <lcd_init+0xcac>)
 80032e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <lcd_init+0xcac>)
 80032ea:	2280      	movs	r2, #128	@ 0x80
 80032ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80032ee:	4b03      	ldr	r3, [pc, #12]	@ (80032fc <lcd_init+0xcac>)
 80032f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f4:	611a      	str	r2, [r3, #16]
}
 80032f6:	f004 b8f4 	b.w	80074e2 <lcd_init+0x4e92>
 80032fa:	bf00      	nop
 80032fc:	40011000 	.word	0x40011000
 8003300:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 8003304:	4bb9      	ldr	r3, [pc, #740]	@ (80035ec <lcd_init+0xf9c>)
 8003306:	889b      	ldrh	r3, [r3, #4]
 8003308:	f249 3241 	movw	r2, #37697	@ 0x9341
 800330c:	4293      	cmp	r3, r2
 800330e:	f040 83a1 	bne.w	8003a54 <lcd_init+0x1404>
 8003312:	23cf      	movs	r3, #207	@ 0xcf
 8003314:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003318:	4bb5      	ldr	r3, [pc, #724]	@ (80035f0 <lcd_init+0xfa0>)
 800331a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800331e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003320:	4bb3      	ldr	r3, [pc, #716]	@ (80035f0 <lcd_init+0xfa0>)
 8003322:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003326:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003328:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800332c:	b29a      	uxth	r2, r3
 800332e:	4bb1      	ldr	r3, [pc, #708]	@ (80035f4 <lcd_init+0xfa4>)
 8003330:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003332:	4baf      	ldr	r3, [pc, #700]	@ (80035f0 <lcd_init+0xfa0>)
 8003334:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003338:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800333a:	4bad      	ldr	r3, [pc, #692]	@ (80035f0 <lcd_init+0xfa0>)
 800333c:	2280      	movs	r2, #128	@ 0x80
 800333e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003340:	4bab      	ldr	r3, [pc, #684]	@ (80035f0 <lcd_init+0xfa0>)
 8003342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003346:	611a      	str	r2, [r3, #16]
}
 8003348:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 800334a:	2000      	movs	r0, #0
 800334c:	f7fe f844 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 8003350:	20c1      	movs	r0, #193	@ 0xc1
 8003352:	f7fe f841 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 8003356:	2030      	movs	r0, #48	@ 0x30
 8003358:	f7fe f83e 	bl	80013d8 <lcd_wr_xdata>
 800335c:	23ed      	movs	r3, #237	@ 0xed
 800335e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003362:	4ba3      	ldr	r3, [pc, #652]	@ (80035f0 <lcd_init+0xfa0>)
 8003364:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003368:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800336a:	4ba1      	ldr	r3, [pc, #644]	@ (80035f0 <lcd_init+0xfa0>)
 800336c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003370:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003372:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8003376:	b29a      	uxth	r2, r3
 8003378:	4b9e      	ldr	r3, [pc, #632]	@ (80035f4 <lcd_init+0xfa4>)
 800337a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800337c:	4b9c      	ldr	r3, [pc, #624]	@ (80035f0 <lcd_init+0xfa0>)
 800337e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003382:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003384:	4b9a      	ldr	r3, [pc, #616]	@ (80035f0 <lcd_init+0xfa0>)
 8003386:	2280      	movs	r2, #128	@ 0x80
 8003388:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800338a:	4b99      	ldr	r3, [pc, #612]	@ (80035f0 <lcd_init+0xfa0>)
 800338c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003390:	611a      	str	r2, [r3, #16]
}
 8003392:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 8003394:	2064      	movs	r0, #100	@ 0x64
 8003396:	f7fe f81f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 800339a:	2003      	movs	r0, #3
 800339c:	f7fe f81c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 80033a0:	2012      	movs	r0, #18
 80033a2:	f7fe f819 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 80033a6:	2081      	movs	r0, #129	@ 0x81
 80033a8:	f7fe f816 	bl	80013d8 <lcd_wr_xdata>
 80033ac:	23e8      	movs	r3, #232	@ 0xe8
 80033ae:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80033b2:	4b8f      	ldr	r3, [pc, #572]	@ (80035f0 <lcd_init+0xfa0>)
 80033b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80033ba:	4b8d      	ldr	r3, [pc, #564]	@ (80035f0 <lcd_init+0xfa0>)
 80033bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80033c2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	4b8a      	ldr	r3, [pc, #552]	@ (80035f4 <lcd_init+0xfa4>)
 80033ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80033cc:	4b88      	ldr	r3, [pc, #544]	@ (80035f0 <lcd_init+0xfa0>)
 80033ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033d4:	4b86      	ldr	r3, [pc, #536]	@ (80035f0 <lcd_init+0xfa0>)
 80033d6:	2280      	movs	r2, #128	@ 0x80
 80033d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033da:	4b85      	ldr	r3, [pc, #532]	@ (80035f0 <lcd_init+0xfa0>)
 80033dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033e0:	611a      	str	r2, [r3, #16]
}
 80033e2:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 80033e4:	2085      	movs	r0, #133	@ 0x85
 80033e6:	f7fd fff7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80033ea:	2010      	movs	r0, #16
 80033ec:	f7fd fff4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 80033f0:	207a      	movs	r0, #122	@ 0x7a
 80033f2:	f7fd fff1 	bl	80013d8 <lcd_wr_xdata>
 80033f6:	23cb      	movs	r3, #203	@ 0xcb
 80033f8:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80033fc:	4b7c      	ldr	r3, [pc, #496]	@ (80035f0 <lcd_init+0xfa0>)
 80033fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003402:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003404:	4b7a      	ldr	r3, [pc, #488]	@ (80035f0 <lcd_init+0xfa0>)
 8003406:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800340a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800340c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8003410:	b29a      	uxth	r2, r3
 8003412:	4b78      	ldr	r3, [pc, #480]	@ (80035f4 <lcd_init+0xfa4>)
 8003414:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003416:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <lcd_init+0xfa0>)
 8003418:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800341c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800341e:	4b74      	ldr	r3, [pc, #464]	@ (80035f0 <lcd_init+0xfa0>)
 8003420:	2280      	movs	r2, #128	@ 0x80
 8003422:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003424:	4b72      	ldr	r3, [pc, #456]	@ (80035f0 <lcd_init+0xfa0>)
 8003426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800342a:	611a      	str	r2, [r3, #16]
}
 800342c:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 800342e:	2039      	movs	r0, #57	@ 0x39
 8003430:	f7fd ffd2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8003434:	202c      	movs	r0, #44	@ 0x2c
 8003436:	f7fd ffcf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800343a:	2000      	movs	r0, #0
 800343c:	f7fd ffcc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8003440:	2034      	movs	r0, #52	@ 0x34
 8003442:	f7fd ffc9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003446:	2002      	movs	r0, #2
 8003448:	f7fd ffc6 	bl	80013d8 <lcd_wr_xdata>
 800344c:	23f7      	movs	r3, #247	@ 0xf7
 800344e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003452:	4b67      	ldr	r3, [pc, #412]	@ (80035f0 <lcd_init+0xfa0>)
 8003454:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003458:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800345a:	4b65      	ldr	r3, [pc, #404]	@ (80035f0 <lcd_init+0xfa0>)
 800345c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003460:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003462:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8003466:	b29a      	uxth	r2, r3
 8003468:	4b62      	ldr	r3, [pc, #392]	@ (80035f4 <lcd_init+0xfa4>)
 800346a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800346c:	4b60      	ldr	r3, [pc, #384]	@ (80035f0 <lcd_init+0xfa0>)
 800346e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003472:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003474:	4b5e      	ldr	r3, [pc, #376]	@ (80035f0 <lcd_init+0xfa0>)
 8003476:	2280      	movs	r2, #128	@ 0x80
 8003478:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800347a:	4b5d      	ldr	r3, [pc, #372]	@ (80035f0 <lcd_init+0xfa0>)
 800347c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003480:	611a      	str	r2, [r3, #16]
}
 8003482:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 8003484:	2020      	movs	r0, #32
 8003486:	f7fd ffa7 	bl	80013d8 <lcd_wr_xdata>
 800348a:	23ea      	movs	r3, #234	@ 0xea
 800348c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003490:	4b57      	ldr	r3, [pc, #348]	@ (80035f0 <lcd_init+0xfa0>)
 8003492:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003496:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003498:	4b55      	ldr	r3, [pc, #340]	@ (80035f0 <lcd_init+0xfa0>)
 800349a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800349e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80034a0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	4b53      	ldr	r3, [pc, #332]	@ (80035f4 <lcd_init+0xfa4>)
 80034a8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034aa:	4b51      	ldr	r3, [pc, #324]	@ (80035f0 <lcd_init+0xfa0>)
 80034ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034b0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034b2:	4b4f      	ldr	r3, [pc, #316]	@ (80035f0 <lcd_init+0xfa0>)
 80034b4:	2280      	movs	r2, #128	@ 0x80
 80034b6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80034b8:	4b4d      	ldr	r3, [pc, #308]	@ (80035f0 <lcd_init+0xfa0>)
 80034ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034be:	611a      	str	r2, [r3, #16]
}
 80034c0:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7fd ff88 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fd ff85 	bl	80013d8 <lcd_wr_xdata>
 80034ce:	23c0      	movs	r3, #192	@ 0xc0
 80034d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80034d4:	4b46      	ldr	r3, [pc, #280]	@ (80035f0 <lcd_init+0xfa0>)
 80034d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034da:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80034dc:	4b44      	ldr	r3, [pc, #272]	@ (80035f0 <lcd_init+0xfa0>)
 80034de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034e2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80034e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	4b42      	ldr	r3, [pc, #264]	@ (80035f4 <lcd_init+0xfa4>)
 80034ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034ee:	4b40      	ldr	r3, [pc, #256]	@ (80035f0 <lcd_init+0xfa0>)
 80034f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034f6:	4b3e      	ldr	r3, [pc, #248]	@ (80035f0 <lcd_init+0xfa0>)
 80034f8:	2280      	movs	r2, #128	@ 0x80
 80034fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80034fc:	4b3c      	ldr	r3, [pc, #240]	@ (80035f0 <lcd_init+0xfa0>)
 80034fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003502:	611a      	str	r2, [r3, #16]
}
 8003504:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 8003506:	201b      	movs	r0, #27
 8003508:	f7fd ff66 	bl	80013d8 <lcd_wr_xdata>
 800350c:	23c1      	movs	r3, #193	@ 0xc1
 800350e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003512:	4b37      	ldr	r3, [pc, #220]	@ (80035f0 <lcd_init+0xfa0>)
 8003514:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003518:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800351a:	4b35      	ldr	r3, [pc, #212]	@ (80035f0 <lcd_init+0xfa0>)
 800351c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003520:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003522:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003526:	b29a      	uxth	r2, r3
 8003528:	4b32      	ldr	r3, [pc, #200]	@ (80035f4 <lcd_init+0xfa4>)
 800352a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800352c:	4b30      	ldr	r3, [pc, #192]	@ (80035f0 <lcd_init+0xfa0>)
 800352e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003532:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003534:	4b2e      	ldr	r3, [pc, #184]	@ (80035f0 <lcd_init+0xfa0>)
 8003536:	2280      	movs	r2, #128	@ 0x80
 8003538:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800353a:	4b2d      	ldr	r3, [pc, #180]	@ (80035f0 <lcd_init+0xfa0>)
 800353c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003540:	611a      	str	r2, [r3, #16]
}
 8003542:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 8003544:	2001      	movs	r0, #1
 8003546:	f7fd ff47 	bl	80013d8 <lcd_wr_xdata>
 800354a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800354e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003552:	22c5      	movs	r2, #197	@ 0xc5
 8003554:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003556:	4b26      	ldr	r3, [pc, #152]	@ (80035f0 <lcd_init+0xfa0>)
 8003558:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800355c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800355e:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <lcd_init+0xfa0>)
 8003560:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003564:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003566:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800356a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b20      	ldr	r3, [pc, #128]	@ (80035f4 <lcd_init+0xfa4>)
 8003574:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003576:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <lcd_init+0xfa0>)
 8003578:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800357c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800357e:	4b1c      	ldr	r3, [pc, #112]	@ (80035f0 <lcd_init+0xfa0>)
 8003580:	2280      	movs	r2, #128	@ 0x80
 8003582:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003584:	4b1a      	ldr	r3, [pc, #104]	@ (80035f0 <lcd_init+0xfa0>)
 8003586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800358a:	611a      	str	r2, [r3, #16]
}
 800358c:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 800358e:	2030      	movs	r0, #48	@ 0x30
 8003590:	f7fd ff22 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 8003594:	2030      	movs	r0, #48	@ 0x30
 8003596:	f7fd ff1f 	bl	80013d8 <lcd_wr_xdata>
 800359a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800359e:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80035a2:	22c7      	movs	r2, #199	@ 0xc7
 80035a4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80035a6:	4b12      	ldr	r3, [pc, #72]	@ (80035f0 <lcd_init+0xfa0>)
 80035a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035ac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035ae:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <lcd_init+0xfa0>)
 80035b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035b4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80035b6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80035ba:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <lcd_init+0xfa4>)
 80035c4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <lcd_init+0xfa0>)
 80035c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035cc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035ce:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <lcd_init+0xfa0>)
 80035d0:	2280      	movs	r2, #128	@ 0x80
 80035d2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80035d4:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <lcd_init+0xfa0>)
 80035d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035da:	611a      	str	r2, [r3, #16]
}
 80035dc:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 80035de:	20b7      	movs	r0, #183	@ 0xb7
 80035e0:	f7fd fefa 	bl	80013d8 <lcd_wr_xdata>
 80035e4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80035e8:	e006      	b.n	80035f8 <lcd_init+0xfa8>
 80035ea:	bf00      	nop
 80035ec:	20000038 	.word	0x20000038
 80035f0:	40011000 	.word	0x40011000
 80035f4:	40010c00 	.word	0x40010c00
 80035f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035fc:	2236      	movs	r2, #54	@ 0x36
 80035fe:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003600:	4bc1      	ldr	r3, [pc, #772]	@ (8003908 <lcd_init+0x12b8>)
 8003602:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003606:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003608:	4bbf      	ldr	r3, [pc, #764]	@ (8003908 <lcd_init+0x12b8>)
 800360a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800360e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003610:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29a      	uxth	r2, r3
 800361c:	4bbb      	ldr	r3, [pc, #748]	@ (800390c <lcd_init+0x12bc>)
 800361e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003620:	4bb9      	ldr	r3, [pc, #740]	@ (8003908 <lcd_init+0x12b8>)
 8003622:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003626:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003628:	4bb7      	ldr	r3, [pc, #732]	@ (8003908 <lcd_init+0x12b8>)
 800362a:	2280      	movs	r2, #128	@ 0x80
 800362c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800362e:	4bb6      	ldr	r3, [pc, #728]	@ (8003908 <lcd_init+0x12b8>)
 8003630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003634:	611a      	str	r2, [r3, #16]
}
 8003636:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8003638:	2048      	movs	r0, #72	@ 0x48
 800363a:	f7fd fecd 	bl	80013d8 <lcd_wr_xdata>
 800363e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003642:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8003646:	223a      	movs	r2, #58	@ 0x3a
 8003648:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800364a:	4baf      	ldr	r3, [pc, #700]	@ (8003908 <lcd_init+0x12b8>)
 800364c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003650:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003652:	4bad      	ldr	r3, [pc, #692]	@ (8003908 <lcd_init+0x12b8>)
 8003654:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003658:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800365a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800365e:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29a      	uxth	r2, r3
 8003666:	4ba9      	ldr	r3, [pc, #676]	@ (800390c <lcd_init+0x12bc>)
 8003668:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800366a:	4ba7      	ldr	r3, [pc, #668]	@ (8003908 <lcd_init+0x12b8>)
 800366c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003670:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003672:	4ba5      	ldr	r3, [pc, #660]	@ (8003908 <lcd_init+0x12b8>)
 8003674:	2280      	movs	r2, #128	@ 0x80
 8003676:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003678:	4ba3      	ldr	r3, [pc, #652]	@ (8003908 <lcd_init+0x12b8>)
 800367a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367e:	611a      	str	r2, [r3, #16]
}
 8003680:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8003682:	2055      	movs	r0, #85	@ 0x55
 8003684:	f7fd fea8 	bl	80013d8 <lcd_wr_xdata>
 8003688:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800368c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003690:	22b1      	movs	r2, #177	@ 0xb1
 8003692:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003694:	4b9c      	ldr	r3, [pc, #624]	@ (8003908 <lcd_init+0x12b8>)
 8003696:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800369a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800369c:	4b9a      	ldr	r3, [pc, #616]	@ (8003908 <lcd_init+0x12b8>)
 800369e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036a2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036a4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80036a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	4b96      	ldr	r3, [pc, #600]	@ (800390c <lcd_init+0x12bc>)
 80036b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80036b4:	4b94      	ldr	r3, [pc, #592]	@ (8003908 <lcd_init+0x12b8>)
 80036b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036bc:	4b92      	ldr	r3, [pc, #584]	@ (8003908 <lcd_init+0x12b8>)
 80036be:	2280      	movs	r2, #128	@ 0x80
 80036c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036c2:	4b91      	ldr	r3, [pc, #580]	@ (8003908 <lcd_init+0x12b8>)
 80036c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036c8:	611a      	str	r2, [r3, #16]
}
 80036ca:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 80036cc:	2000      	movs	r0, #0
 80036ce:	f7fd fe83 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 80036d2:	201a      	movs	r0, #26
 80036d4:	f7fd fe80 	bl	80013d8 <lcd_wr_xdata>
 80036d8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80036dc:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80036e0:	22b6      	movs	r2, #182	@ 0xb6
 80036e2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80036e4:	4b88      	ldr	r3, [pc, #544]	@ (8003908 <lcd_init+0x12b8>)
 80036e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036ea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80036ec:	4b86      	ldr	r3, [pc, #536]	@ (8003908 <lcd_init+0x12b8>)
 80036ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036f2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036f4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80036f8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	4b82      	ldr	r3, [pc, #520]	@ (800390c <lcd_init+0x12bc>)
 8003702:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003704:	4b80      	ldr	r3, [pc, #512]	@ (8003908 <lcd_init+0x12b8>)
 8003706:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800370a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800370c:	4b7e      	ldr	r3, [pc, #504]	@ (8003908 <lcd_init+0x12b8>)
 800370e:	2280      	movs	r2, #128	@ 0x80
 8003710:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003712:	4b7d      	ldr	r3, [pc, #500]	@ (8003908 <lcd_init+0x12b8>)
 8003714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003718:	611a      	str	r2, [r3, #16]
}
 800371a:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 800371c:	200a      	movs	r0, #10
 800371e:	f7fd fe5b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8003722:	20a2      	movs	r0, #162	@ 0xa2
 8003724:	f7fd fe58 	bl	80013d8 <lcd_wr_xdata>
 8003728:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800372c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003730:	22f2      	movs	r2, #242	@ 0xf2
 8003732:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003734:	4b74      	ldr	r3, [pc, #464]	@ (8003908 <lcd_init+0x12b8>)
 8003736:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800373a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800373c:	4b72      	ldr	r3, [pc, #456]	@ (8003908 <lcd_init+0x12b8>)
 800373e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003742:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003744:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003748:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29a      	uxth	r2, r3
 8003750:	4b6e      	ldr	r3, [pc, #440]	@ (800390c <lcd_init+0x12bc>)
 8003752:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003754:	4b6c      	ldr	r3, [pc, #432]	@ (8003908 <lcd_init+0x12b8>)
 8003756:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800375a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800375c:	4b6a      	ldr	r3, [pc, #424]	@ (8003908 <lcd_init+0x12b8>)
 800375e:	2280      	movs	r2, #128	@ 0x80
 8003760:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003762:	4b69      	ldr	r3, [pc, #420]	@ (8003908 <lcd_init+0x12b8>)
 8003764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003768:	611a      	str	r2, [r3, #16]
}
 800376a:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 800376c:	2000      	movs	r0, #0
 800376e:	f7fd fe33 	bl	80013d8 <lcd_wr_xdata>
 8003772:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003776:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800377a:	2226      	movs	r2, #38	@ 0x26
 800377c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800377e:	4b62      	ldr	r3, [pc, #392]	@ (8003908 <lcd_init+0x12b8>)
 8003780:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003784:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003786:	4b60      	ldr	r3, [pc, #384]	@ (8003908 <lcd_init+0x12b8>)
 8003788:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800378c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800378e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003792:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29a      	uxth	r2, r3
 800379a:	4b5c      	ldr	r3, [pc, #368]	@ (800390c <lcd_init+0x12bc>)
 800379c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800379e:	4b5a      	ldr	r3, [pc, #360]	@ (8003908 <lcd_init+0x12b8>)
 80037a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80037a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80037a6:	4b58      	ldr	r3, [pc, #352]	@ (8003908 <lcd_init+0x12b8>)
 80037a8:	2280      	movs	r2, #128	@ 0x80
 80037aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80037ac:	4b56      	ldr	r3, [pc, #344]	@ (8003908 <lcd_init+0x12b8>)
 80037ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037b2:	611a      	str	r2, [r3, #16]
}
 80037b4:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 80037b6:	2001      	movs	r0, #1
 80037b8:	f7fd fe0e 	bl	80013d8 <lcd_wr_xdata>
 80037bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80037c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037c4:	22e0      	movs	r2, #224	@ 0xe0
 80037c6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80037c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003908 <lcd_init+0x12b8>)
 80037ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037ce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80037d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003908 <lcd_init+0x12b8>)
 80037d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037d6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80037d8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80037dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	4b49      	ldr	r3, [pc, #292]	@ (800390c <lcd_init+0x12bc>)
 80037e6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80037e8:	4b47      	ldr	r3, [pc, #284]	@ (8003908 <lcd_init+0x12b8>)
 80037ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80037ee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80037f0:	4b45      	ldr	r3, [pc, #276]	@ (8003908 <lcd_init+0x12b8>)
 80037f2:	2280      	movs	r2, #128	@ 0x80
 80037f4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80037f6:	4b44      	ldr	r3, [pc, #272]	@ (8003908 <lcd_init+0x12b8>)
 80037f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037fc:	611a      	str	r2, [r3, #16]
}
 80037fe:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 8003800:	200f      	movs	r0, #15
 8003802:	f7fd fde9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8003806:	202a      	movs	r0, #42	@ 0x2a
 8003808:	f7fd fde6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 800380c:	2028      	movs	r0, #40	@ 0x28
 800380e:	f7fd fde3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8003812:	2008      	movs	r0, #8
 8003814:	f7fd fde0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8003818:	200e      	movs	r0, #14
 800381a:	f7fd fddd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 800381e:	2008      	movs	r0, #8
 8003820:	f7fd fdda 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8003824:	2054      	movs	r0, #84	@ 0x54
 8003826:	f7fd fdd7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 800382a:	20a9      	movs	r0, #169	@ 0xa9
 800382c:	f7fd fdd4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8003830:	2043      	movs	r0, #67	@ 0x43
 8003832:	f7fd fdd1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 8003836:	200a      	movs	r0, #10
 8003838:	f7fd fdce 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 800383c:	200f      	movs	r0, #15
 800383e:	f7fd fdcb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003842:	2000      	movs	r0, #0
 8003844:	f7fd fdc8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003848:	2000      	movs	r0, #0
 800384a:	f7fd fdc5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800384e:	2000      	movs	r0, #0
 8003850:	f7fd fdc2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003854:	2000      	movs	r0, #0
 8003856:	f7fd fdbf 	bl	80013d8 <lcd_wr_xdata>
 800385a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800385e:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8003862:	22e1      	movs	r2, #225	@ 0xe1
 8003864:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003866:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <lcd_init+0x12b8>)
 8003868:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800386c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800386e:	4b26      	ldr	r3, [pc, #152]	@ (8003908 <lcd_init+0x12b8>)
 8003870:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003874:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003876:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800387a:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	b29a      	uxth	r2, r3
 8003882:	4b22      	ldr	r3, [pc, #136]	@ (800390c <lcd_init+0x12bc>)
 8003884:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003886:	4b20      	ldr	r3, [pc, #128]	@ (8003908 <lcd_init+0x12b8>)
 8003888:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800388c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800388e:	4b1e      	ldr	r3, [pc, #120]	@ (8003908 <lcd_init+0x12b8>)
 8003890:	2280      	movs	r2, #128	@ 0x80
 8003892:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003894:	4b1c      	ldr	r3, [pc, #112]	@ (8003908 <lcd_init+0x12b8>)
 8003896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800389a:	611a      	str	r2, [r3, #16]
}
 800389c:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 800389e:	2000      	movs	r0, #0
 80038a0:	f7fd fd9a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 80038a4:	2015      	movs	r0, #21
 80038a6:	f7fd fd97 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80038aa:	2017      	movs	r0, #23
 80038ac:	f7fd fd94 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80038b0:	2007      	movs	r0, #7
 80038b2:	f7fd fd91 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 80038b6:	2011      	movs	r0, #17
 80038b8:	f7fd fd8e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 80038bc:	2006      	movs	r0, #6
 80038be:	f7fd fd8b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 80038c2:	202b      	movs	r0, #43	@ 0x2b
 80038c4:	f7fd fd88 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80038c8:	2056      	movs	r0, #86	@ 0x56
 80038ca:	f7fd fd85 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80038ce:	203c      	movs	r0, #60	@ 0x3c
 80038d0:	f7fd fd82 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 80038d4:	2005      	movs	r0, #5
 80038d6:	f7fd fd7f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80038da:	2010      	movs	r0, #16
 80038dc:	f7fd fd7c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80038e0:	200f      	movs	r0, #15
 80038e2:	f7fd fd79 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80038e6:	203f      	movs	r0, #63	@ 0x3f
 80038e8:	f7fd fd76 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80038ec:	203f      	movs	r0, #63	@ 0x3f
 80038ee:	f7fd fd73 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80038f2:	200f      	movs	r0, #15
 80038f4:	f7fd fd70 	bl	80013d8 <lcd_wr_xdata>
 80038f8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80038fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003900:	222b      	movs	r2, #43	@ 0x2b
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	e004      	b.n	8003910 <lcd_init+0x12c0>
 8003906:	bf00      	nop
 8003908:	40011000 	.word	0x40011000
 800390c:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003910:	4b4e      	ldr	r3, [pc, #312]	@ (8003a4c <lcd_init+0x13fc>)
 8003912:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003916:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003918:	4b4c      	ldr	r3, [pc, #304]	@ (8003a4c <lcd_init+0x13fc>)
 800391a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800391e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003920:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003924:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29a      	uxth	r2, r3
 800392c:	4b48      	ldr	r3, [pc, #288]	@ (8003a50 <lcd_init+0x1400>)
 800392e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003930:	4b46      	ldr	r3, [pc, #280]	@ (8003a4c <lcd_init+0x13fc>)
 8003932:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003936:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003938:	4b44      	ldr	r3, [pc, #272]	@ (8003a4c <lcd_init+0x13fc>)
 800393a:	2280      	movs	r2, #128	@ 0x80
 800393c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800393e:	4b43      	ldr	r3, [pc, #268]	@ (8003a4c <lcd_init+0x13fc>)
 8003940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003944:	611a      	str	r2, [r3, #16]
}
 8003946:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8003948:	2000      	movs	r0, #0
 800394a:	f7fd fd45 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800394e:	2000      	movs	r0, #0
 8003950:	f7fd fd42 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003954:	2001      	movs	r0, #1
 8003956:	f7fd fd3f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 800395a:	203f      	movs	r0, #63	@ 0x3f
 800395c:	f7fd fd3c 	bl	80013d8 <lcd_wr_xdata>
 8003960:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003964:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8003968:	222a      	movs	r2, #42	@ 0x2a
 800396a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800396c:	4b37      	ldr	r3, [pc, #220]	@ (8003a4c <lcd_init+0x13fc>)
 800396e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003972:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003974:	4b35      	ldr	r3, [pc, #212]	@ (8003a4c <lcd_init+0x13fc>)
 8003976:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800397a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800397c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003980:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29a      	uxth	r2, r3
 8003988:	4b31      	ldr	r3, [pc, #196]	@ (8003a50 <lcd_init+0x1400>)
 800398a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800398c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a4c <lcd_init+0x13fc>)
 800398e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003992:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003994:	4b2d      	ldr	r3, [pc, #180]	@ (8003a4c <lcd_init+0x13fc>)
 8003996:	2280      	movs	r2, #128	@ 0x80
 8003998:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800399a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a4c <lcd_init+0x13fc>)
 800399c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a0:	611a      	str	r2, [r3, #16]
}
 80039a2:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 80039a4:	2000      	movs	r0, #0
 80039a6:	f7fd fd17 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7fd fd14 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039b0:	2000      	movs	r0, #0
 80039b2:	f7fd fd11 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 80039b6:	20ef      	movs	r0, #239	@ 0xef
 80039b8:	f7fd fd0e 	bl	80013d8 <lcd_wr_xdata>
 80039bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80039c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039c4:	2211      	movs	r2, #17
 80039c6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039c8:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <lcd_init+0x13fc>)
 80039ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039ce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039d0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a4c <lcd_init+0x13fc>)
 80039d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039d6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80039d8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80039dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a50 <lcd_init+0x1400>)
 80039e6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80039e8:	4b18      	ldr	r3, [pc, #96]	@ (8003a4c <lcd_init+0x13fc>)
 80039ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80039ee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80039f0:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <lcd_init+0x13fc>)
 80039f2:	2280      	movs	r2, #128	@ 0x80
 80039f4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80039f6:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <lcd_init+0x13fc>)
 80039f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039fc:	611a      	str	r2, [r3, #16]
}
 80039fe:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 8003a00:	2078      	movs	r0, #120	@ 0x78
 8003a02:	f004 facf 	bl	8007fa4 <HAL_Delay>
 8003a06:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003a0a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003a0e:	2229      	movs	r2, #41	@ 0x29
 8003a10:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a12:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <lcd_init+0x13fc>)
 8003a14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a18:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <lcd_init+0x13fc>)
 8003a1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a20:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a22:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003a26:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <lcd_init+0x1400>)
 8003a30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <lcd_init+0x13fc>)
 8003a34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a3a:	4b04      	ldr	r3, [pc, #16]	@ (8003a4c <lcd_init+0x13fc>)
 8003a3c:	2280      	movs	r2, #128	@ 0x80
 8003a3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a40:	4b02      	ldr	r3, [pc, #8]	@ (8003a4c <lcd_init+0x13fc>)
 8003a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a46:	611a      	str	r2, [r3, #16]
}
 8003a48:	f003 bd4b 	b.w	80074e2 <lcd_init+0x4e92>
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 8003a54:	4bbe      	ldr	r3, [pc, #760]	@ (8003d50 <lcd_init+0x1700>)
 8003a56:	889b      	ldrh	r3, [r3, #4]
 8003a58:	f245 3210 	movw	r2, #21264	@ 0x5310
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	f041 846d 	bne.w	800533c <lcd_init+0x2cec>
 8003a62:	23ed      	movs	r3, #237	@ 0xed
 8003a64:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a68:	4bba      	ldr	r3, [pc, #744]	@ (8003d54 <lcd_init+0x1704>)
 8003a6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a6e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a70:	4bb8      	ldr	r3, [pc, #736]	@ (8003d54 <lcd_init+0x1704>)
 8003a72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a76:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a78:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	4bb6      	ldr	r3, [pc, #728]	@ (8003d58 <lcd_init+0x1708>)
 8003a80:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a82:	4bb4      	ldr	r3, [pc, #720]	@ (8003d54 <lcd_init+0x1704>)
 8003a84:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a88:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a8a:	4bb2      	ldr	r3, [pc, #712]	@ (8003d54 <lcd_init+0x1704>)
 8003a8c:	2280      	movs	r2, #128	@ 0x80
 8003a8e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a90:	4bb0      	ldr	r3, [pc, #704]	@ (8003d54 <lcd_init+0x1704>)
 8003a92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a96:	611a      	str	r2, [r3, #16]
}
 8003a98:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f7fd fc9c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 8003aa0:	20fe      	movs	r0, #254	@ 0xfe
 8003aa2:	f7fd fc99 	bl	80013d8 <lcd_wr_xdata>
 8003aa6:	23ee      	movs	r3, #238	@ 0xee
 8003aa8:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003aac:	4ba9      	ldr	r3, [pc, #676]	@ (8003d54 <lcd_init+0x1704>)
 8003aae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ab2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003ab4:	4ba7      	ldr	r3, [pc, #668]	@ (8003d54 <lcd_init+0x1704>)
 8003ab6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003abc:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	4ba5      	ldr	r3, [pc, #660]	@ (8003d58 <lcd_init+0x1708>)
 8003ac4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003ac6:	4ba3      	ldr	r3, [pc, #652]	@ (8003d54 <lcd_init+0x1704>)
 8003ac8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003acc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ace:	4ba1      	ldr	r3, [pc, #644]	@ (8003d54 <lcd_init+0x1704>)
 8003ad0:	2280      	movs	r2, #128	@ 0x80
 8003ad2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ad4:	4b9f      	ldr	r3, [pc, #636]	@ (8003d54 <lcd_init+0x1704>)
 8003ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ada:	611a      	str	r2, [r3, #16]
}
 8003adc:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 8003ade:	20de      	movs	r0, #222	@ 0xde
 8003ae0:	f7fd fc7a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003ae4:	2021      	movs	r0, #33	@ 0x21
 8003ae6:	f7fd fc77 	bl	80013d8 <lcd_wr_xdata>
 8003aea:	23f1      	movs	r3, #241	@ 0xf1
 8003aec:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003af0:	4b98      	ldr	r3, [pc, #608]	@ (8003d54 <lcd_init+0x1704>)
 8003af2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003af6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003af8:	4b96      	ldr	r3, [pc, #600]	@ (8003d54 <lcd_init+0x1704>)
 8003afa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003afe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b00:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	4b94      	ldr	r3, [pc, #592]	@ (8003d58 <lcd_init+0x1708>)
 8003b08:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b0a:	4b92      	ldr	r3, [pc, #584]	@ (8003d54 <lcd_init+0x1704>)
 8003b0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b10:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b12:	4b90      	ldr	r3, [pc, #576]	@ (8003d54 <lcd_init+0x1704>)
 8003b14:	2280      	movs	r2, #128	@ 0x80
 8003b16:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b18:	4b8e      	ldr	r3, [pc, #568]	@ (8003d54 <lcd_init+0x1704>)
 8003b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b1e:	611a      	str	r2, [r3, #16]
}
 8003b20:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 8003b22:	2001      	movs	r0, #1
 8003b24:	f7fd fc58 	bl	80013d8 <lcd_wr_xdata>
 8003b28:	23df      	movs	r3, #223	@ 0xdf
 8003b2a:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b2e:	4b89      	ldr	r3, [pc, #548]	@ (8003d54 <lcd_init+0x1704>)
 8003b30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b34:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b36:	4b87      	ldr	r3, [pc, #540]	@ (8003d54 <lcd_init+0x1704>)
 8003b38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b3c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b3e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	4b84      	ldr	r3, [pc, #528]	@ (8003d58 <lcd_init+0x1708>)
 8003b46:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b48:	4b82      	ldr	r3, [pc, #520]	@ (8003d54 <lcd_init+0x1704>)
 8003b4a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b4e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b50:	4b80      	ldr	r3, [pc, #512]	@ (8003d54 <lcd_init+0x1704>)
 8003b52:	2280      	movs	r2, #128	@ 0x80
 8003b54:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b56:	4b7f      	ldr	r3, [pc, #508]	@ (8003d54 <lcd_init+0x1704>)
 8003b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b5c:	611a      	str	r2, [r3, #16]
}
 8003b5e:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003b60:	2010      	movs	r0, #16
 8003b62:	f7fd fc39 	bl	80013d8 <lcd_wr_xdata>
 8003b66:	23c4      	movs	r3, #196	@ 0xc4
 8003b68:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b6c:	4b79      	ldr	r3, [pc, #484]	@ (8003d54 <lcd_init+0x1704>)
 8003b6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b72:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b74:	4b77      	ldr	r3, [pc, #476]	@ (8003d54 <lcd_init+0x1704>)
 8003b76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b7a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b7c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	4b75      	ldr	r3, [pc, #468]	@ (8003d58 <lcd_init+0x1708>)
 8003b84:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b86:	4b73      	ldr	r3, [pc, #460]	@ (8003d54 <lcd_init+0x1704>)
 8003b88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b8c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b8e:	4b71      	ldr	r3, [pc, #452]	@ (8003d54 <lcd_init+0x1704>)
 8003b90:	2280      	movs	r2, #128	@ 0x80
 8003b92:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b94:	4b6f      	ldr	r3, [pc, #444]	@ (8003d54 <lcd_init+0x1704>)
 8003b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b9a:	611a      	str	r2, [r3, #16]
}
 8003b9c:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 8003b9e:	208f      	movs	r0, #143	@ 0x8f
 8003ba0:	f7fd fc1a 	bl	80013d8 <lcd_wr_xdata>
 8003ba4:	23c6      	movs	r3, #198	@ 0xc6
 8003ba6:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003baa:	4b6a      	ldr	r3, [pc, #424]	@ (8003d54 <lcd_init+0x1704>)
 8003bac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bb0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003bb2:	4b68      	ldr	r3, [pc, #416]	@ (8003d54 <lcd_init+0x1704>)
 8003bb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bb8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003bba:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	4b65      	ldr	r3, [pc, #404]	@ (8003d58 <lcd_init+0x1708>)
 8003bc2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003bc4:	4b63      	ldr	r3, [pc, #396]	@ (8003d54 <lcd_init+0x1704>)
 8003bc6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003bca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003bcc:	4b61      	ldr	r3, [pc, #388]	@ (8003d54 <lcd_init+0x1704>)
 8003bce:	2280      	movs	r2, #128	@ 0x80
 8003bd0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003bd2:	4b60      	ldr	r3, [pc, #384]	@ (8003d54 <lcd_init+0x1704>)
 8003bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bd8:	611a      	str	r2, [r3, #16]
}
 8003bda:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7fd fbfb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003be2:	20e2      	movs	r0, #226	@ 0xe2
 8003be4:	f7fd fbf8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003be8:	20e2      	movs	r0, #226	@ 0xe2
 8003bea:	f7fd fbf5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003bee:	20e2      	movs	r0, #226	@ 0xe2
 8003bf0:	f7fd fbf2 	bl	80013d8 <lcd_wr_xdata>
 8003bf4:	23bf      	movs	r3, #191	@ 0xbf
 8003bf6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003bfa:	4b56      	ldr	r3, [pc, #344]	@ (8003d54 <lcd_init+0x1704>)
 8003bfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c00:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c02:	4b54      	ldr	r3, [pc, #336]	@ (8003d54 <lcd_init+0x1704>)
 8003c04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c08:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	4b51      	ldr	r3, [pc, #324]	@ (8003d58 <lcd_init+0x1708>)
 8003c12:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c14:	4b4f      	ldr	r3, [pc, #316]	@ (8003d54 <lcd_init+0x1704>)
 8003c16:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c1a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003d54 <lcd_init+0x1704>)
 8003c1e:	2280      	movs	r2, #128	@ 0x80
 8003c20:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c22:	4b4c      	ldr	r3, [pc, #304]	@ (8003d54 <lcd_init+0x1704>)
 8003c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c28:	611a      	str	r2, [r3, #16]
}
 8003c2a:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 8003c2c:	20aa      	movs	r0, #170	@ 0xaa
 8003c2e:	f7fd fbd3 	bl	80013d8 <lcd_wr_xdata>
 8003c32:	23b0      	movs	r3, #176	@ 0xb0
 8003c34:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c38:	4b46      	ldr	r3, [pc, #280]	@ (8003d54 <lcd_init+0x1704>)
 8003c3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c3e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c40:	4b44      	ldr	r3, [pc, #272]	@ (8003d54 <lcd_init+0x1704>)
 8003c42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c46:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c48:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	4b42      	ldr	r3, [pc, #264]	@ (8003d58 <lcd_init+0x1708>)
 8003c50:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c52:	4b40      	ldr	r3, [pc, #256]	@ (8003d54 <lcd_init+0x1704>)
 8003c54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c58:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d54 <lcd_init+0x1704>)
 8003c5c:	2280      	movs	r2, #128	@ 0x80
 8003c5e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c60:	4b3c      	ldr	r3, [pc, #240]	@ (8003d54 <lcd_init+0x1704>)
 8003c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c66:	611a      	str	r2, [r3, #16]
}
 8003c68:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 8003c6a:	200d      	movs	r0, #13
 8003c6c:	f7fd fbb4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f7fd fbb1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8003c76:	200d      	movs	r0, #13
 8003c78:	f7fd fbae 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7fd fbab 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 8003c82:	2011      	movs	r0, #17
 8003c84:	f7fd fba8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f7fd fba5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8003c8e:	2019      	movs	r0, #25
 8003c90:	f7fd fba2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7fd fb9f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003c9a:	2021      	movs	r0, #33	@ 0x21
 8003c9c:	f7fd fb9c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7fd fb99 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 8003ca6:	202d      	movs	r0, #45	@ 0x2d
 8003ca8:	f7fd fb96 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cac:	2000      	movs	r0, #0
 8003cae:	f7fd fb93 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 8003cb2:	203d      	movs	r0, #61	@ 0x3d
 8003cb4:	f7fd fb90 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f7fd fb8d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003cbe:	205d      	movs	r0, #93	@ 0x5d
 8003cc0:	f7fd fb8a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7fd fb87 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003cca:	205d      	movs	r0, #93	@ 0x5d
 8003ccc:	f7fd fb84 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7fd fb81 	bl	80013d8 <lcd_wr_xdata>
 8003cd6:	23b1      	movs	r3, #177	@ 0xb1
 8003cd8:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d54 <lcd_init+0x1704>)
 8003cde:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ce2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d54 <lcd_init+0x1704>)
 8003ce6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003cec:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <lcd_init+0x1708>)
 8003cf4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003cf6:	4b17      	ldr	r3, [pc, #92]	@ (8003d54 <lcd_init+0x1704>)
 8003cf8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cfc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003cfe:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <lcd_init+0x1704>)
 8003d00:	2280      	movs	r2, #128	@ 0x80
 8003d02:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003d04:	4b13      	ldr	r3, [pc, #76]	@ (8003d54 <lcd_init+0x1704>)
 8003d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d0a:	611a      	str	r2, [r3, #16]
}
 8003d0c:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 8003d0e:	2080      	movs	r0, #128	@ 0x80
 8003d10:	f7fd fb62 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7fd fb5f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003d1a:	208b      	movs	r0, #139	@ 0x8b
 8003d1c:	f7fd fb5c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d20:	2000      	movs	r0, #0
 8003d22:	f7fd fb59 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 8003d26:	2096      	movs	r0, #150	@ 0x96
 8003d28:	f7fd fb56 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f7fd fb53 	bl	80013d8 <lcd_wr_xdata>
 8003d32:	23b2      	movs	r3, #178	@ 0xb2
 8003d34:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003d38:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <lcd_init+0x1704>)
 8003d3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d3e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003d40:	4b04      	ldr	r3, [pc, #16]	@ (8003d54 <lcd_init+0x1704>)
 8003d42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d46:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003d48:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	e005      	b.n	8003d5c <lcd_init+0x170c>
 8003d50:	20000038 	.word	0x20000038
 8003d54:	40011000 	.word	0x40011000
 8003d58:	40010c00 	.word	0x40010c00
 8003d5c:	4bd0      	ldr	r3, [pc, #832]	@ (80040a0 <lcd_init+0x1a50>)
 8003d5e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003d60:	4bd0      	ldr	r3, [pc, #832]	@ (80040a4 <lcd_init+0x1a54>)
 8003d62:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d66:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003d68:	4bce      	ldr	r3, [pc, #824]	@ (80040a4 <lcd_init+0x1a54>)
 8003d6a:	2280      	movs	r2, #128	@ 0x80
 8003d6c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003d6e:	4bcd      	ldr	r3, [pc, #820]	@ (80040a4 <lcd_init+0x1a54>)
 8003d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d74:	611a      	str	r2, [r3, #16]
}
 8003d76:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7fd fb2d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7fd fb2a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003d84:	2002      	movs	r0, #2
 8003d86:	f7fd fb27 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f7fd fb24 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003d90:	2003      	movs	r0, #3
 8003d92:	f7fd fb21 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d96:	2000      	movs	r0, #0
 8003d98:	f7fd fb1e 	bl	80013d8 <lcd_wr_xdata>
 8003d9c:	23b3      	movs	r3, #179	@ 0xb3
 8003d9e:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003da2:	4bc0      	ldr	r3, [pc, #768]	@ (80040a4 <lcd_init+0x1a54>)
 8003da4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003da8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003daa:	4bbe      	ldr	r3, [pc, #760]	@ (80040a4 <lcd_init+0x1a54>)
 8003dac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003db0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003db2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	4bb9      	ldr	r3, [pc, #740]	@ (80040a0 <lcd_init+0x1a50>)
 8003dba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003dbc:	4bb9      	ldr	r3, [pc, #740]	@ (80040a4 <lcd_init+0x1a54>)
 8003dbe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003dc2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003dc4:	4bb7      	ldr	r3, [pc, #732]	@ (80040a4 <lcd_init+0x1a54>)
 8003dc6:	2280      	movs	r2, #128	@ 0x80
 8003dc8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003dca:	4bb6      	ldr	r3, [pc, #728]	@ (80040a4 <lcd_init+0x1a54>)
 8003dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd0:	611a      	str	r2, [r3, #16]
}
 8003dd2:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7fd faff 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7fd fafc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003de0:	2000      	movs	r0, #0
 8003de2:	f7fd faf9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003de6:	2000      	movs	r0, #0
 8003de8:	f7fd faf6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dec:	2000      	movs	r0, #0
 8003dee:	f7fd faf3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df2:	2000      	movs	r0, #0
 8003df4:	f7fd faf0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f7fd faed 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f7fd faea 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7fd fae7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f7fd fae4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7fd fae1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e16:	2000      	movs	r0, #0
 8003e18:	f7fd fade 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	f7fd fadb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e22:	2000      	movs	r0, #0
 8003e24:	f7fd fad8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f7fd fad5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f7fd fad2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e34:	2000      	movs	r0, #0
 8003e36:	f7fd facf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7fd facc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e40:	2000      	movs	r0, #0
 8003e42:	f7fd fac9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e46:	2000      	movs	r0, #0
 8003e48:	f7fd fac6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f7fd fac3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e52:	2000      	movs	r0, #0
 8003e54:	f7fd fac0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f7fd fabd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7fd faba 	bl	80013d8 <lcd_wr_xdata>
 8003e64:	23b4      	movs	r3, #180	@ 0xb4
 8003e66:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003e6a:	4b8e      	ldr	r3, [pc, #568]	@ (80040a4 <lcd_init+0x1a54>)
 8003e6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e70:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003e72:	4b8c      	ldr	r3, [pc, #560]	@ (80040a4 <lcd_init+0x1a54>)
 8003e74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e78:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003e7a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	4b87      	ldr	r3, [pc, #540]	@ (80040a0 <lcd_init+0x1a50>)
 8003e82:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003e84:	4b87      	ldr	r3, [pc, #540]	@ (80040a4 <lcd_init+0x1a54>)
 8003e86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e8a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003e8c:	4b85      	ldr	r3, [pc, #532]	@ (80040a4 <lcd_init+0x1a54>)
 8003e8e:	2280      	movs	r2, #128	@ 0x80
 8003e90:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003e92:	4b84      	ldr	r3, [pc, #528]	@ (80040a4 <lcd_init+0x1a54>)
 8003e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e98:	611a      	str	r2, [r3, #16]
}
 8003e9a:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 8003e9c:	208b      	movs	r0, #139	@ 0x8b
 8003e9e:	f7fd fa9b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f7fd fa98 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 8003ea8:	2096      	movs	r0, #150	@ 0x96
 8003eaa:	f7fd fa95 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f7fd fa92 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 8003eb4:	20a1      	movs	r0, #161	@ 0xa1
 8003eb6:	f7fd fa8f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f7fd fa8c 	bl	80013d8 <lcd_wr_xdata>
 8003ec0:	23b5      	movs	r3, #181	@ 0xb5
 8003ec2:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ec6:	4b77      	ldr	r3, [pc, #476]	@ (80040a4 <lcd_init+0x1a54>)
 8003ec8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ecc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003ece:	4b75      	ldr	r3, [pc, #468]	@ (80040a4 <lcd_init+0x1a54>)
 8003ed0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ed4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ed6:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	4b70      	ldr	r3, [pc, #448]	@ (80040a0 <lcd_init+0x1a50>)
 8003ede:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003ee0:	4b70      	ldr	r3, [pc, #448]	@ (80040a4 <lcd_init+0x1a54>)
 8003ee2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ee6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ee8:	4b6e      	ldr	r3, [pc, #440]	@ (80040a4 <lcd_init+0x1a54>)
 8003eea:	2280      	movs	r2, #128	@ 0x80
 8003eec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003eee:	4b6d      	ldr	r3, [pc, #436]	@ (80040a4 <lcd_init+0x1a54>)
 8003ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ef4:	611a      	str	r2, [r3, #16]
}
 8003ef6:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 8003ef8:	2002      	movs	r0, #2
 8003efa:	f7fd fa6d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003efe:	2000      	movs	r0, #0
 8003f00:	f7fd fa6a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003f04:	2003      	movs	r0, #3
 8003f06:	f7fd fa67 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	f7fd fa64 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003f10:	2004      	movs	r0, #4
 8003f12:	f7fd fa61 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f16:	2000      	movs	r0, #0
 8003f18:	f7fd fa5e 	bl	80013d8 <lcd_wr_xdata>
 8003f1c:	23b6      	movs	r3, #182	@ 0xb6
 8003f1e:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003f22:	4b60      	ldr	r3, [pc, #384]	@ (80040a4 <lcd_init+0x1a54>)
 8003f24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f28:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80040a4 <lcd_init+0x1a54>)
 8003f2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f30:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003f32:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	4b59      	ldr	r3, [pc, #356]	@ (80040a0 <lcd_init+0x1a50>)
 8003f3a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003f3c:	4b59      	ldr	r3, [pc, #356]	@ (80040a4 <lcd_init+0x1a54>)
 8003f3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f42:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003f44:	4b57      	ldr	r3, [pc, #348]	@ (80040a4 <lcd_init+0x1a54>)
 8003f46:	2280      	movs	r2, #128	@ 0x80
 8003f48:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003f4a:	4b56      	ldr	r3, [pc, #344]	@ (80040a4 <lcd_init+0x1a54>)
 8003f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f50:	611a      	str	r2, [r3, #16]
}
 8003f52:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 8003f54:	2000      	movs	r0, #0
 8003f56:	f7fd fa3f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f7fd fa3c 	bl	80013d8 <lcd_wr_xdata>
 8003f60:	23b7      	movs	r3, #183	@ 0xb7
 8003f62:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003f66:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <lcd_init+0x1a54>)
 8003f68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f6c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80040a4 <lcd_init+0x1a54>)
 8003f70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f74:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003f76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	4b48      	ldr	r3, [pc, #288]	@ (80040a0 <lcd_init+0x1a50>)
 8003f7e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003f80:	4b48      	ldr	r3, [pc, #288]	@ (80040a4 <lcd_init+0x1a54>)
 8003f82:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f86:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003f88:	4b46      	ldr	r3, [pc, #280]	@ (80040a4 <lcd_init+0x1a54>)
 8003f8a:	2280      	movs	r2, #128	@ 0x80
 8003f8c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003f8e:	4b45      	ldr	r3, [pc, #276]	@ (80040a4 <lcd_init+0x1a54>)
 8003f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f94:	611a      	str	r2, [r3, #16]
}
 8003f96:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7fd fa1d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f7fd fa1a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8003fa4:	203f      	movs	r0, #63	@ 0x3f
 8003fa6:	f7fd fa17 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7fd fa14 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 8003fb0:	205e      	movs	r0, #94	@ 0x5e
 8003fb2:	f7fd fa11 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	f7fd fa0e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003fbc:	2064      	movs	r0, #100	@ 0x64
 8003fbe:	f7fd fa0b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	f7fd fa08 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 8003fc8:	208c      	movs	r0, #140	@ 0x8c
 8003fca:	f7fd fa05 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f7fd fa02 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 8003fd4:	20ac      	movs	r0, #172	@ 0xac
 8003fd6:	f7fd f9ff 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f7fd f9fc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003fe0:	20dc      	movs	r0, #220	@ 0xdc
 8003fe2:	f7fd f9f9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	f7fd f9f6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 8003fec:	2070      	movs	r0, #112	@ 0x70
 8003fee:	f7fd f9f3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7fd f9f0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 8003ff8:	2090      	movs	r0, #144	@ 0x90
 8003ffa:	f7fd f9ed 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ffe:	2000      	movs	r0, #0
 8004000:	f7fd f9ea 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 8004004:	20eb      	movs	r0, #235	@ 0xeb
 8004006:	f7fd f9e7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800400a:	2000      	movs	r0, #0
 800400c:	f7fd f9e4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8004010:	20dc      	movs	r0, #220	@ 0xdc
 8004012:	f7fd f9e1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004016:	2000      	movs	r0, #0
 8004018:	f7fd f9de 	bl	80013d8 <lcd_wr_xdata>
 800401c:	23b8      	movs	r3, #184	@ 0xb8
 800401e:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004022:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <lcd_init+0x1a54>)
 8004024:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004028:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800402a:	4b1e      	ldr	r3, [pc, #120]	@ (80040a4 <lcd_init+0x1a54>)
 800402c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004030:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004032:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8004036:	b29a      	uxth	r2, r3
 8004038:	4b19      	ldr	r3, [pc, #100]	@ (80040a0 <lcd_init+0x1a50>)
 800403a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800403c:	4b19      	ldr	r3, [pc, #100]	@ (80040a4 <lcd_init+0x1a54>)
 800403e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004042:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004044:	4b17      	ldr	r3, [pc, #92]	@ (80040a4 <lcd_init+0x1a54>)
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800404a:	4b16      	ldr	r3, [pc, #88]	@ (80040a4 <lcd_init+0x1a54>)
 800404c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004050:	611a      	str	r2, [r3, #16]
}
 8004052:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 8004054:	2000      	movs	r0, #0
 8004056:	f7fd f9bf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800405a:	2000      	movs	r0, #0
 800405c:	f7fd f9bc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004060:	2000      	movs	r0, #0
 8004062:	f7fd f9b9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004066:	2000      	movs	r0, #0
 8004068:	f7fd f9b6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800406c:	2000      	movs	r0, #0
 800406e:	f7fd f9b3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004072:	2000      	movs	r0, #0
 8004074:	f7fd f9b0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004078:	2000      	movs	r0, #0
 800407a:	f7fd f9ad 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800407e:	2000      	movs	r0, #0
 8004080:	f7fd f9aa 	bl	80013d8 <lcd_wr_xdata>
 8004084:	23ba      	movs	r3, #186	@ 0xba
 8004086:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800408a:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <lcd_init+0x1a54>)
 800408c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004090:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004092:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <lcd_init+0x1a54>)
 8004094:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004098:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800409a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 800409e:	e003      	b.n	80040a8 <lcd_init+0x1a58>
 80040a0:	40010c00 	.word	0x40010c00
 80040a4:	40011000 	.word	0x40011000
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	4bd9      	ldr	r3, [pc, #868]	@ (8004410 <lcd_init+0x1dc0>)
 80040ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80040ae:	4bd9      	ldr	r3, [pc, #868]	@ (8004414 <lcd_init+0x1dc4>)
 80040b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80040b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80040b6:	4bd7      	ldr	r3, [pc, #860]	@ (8004414 <lcd_init+0x1dc4>)
 80040b8:	2280      	movs	r2, #128	@ 0x80
 80040ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80040bc:	4bd5      	ldr	r3, [pc, #852]	@ (8004414 <lcd_init+0x1dc4>)
 80040be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040c2:	611a      	str	r2, [r3, #16]
}
 80040c4:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 80040c6:	2024      	movs	r0, #36	@ 0x24
 80040c8:	f7fd f986 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040cc:	2000      	movs	r0, #0
 80040ce:	f7fd f983 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040d2:	2000      	movs	r0, #0
 80040d4:	f7fd f980 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040d8:	2000      	movs	r0, #0
 80040da:	f7fd f97d 	bl	80013d8 <lcd_wr_xdata>
 80040de:	23c1      	movs	r3, #193	@ 0xc1
 80040e0:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80040e4:	4bcb      	ldr	r3, [pc, #812]	@ (8004414 <lcd_init+0x1dc4>)
 80040e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040ea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80040ec:	4bc9      	ldr	r3, [pc, #804]	@ (8004414 <lcd_init+0x1dc4>)
 80040ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040f2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80040f4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	4bc5      	ldr	r3, [pc, #788]	@ (8004410 <lcd_init+0x1dc0>)
 80040fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80040fe:	4bc5      	ldr	r3, [pc, #788]	@ (8004414 <lcd_init+0x1dc4>)
 8004100:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004104:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004106:	4bc3      	ldr	r3, [pc, #780]	@ (8004414 <lcd_init+0x1dc4>)
 8004108:	2280      	movs	r2, #128	@ 0x80
 800410a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800410c:	4bc1      	ldr	r3, [pc, #772]	@ (8004414 <lcd_init+0x1dc4>)
 800410e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004112:	611a      	str	r2, [r3, #16]
}
 8004114:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 8004116:	2020      	movs	r0, #32
 8004118:	f7fd f95e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800411c:	2000      	movs	r0, #0
 800411e:	f7fd f95b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8004122:	2054      	movs	r0, #84	@ 0x54
 8004124:	f7fd f958 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004128:	2000      	movs	r0, #0
 800412a:	f7fd f955 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800412e:	20ff      	movs	r0, #255	@ 0xff
 8004130:	f7fd f952 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004134:	2000      	movs	r0, #0
 8004136:	f7fd f94f 	bl	80013d8 <lcd_wr_xdata>
 800413a:	23c2      	movs	r3, #194	@ 0xc2
 800413c:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004140:	4bb4      	ldr	r3, [pc, #720]	@ (8004414 <lcd_init+0x1dc4>)
 8004142:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004146:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004148:	4bb2      	ldr	r3, [pc, #712]	@ (8004414 <lcd_init+0x1dc4>)
 800414a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800414e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004150:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8004154:	b29a      	uxth	r2, r3
 8004156:	4bae      	ldr	r3, [pc, #696]	@ (8004410 <lcd_init+0x1dc0>)
 8004158:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800415a:	4bae      	ldr	r3, [pc, #696]	@ (8004414 <lcd_init+0x1dc4>)
 800415c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004160:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004162:	4bac      	ldr	r3, [pc, #688]	@ (8004414 <lcd_init+0x1dc4>)
 8004164:	2280      	movs	r2, #128	@ 0x80
 8004166:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004168:	4baa      	ldr	r3, [pc, #680]	@ (8004414 <lcd_init+0x1dc4>)
 800416a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800416e:	611a      	str	r2, [r3, #16]
}
 8004170:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 8004172:	200a      	movs	r0, #10
 8004174:	f7fd f930 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004178:	2000      	movs	r0, #0
 800417a:	f7fd f92d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 800417e:	2004      	movs	r0, #4
 8004180:	f7fd f92a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004184:	2000      	movs	r0, #0
 8004186:	f7fd f927 	bl	80013d8 <lcd_wr_xdata>
 800418a:	23c3      	movs	r3, #195	@ 0xc3
 800418c:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004190:	4ba0      	ldr	r3, [pc, #640]	@ (8004414 <lcd_init+0x1dc4>)
 8004192:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004196:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004198:	4b9e      	ldr	r3, [pc, #632]	@ (8004414 <lcd_init+0x1dc4>)
 800419a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800419e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80041a0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	4b9a      	ldr	r3, [pc, #616]	@ (8004410 <lcd_init+0x1dc0>)
 80041a8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80041aa:	4b9a      	ldr	r3, [pc, #616]	@ (8004414 <lcd_init+0x1dc4>)
 80041ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80041b0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80041b2:	4b98      	ldr	r3, [pc, #608]	@ (8004414 <lcd_init+0x1dc4>)
 80041b4:	2280      	movs	r2, #128	@ 0x80
 80041b6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80041b8:	4b96      	ldr	r3, [pc, #600]	@ (8004414 <lcd_init+0x1dc4>)
 80041ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041be:	611a      	str	r2, [r3, #16]
}
 80041c0:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 80041c2:	203c      	movs	r0, #60	@ 0x3c
 80041c4:	f7fd f908 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041c8:	2000      	movs	r0, #0
 80041ca:	f7fd f905 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 80041ce:	203a      	movs	r0, #58	@ 0x3a
 80041d0:	f7fd f902 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7fd f8ff 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 80041da:	2039      	movs	r0, #57	@ 0x39
 80041dc:	f7fd f8fc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041e0:	2000      	movs	r0, #0
 80041e2:	f7fd f8f9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 80041e6:	2037      	movs	r0, #55	@ 0x37
 80041e8:	f7fd f8f6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ec:	2000      	movs	r0, #0
 80041ee:	f7fd f8f3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80041f2:	203c      	movs	r0, #60	@ 0x3c
 80041f4:	f7fd f8f0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041f8:	2000      	movs	r0, #0
 80041fa:	f7fd f8ed 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 80041fe:	2036      	movs	r0, #54	@ 0x36
 8004200:	f7fd f8ea 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004204:	2000      	movs	r0, #0
 8004206:	f7fd f8e7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 800420a:	2032      	movs	r0, #50	@ 0x32
 800420c:	f7fd f8e4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004210:	2000      	movs	r0, #0
 8004212:	f7fd f8e1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 8004216:	202f      	movs	r0, #47	@ 0x2f
 8004218:	f7fd f8de 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800421c:	2000      	movs	r0, #0
 800421e:	f7fd f8db 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8004222:	202c      	movs	r0, #44	@ 0x2c
 8004224:	f7fd f8d8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004228:	2000      	movs	r0, #0
 800422a:	f7fd f8d5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 800422e:	2029      	movs	r0, #41	@ 0x29
 8004230:	f7fd f8d2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004234:	2000      	movs	r0, #0
 8004236:	f7fd f8cf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 800423a:	2026      	movs	r0, #38	@ 0x26
 800423c:	f7fd f8cc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004240:	2000      	movs	r0, #0
 8004242:	f7fd f8c9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8004246:	2024      	movs	r0, #36	@ 0x24
 8004248:	f7fd f8c6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800424c:	2000      	movs	r0, #0
 800424e:	f7fd f8c3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8004252:	2024      	movs	r0, #36	@ 0x24
 8004254:	f7fd f8c0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004258:	2000      	movs	r0, #0
 800425a:	f7fd f8bd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 800425e:	2023      	movs	r0, #35	@ 0x23
 8004260:	f7fd f8ba 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004264:	2000      	movs	r0, #0
 8004266:	f7fd f8b7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800426a:	203c      	movs	r0, #60	@ 0x3c
 800426c:	f7fd f8b4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004270:	2000      	movs	r0, #0
 8004272:	f7fd f8b1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004276:	2036      	movs	r0, #54	@ 0x36
 8004278:	f7fd f8ae 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800427c:	2000      	movs	r0, #0
 800427e:	f7fd f8ab 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8004282:	2032      	movs	r0, #50	@ 0x32
 8004284:	f7fd f8a8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004288:	2000      	movs	r0, #0
 800428a:	f7fd f8a5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 800428e:	202f      	movs	r0, #47	@ 0x2f
 8004290:	f7fd f8a2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004294:	2000      	movs	r0, #0
 8004296:	f7fd f89f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 800429a:	202c      	movs	r0, #44	@ 0x2c
 800429c:	f7fd f89c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042a0:	2000      	movs	r0, #0
 80042a2:	f7fd f899 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80042a6:	2029      	movs	r0, #41	@ 0x29
 80042a8:	f7fd f896 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7fd f893 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80042b2:	2026      	movs	r0, #38	@ 0x26
 80042b4:	f7fd f890 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042b8:	2000      	movs	r0, #0
 80042ba:	f7fd f88d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80042be:	2024      	movs	r0, #36	@ 0x24
 80042c0:	f7fd f88a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042c4:	2000      	movs	r0, #0
 80042c6:	f7fd f887 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80042ca:	2024      	movs	r0, #36	@ 0x24
 80042cc:	f7fd f884 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042d0:	2000      	movs	r0, #0
 80042d2:	f7fd f881 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80042d6:	2023      	movs	r0, #35	@ 0x23
 80042d8:	f7fd f87e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042dc:	2000      	movs	r0, #0
 80042de:	f7fd f87b 	bl	80013d8 <lcd_wr_xdata>
 80042e2:	23c4      	movs	r3, #196	@ 0xc4
 80042e4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80042e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004414 <lcd_init+0x1dc4>)
 80042ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042ee:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80042f0:	4b48      	ldr	r3, [pc, #288]	@ (8004414 <lcd_init+0x1dc4>)
 80042f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042f6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80042f8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	4b44      	ldr	r3, [pc, #272]	@ (8004410 <lcd_init+0x1dc0>)
 8004300:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004302:	4b44      	ldr	r3, [pc, #272]	@ (8004414 <lcd_init+0x1dc4>)
 8004304:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004308:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800430a:	4b42      	ldr	r3, [pc, #264]	@ (8004414 <lcd_init+0x1dc4>)
 800430c:	2280      	movs	r2, #128	@ 0x80
 800430e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004310:	4b40      	ldr	r3, [pc, #256]	@ (8004414 <lcd_init+0x1dc4>)
 8004312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004316:	611a      	str	r2, [r3, #16]
}
 8004318:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 800431a:	2062      	movs	r0, #98	@ 0x62
 800431c:	f7fd f85c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004320:	2000      	movs	r0, #0
 8004322:	f7fd f859 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8004326:	2005      	movs	r0, #5
 8004328:	f7fd f856 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800432c:	2000      	movs	r0, #0
 800432e:	f7fd f853 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8004332:	2084      	movs	r0, #132	@ 0x84
 8004334:	f7fd f850 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004338:	2000      	movs	r0, #0
 800433a:	f7fd f84d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 800433e:	20f0      	movs	r0, #240	@ 0xf0
 8004340:	f7fd f84a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004344:	2000      	movs	r0, #0
 8004346:	f7fd f847 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 800434a:	2018      	movs	r0, #24
 800434c:	f7fd f844 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004350:	2000      	movs	r0, #0
 8004352:	f7fd f841 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 8004356:	20a4      	movs	r0, #164	@ 0xa4
 8004358:	f7fd f83e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800435c:	2000      	movs	r0, #0
 800435e:	f7fd f83b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8004362:	2018      	movs	r0, #24
 8004364:	f7fd f838 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004368:	2000      	movs	r0, #0
 800436a:	f7fd f835 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 800436e:	2050      	movs	r0, #80	@ 0x50
 8004370:	f7fd f832 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004374:	2000      	movs	r0, #0
 8004376:	f7fd f82f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 800437a:	200c      	movs	r0, #12
 800437c:	f7fd f82c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004380:	2000      	movs	r0, #0
 8004382:	f7fd f829 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8004386:	2017      	movs	r0, #23
 8004388:	f7fd f826 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800438c:	2000      	movs	r0, #0
 800438e:	f7fd f823 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 8004392:	2095      	movs	r0, #149	@ 0x95
 8004394:	f7fd f820 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004398:	2000      	movs	r0, #0
 800439a:	f7fd f81d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 800439e:	20f3      	movs	r0, #243	@ 0xf3
 80043a0:	f7fd f81a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043a4:	2000      	movs	r0, #0
 80043a6:	f7fd f817 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 80043aa:	20e6      	movs	r0, #230	@ 0xe6
 80043ac:	f7fd f814 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043b0:	2000      	movs	r0, #0
 80043b2:	f7fd f811 	bl	80013d8 <lcd_wr_xdata>
 80043b6:	23c5      	movs	r3, #197	@ 0xc5
 80043b8:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80043bc:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <lcd_init+0x1dc4>)
 80043be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043c2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80043c4:	4b13      	ldr	r3, [pc, #76]	@ (8004414 <lcd_init+0x1dc4>)
 80043c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043ca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80043cc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004410 <lcd_init+0x1dc0>)
 80043d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80043d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <lcd_init+0x1dc4>)
 80043d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80043dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80043de:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <lcd_init+0x1dc4>)
 80043e0:	2280      	movs	r2, #128	@ 0x80
 80043e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80043e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <lcd_init+0x1dc4>)
 80043e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ea:	611a      	str	r2, [r3, #16]
}
 80043ec:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 80043ee:	2032      	movs	r0, #50	@ 0x32
 80043f0:	f7fc fff2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043f4:	2000      	movs	r0, #0
 80043f6:	f7fc ffef 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80043fa:	2044      	movs	r0, #68	@ 0x44
 80043fc:	f7fc ffec 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004400:	2000      	movs	r0, #0
 8004402:	f7fc ffe9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 8004406:	2065      	movs	r0, #101	@ 0x65
 8004408:	f7fc ffe6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800440c:	2000      	movs	r0, #0
 800440e:	e003      	b.n	8004418 <lcd_init+0x1dc8>
 8004410:	40010c00 	.word	0x40010c00
 8004414:	40011000 	.word	0x40011000
 8004418:	f7fc ffde 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 800441c:	2076      	movs	r0, #118	@ 0x76
 800441e:	f7fc ffdb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004422:	2000      	movs	r0, #0
 8004424:	f7fc ffd8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004428:	2088      	movs	r0, #136	@ 0x88
 800442a:	f7fc ffd5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800442e:	2000      	movs	r0, #0
 8004430:	f7fc ffd2 	bl	80013d8 <lcd_wr_xdata>
 8004434:	23c6      	movs	r3, #198	@ 0xc6
 8004436:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800443a:	4bd7      	ldr	r3, [pc, #860]	@ (8004798 <lcd_init+0x2148>)
 800443c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004440:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004442:	4bd5      	ldr	r3, [pc, #852]	@ (8004798 <lcd_init+0x2148>)
 8004444:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004448:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800444a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800444e:	b29a      	uxth	r2, r3
 8004450:	4bd2      	ldr	r3, [pc, #840]	@ (800479c <lcd_init+0x214c>)
 8004452:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004454:	4bd0      	ldr	r3, [pc, #832]	@ (8004798 <lcd_init+0x2148>)
 8004456:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800445a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800445c:	4bce      	ldr	r3, [pc, #824]	@ (8004798 <lcd_init+0x2148>)
 800445e:	2280      	movs	r2, #128	@ 0x80
 8004460:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004462:	4bcd      	ldr	r3, [pc, #820]	@ (8004798 <lcd_init+0x2148>)
 8004464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004468:	611a      	str	r2, [r3, #16]
}
 800446a:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 800446c:	2020      	movs	r0, #32
 800446e:	f7fc ffb3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004472:	2000      	movs	r0, #0
 8004474:	f7fc ffb0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8004478:	2017      	movs	r0, #23
 800447a:	f7fc ffad 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800447e:	2000      	movs	r0, #0
 8004480:	f7fc ffaa 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8004484:	2001      	movs	r0, #1
 8004486:	f7fc ffa7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800448a:	2000      	movs	r0, #0
 800448c:	f7fc ffa4 	bl	80013d8 <lcd_wr_xdata>
 8004490:	23c7      	movs	r3, #199	@ 0xc7
 8004492:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004496:	4bc0      	ldr	r3, [pc, #768]	@ (8004798 <lcd_init+0x2148>)
 8004498:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800449c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800449e:	4bbe      	ldr	r3, [pc, #760]	@ (8004798 <lcd_init+0x2148>)
 80044a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80044a6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	4bbb      	ldr	r3, [pc, #748]	@ (800479c <lcd_init+0x214c>)
 80044ae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80044b0:	4bb9      	ldr	r3, [pc, #740]	@ (8004798 <lcd_init+0x2148>)
 80044b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80044b8:	4bb7      	ldr	r3, [pc, #732]	@ (8004798 <lcd_init+0x2148>)
 80044ba:	2280      	movs	r2, #128	@ 0x80
 80044bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80044be:	4bb6      	ldr	r3, [pc, #728]	@ (8004798 <lcd_init+0x2148>)
 80044c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c4:	611a      	str	r2, [r3, #16]
}
 80044c6:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 80044c8:	2000      	movs	r0, #0
 80044ca:	f7fc ff85 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7fc ff82 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044d4:	2000      	movs	r0, #0
 80044d6:	f7fc ff7f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044da:	2000      	movs	r0, #0
 80044dc:	f7fc ff7c 	bl	80013d8 <lcd_wr_xdata>
 80044e0:	23c8      	movs	r3, #200	@ 0xc8
 80044e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80044e6:	4bac      	ldr	r3, [pc, #688]	@ (8004798 <lcd_init+0x2148>)
 80044e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80044ee:	4baa      	ldr	r3, [pc, #680]	@ (8004798 <lcd_init+0x2148>)
 80044f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80044f6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	4ba7      	ldr	r3, [pc, #668]	@ (800479c <lcd_init+0x214c>)
 80044fe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004500:	4ba5      	ldr	r3, [pc, #660]	@ (8004798 <lcd_init+0x2148>)
 8004502:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004506:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004508:	4ba3      	ldr	r3, [pc, #652]	@ (8004798 <lcd_init+0x2148>)
 800450a:	2280      	movs	r2, #128	@ 0x80
 800450c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800450e:	4ba2      	ldr	r3, [pc, #648]	@ (8004798 <lcd_init+0x2148>)
 8004510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004514:	611a      	str	r2, [r3, #16]
}
 8004516:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 8004518:	2000      	movs	r0, #0
 800451a:	f7fc ff5d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800451e:	2000      	movs	r0, #0
 8004520:	f7fc ff5a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004524:	2000      	movs	r0, #0
 8004526:	f7fc ff57 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800452a:	2000      	movs	r0, #0
 800452c:	f7fc ff54 	bl	80013d8 <lcd_wr_xdata>
 8004530:	23c9      	movs	r3, #201	@ 0xc9
 8004532:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004536:	4b98      	ldr	r3, [pc, #608]	@ (8004798 <lcd_init+0x2148>)
 8004538:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800453c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800453e:	4b96      	ldr	r3, [pc, #600]	@ (8004798 <lcd_init+0x2148>)
 8004540:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004544:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004546:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 800454a:	b29a      	uxth	r2, r3
 800454c:	4b93      	ldr	r3, [pc, #588]	@ (800479c <lcd_init+0x214c>)
 800454e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004550:	4b91      	ldr	r3, [pc, #580]	@ (8004798 <lcd_init+0x2148>)
 8004552:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004556:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004558:	4b8f      	ldr	r3, [pc, #572]	@ (8004798 <lcd_init+0x2148>)
 800455a:	2280      	movs	r2, #128	@ 0x80
 800455c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800455e:	4b8e      	ldr	r3, [pc, #568]	@ (8004798 <lcd_init+0x2148>)
 8004560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004564:	611a      	str	r2, [r3, #16]
}
 8004566:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8004568:	2000      	movs	r0, #0
 800456a:	f7fc ff35 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800456e:	2000      	movs	r0, #0
 8004570:	f7fc ff32 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004574:	2000      	movs	r0, #0
 8004576:	f7fc ff2f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800457a:	2000      	movs	r0, #0
 800457c:	f7fc ff2c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004580:	2000      	movs	r0, #0
 8004582:	f7fc ff29 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004586:	2000      	movs	r0, #0
 8004588:	f7fc ff26 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800458c:	2000      	movs	r0, #0
 800458e:	f7fc ff23 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004592:	2000      	movs	r0, #0
 8004594:	f7fc ff20 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004598:	2000      	movs	r0, #0
 800459a:	f7fc ff1d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800459e:	2000      	movs	r0, #0
 80045a0:	f7fc ff1a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fc ff17 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045aa:	2000      	movs	r0, #0
 80045ac:	f7fc ff14 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7fc ff11 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7fc ff0e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045bc:	2000      	movs	r0, #0
 80045be:	f7fc ff0b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7fc ff08 	bl	80013d8 <lcd_wr_xdata>
 80045c8:	23e0      	movs	r3, #224	@ 0xe0
 80045ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80045ce:	4b72      	ldr	r3, [pc, #456]	@ (8004798 <lcd_init+0x2148>)
 80045d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045d4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80045d6:	4b70      	ldr	r3, [pc, #448]	@ (8004798 <lcd_init+0x2148>)
 80045d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045dc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80045de:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	4b6d      	ldr	r3, [pc, #436]	@ (800479c <lcd_init+0x214c>)
 80045e6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80045e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004798 <lcd_init+0x2148>)
 80045ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045ee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80045f0:	4b69      	ldr	r3, [pc, #420]	@ (8004798 <lcd_init+0x2148>)
 80045f2:	2280      	movs	r2, #128	@ 0x80
 80045f4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80045f6:	4b68      	ldr	r3, [pc, #416]	@ (8004798 <lcd_init+0x2148>)
 80045f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045fc:	611a      	str	r2, [r3, #16]
}
 80045fe:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 8004600:	2016      	movs	r0, #22
 8004602:	f7fc fee9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004606:	2000      	movs	r0, #0
 8004608:	f7fc fee6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 800460c:	201c      	movs	r0, #28
 800460e:	f7fc fee3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004612:	2000      	movs	r0, #0
 8004614:	f7fc fee0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8004618:	2021      	movs	r0, #33	@ 0x21
 800461a:	f7fc fedd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800461e:	2000      	movs	r0, #0
 8004620:	f7fc feda 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004624:	2036      	movs	r0, #54	@ 0x36
 8004626:	f7fc fed7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800462a:	2000      	movs	r0, #0
 800462c:	f7fc fed4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8004630:	2046      	movs	r0, #70	@ 0x46
 8004632:	f7fc fed1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004636:	2000      	movs	r0, #0
 8004638:	f7fc fece 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 800463c:	2052      	movs	r0, #82	@ 0x52
 800463e:	f7fc fecb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004642:	2000      	movs	r0, #0
 8004644:	f7fc fec8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8004648:	2064      	movs	r0, #100	@ 0x64
 800464a:	f7fc fec5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800464e:	2000      	movs	r0, #0
 8004650:	f7fc fec2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8004654:	207a      	movs	r0, #122	@ 0x7a
 8004656:	f7fc febf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800465a:	2000      	movs	r0, #0
 800465c:	f7fc febc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8004660:	208b      	movs	r0, #139	@ 0x8b
 8004662:	f7fc feb9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004666:	2000      	movs	r0, #0
 8004668:	f7fc feb6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 800466c:	2099      	movs	r0, #153	@ 0x99
 800466e:	f7fc feb3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004672:	2000      	movs	r0, #0
 8004674:	f7fc feb0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8004678:	20a8      	movs	r0, #168	@ 0xa8
 800467a:	f7fc fead 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800467e:	2000      	movs	r0, #0
 8004680:	f7fc feaa 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8004684:	20b9      	movs	r0, #185	@ 0xb9
 8004686:	f7fc fea7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800468a:	2000      	movs	r0, #0
 800468c:	f7fc fea4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8004690:	20c4      	movs	r0, #196	@ 0xc4
 8004692:	f7fc fea1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004696:	2000      	movs	r0, #0
 8004698:	f7fc fe9e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 800469c:	20ca      	movs	r0, #202	@ 0xca
 800469e:	f7fc fe9b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046a2:	2000      	movs	r0, #0
 80046a4:	f7fc fe98 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 80046a8:	20d2      	movs	r0, #210	@ 0xd2
 80046aa:	f7fc fe95 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046ae:	2000      	movs	r0, #0
 80046b0:	f7fc fe92 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 80046b4:	20d9      	movs	r0, #217	@ 0xd9
 80046b6:	f7fc fe8f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046ba:	2000      	movs	r0, #0
 80046bc:	f7fc fe8c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 80046c0:	20e0      	movs	r0, #224	@ 0xe0
 80046c2:	f7fc fe89 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7fc fe86 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80046cc:	20f3      	movs	r0, #243	@ 0xf3
 80046ce:	f7fc fe83 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046d2:	2000      	movs	r0, #0
 80046d4:	f7fc fe80 	bl	80013d8 <lcd_wr_xdata>
 80046d8:	23e1      	movs	r3, #225	@ 0xe1
 80046da:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046de:	4b2e      	ldr	r3, [pc, #184]	@ (8004798 <lcd_init+0x2148>)
 80046e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046e4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004798 <lcd_init+0x2148>)
 80046e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046ec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046ee:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	4b29      	ldr	r3, [pc, #164]	@ (800479c <lcd_init+0x214c>)
 80046f6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80046f8:	4b27      	ldr	r3, [pc, #156]	@ (8004798 <lcd_init+0x2148>)
 80046fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046fe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004700:	4b25      	ldr	r3, [pc, #148]	@ (8004798 <lcd_init+0x2148>)
 8004702:	2280      	movs	r2, #128	@ 0x80
 8004704:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004706:	4b24      	ldr	r3, [pc, #144]	@ (8004798 <lcd_init+0x2148>)
 8004708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800470c:	611a      	str	r2, [r3, #16]
}
 800470e:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8004710:	2016      	movs	r0, #22
 8004712:	f7fc fe61 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004716:	2000      	movs	r0, #0
 8004718:	f7fc fe5e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 800471c:	201c      	movs	r0, #28
 800471e:	f7fc fe5b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004722:	2000      	movs	r0, #0
 8004724:	f7fc fe58 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8004728:	2022      	movs	r0, #34	@ 0x22
 800472a:	f7fc fe55 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800472e:	2000      	movs	r0, #0
 8004730:	f7fc fe52 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004734:	2036      	movs	r0, #54	@ 0x36
 8004736:	f7fc fe4f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800473a:	2000      	movs	r0, #0
 800473c:	f7fc fe4c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004740:	2045      	movs	r0, #69	@ 0x45
 8004742:	f7fc fe49 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004746:	2000      	movs	r0, #0
 8004748:	f7fc fe46 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 800474c:	2052      	movs	r0, #82	@ 0x52
 800474e:	f7fc fe43 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004752:	2000      	movs	r0, #0
 8004754:	f7fc fe40 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8004758:	2064      	movs	r0, #100	@ 0x64
 800475a:	f7fc fe3d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800475e:	2000      	movs	r0, #0
 8004760:	f7fc fe3a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8004764:	207a      	movs	r0, #122	@ 0x7a
 8004766:	f7fc fe37 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800476a:	2000      	movs	r0, #0
 800476c:	f7fc fe34 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8004770:	208b      	movs	r0, #139	@ 0x8b
 8004772:	f7fc fe31 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004776:	2000      	movs	r0, #0
 8004778:	f7fc fe2e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 800477c:	2099      	movs	r0, #153	@ 0x99
 800477e:	f7fc fe2b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004782:	2000      	movs	r0, #0
 8004784:	f7fc fe28 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8004788:	20a8      	movs	r0, #168	@ 0xa8
 800478a:	f7fc fe25 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800478e:	2000      	movs	r0, #0
 8004790:	f7fc fe22 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8004794:	20b9      	movs	r0, #185	@ 0xb9
 8004796:	e003      	b.n	80047a0 <lcd_init+0x2150>
 8004798:	40011000 	.word	0x40011000
 800479c:	40010c00 	.word	0x40010c00
 80047a0:	f7fc fe1a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047a4:	2000      	movs	r0, #0
 80047a6:	f7fc fe17 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80047aa:	20c4      	movs	r0, #196	@ 0xc4
 80047ac:	f7fc fe14 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7fc fe11 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 80047b6:	20ca      	movs	r0, #202	@ 0xca
 80047b8:	f7fc fe0e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047bc:	2000      	movs	r0, #0
 80047be:	f7fc fe0b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 80047c2:	20d2      	movs	r0, #210	@ 0xd2
 80047c4:	f7fc fe08 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047c8:	2000      	movs	r0, #0
 80047ca:	f7fc fe05 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 80047ce:	20d8      	movs	r0, #216	@ 0xd8
 80047d0:	f7fc fe02 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047d4:	2000      	movs	r0, #0
 80047d6:	f7fc fdff 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 80047da:	20e0      	movs	r0, #224	@ 0xe0
 80047dc:	f7fc fdfc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047e0:	2000      	movs	r0, #0
 80047e2:	f7fc fdf9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80047e6:	20f3      	movs	r0, #243	@ 0xf3
 80047e8:	f7fc fdf6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047ec:	2000      	movs	r0, #0
 80047ee:	f7fc fdf3 	bl	80013d8 <lcd_wr_xdata>
 80047f2:	23e2      	movs	r3, #226	@ 0xe2
 80047f4:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047f8:	4be3      	ldr	r3, [pc, #908]	@ (8004b88 <lcd_init+0x2538>)
 80047fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047fe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004800:	4be1      	ldr	r3, [pc, #900]	@ (8004b88 <lcd_init+0x2538>)
 8004802:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004806:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004808:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800480c:	b29a      	uxth	r2, r3
 800480e:	4bdf      	ldr	r3, [pc, #892]	@ (8004b8c <lcd_init+0x253c>)
 8004810:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004812:	4bdd      	ldr	r3, [pc, #884]	@ (8004b88 <lcd_init+0x2538>)
 8004814:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004818:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800481a:	4bdb      	ldr	r3, [pc, #876]	@ (8004b88 <lcd_init+0x2538>)
 800481c:	2280      	movs	r2, #128	@ 0x80
 800481e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004820:	4bd9      	ldr	r3, [pc, #868]	@ (8004b88 <lcd_init+0x2538>)
 8004822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004826:	611a      	str	r2, [r3, #16]
}
 8004828:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 800482a:	2005      	movs	r0, #5
 800482c:	f7fc fdd4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004830:	2000      	movs	r0, #0
 8004832:	f7fc fdd1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8004836:	200b      	movs	r0, #11
 8004838:	f7fc fdce 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800483c:	2000      	movs	r0, #0
 800483e:	f7fc fdcb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 8004842:	201b      	movs	r0, #27
 8004844:	f7fc fdc8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004848:	2000      	movs	r0, #0
 800484a:	f7fc fdc5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 800484e:	2034      	movs	r0, #52	@ 0x34
 8004850:	f7fc fdc2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004854:	2000      	movs	r0, #0
 8004856:	f7fc fdbf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 800485a:	2044      	movs	r0, #68	@ 0x44
 800485c:	f7fc fdbc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004860:	2000      	movs	r0, #0
 8004862:	f7fc fdb9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 8004866:	204f      	movs	r0, #79	@ 0x4f
 8004868:	f7fc fdb6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800486c:	2000      	movs	r0, #0
 800486e:	f7fc fdb3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8004872:	2061      	movs	r0, #97	@ 0x61
 8004874:	f7fc fdb0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004878:	2000      	movs	r0, #0
 800487a:	f7fc fdad 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 800487e:	2079      	movs	r0, #121	@ 0x79
 8004880:	f7fc fdaa 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004884:	2000      	movs	r0, #0
 8004886:	f7fc fda7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 800488a:	2088      	movs	r0, #136	@ 0x88
 800488c:	f7fc fda4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004890:	2000      	movs	r0, #0
 8004892:	f7fc fda1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8004896:	2097      	movs	r0, #151	@ 0x97
 8004898:	f7fc fd9e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800489c:	2000      	movs	r0, #0
 800489e:	f7fc fd9b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 80048a2:	20a6      	movs	r0, #166	@ 0xa6
 80048a4:	f7fc fd98 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048a8:	2000      	movs	r0, #0
 80048aa:	f7fc fd95 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 80048ae:	20b7      	movs	r0, #183	@ 0xb7
 80048b0:	f7fc fd92 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048b4:	2000      	movs	r0, #0
 80048b6:	f7fc fd8f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 80048ba:	20c2      	movs	r0, #194	@ 0xc2
 80048bc:	f7fc fd8c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048c0:	2000      	movs	r0, #0
 80048c2:	f7fc fd89 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 80048c6:	20c7      	movs	r0, #199	@ 0xc7
 80048c8:	f7fc fd86 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7fc fd83 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 80048d2:	20d1      	movs	r0, #209	@ 0xd1
 80048d4:	f7fc fd80 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048d8:	2000      	movs	r0, #0
 80048da:	f7fc fd7d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 80048de:	20d6      	movs	r0, #214	@ 0xd6
 80048e0:	f7fc fd7a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7fc fd77 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80048ea:	20dd      	movs	r0, #221	@ 0xdd
 80048ec:	f7fc fd74 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7fc fd71 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80048f6:	20f3      	movs	r0, #243	@ 0xf3
 80048f8:	f7fc fd6e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048fc:	2000      	movs	r0, #0
 80048fe:	f7fc fd6b 	bl	80013d8 <lcd_wr_xdata>
 8004902:	23e3      	movs	r3, #227	@ 0xe3
 8004904:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004908:	4b9f      	ldr	r3, [pc, #636]	@ (8004b88 <lcd_init+0x2538>)
 800490a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800490e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004910:	4b9d      	ldr	r3, [pc, #628]	@ (8004b88 <lcd_init+0x2538>)
 8004912:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004916:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004918:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 800491c:	b29a      	uxth	r2, r3
 800491e:	4b9b      	ldr	r3, [pc, #620]	@ (8004b8c <lcd_init+0x253c>)
 8004920:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004922:	4b99      	ldr	r3, [pc, #612]	@ (8004b88 <lcd_init+0x2538>)
 8004924:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004928:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800492a:	4b97      	ldr	r3, [pc, #604]	@ (8004b88 <lcd_init+0x2538>)
 800492c:	2280      	movs	r2, #128	@ 0x80
 800492e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004930:	4b95      	ldr	r3, [pc, #596]	@ (8004b88 <lcd_init+0x2538>)
 8004932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004936:	611a      	str	r2, [r3, #16]
}
 8004938:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 800493a:	2005      	movs	r0, #5
 800493c:	f7fc fd4c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004940:	2000      	movs	r0, #0
 8004942:	f7fc fd49 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 8004946:	200a      	movs	r0, #10
 8004948:	f7fc fd46 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800494c:	2000      	movs	r0, #0
 800494e:	f7fc fd43 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8004952:	201c      	movs	r0, #28
 8004954:	f7fc fd40 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004958:	2000      	movs	r0, #0
 800495a:	f7fc fd3d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800495e:	2033      	movs	r0, #51	@ 0x33
 8004960:	f7fc fd3a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004964:	2000      	movs	r0, #0
 8004966:	f7fc fd37 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 800496a:	2044      	movs	r0, #68	@ 0x44
 800496c:	f7fc fd34 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004970:	2000      	movs	r0, #0
 8004972:	f7fc fd31 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8004976:	2050      	movs	r0, #80	@ 0x50
 8004978:	f7fc fd2e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800497c:	2000      	movs	r0, #0
 800497e:	f7fc fd2b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 8004982:	2062      	movs	r0, #98	@ 0x62
 8004984:	f7fc fd28 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004988:	2000      	movs	r0, #0
 800498a:	f7fc fd25 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 800498e:	2078      	movs	r0, #120	@ 0x78
 8004990:	f7fc fd22 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004994:	2000      	movs	r0, #0
 8004996:	f7fc fd1f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 800499a:	2088      	movs	r0, #136	@ 0x88
 800499c:	f7fc fd1c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7fc fd19 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 80049a6:	2097      	movs	r0, #151	@ 0x97
 80049a8:	f7fc fd16 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fc fd13 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 80049b2:	20a6      	movs	r0, #166	@ 0xa6
 80049b4:	f7fc fd10 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049b8:	2000      	movs	r0, #0
 80049ba:	f7fc fd0d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 80049be:	20b7      	movs	r0, #183	@ 0xb7
 80049c0:	f7fc fd0a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7fc fd07 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 80049ca:	20c2      	movs	r0, #194	@ 0xc2
 80049cc:	f7fc fd04 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7fc fd01 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 80049d6:	20c7      	movs	r0, #199	@ 0xc7
 80049d8:	f7fc fcfe 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049dc:	2000      	movs	r0, #0
 80049de:	f7fc fcfb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 80049e2:	20d1      	movs	r0, #209	@ 0xd1
 80049e4:	f7fc fcf8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7fc fcf5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 80049ee:	20d5      	movs	r0, #213	@ 0xd5
 80049f0:	f7fc fcf2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fc fcef 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80049fa:	20dd      	movs	r0, #221	@ 0xdd
 80049fc:	f7fc fcec 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7fc fce9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004a06:	20f3      	movs	r0, #243	@ 0xf3
 8004a08:	f7fc fce6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7fc fce3 	bl	80013d8 <lcd_wr_xdata>
 8004a12:	23e4      	movs	r3, #228	@ 0xe4
 8004a14:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a18:	4b5b      	ldr	r3, [pc, #364]	@ (8004b88 <lcd_init+0x2538>)
 8004a1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a1e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a20:	4b59      	ldr	r3, [pc, #356]	@ (8004b88 <lcd_init+0x2538>)
 8004a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a26:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a28:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	4b57      	ldr	r3, [pc, #348]	@ (8004b8c <lcd_init+0x253c>)
 8004a30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a32:	4b55      	ldr	r3, [pc, #340]	@ (8004b88 <lcd_init+0x2538>)
 8004a34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a3a:	4b53      	ldr	r3, [pc, #332]	@ (8004b88 <lcd_init+0x2538>)
 8004a3c:	2280      	movs	r2, #128	@ 0x80
 8004a3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a40:	4b51      	ldr	r3, [pc, #324]	@ (8004b88 <lcd_init+0x2538>)
 8004a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a46:	611a      	str	r2, [r3, #16]
}
 8004a48:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f7fc fcc4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7fc fcc1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f7fc fcbe 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f7fc fcbb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8004a62:	2002      	movs	r0, #2
 8004a64:	f7fc fcb8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7fc fcb5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8004a6e:	202a      	movs	r0, #42	@ 0x2a
 8004a70:	f7fc fcb2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a74:	2000      	movs	r0, #0
 8004a76:	f7fc fcaf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8004a7a:	203c      	movs	r0, #60	@ 0x3c
 8004a7c:	f7fc fcac 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a80:	2000      	movs	r0, #0
 8004a82:	f7fc fca9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8004a86:	204b      	movs	r0, #75	@ 0x4b
 8004a88:	f7fc fca6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f7fc fca3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8004a92:	205d      	movs	r0, #93	@ 0x5d
 8004a94:	f7fc fca0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a98:	2000      	movs	r0, #0
 8004a9a:	f7fc fc9d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004a9e:	2074      	movs	r0, #116	@ 0x74
 8004aa0:	f7fc fc9a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f7fc fc97 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8004aaa:	2084      	movs	r0, #132	@ 0x84
 8004aac:	f7fc fc94 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f7fc fc91 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8004ab6:	2093      	movs	r0, #147	@ 0x93
 8004ab8:	f7fc fc8e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004abc:	2000      	movs	r0, #0
 8004abe:	f7fc fc8b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004ac2:	20a2      	movs	r0, #162	@ 0xa2
 8004ac4:	f7fc fc88 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ac8:	2000      	movs	r0, #0
 8004aca:	f7fc fc85 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004ace:	20b3      	movs	r0, #179	@ 0xb3
 8004ad0:	f7fc fc82 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f7fc fc7f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8004ada:	20be      	movs	r0, #190	@ 0xbe
 8004adc:	f7fc fc7c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7fc fc79 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8004ae6:	20c4      	movs	r0, #196	@ 0xc4
 8004ae8:	f7fc fc76 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004aec:	2000      	movs	r0, #0
 8004aee:	f7fc fc73 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 8004af2:	20cd      	movs	r0, #205	@ 0xcd
 8004af4:	f7fc fc70 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004af8:	2000      	movs	r0, #0
 8004afa:	f7fc fc6d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004afe:	20d3      	movs	r0, #211	@ 0xd3
 8004b00:	f7fc fc6a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b04:	2000      	movs	r0, #0
 8004b06:	f7fc fc67 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8004b0a:	20dd      	movs	r0, #221	@ 0xdd
 8004b0c:	f7fc fc64 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b10:	2000      	movs	r0, #0
 8004b12:	f7fc fc61 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004b16:	20f3      	movs	r0, #243	@ 0xf3
 8004b18:	f7fc fc5e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f7fc fc5b 	bl	80013d8 <lcd_wr_xdata>
 8004b22:	23e5      	movs	r3, #229	@ 0xe5
 8004b24:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b28:	4b17      	ldr	r3, [pc, #92]	@ (8004b88 <lcd_init+0x2538>)
 8004b2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b30:	4b15      	ldr	r3, [pc, #84]	@ (8004b88 <lcd_init+0x2538>)
 8004b32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b38:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	4b13      	ldr	r3, [pc, #76]	@ (8004b8c <lcd_init+0x253c>)
 8004b40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b42:	4b11      	ldr	r3, [pc, #68]	@ (8004b88 <lcd_init+0x2538>)
 8004b44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b88 <lcd_init+0x2538>)
 8004b4c:	2280      	movs	r2, #128	@ 0x80
 8004b4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b50:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <lcd_init+0x2538>)
 8004b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b56:	611a      	str	r2, [r3, #16]
}
 8004b58:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f7fc fc3c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b60:	2000      	movs	r0, #0
 8004b62:	f7fc fc39 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b66:	2000      	movs	r0, #0
 8004b68:	f7fc fc36 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f7fc fc33 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8004b72:	2002      	movs	r0, #2
 8004b74:	f7fc fc30 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f7fc fc2d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004b7e:	2029      	movs	r0, #41	@ 0x29
 8004b80:	f7fc fc2a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b84:	2000      	movs	r0, #0
 8004b86:	e003      	b.n	8004b90 <lcd_init+0x2540>
 8004b88:	40011000 	.word	0x40011000
 8004b8c:	40010c00 	.word	0x40010c00
 8004b90:	f7fc fc22 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8004b94:	203c      	movs	r0, #60	@ 0x3c
 8004b96:	f7fc fc1f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f7fc fc1c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8004ba0:	204b      	movs	r0, #75	@ 0x4b
 8004ba2:	f7fc fc19 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fc fc16 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8004bac:	205d      	movs	r0, #93	@ 0x5d
 8004bae:	f7fc fc13 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7fc fc10 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004bb8:	2074      	movs	r0, #116	@ 0x74
 8004bba:	f7fc fc0d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7fc fc0a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8004bc4:	2084      	movs	r0, #132	@ 0x84
 8004bc6:	f7fc fc07 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f7fc fc04 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8004bd0:	2093      	movs	r0, #147	@ 0x93
 8004bd2:	f7fc fc01 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7fc fbfe 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004bdc:	20a2      	movs	r0, #162	@ 0xa2
 8004bde:	f7fc fbfb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004be2:	2000      	movs	r0, #0
 8004be4:	f7fc fbf8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004be8:	20b3      	movs	r0, #179	@ 0xb3
 8004bea:	f7fc fbf5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f7fc fbf2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8004bf4:	20be      	movs	r0, #190	@ 0xbe
 8004bf6:	f7fc fbef 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f7fc fbec 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8004c00:	20c4      	movs	r0, #196	@ 0xc4
 8004c02:	f7fc fbe9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c06:	2000      	movs	r0, #0
 8004c08:	f7fc fbe6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 8004c0c:	20cd      	movs	r0, #205	@ 0xcd
 8004c0e:	f7fc fbe3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c12:	2000      	movs	r0, #0
 8004c14:	f7fc fbe0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004c18:	20d3      	movs	r0, #211	@ 0xd3
 8004c1a:	f7fc fbdd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c1e:	2000      	movs	r0, #0
 8004c20:	f7fc fbda 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8004c24:	20dc      	movs	r0, #220	@ 0xdc
 8004c26:	f7fc fbd7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f7fc fbd4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004c30:	20f3      	movs	r0, #243	@ 0xf3
 8004c32:	f7fc fbd1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c36:	2000      	movs	r0, #0
 8004c38:	f7fc fbce 	bl	80013d8 <lcd_wr_xdata>
 8004c3c:	23e6      	movs	r3, #230	@ 0xe6
 8004c3e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c42:	4bde      	ldr	r3, [pc, #888]	@ (8004fbc <lcd_init+0x296c>)
 8004c44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c4a:	4bdc      	ldr	r3, [pc, #880]	@ (8004fbc <lcd_init+0x296c>)
 8004c4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c52:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	4bd9      	ldr	r3, [pc, #868]	@ (8004fc0 <lcd_init+0x2970>)
 8004c5a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c5c:	4bd7      	ldr	r3, [pc, #860]	@ (8004fbc <lcd_init+0x296c>)
 8004c5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c62:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c64:	4bd5      	ldr	r3, [pc, #852]	@ (8004fbc <lcd_init+0x296c>)
 8004c66:	2280      	movs	r2, #128	@ 0x80
 8004c68:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c6a:	4bd4      	ldr	r3, [pc, #848]	@ (8004fbc <lcd_init+0x296c>)
 8004c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c70:	611a      	str	r2, [r3, #16]
}
 8004c72:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 8004c74:	2011      	movs	r0, #17
 8004c76:	f7fc fbaf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f7fc fbac 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004c80:	2034      	movs	r0, #52	@ 0x34
 8004c82:	f7fc fba9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7fc fba6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004c8c:	2056      	movs	r0, #86	@ 0x56
 8004c8e:	f7fc fba3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f7fc fba0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8004c98:	2076      	movs	r0, #118	@ 0x76
 8004c9a:	f7fc fb9d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7fc fb9a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 8004ca4:	2077      	movs	r0, #119	@ 0x77
 8004ca6:	f7fc fb97 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004caa:	2000      	movs	r0, #0
 8004cac:	f7fc fb94 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004cb0:	2066      	movs	r0, #102	@ 0x66
 8004cb2:	f7fc fb91 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f7fc fb8e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004cbc:	2088      	movs	r0, #136	@ 0x88
 8004cbe:	f7fc fb8b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7fc fb88 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004cc8:	2099      	movs	r0, #153	@ 0x99
 8004cca:	f7fc fb85 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f7fc fb82 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004cd4:	20bb      	movs	r0, #187	@ 0xbb
 8004cd6:	f7fc fb7f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f7fc fb7c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004ce0:	2099      	movs	r0, #153	@ 0x99
 8004ce2:	f7fc fb79 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f7fc fb76 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004cec:	2066      	movs	r0, #102	@ 0x66
 8004cee:	f7fc fb73 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f7fc fb70 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004cf8:	2055      	movs	r0, #85	@ 0x55
 8004cfa:	f7fc fb6d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f7fc fb6a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004d04:	2055      	movs	r0, #85	@ 0x55
 8004d06:	f7fc fb67 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7fc fb64 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004d10:	2045      	movs	r0, #69	@ 0x45
 8004d12:	f7fc fb61 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f7fc fb5e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8004d1c:	2043      	movs	r0, #67	@ 0x43
 8004d1e:	f7fc fb5b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7fc fb58 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004d28:	2044      	movs	r0, #68	@ 0x44
 8004d2a:	f7fc fb55 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f7fc fb52 	bl	80013d8 <lcd_wr_xdata>
 8004d34:	23e7      	movs	r3, #231	@ 0xe7
 8004d36:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d3a:	4ba0      	ldr	r3, [pc, #640]	@ (8004fbc <lcd_init+0x296c>)
 8004d3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d40:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d42:	4b9e      	ldr	r3, [pc, #632]	@ (8004fbc <lcd_init+0x296c>)
 8004d44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d48:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d4a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	4b9b      	ldr	r3, [pc, #620]	@ (8004fc0 <lcd_init+0x2970>)
 8004d52:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d54:	4b99      	ldr	r3, [pc, #612]	@ (8004fbc <lcd_init+0x296c>)
 8004d56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d5a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d5c:	4b97      	ldr	r3, [pc, #604]	@ (8004fbc <lcd_init+0x296c>)
 8004d5e:	2280      	movs	r2, #128	@ 0x80
 8004d60:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d62:	4b96      	ldr	r3, [pc, #600]	@ (8004fbc <lcd_init+0x296c>)
 8004d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d68:	611a      	str	r2, [r3, #16]
}
 8004d6a:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 8004d6c:	2032      	movs	r0, #50	@ 0x32
 8004d6e:	f7fc fb33 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d72:	2000      	movs	r0, #0
 8004d74:	f7fc fb30 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004d78:	2055      	movs	r0, #85	@ 0x55
 8004d7a:	f7fc fb2d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f7fc fb2a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8004d84:	2076      	movs	r0, #118	@ 0x76
 8004d86:	f7fc fb27 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7fc fb24 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004d90:	2066      	movs	r0, #102	@ 0x66
 8004d92:	f7fc fb21 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d96:	2000      	movs	r0, #0
 8004d98:	f7fc fb1e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004d9c:	2067      	movs	r0, #103	@ 0x67
 8004d9e:	f7fc fb1b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004da2:	2000      	movs	r0, #0
 8004da4:	f7fc fb18 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004da8:	2067      	movs	r0, #103	@ 0x67
 8004daa:	f7fc fb15 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dae:	2000      	movs	r0, #0
 8004db0:	f7fc fb12 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 8004db4:	2087      	movs	r0, #135	@ 0x87
 8004db6:	f7fc fb0f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7fc fb0c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004dc0:	2099      	movs	r0, #153	@ 0x99
 8004dc2:	f7fc fb09 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	f7fc fb06 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004dcc:	20bb      	movs	r0, #187	@ 0xbb
 8004dce:	f7fc fb03 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f7fc fb00 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004dd8:	2099      	movs	r0, #153	@ 0x99
 8004dda:	f7fc fafd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dde:	2000      	movs	r0, #0
 8004de0:	f7fc fafa 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 8004de4:	2077      	movs	r0, #119	@ 0x77
 8004de6:	f7fc faf7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004dea:	2000      	movs	r0, #0
 8004dec:	f7fc faf4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004df0:	2044      	movs	r0, #68	@ 0x44
 8004df2:	f7fc faf1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004df6:	2000      	movs	r0, #0
 8004df8:	f7fc faee 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004dfc:	2056      	movs	r0, #86	@ 0x56
 8004dfe:	f7fc faeb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e02:	2000      	movs	r0, #0
 8004e04:	f7fc fae8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8004e08:	2023      	movs	r0, #35	@ 0x23
 8004e0a:	f7fc fae5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f7fc fae2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004e14:	2033      	movs	r0, #51	@ 0x33
 8004e16:	f7fc fadf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	f7fc fadc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004e20:	2045      	movs	r0, #69	@ 0x45
 8004e22:	f7fc fad9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e26:	2000      	movs	r0, #0
 8004e28:	f7fc fad6 	bl	80013d8 <lcd_wr_xdata>
 8004e2c:	23e8      	movs	r3, #232	@ 0xe8
 8004e2e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e32:	4b62      	ldr	r3, [pc, #392]	@ (8004fbc <lcd_init+0x296c>)
 8004e34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e38:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e3a:	4b60      	ldr	r3, [pc, #384]	@ (8004fbc <lcd_init+0x296c>)
 8004e3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e40:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	4b5d      	ldr	r3, [pc, #372]	@ (8004fc0 <lcd_init+0x2970>)
 8004e4a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e4c:	4b5b      	ldr	r3, [pc, #364]	@ (8004fbc <lcd_init+0x296c>)
 8004e4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e52:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e54:	4b59      	ldr	r3, [pc, #356]	@ (8004fbc <lcd_init+0x296c>)
 8004e56:	2280      	movs	r2, #128	@ 0x80
 8004e58:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e5a:	4b58      	ldr	r3, [pc, #352]	@ (8004fbc <lcd_init+0x296c>)
 8004e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e60:	611a      	str	r2, [r3, #16]
}
 8004e62:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 8004e64:	2000      	movs	r0, #0
 8004e66:	f7fc fab7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	f7fc fab4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004e70:	2099      	movs	r0, #153	@ 0x99
 8004e72:	f7fc fab1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7fc faae 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 8004e7c:	2087      	movs	r0, #135	@ 0x87
 8004e7e:	f7fc faab 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e82:	2000      	movs	r0, #0
 8004e84:	f7fc faa8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004e88:	2088      	movs	r0, #136	@ 0x88
 8004e8a:	f7fc faa5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f7fc faa2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 8004e94:	2077      	movs	r0, #119	@ 0x77
 8004e96:	f7fc fa9f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7fc fa9c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004ea0:	2066      	movs	r0, #102	@ 0x66
 8004ea2:	f7fc fa99 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f7fc fa96 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004eac:	2088      	movs	r0, #136	@ 0x88
 8004eae:	f7fc fa93 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f7fc fa90 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 8004eb8:	20aa      	movs	r0, #170	@ 0xaa
 8004eba:	f7fc fa8d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7fc fa8a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004ec4:	20bb      	movs	r0, #187	@ 0xbb
 8004ec6:	f7fc fa87 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f7fc fa84 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004ed0:	2099      	movs	r0, #153	@ 0x99
 8004ed2:	f7fc fa81 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7fc fa7e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004edc:	2066      	movs	r0, #102	@ 0x66
 8004ede:	f7fc fa7b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f7fc fa78 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004ee8:	2055      	movs	r0, #85	@ 0x55
 8004eea:	f7fc fa75 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f7fc fa72 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004ef4:	2055      	movs	r0, #85	@ 0x55
 8004ef6:	f7fc fa6f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004efa:	2000      	movs	r0, #0
 8004efc:	f7fc fa6c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004f00:	2044      	movs	r0, #68	@ 0x44
 8004f02:	f7fc fa69 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f06:	2000      	movs	r0, #0
 8004f08:	f7fc fa66 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004f0c:	2044      	movs	r0, #68	@ 0x44
 8004f0e:	f7fc fa63 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f12:	2000      	movs	r0, #0
 8004f14:	f7fc fa60 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004f18:	2055      	movs	r0, #85	@ 0x55
 8004f1a:	f7fc fa5d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f7fc fa5a 	bl	80013d8 <lcd_wr_xdata>
 8004f24:	23e9      	movs	r3, #233	@ 0xe9
 8004f26:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004f2a:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <lcd_init+0x296c>)
 8004f2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f30:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004f32:	4b22      	ldr	r3, [pc, #136]	@ (8004fbc <lcd_init+0x296c>)
 8004f34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f38:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004f3a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc0 <lcd_init+0x2970>)
 8004f42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004f44:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <lcd_init+0x296c>)
 8004f46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <lcd_init+0x296c>)
 8004f4e:	2280      	movs	r2, #128	@ 0x80
 8004f50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004f52:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <lcd_init+0x296c>)
 8004f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f58:	611a      	str	r2, [r3, #16]
}
 8004f5a:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 8004f5c:	20aa      	movs	r0, #170	@ 0xaa
 8004f5e:	f7fc fa3b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f62:	2000      	movs	r0, #0
 8004f64:	f7fc fa38 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f7fc fa35 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f7fc fa32 	bl	80013d8 <lcd_wr_xdata>
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004f7a:	4b10      	ldr	r3, [pc, #64]	@ (8004fbc <lcd_init+0x296c>)
 8004f7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f80:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004f82:	4b0e      	ldr	r3, [pc, #56]	@ (8004fbc <lcd_init+0x296c>)
 8004f84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f88:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004f8a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <lcd_init+0x2970>)
 8004f92:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004f94:	4b09      	ldr	r3, [pc, #36]	@ (8004fbc <lcd_init+0x296c>)
 8004f96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f9a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004f9c:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <lcd_init+0x296c>)
 8004f9e:	2280      	movs	r2, #128	@ 0x80
 8004fa0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <lcd_init+0x296c>)
 8004fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fa8:	611a      	str	r2, [r3, #16]
}
 8004faa:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 8004fac:	20aa      	movs	r0, #170	@ 0xaa
 8004fae:	f7fc fa13 	bl	80013d8 <lcd_wr_xdata>
 8004fb2:	23cf      	movs	r3, #207	@ 0xcf
 8004fb4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8004fb8:	e004      	b.n	8004fc4 <lcd_init+0x2974>
 8004fba:	bf00      	nop
 8004fbc:	40011000 	.word	0x40011000
 8004fc0:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004fc4:	4bbc      	ldr	r3, [pc, #752]	@ (80052b8 <lcd_init+0x2c68>)
 8004fc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004fcc:	4bba      	ldr	r3, [pc, #744]	@ (80052b8 <lcd_init+0x2c68>)
 8004fce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fd2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004fd4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	4bb8      	ldr	r3, [pc, #736]	@ (80052bc <lcd_init+0x2c6c>)
 8004fdc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004fde:	4bb6      	ldr	r3, [pc, #728]	@ (80052b8 <lcd_init+0x2c68>)
 8004fe0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004fe4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004fe6:	4bb4      	ldr	r3, [pc, #720]	@ (80052b8 <lcd_init+0x2c68>)
 8004fe8:	2280      	movs	r2, #128	@ 0x80
 8004fea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004fec:	4bb2      	ldr	r3, [pc, #712]	@ (80052b8 <lcd_init+0x2c68>)
 8004fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ff2:	611a      	str	r2, [r3, #16]
}
 8004ff4:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f7fc f9ee 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7fc f9eb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005002:	2000      	movs	r0, #0
 8005004:	f7fc f9e8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005008:	2000      	movs	r0, #0
 800500a:	f7fc f9e5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800500e:	2000      	movs	r0, #0
 8005010:	f7fc f9e2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005014:	2000      	movs	r0, #0
 8005016:	f7fc f9df 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800501a:	2000      	movs	r0, #0
 800501c:	f7fc f9dc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005020:	2000      	movs	r0, #0
 8005022:	f7fc f9d9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005026:	2000      	movs	r0, #0
 8005028:	f7fc f9d6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800502c:	2000      	movs	r0, #0
 800502e:	f7fc f9d3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005032:	2000      	movs	r0, #0
 8005034:	f7fc f9d0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005038:	2000      	movs	r0, #0
 800503a:	f7fc f9cd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800503e:	2000      	movs	r0, #0
 8005040:	f7fc f9ca 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005044:	2000      	movs	r0, #0
 8005046:	f7fc f9c7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800504a:	2000      	movs	r0, #0
 800504c:	f7fc f9c4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005050:	2000      	movs	r0, #0
 8005052:	f7fc f9c1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005056:	2000      	movs	r0, #0
 8005058:	f7fc f9be 	bl	80013d8 <lcd_wr_xdata>
 800505c:	23f0      	movs	r3, #240	@ 0xf0
 800505e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005062:	4b95      	ldr	r3, [pc, #596]	@ (80052b8 <lcd_init+0x2c68>)
 8005064:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005068:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800506a:	4b93      	ldr	r3, [pc, #588]	@ (80052b8 <lcd_init+0x2c68>)
 800506c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005070:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005072:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005076:	b29a      	uxth	r2, r3
 8005078:	4b90      	ldr	r3, [pc, #576]	@ (80052bc <lcd_init+0x2c6c>)
 800507a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800507c:	4b8e      	ldr	r3, [pc, #568]	@ (80052b8 <lcd_init+0x2c68>)
 800507e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005082:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005084:	4b8c      	ldr	r3, [pc, #560]	@ (80052b8 <lcd_init+0x2c68>)
 8005086:	2280      	movs	r2, #128	@ 0x80
 8005088:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800508a:	4b8b      	ldr	r3, [pc, #556]	@ (80052b8 <lcd_init+0x2c68>)
 800508c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005090:	611a      	str	r2, [r3, #16]
}
 8005092:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 8005094:	2000      	movs	r0, #0
 8005096:	f7fc f99f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 800509a:	2050      	movs	r0, #80	@ 0x50
 800509c:	f7fc f99c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80050a0:	2000      	movs	r0, #0
 80050a2:	f7fc f999 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80050a6:	2000      	movs	r0, #0
 80050a8:	f7fc f996 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80050ac:	2000      	movs	r0, #0
 80050ae:	f7fc f993 	bl	80013d8 <lcd_wr_xdata>
 80050b2:	23f3      	movs	r3, #243	@ 0xf3
 80050b4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80050b8:	4b7f      	ldr	r3, [pc, #508]	@ (80052b8 <lcd_init+0x2c68>)
 80050ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050be:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80050c0:	4b7d      	ldr	r3, [pc, #500]	@ (80052b8 <lcd_init+0x2c68>)
 80050c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050c6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80050c8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	4b7b      	ldr	r3, [pc, #492]	@ (80052bc <lcd_init+0x2c6c>)
 80050d0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80050d2:	4b79      	ldr	r3, [pc, #484]	@ (80052b8 <lcd_init+0x2c68>)
 80050d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80050d8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80050da:	4b77      	ldr	r3, [pc, #476]	@ (80052b8 <lcd_init+0x2c68>)
 80050dc:	2280      	movs	r2, #128	@ 0x80
 80050de:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80050e0:	4b75      	ldr	r3, [pc, #468]	@ (80052b8 <lcd_init+0x2c68>)
 80050e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050e6:	611a      	str	r2, [r3, #16]
}
 80050e8:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 80050ea:	2000      	movs	r0, #0
 80050ec:	f7fc f974 	bl	80013d8 <lcd_wr_xdata>
 80050f0:	23f9      	movs	r3, #249	@ 0xf9
 80050f2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80050f6:	4b70      	ldr	r3, [pc, #448]	@ (80052b8 <lcd_init+0x2c68>)
 80050f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050fc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80050fe:	4b6e      	ldr	r3, [pc, #440]	@ (80052b8 <lcd_init+0x2c68>)
 8005100:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005104:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005106:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800510a:	b29a      	uxth	r2, r3
 800510c:	4b6b      	ldr	r3, [pc, #428]	@ (80052bc <lcd_init+0x2c6c>)
 800510e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005110:	4b69      	ldr	r3, [pc, #420]	@ (80052b8 <lcd_init+0x2c68>)
 8005112:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005116:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005118:	4b67      	ldr	r3, [pc, #412]	@ (80052b8 <lcd_init+0x2c68>)
 800511a:	2280      	movs	r2, #128	@ 0x80
 800511c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800511e:	4b66      	ldr	r3, [pc, #408]	@ (80052b8 <lcd_init+0x2c68>)
 8005120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005124:	611a      	str	r2, [r3, #16]
}
 8005126:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 8005128:	2006      	movs	r0, #6
 800512a:	f7fc f955 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 800512e:	2010      	movs	r0, #16
 8005130:	f7fc f952 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8005134:	2029      	movs	r0, #41	@ 0x29
 8005136:	f7fc f94f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800513a:	2000      	movs	r0, #0
 800513c:	f7fc f94c 	bl	80013d8 <lcd_wr_xdata>
 8005140:	233a      	movs	r3, #58	@ 0x3a
 8005142:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005146:	4b5c      	ldr	r3, [pc, #368]	@ (80052b8 <lcd_init+0x2c68>)
 8005148:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800514c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800514e:	4b5a      	ldr	r3, [pc, #360]	@ (80052b8 <lcd_init+0x2c68>)
 8005150:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005154:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005156:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800515a:	b29a      	uxth	r2, r3
 800515c:	4b57      	ldr	r3, [pc, #348]	@ (80052bc <lcd_init+0x2c6c>)
 800515e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005160:	4b55      	ldr	r3, [pc, #340]	@ (80052b8 <lcd_init+0x2c68>)
 8005162:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005166:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005168:	4b53      	ldr	r3, [pc, #332]	@ (80052b8 <lcd_init+0x2c68>)
 800516a:	2280      	movs	r2, #128	@ 0x80
 800516c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800516e:	4b52      	ldr	r3, [pc, #328]	@ (80052b8 <lcd_init+0x2c68>)
 8005170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005174:	611a      	str	r2, [r3, #16]
}
 8005176:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 8005178:	2055      	movs	r0, #85	@ 0x55
 800517a:	f7fc f92d 	bl	80013d8 <lcd_wr_xdata>
 800517e:	2311      	movs	r3, #17
 8005180:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005184:	4b4c      	ldr	r3, [pc, #304]	@ (80052b8 <lcd_init+0x2c68>)
 8005186:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800518a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800518c:	4b4a      	ldr	r3, [pc, #296]	@ (80052b8 <lcd_init+0x2c68>)
 800518e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005192:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005194:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005198:	b29a      	uxth	r2, r3
 800519a:	4b48      	ldr	r3, [pc, #288]	@ (80052bc <lcd_init+0x2c6c>)
 800519c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800519e:	4b46      	ldr	r3, [pc, #280]	@ (80052b8 <lcd_init+0x2c68>)
 80051a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80051a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80051a6:	4b44      	ldr	r3, [pc, #272]	@ (80052b8 <lcd_init+0x2c68>)
 80051a8:	2280      	movs	r2, #128	@ 0x80
 80051aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80051ac:	4b42      	ldr	r3, [pc, #264]	@ (80052b8 <lcd_init+0x2c68>)
 80051ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051b2:	611a      	str	r2, [r3, #16]
}
 80051b4:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 80051b6:	2064      	movs	r0, #100	@ 0x64
 80051b8:	f002 fef4 	bl	8007fa4 <HAL_Delay>
 80051bc:	2329      	movs	r3, #41	@ 0x29
 80051be:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80051c2:	4b3d      	ldr	r3, [pc, #244]	@ (80052b8 <lcd_init+0x2c68>)
 80051c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80051ca:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <lcd_init+0x2c68>)
 80051cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80051d2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	4b38      	ldr	r3, [pc, #224]	@ (80052bc <lcd_init+0x2c6c>)
 80051da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80051dc:	4b36      	ldr	r3, [pc, #216]	@ (80052b8 <lcd_init+0x2c68>)
 80051de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80051e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80051e4:	4b34      	ldr	r3, [pc, #208]	@ (80052b8 <lcd_init+0x2c68>)
 80051e6:	2280      	movs	r2, #128	@ 0x80
 80051e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80051ea:	4b33      	ldr	r3, [pc, #204]	@ (80052b8 <lcd_init+0x2c68>)
 80051ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051f0:	611a      	str	r2, [r3, #16]
}
 80051f2:	bf00      	nop
 80051f4:	2335      	movs	r3, #53	@ 0x35
 80051f6:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80051fa:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <lcd_init+0x2c68>)
 80051fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005200:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005202:	4b2d      	ldr	r3, [pc, #180]	@ (80052b8 <lcd_init+0x2c68>)
 8005204:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005208:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800520a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800520e:	b29a      	uxth	r2, r3
 8005210:	4b2a      	ldr	r3, [pc, #168]	@ (80052bc <lcd_init+0x2c6c>)
 8005212:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005214:	4b28      	ldr	r3, [pc, #160]	@ (80052b8 <lcd_init+0x2c68>)
 8005216:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800521a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800521c:	4b26      	ldr	r3, [pc, #152]	@ (80052b8 <lcd_init+0x2c68>)
 800521e:	2280      	movs	r2, #128	@ 0x80
 8005220:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005222:	4b25      	ldr	r3, [pc, #148]	@ (80052b8 <lcd_init+0x2c68>)
 8005224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005228:	611a      	str	r2, [r3, #16]
}
 800522a:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 800522c:	2000      	movs	r0, #0
 800522e:	f7fc f8d3 	bl	80013d8 <lcd_wr_xdata>
 8005232:	2351      	movs	r3, #81	@ 0x51
 8005234:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005238:	4b1f      	ldr	r3, [pc, #124]	@ (80052b8 <lcd_init+0x2c68>)
 800523a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800523e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <lcd_init+0x2c68>)
 8005242:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005246:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005248:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800524c:	b29a      	uxth	r2, r3
 800524e:	4b1b      	ldr	r3, [pc, #108]	@ (80052bc <lcd_init+0x2c6c>)
 8005250:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005252:	4b19      	ldr	r3, [pc, #100]	@ (80052b8 <lcd_init+0x2c68>)
 8005254:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005258:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800525a:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <lcd_init+0x2c68>)
 800525c:	2280      	movs	r2, #128	@ 0x80
 800525e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005260:	4b15      	ldr	r3, [pc, #84]	@ (80052b8 <lcd_init+0x2c68>)
 8005262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005266:	611a      	str	r2, [r3, #16]
}
 8005268:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 800526a:	20ff      	movs	r0, #255	@ 0xff
 800526c:	f7fc f8b4 	bl	80013d8 <lcd_wr_xdata>
 8005270:	2353      	movs	r3, #83	@ 0x53
 8005272:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005276:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <lcd_init+0x2c68>)
 8005278:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800527c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800527e:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <lcd_init+0x2c68>)
 8005280:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005284:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005286:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800528a:	b29a      	uxth	r2, r3
 800528c:	4b0b      	ldr	r3, [pc, #44]	@ (80052bc <lcd_init+0x2c6c>)
 800528e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005290:	4b09      	ldr	r3, [pc, #36]	@ (80052b8 <lcd_init+0x2c68>)
 8005292:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005296:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005298:	4b07      	ldr	r3, [pc, #28]	@ (80052b8 <lcd_init+0x2c68>)
 800529a:	2280      	movs	r2, #128	@ 0x80
 800529c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <lcd_init+0x2c68>)
 80052a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052a4:	611a      	str	r2, [r3, #16]
}
 80052a6:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 80052a8:	202c      	movs	r0, #44	@ 0x2c
 80052aa:	f7fc f895 	bl	80013d8 <lcd_wr_xdata>
 80052ae:	2355      	movs	r3, #85	@ 0x55
 80052b0:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 80052b4:	e004      	b.n	80052c0 <lcd_init+0x2c70>
 80052b6:	bf00      	nop
 80052b8:	40011000 	.word	0x40011000
 80052bc:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80052c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005334 <lcd_init+0x2ce4>)
 80052c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052c6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80052c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005334 <lcd_init+0x2ce4>)
 80052ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052ce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80052d0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	4b18      	ldr	r3, [pc, #96]	@ (8005338 <lcd_init+0x2ce8>)
 80052d8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80052da:	4b16      	ldr	r3, [pc, #88]	@ (8005334 <lcd_init+0x2ce4>)
 80052dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80052e0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80052e2:	4b14      	ldr	r3, [pc, #80]	@ (8005334 <lcd_init+0x2ce4>)
 80052e4:	2280      	movs	r2, #128	@ 0x80
 80052e6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80052e8:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <lcd_init+0x2ce4>)
 80052ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ee:	611a      	str	r2, [r3, #16]
}
 80052f0:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 80052f2:	2082      	movs	r0, #130	@ 0x82
 80052f4:	f7fc f870 	bl	80013d8 <lcd_wr_xdata>
 80052f8:	232c      	movs	r3, #44	@ 0x2c
 80052fa:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80052fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <lcd_init+0x2ce4>)
 8005300:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005304:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005306:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <lcd_init+0x2ce4>)
 8005308:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800530c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800530e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8005312:	b29a      	uxth	r2, r3
 8005314:	4b08      	ldr	r3, [pc, #32]	@ (8005338 <lcd_init+0x2ce8>)
 8005316:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005318:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <lcd_init+0x2ce4>)
 800531a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800531e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005320:	4b04      	ldr	r3, [pc, #16]	@ (8005334 <lcd_init+0x2ce4>)
 8005322:	2280      	movs	r2, #128	@ 0x80
 8005324:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005326:	4b03      	ldr	r3, [pc, #12]	@ (8005334 <lcd_init+0x2ce4>)
 8005328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800532c:	611a      	str	r2, [r3, #16]
}
 800532e:	f002 b8d8 	b.w	80074e2 <lcd_init+0x4e92>
 8005332:	bf00      	nop
 8005334:	40011000 	.word	0x40011000
 8005338:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 800533c:	4bb4      	ldr	r3, [pc, #720]	@ (8005610 <lcd_init+0x2fc0>)
 800533e:	889b      	ldrh	r3, [r3, #4]
 8005340:	f247 7296 	movw	r2, #30614	@ 0x7796
 8005344:	4293      	cmp	r3, r2
 8005346:	f040 82e3 	bne.w	8005910 <lcd_init+0x32c0>
 800534a:	2311      	movs	r3, #17
 800534c:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005350:	4bb0      	ldr	r3, [pc, #704]	@ (8005614 <lcd_init+0x2fc4>)
 8005352:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005356:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005358:	4bae      	ldr	r3, [pc, #696]	@ (8005614 <lcd_init+0x2fc4>)
 800535a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800535e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005360:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8005364:	b29a      	uxth	r2, r3
 8005366:	4bac      	ldr	r3, [pc, #688]	@ (8005618 <lcd_init+0x2fc8>)
 8005368:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800536a:	4baa      	ldr	r3, [pc, #680]	@ (8005614 <lcd_init+0x2fc4>)
 800536c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005370:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005372:	4ba8      	ldr	r3, [pc, #672]	@ (8005614 <lcd_init+0x2fc4>)
 8005374:	2280      	movs	r2, #128	@ 0x80
 8005376:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005378:	4ba6      	ldr	r3, [pc, #664]	@ (8005614 <lcd_init+0x2fc4>)
 800537a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800537e:	611a      	str	r2, [r3, #16]
}
 8005380:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 8005382:	2078      	movs	r0, #120	@ 0x78
 8005384:	f002 fe0e 	bl	8007fa4 <HAL_Delay>
 8005388:	2336      	movs	r3, #54	@ 0x36
 800538a:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800538e:	4ba1      	ldr	r3, [pc, #644]	@ (8005614 <lcd_init+0x2fc4>)
 8005390:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005394:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005396:	4b9f      	ldr	r3, [pc, #636]	@ (8005614 <lcd_init+0x2fc4>)
 8005398:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800539c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800539e:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	4b9c      	ldr	r3, [pc, #624]	@ (8005618 <lcd_init+0x2fc8>)
 80053a6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80053a8:	4b9a      	ldr	r3, [pc, #616]	@ (8005614 <lcd_init+0x2fc4>)
 80053aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80053ae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80053b0:	4b98      	ldr	r3, [pc, #608]	@ (8005614 <lcd_init+0x2fc4>)
 80053b2:	2280      	movs	r2, #128	@ 0x80
 80053b4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80053b6:	4b97      	ldr	r3, [pc, #604]	@ (8005614 <lcd_init+0x2fc4>)
 80053b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053bc:	611a      	str	r2, [r3, #16]
}
 80053be:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 80053c0:	2048      	movs	r0, #72	@ 0x48
 80053c2:	f7fc f809 	bl	80013d8 <lcd_wr_xdata>
 80053c6:	233a      	movs	r3, #58	@ 0x3a
 80053c8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80053cc:	4b91      	ldr	r3, [pc, #580]	@ (8005614 <lcd_init+0x2fc4>)
 80053ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053d2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80053d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005614 <lcd_init+0x2fc4>)
 80053d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053da:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80053dc:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005618 <lcd_init+0x2fc8>)
 80053e4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80053e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005614 <lcd_init+0x2fc4>)
 80053e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80053ec:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80053ee:	4b89      	ldr	r3, [pc, #548]	@ (8005614 <lcd_init+0x2fc4>)
 80053f0:	2280      	movs	r2, #128	@ 0x80
 80053f2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80053f4:	4b87      	ldr	r3, [pc, #540]	@ (8005614 <lcd_init+0x2fc4>)
 80053f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053fa:	611a      	str	r2, [r3, #16]
}
 80053fc:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 80053fe:	2055      	movs	r0, #85	@ 0x55
 8005400:	f7fb ffea 	bl	80013d8 <lcd_wr_xdata>
 8005404:	23f0      	movs	r3, #240	@ 0xf0
 8005406:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800540a:	4b82      	ldr	r3, [pc, #520]	@ (8005614 <lcd_init+0x2fc4>)
 800540c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005410:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005412:	4b80      	ldr	r3, [pc, #512]	@ (8005614 <lcd_init+0x2fc4>)
 8005414:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005418:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800541a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800541e:	b29a      	uxth	r2, r3
 8005420:	4b7d      	ldr	r3, [pc, #500]	@ (8005618 <lcd_init+0x2fc8>)
 8005422:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005424:	4b7b      	ldr	r3, [pc, #492]	@ (8005614 <lcd_init+0x2fc4>)
 8005426:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800542a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800542c:	4b79      	ldr	r3, [pc, #484]	@ (8005614 <lcd_init+0x2fc4>)
 800542e:	2280      	movs	r2, #128	@ 0x80
 8005430:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005432:	4b78      	ldr	r3, [pc, #480]	@ (8005614 <lcd_init+0x2fc4>)
 8005434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005438:	611a      	str	r2, [r3, #16]
}
 800543a:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 800543c:	20c3      	movs	r0, #195	@ 0xc3
 800543e:	f7fb ffcb 	bl	80013d8 <lcd_wr_xdata>
 8005442:	23f0      	movs	r3, #240	@ 0xf0
 8005444:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005448:	4b72      	ldr	r3, [pc, #456]	@ (8005614 <lcd_init+0x2fc4>)
 800544a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800544e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005450:	4b70      	ldr	r3, [pc, #448]	@ (8005614 <lcd_init+0x2fc4>)
 8005452:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005456:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005458:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 800545c:	b29a      	uxth	r2, r3
 800545e:	4b6e      	ldr	r3, [pc, #440]	@ (8005618 <lcd_init+0x2fc8>)
 8005460:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005462:	4b6c      	ldr	r3, [pc, #432]	@ (8005614 <lcd_init+0x2fc4>)
 8005464:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005468:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800546a:	4b6a      	ldr	r3, [pc, #424]	@ (8005614 <lcd_init+0x2fc4>)
 800546c:	2280      	movs	r2, #128	@ 0x80
 800546e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005470:	4b68      	ldr	r3, [pc, #416]	@ (8005614 <lcd_init+0x2fc4>)
 8005472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005476:	611a      	str	r2, [r3, #16]
}
 8005478:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 800547a:	2096      	movs	r0, #150	@ 0x96
 800547c:	f7fb ffac 	bl	80013d8 <lcd_wr_xdata>
 8005480:	23b4      	movs	r3, #180	@ 0xb4
 8005482:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005486:	4b63      	ldr	r3, [pc, #396]	@ (8005614 <lcd_init+0x2fc4>)
 8005488:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800548c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800548e:	4b61      	ldr	r3, [pc, #388]	@ (8005614 <lcd_init+0x2fc4>)
 8005490:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005494:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005496:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 800549a:	b29a      	uxth	r2, r3
 800549c:	4b5e      	ldr	r3, [pc, #376]	@ (8005618 <lcd_init+0x2fc8>)
 800549e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80054a0:	4b5c      	ldr	r3, [pc, #368]	@ (8005614 <lcd_init+0x2fc4>)
 80054a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80054a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80054a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005614 <lcd_init+0x2fc4>)
 80054aa:	2280      	movs	r2, #128	@ 0x80
 80054ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80054ae:	4b59      	ldr	r3, [pc, #356]	@ (8005614 <lcd_init+0x2fc4>)
 80054b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054b4:	611a      	str	r2, [r3, #16]
}
 80054b6:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7fb ff8d 	bl	80013d8 <lcd_wr_xdata>
 80054be:	23b6      	movs	r3, #182	@ 0xb6
 80054c0:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80054c4:	4b53      	ldr	r3, [pc, #332]	@ (8005614 <lcd_init+0x2fc4>)
 80054c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054ca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80054cc:	4b51      	ldr	r3, [pc, #324]	@ (8005614 <lcd_init+0x2fc4>)
 80054ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80054d2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80054d4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 80054d8:	b29a      	uxth	r2, r3
 80054da:	4b4f      	ldr	r3, [pc, #316]	@ (8005618 <lcd_init+0x2fc8>)
 80054dc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80054de:	4b4d      	ldr	r3, [pc, #308]	@ (8005614 <lcd_init+0x2fc4>)
 80054e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80054e4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80054e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005614 <lcd_init+0x2fc4>)
 80054e8:	2280      	movs	r2, #128	@ 0x80
 80054ea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80054ec:	4b49      	ldr	r3, [pc, #292]	@ (8005614 <lcd_init+0x2fc4>)
 80054ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054f2:	611a      	str	r2, [r3, #16]
}
 80054f4:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 80054f6:	200a      	movs	r0, #10
 80054f8:	f7fb ff6e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 80054fc:	20a2      	movs	r0, #162	@ 0xa2
 80054fe:	f7fb ff6b 	bl	80013d8 <lcd_wr_xdata>
 8005502:	23b7      	movs	r3, #183	@ 0xb7
 8005504:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005508:	4b42      	ldr	r3, [pc, #264]	@ (8005614 <lcd_init+0x2fc4>)
 800550a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800550e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005510:	4b40      	ldr	r3, [pc, #256]	@ (8005614 <lcd_init+0x2fc4>)
 8005512:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005516:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005518:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 800551c:	b29a      	uxth	r2, r3
 800551e:	4b3e      	ldr	r3, [pc, #248]	@ (8005618 <lcd_init+0x2fc8>)
 8005520:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005522:	4b3c      	ldr	r3, [pc, #240]	@ (8005614 <lcd_init+0x2fc4>)
 8005524:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005528:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800552a:	4b3a      	ldr	r3, [pc, #232]	@ (8005614 <lcd_init+0x2fc4>)
 800552c:	2280      	movs	r2, #128	@ 0x80
 800552e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005530:	4b38      	ldr	r3, [pc, #224]	@ (8005614 <lcd_init+0x2fc4>)
 8005532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005536:	611a      	str	r2, [r3, #16]
}
 8005538:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 800553a:	20c6      	movs	r0, #198	@ 0xc6
 800553c:	f7fb ff4c 	bl	80013d8 <lcd_wr_xdata>
 8005540:	23b9      	movs	r3, #185	@ 0xb9
 8005542:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005546:	4b33      	ldr	r3, [pc, #204]	@ (8005614 <lcd_init+0x2fc4>)
 8005548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800554c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800554e:	4b31      	ldr	r3, [pc, #196]	@ (8005614 <lcd_init+0x2fc4>)
 8005550:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005554:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005556:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 800555a:	b29a      	uxth	r2, r3
 800555c:	4b2e      	ldr	r3, [pc, #184]	@ (8005618 <lcd_init+0x2fc8>)
 800555e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005560:	4b2c      	ldr	r3, [pc, #176]	@ (8005614 <lcd_init+0x2fc4>)
 8005562:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005566:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005568:	4b2a      	ldr	r3, [pc, #168]	@ (8005614 <lcd_init+0x2fc4>)
 800556a:	2280      	movs	r2, #128	@ 0x80
 800556c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800556e:	4b29      	ldr	r3, [pc, #164]	@ (8005614 <lcd_init+0x2fc4>)
 8005570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005574:	611a      	str	r2, [r3, #16]
}
 8005576:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8005578:	2002      	movs	r0, #2
 800557a:	f7fb ff2d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 800557e:	20e0      	movs	r0, #224	@ 0xe0
 8005580:	f7fb ff2a 	bl	80013d8 <lcd_wr_xdata>
 8005584:	23c0      	movs	r3, #192	@ 0xc0
 8005586:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800558a:	4b22      	ldr	r3, [pc, #136]	@ (8005614 <lcd_init+0x2fc4>)
 800558c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005590:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005592:	4b20      	ldr	r3, [pc, #128]	@ (8005614 <lcd_init+0x2fc4>)
 8005594:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005598:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800559a:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 800559e:	b29a      	uxth	r2, r3
 80055a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005618 <lcd_init+0x2fc8>)
 80055a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80055a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005614 <lcd_init+0x2fc4>)
 80055a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80055aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80055ac:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <lcd_init+0x2fc4>)
 80055ae:	2280      	movs	r2, #128	@ 0x80
 80055b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80055b2:	4b18      	ldr	r3, [pc, #96]	@ (8005614 <lcd_init+0x2fc4>)
 80055b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055b8:	611a      	str	r2, [r3, #16]
}
 80055ba:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 80055bc:	2080      	movs	r0, #128	@ 0x80
 80055be:	f7fb ff0b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 80055c2:	2016      	movs	r0, #22
 80055c4:	f7fb ff08 	bl	80013d8 <lcd_wr_xdata>
 80055c8:	23c1      	movs	r3, #193	@ 0xc1
 80055ca:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80055ce:	4b11      	ldr	r3, [pc, #68]	@ (8005614 <lcd_init+0x2fc4>)
 80055d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055d4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80055d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005614 <lcd_init+0x2fc4>)
 80055d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055dc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80055de:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005618 <lcd_init+0x2fc8>)
 80055e6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80055e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005614 <lcd_init+0x2fc4>)
 80055ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80055ee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80055f0:	4b08      	ldr	r3, [pc, #32]	@ (8005614 <lcd_init+0x2fc4>)
 80055f2:	2280      	movs	r2, #128	@ 0x80
 80055f4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80055f6:	4b07      	ldr	r3, [pc, #28]	@ (8005614 <lcd_init+0x2fc4>)
 80055f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055fc:	611a      	str	r2, [r3, #16]
}
 80055fe:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 8005600:	2019      	movs	r0, #25
 8005602:	f7fb fee9 	bl	80013d8 <lcd_wr_xdata>
 8005606:	23c2      	movs	r3, #194	@ 0xc2
 8005608:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
 800560c:	e006      	b.n	800561c <lcd_init+0x2fcc>
 800560e:	bf00      	nop
 8005610:	20000038 	.word	0x20000038
 8005614:	40011000 	.word	0x40011000
 8005618:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800561c:	4bba      	ldr	r3, [pc, #744]	@ (8005908 <lcd_init+0x32b8>)
 800561e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005622:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005624:	4bb8      	ldr	r3, [pc, #736]	@ (8005908 <lcd_init+0x32b8>)
 8005626:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800562a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800562c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8005630:	b29a      	uxth	r2, r3
 8005632:	4bb6      	ldr	r3, [pc, #728]	@ (800590c <lcd_init+0x32bc>)
 8005634:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005636:	4bb4      	ldr	r3, [pc, #720]	@ (8005908 <lcd_init+0x32b8>)
 8005638:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800563c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800563e:	4bb2      	ldr	r3, [pc, #712]	@ (8005908 <lcd_init+0x32b8>)
 8005640:	2280      	movs	r2, #128	@ 0x80
 8005642:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005644:	4bb0      	ldr	r3, [pc, #704]	@ (8005908 <lcd_init+0x32b8>)
 8005646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800564a:	611a      	str	r2, [r3, #16]
}
 800564c:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 800564e:	20a7      	movs	r0, #167	@ 0xa7
 8005650:	f7fb fec2 	bl	80013d8 <lcd_wr_xdata>
 8005654:	23c5      	movs	r3, #197	@ 0xc5
 8005656:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800565a:	4bab      	ldr	r3, [pc, #684]	@ (8005908 <lcd_init+0x32b8>)
 800565c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005660:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005662:	4ba9      	ldr	r3, [pc, #676]	@ (8005908 <lcd_init+0x32b8>)
 8005664:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005668:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800566a:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 800566e:	b29a      	uxth	r2, r3
 8005670:	4ba6      	ldr	r3, [pc, #664]	@ (800590c <lcd_init+0x32bc>)
 8005672:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005674:	4ba4      	ldr	r3, [pc, #656]	@ (8005908 <lcd_init+0x32b8>)
 8005676:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800567a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800567c:	4ba2      	ldr	r3, [pc, #648]	@ (8005908 <lcd_init+0x32b8>)
 800567e:	2280      	movs	r2, #128	@ 0x80
 8005680:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005682:	4ba1      	ldr	r3, [pc, #644]	@ (8005908 <lcd_init+0x32b8>)
 8005684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005688:	611a      	str	r2, [r3, #16]
}
 800568a:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 800568c:	2016      	movs	r0, #22
 800568e:	f7fb fea3 	bl	80013d8 <lcd_wr_xdata>
 8005692:	23e8      	movs	r3, #232	@ 0xe8
 8005694:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005698:	4b9b      	ldr	r3, [pc, #620]	@ (8005908 <lcd_init+0x32b8>)
 800569a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800569e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80056a0:	4b99      	ldr	r3, [pc, #612]	@ (8005908 <lcd_init+0x32b8>)
 80056a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80056a6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80056a8:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	4b97      	ldr	r3, [pc, #604]	@ (800590c <lcd_init+0x32bc>)
 80056b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80056b2:	4b95      	ldr	r3, [pc, #596]	@ (8005908 <lcd_init+0x32b8>)
 80056b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80056b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80056ba:	4b93      	ldr	r3, [pc, #588]	@ (8005908 <lcd_init+0x32b8>)
 80056bc:	2280      	movs	r2, #128	@ 0x80
 80056be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80056c0:	4b91      	ldr	r3, [pc, #580]	@ (8005908 <lcd_init+0x32b8>)
 80056c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056c6:	611a      	str	r2, [r3, #16]
}
 80056c8:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 80056ca:	2040      	movs	r0, #64	@ 0x40
 80056cc:	f7fb fe84 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 80056d0:	208a      	movs	r0, #138	@ 0x8a
 80056d2:	f7fb fe81 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80056d6:	2000      	movs	r0, #0
 80056d8:	f7fb fe7e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80056dc:	2000      	movs	r0, #0
 80056de:	f7fb fe7b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80056e2:	2029      	movs	r0, #41	@ 0x29
 80056e4:	f7fb fe78 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 80056e8:	2019      	movs	r0, #25
 80056ea:	f7fb fe75 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 80056ee:	20a5      	movs	r0, #165	@ 0xa5
 80056f0:	f7fb fe72 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 80056f4:	2033      	movs	r0, #51	@ 0x33
 80056f6:	f7fb fe6f 	bl	80013d8 <lcd_wr_xdata>
 80056fa:	23e0      	movs	r3, #224	@ 0xe0
 80056fc:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005700:	4b81      	ldr	r3, [pc, #516]	@ (8005908 <lcd_init+0x32b8>)
 8005702:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005706:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005708:	4b7f      	ldr	r3, [pc, #508]	@ (8005908 <lcd_init+0x32b8>)
 800570a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800570e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005710:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8005714:	b29a      	uxth	r2, r3
 8005716:	4b7d      	ldr	r3, [pc, #500]	@ (800590c <lcd_init+0x32bc>)
 8005718:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800571a:	4b7b      	ldr	r3, [pc, #492]	@ (8005908 <lcd_init+0x32b8>)
 800571c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005720:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005722:	4b79      	ldr	r3, [pc, #484]	@ (8005908 <lcd_init+0x32b8>)
 8005724:	2280      	movs	r2, #128	@ 0x80
 8005726:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005728:	4b77      	ldr	r3, [pc, #476]	@ (8005908 <lcd_init+0x32b8>)
 800572a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800572e:	611a      	str	r2, [r3, #16]
}
 8005730:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 8005732:	20f0      	movs	r0, #240	@ 0xf0
 8005734:	f7fb fe50 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8005738:	2007      	movs	r0, #7
 800573a:	f7fb fe4d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 800573e:	200d      	movs	r0, #13
 8005740:	f7fb fe4a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8005744:	2004      	movs	r0, #4
 8005746:	f7fb fe47 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 800574a:	2005      	movs	r0, #5
 800574c:	f7fb fe44 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8005750:	2014      	movs	r0, #20
 8005752:	f7fb fe41 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8005756:	2036      	movs	r0, #54	@ 0x36
 8005758:	f7fb fe3e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 800575c:	2054      	movs	r0, #84	@ 0x54
 800575e:	f7fb fe3b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8005762:	204c      	movs	r0, #76	@ 0x4c
 8005764:	f7fb fe38 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8005768:	2038      	movs	r0, #56	@ 0x38
 800576a:	f7fb fe35 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 800576e:	2013      	movs	r0, #19
 8005770:	f7fb fe32 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8005774:	2014      	movs	r0, #20
 8005776:	f7fb fe2f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 800577a:	202e      	movs	r0, #46	@ 0x2e
 800577c:	f7fb fe2c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8005780:	2034      	movs	r0, #52	@ 0x34
 8005782:	f7fb fe29 	bl	80013d8 <lcd_wr_xdata>
 8005786:	23e1      	movs	r3, #225	@ 0xe1
 8005788:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800578c:	4b5e      	ldr	r3, [pc, #376]	@ (8005908 <lcd_init+0x32b8>)
 800578e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005792:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005794:	4b5c      	ldr	r3, [pc, #368]	@ (8005908 <lcd_init+0x32b8>)
 8005796:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800579a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800579c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	4b5a      	ldr	r3, [pc, #360]	@ (800590c <lcd_init+0x32bc>)
 80057a4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80057a6:	4b58      	ldr	r3, [pc, #352]	@ (8005908 <lcd_init+0x32b8>)
 80057a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80057ac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80057ae:	4b56      	ldr	r3, [pc, #344]	@ (8005908 <lcd_init+0x32b8>)
 80057b0:	2280      	movs	r2, #128	@ 0x80
 80057b2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80057b4:	4b54      	ldr	r3, [pc, #336]	@ (8005908 <lcd_init+0x32b8>)
 80057b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057ba:	611a      	str	r2, [r3, #16]
}
 80057bc:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 80057be:	20f0      	movs	r0, #240	@ 0xf0
 80057c0:	f7fb fe0a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80057c4:	2010      	movs	r0, #16
 80057c6:	f7fb fe07 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 80057ca:	2014      	movs	r0, #20
 80057cc:	f7fb fe04 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 80057d0:	200e      	movs	r0, #14
 80057d2:	f7fb fe01 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 80057d6:	200c      	movs	r0, #12
 80057d8:	f7fb fdfe 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 80057dc:	2008      	movs	r0, #8
 80057de:	f7fb fdfb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 80057e2:	2035      	movs	r0, #53	@ 0x35
 80057e4:	f7fb fdf8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80057e8:	2044      	movs	r0, #68	@ 0x44
 80057ea:	f7fb fdf5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 80057ee:	204c      	movs	r0, #76	@ 0x4c
 80057f0:	f7fb fdf2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80057f4:	2026      	movs	r0, #38	@ 0x26
 80057f6:	f7fb fdef 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80057fa:	2010      	movs	r0, #16
 80057fc:	f7fb fdec 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8005800:	2012      	movs	r0, #18
 8005802:	f7fb fde9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8005806:	202c      	movs	r0, #44	@ 0x2c
 8005808:	f7fb fde6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 800580c:	2032      	movs	r0, #50	@ 0x32
 800580e:	f7fb fde3 	bl	80013d8 <lcd_wr_xdata>
 8005812:	23f0      	movs	r3, #240	@ 0xf0
 8005814:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005818:	4b3b      	ldr	r3, [pc, #236]	@ (8005908 <lcd_init+0x32b8>)
 800581a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800581e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005820:	4b39      	ldr	r3, [pc, #228]	@ (8005908 <lcd_init+0x32b8>)
 8005822:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005826:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005828:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 800582c:	b29a      	uxth	r2, r3
 800582e:	4b37      	ldr	r3, [pc, #220]	@ (800590c <lcd_init+0x32bc>)
 8005830:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005832:	4b35      	ldr	r3, [pc, #212]	@ (8005908 <lcd_init+0x32b8>)
 8005834:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005838:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800583a:	4b33      	ldr	r3, [pc, #204]	@ (8005908 <lcd_init+0x32b8>)
 800583c:	2280      	movs	r2, #128	@ 0x80
 800583e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005840:	4b31      	ldr	r3, [pc, #196]	@ (8005908 <lcd_init+0x32b8>)
 8005842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005846:	611a      	str	r2, [r3, #16]
}
 8005848:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 800584a:	203c      	movs	r0, #60	@ 0x3c
 800584c:	f7fb fdc4 	bl	80013d8 <lcd_wr_xdata>
 8005850:	23f0      	movs	r3, #240	@ 0xf0
 8005852:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005856:	4b2c      	ldr	r3, [pc, #176]	@ (8005908 <lcd_init+0x32b8>)
 8005858:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800585c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800585e:	4b2a      	ldr	r3, [pc, #168]	@ (8005908 <lcd_init+0x32b8>)
 8005860:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005864:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005866:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 800586a:	b29a      	uxth	r2, r3
 800586c:	4b27      	ldr	r3, [pc, #156]	@ (800590c <lcd_init+0x32bc>)
 800586e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005870:	4b25      	ldr	r3, [pc, #148]	@ (8005908 <lcd_init+0x32b8>)
 8005872:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005876:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005878:	4b23      	ldr	r3, [pc, #140]	@ (8005908 <lcd_init+0x32b8>)
 800587a:	2280      	movs	r2, #128	@ 0x80
 800587c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800587e:	4b22      	ldr	r3, [pc, #136]	@ (8005908 <lcd_init+0x32b8>)
 8005880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005884:	611a      	str	r2, [r3, #16]
}
 8005886:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 8005888:	2069      	movs	r0, #105	@ 0x69
 800588a:	f7fb fda5 	bl	80013d8 <lcd_wr_xdata>

        HAL_Delay(120);
 800588e:	2078      	movs	r0, #120	@ 0x78
 8005890:	f002 fb88 	bl	8007fa4 <HAL_Delay>
 8005894:	2321      	movs	r3, #33	@ 0x21
 8005896:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800589a:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <lcd_init+0x32b8>)
 800589c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80058a2:	4b19      	ldr	r3, [pc, #100]	@ (8005908 <lcd_init+0x32b8>)
 80058a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80058aa:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	4b16      	ldr	r3, [pc, #88]	@ (800590c <lcd_init+0x32bc>)
 80058b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80058b4:	4b14      	ldr	r3, [pc, #80]	@ (8005908 <lcd_init+0x32b8>)
 80058b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80058ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80058bc:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <lcd_init+0x32b8>)
 80058be:	2280      	movs	r2, #128	@ 0x80
 80058c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80058c2:	4b11      	ldr	r3, [pc, #68]	@ (8005908 <lcd_init+0x32b8>)
 80058c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058c8:	611a      	str	r2, [r3, #16]
}
 80058ca:	bf00      	nop
 80058cc:	2329      	movs	r3, #41	@ 0x29
 80058ce:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80058d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <lcd_init+0x32b8>)
 80058d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058d8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80058da:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <lcd_init+0x32b8>)
 80058dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058e0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80058e2:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	4b08      	ldr	r3, [pc, #32]	@ (800590c <lcd_init+0x32bc>)
 80058ea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80058ec:	4b06      	ldr	r3, [pc, #24]	@ (8005908 <lcd_init+0x32b8>)
 80058ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80058f2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80058f4:	4b04      	ldr	r3, [pc, #16]	@ (8005908 <lcd_init+0x32b8>)
 80058f6:	2280      	movs	r2, #128	@ 0x80
 80058f8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80058fa:	4b03      	ldr	r3, [pc, #12]	@ (8005908 <lcd_init+0x32b8>)
 80058fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005900:	611a      	str	r2, [r3, #16]
}
 8005902:	f001 bdee 	b.w	80074e2 <lcd_init+0x4e92>
 8005906:	bf00      	nop
 8005908:	40011000 	.word	0x40011000
 800590c:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 8005910:	4b03      	ldr	r3, [pc, #12]	@ (8005920 <lcd_init+0x32d0>)
 8005912:	889b      	ldrh	r3, [r3, #4]
 8005914:	f245 5210 	movw	r2, #21776	@ 0x5510
 8005918:	4293      	cmp	r3, r2
 800591a:	f040 87b3 	bne.w	8006884 <lcd_init+0x4234>
 800591e:	e001      	b.n	8005924 <lcd_init+0x32d4>
 8005920:	20000038 	.word	0x20000038
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 8005924:	2155      	movs	r1, #85	@ 0x55
 8005926:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 800592a:	f7fb fd79 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 800592e:	21aa      	movs	r1, #170	@ 0xaa
 8005930:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8005934:	f7fb fd74 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005938:	2152      	movs	r1, #82	@ 0x52
 800593a:	f24f 0002 	movw	r0, #61442	@ 0xf002
 800593e:	f7fb fd6f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8005942:	2108      	movs	r1, #8
 8005944:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005948:	f7fb fd6a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 800594c:	2101      	movs	r1, #1
 800594e:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005952:	f7fb fd65 	bl	8001420 <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 8005956:	210d      	movs	r1, #13
 8005958:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 800595c:	f7fb fd60 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8005960:	210d      	movs	r1, #13
 8005962:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8005966:	f7fb fd5b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 800596a:	210d      	movs	r1, #13
 800596c:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8005970:	f7fb fd56 	bl	8001420 <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 8005974:	2134      	movs	r1, #52	@ 0x34
 8005976:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 800597a:	f7fb fd51 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 800597e:	2134      	movs	r1, #52	@ 0x34
 8005980:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8005984:	f7fb fd4c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 8005988:	2134      	movs	r1, #52	@ 0x34
 800598a:	f24b 6002 	movw	r0, #46594	@ 0xb602
 800598e:	f7fb fd47 	bl	8001420 <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 8005992:	210d      	movs	r1, #13
 8005994:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005998:	f7fb fd42 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 800599c:	210d      	movs	r1, #13
 800599e:	f24b 1001 	movw	r0, #45313	@ 0xb101
 80059a2:	f7fb fd3d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 80059a6:	210d      	movs	r1, #13
 80059a8:	f24b 1002 	movw	r0, #45314	@ 0xb102
 80059ac:	f7fb fd38 	bl	8001420 <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 80059b0:	2134      	movs	r1, #52	@ 0x34
 80059b2:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 80059b6:	f7fb fd33 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 80059ba:	2134      	movs	r1, #52	@ 0x34
 80059bc:	f24b 7001 	movw	r0, #46849	@ 0xb701
 80059c0:	f7fb fd2e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 80059c4:	2134      	movs	r1, #52	@ 0x34
 80059c6:	f24b 7002 	movw	r0, #46850	@ 0xb702
 80059ca:	f7fb fd29 	bl	8001420 <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 80059ce:	2100      	movs	r1, #0
 80059d0:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 80059d4:	f7fb fd24 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 80059d8:	2100      	movs	r1, #0
 80059da:	f24b 2001 	movw	r0, #45569	@ 0xb201
 80059de:	f7fb fd1f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 80059e2:	2100      	movs	r1, #0
 80059e4:	f24b 2002 	movw	r0, #45570	@ 0xb202
 80059e8:	f7fb fd1a 	bl	8001420 <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 80059ec:	2124      	movs	r1, #36	@ 0x24
 80059ee:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 80059f2:	f7fb fd15 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 80059f6:	2124      	movs	r1, #36	@ 0x24
 80059f8:	f64b 0001 	movw	r0, #47105	@ 0xb801
 80059fc:	f7fb fd10 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 8005a00:	2124      	movs	r1, #36	@ 0x24
 8005a02:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8005a06:	f7fb fd0b 	bl	8001420 <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8005a10:	f7fb fd06 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 8005a14:	210f      	movs	r1, #15
 8005a16:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8005a1a:	f7fb fd01 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 8005a1e:	210f      	movs	r1, #15
 8005a20:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8005a24:	f7fb fcfc 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 8005a28:	210f      	movs	r1, #15
 8005a2a:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8005a2e:	f7fb fcf7 	bl	8001420 <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 8005a32:	2134      	movs	r1, #52	@ 0x34
 8005a34:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8005a38:	f7fb fcf2 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 8005a3c:	2134      	movs	r1, #52	@ 0x34
 8005a3e:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8005a42:	f7fb fced 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 8005a46:	2134      	movs	r1, #52	@ 0x34
 8005a48:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8005a4c:	f7fb fce8 	bl	8001420 <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8005a50:	2108      	movs	r1, #8
 8005a52:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8005a56:	f7fb fce3 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 8005a5a:	2108      	movs	r1, #8
 8005a5c:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8005a60:	f7fb fcde 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 8005a64:	2108      	movs	r1, #8
 8005a66:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8005a6a:	f7fb fcd9 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 8005a6e:	2103      	movs	r1, #3
 8005a70:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 8005a74:	f7fb fcd4 	bl	8001420 <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 8005a78:	2124      	movs	r1, #36	@ 0x24
 8005a7a:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8005a7e:	f7fb fccf 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 8005a82:	2124      	movs	r1, #36	@ 0x24
 8005a84:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8005a88:	f7fb fcca 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 8005a8c:	2124      	movs	r1, #36	@ 0x24
 8005a8e:	f64b 2002 	movw	r0, #47618	@ 0xba02
 8005a92:	f7fb fcc5 	bl	8001420 <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 8005a96:	2100      	movs	r1, #0
 8005a98:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005a9c:	f7fb fcc0 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 8005aa0:	2178      	movs	r1, #120	@ 0x78
 8005aa2:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005aa6:	f7fb fcbb 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005ab0:	f7fb fcb6 	bl	8001420 <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8005aba:	f7fb fcb1 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 8005abe:	2178      	movs	r1, #120	@ 0x78
 8005ac0:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8005ac4:	f7fb fcac 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8005ace:	f7fb fca7 	bl	8001420 <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8005ad8:	f7fb fca2 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 8005adc:	2164      	movs	r1, #100	@ 0x64
 8005ade:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 8005ae2:	f7fb fc9d 	bl	8001420 <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8005aec:	f7fb fc98 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 8005af0:	2133      	movs	r1, #51	@ 0x33
 8005af2:	f24d 1001 	movw	r0, #53505	@ 0xd101
 8005af6:	f7fb fc93 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 8005afa:	2100      	movs	r1, #0
 8005afc:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8005b00:	f7fb fc8e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 8005b04:	2134      	movs	r1, #52	@ 0x34
 8005b06:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8005b0a:	f7fb fc89 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 8005b0e:	2100      	movs	r1, #0
 8005b10:	f24d 1004 	movw	r0, #53508	@ 0xd104
 8005b14:	f7fb fc84 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 8005b18:	213a      	movs	r1, #58	@ 0x3a
 8005b1a:	f24d 1005 	movw	r0, #53509	@ 0xd105
 8005b1e:	f7fb fc7f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 8005b22:	2100      	movs	r1, #0
 8005b24:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8005b28:	f7fb fc7a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 8005b2c:	214a      	movs	r1, #74	@ 0x4a
 8005b2e:	f24d 1007 	movw	r0, #53511	@ 0xd107
 8005b32:	f7fb fc75 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 8005b36:	2100      	movs	r1, #0
 8005b38:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8005b3c:	f7fb fc70 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 8005b40:	215c      	movs	r1, #92	@ 0x5c
 8005b42:	f24d 1009 	movw	r0, #53513	@ 0xd109
 8005b46:	f7fb fc6b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005b50:	f7fb fc66 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 8005b54:	2181      	movs	r1, #129	@ 0x81
 8005b56:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005b5a:	f7fb fc61 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 8005b5e:	2100      	movs	r1, #0
 8005b60:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 8005b64:	f7fb fc5c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 8005b68:	21a6      	movs	r1, #166	@ 0xa6
 8005b6a:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8005b6e:	f7fb fc57 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 8005b72:	2100      	movs	r1, #0
 8005b74:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8005b78:	f7fb fc52 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 8005b7c:	21e5      	movs	r1, #229	@ 0xe5
 8005b7e:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 8005b82:	f7fb fc4d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 8005b86:	2101      	movs	r1, #1
 8005b88:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8005b8c:	f7fb fc48 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 8005b90:	2113      	movs	r1, #19
 8005b92:	f24d 1011 	movw	r0, #53521	@ 0xd111
 8005b96:	f7fb fc43 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8005ba0:	f7fb fc3e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 8005ba4:	2154      	movs	r1, #84	@ 0x54
 8005ba6:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8005baa:	f7fb fc39 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 8005bae:	2101      	movs	r1, #1
 8005bb0:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8005bb4:	f7fb fc34 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 8005bb8:	2182      	movs	r1, #130	@ 0x82
 8005bba:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8005bbe:	f7fb fc2f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8005bc8:	f7fb fc2a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 8005bcc:	21ca      	movs	r1, #202	@ 0xca
 8005bce:	f24d 1017 	movw	r0, #53527	@ 0xd117
 8005bd2:	f7fb fc25 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8005bdc:	f7fb fc20 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 8005be0:	2100      	movs	r1, #0
 8005be2:	f24d 1019 	movw	r0, #53529	@ 0xd119
 8005be6:	f7fb fc1b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 8005bea:	2102      	movs	r1, #2
 8005bec:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8005bf0:	f7fb fc16 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8005bfa:	f7fb fc11 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 8005bfe:	2102      	movs	r1, #2
 8005c00:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 8005c04:	f7fb fc0c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 8005c08:	2134      	movs	r1, #52	@ 0x34
 8005c0a:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8005c0e:	f7fb fc07 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 8005c12:	2102      	movs	r1, #2
 8005c14:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8005c18:	f7fb fc02 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 8005c1c:	2167      	movs	r1, #103	@ 0x67
 8005c1e:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 8005c22:	f7fb fbfd 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 8005c26:	2102      	movs	r1, #2
 8005c28:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8005c2c:	f7fb fbf8 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 8005c30:	2184      	movs	r1, #132	@ 0x84
 8005c32:	f24d 1021 	movw	r0, #53537	@ 0xd121
 8005c36:	f7fb fbf3 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8005c40:	f7fb fbee 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 8005c44:	21a4      	movs	r1, #164	@ 0xa4
 8005c46:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8005c4a:	f7fb fbe9 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 8005c4e:	2102      	movs	r1, #2
 8005c50:	f24d 1024 	movw	r0, #53540	@ 0xd124
 8005c54:	f7fb fbe4 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005c58:	21b7      	movs	r1, #183	@ 0xb7
 8005c5a:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8005c5e:	f7fb fbdf 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 8005c62:	2102      	movs	r1, #2
 8005c64:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8005c68:	f7fb fbda 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 8005c6c:	21cf      	movs	r1, #207	@ 0xcf
 8005c6e:	f24d 1027 	movw	r0, #53543	@ 0xd127
 8005c72:	f7fb fbd5 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 8005c76:	2102      	movs	r1, #2
 8005c78:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8005c7c:	f7fb fbd0 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 8005c80:	21de      	movs	r1, #222	@ 0xde
 8005c82:	f24d 1029 	movw	r0, #53545	@ 0xd129
 8005c86:	f7fb fbcb 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 8005c8a:	2102      	movs	r1, #2
 8005c8c:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8005c90:	f7fb fbc6 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 8005c94:	21f2      	movs	r1, #242	@ 0xf2
 8005c96:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8005c9a:	f7fb fbc1 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 8005ca4:	f7fb fbbc 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 8005ca8:	21fe      	movs	r1, #254	@ 0xfe
 8005caa:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8005cae:	f7fb fbb7 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 8005cb2:	2103      	movs	r1, #3
 8005cb4:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8005cb8:	f7fb fbb2 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 8005cbc:	2110      	movs	r1, #16
 8005cbe:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 8005cc2:	f7fb fbad 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8005ccc:	f7fb fba8 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 8005cd0:	2133      	movs	r1, #51	@ 0x33
 8005cd2:	f24d 1031 	movw	r0, #53553	@ 0xd131
 8005cd6:	f7fb fba3 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 8005cda:	2103      	movs	r1, #3
 8005cdc:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8005ce0:	f7fb fb9e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 8005ce4:	216d      	movs	r1, #109	@ 0x6d
 8005ce6:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8005cea:	f7fb fb99 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 8005cee:	2100      	movs	r1, #0
 8005cf0:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 8005cf4:	f7fb fb94 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 8005cf8:	2133      	movs	r1, #51	@ 0x33
 8005cfa:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8005cfe:	f7fb fb8f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 8005d02:	2100      	movs	r1, #0
 8005d04:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8005d08:	f7fb fb8a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 8005d0c:	2134      	movs	r1, #52	@ 0x34
 8005d0e:	f24d 2003 	movw	r0, #53763	@ 0xd203
 8005d12:	f7fb fb85 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 8005d16:	2100      	movs	r1, #0
 8005d18:	f24d 2004 	movw	r0, #53764	@ 0xd204
 8005d1c:	f7fb fb80 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 8005d20:	213a      	movs	r1, #58	@ 0x3a
 8005d22:	f24d 2005 	movw	r0, #53765	@ 0xd205
 8005d26:	f7fb fb7b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8005d30:	f7fb fb76 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 8005d34:	214a      	movs	r1, #74	@ 0x4a
 8005d36:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8005d3a:	f7fb fb71 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 8005d3e:	2100      	movs	r1, #0
 8005d40:	f24d 2008 	movw	r0, #53768	@ 0xd208
 8005d44:	f7fb fb6c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 8005d48:	215c      	movs	r1, #92	@ 0x5c
 8005d4a:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8005d4e:	f7fb fb67 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 8005d52:	2100      	movs	r1, #0
 8005d54:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005d58:	f7fb fb62 	bl	8001420 <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 8005d5c:	2181      	movs	r1, #129	@ 0x81
 8005d5e:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 8005d62:	f7fb fb5d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 8005d66:	2100      	movs	r1, #0
 8005d68:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8005d6c:	f7fb fb58 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 8005d70:	21a6      	movs	r1, #166	@ 0xa6
 8005d72:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 8005d76:	f7fb fb53 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8005d80:	f7fb fb4e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 8005d84:	21e5      	movs	r1, #229	@ 0xe5
 8005d86:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8005d8a:	f7fb fb49 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 8005d8e:	2101      	movs	r1, #1
 8005d90:	f24d 2010 	movw	r0, #53776	@ 0xd210
 8005d94:	f7fb fb44 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 8005d98:	2113      	movs	r1, #19
 8005d9a:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8005d9e:	f7fb fb3f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 8005da2:	2101      	movs	r1, #1
 8005da4:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8005da8:	f7fb fb3a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 8005dac:	2154      	movs	r1, #84	@ 0x54
 8005dae:	f24d 2013 	movw	r0, #53779	@ 0xd213
 8005db2:	f7fb fb35 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 8005db6:	2101      	movs	r1, #1
 8005db8:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8005dbc:	f7fb fb30 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 8005dc0:	2182      	movs	r1, #130	@ 0x82
 8005dc2:	f24d 2015 	movw	r0, #53781	@ 0xd215
 8005dc6:	f7fb fb2b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 8005dca:	2101      	movs	r1, #1
 8005dcc:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8005dd0:	f7fb fb26 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 8005dd4:	21ca      	movs	r1, #202	@ 0xca
 8005dd6:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8005dda:	f7fb fb21 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 8005dde:	2102      	movs	r1, #2
 8005de0:	f24d 2018 	movw	r0, #53784	@ 0xd218
 8005de4:	f7fb fb1c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 8005de8:	2100      	movs	r1, #0
 8005dea:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8005dee:	f7fb fb17 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 8005df2:	2102      	movs	r1, #2
 8005df4:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8005df8:	f7fb fb12 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 8005e02:	f7fb fb0d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 8005e06:	2102      	movs	r1, #2
 8005e08:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8005e0c:	f7fb fb08 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 8005e10:	2134      	movs	r1, #52	@ 0x34
 8005e12:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 8005e16:	f7fb fb03 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8005e20:	f7fb fafe 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 8005e24:	2167      	movs	r1, #103	@ 0x67
 8005e26:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8005e2a:	f7fb faf9 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 8005e2e:	2102      	movs	r1, #2
 8005e30:	f24d 2020 	movw	r0, #53792	@ 0xd220
 8005e34:	f7fb faf4 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 8005e38:	2184      	movs	r1, #132	@ 0x84
 8005e3a:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8005e3e:	f7fb faef 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 8005e42:	2102      	movs	r1, #2
 8005e44:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8005e48:	f7fb faea 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 8005e4c:	21a4      	movs	r1, #164	@ 0xa4
 8005e4e:	f24d 2023 	movw	r0, #53795	@ 0xd223
 8005e52:	f7fb fae5 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 8005e56:	2102      	movs	r1, #2
 8005e58:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8005e5c:	f7fb fae0 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005e60:	21b7      	movs	r1, #183	@ 0xb7
 8005e62:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8005e66:	f7fb fadb 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 8005e6a:	2102      	movs	r1, #2
 8005e6c:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8005e70:	f7fb fad6 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 8005e74:	21cf      	movs	r1, #207	@ 0xcf
 8005e76:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8005e7a:	f7fb fad1 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 8005e7e:	2102      	movs	r1, #2
 8005e80:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8005e84:	f7fb facc 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 8005e88:	21de      	movs	r1, #222	@ 0xde
 8005e8a:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8005e8e:	f7fb fac7 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 8005e92:	2102      	movs	r1, #2
 8005e94:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8005e98:	f7fb fac2 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 8005e9c:	21f2      	movs	r1, #242	@ 0xf2
 8005e9e:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 8005ea2:	f7fb fabd 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8005eac:	f7fb fab8 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 8005eb0:	21fe      	movs	r1, #254	@ 0xfe
 8005eb2:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 8005eb6:	f7fb fab3 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 8005eba:	2103      	movs	r1, #3
 8005ebc:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8005ec0:	f7fb faae 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 8005ec4:	2110      	movs	r1, #16
 8005ec6:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8005eca:	f7fb faa9 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 8005ece:	2103      	movs	r1, #3
 8005ed0:	f24d 2030 	movw	r0, #53808	@ 0xd230
 8005ed4:	f7fb faa4 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 8005ed8:	2133      	movs	r1, #51	@ 0x33
 8005eda:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8005ede:	f7fb fa9f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 8005ee2:	2103      	movs	r1, #3
 8005ee4:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8005ee8:	f7fb fa9a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 8005eec:	216d      	movs	r1, #109	@ 0x6d
 8005eee:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8005ef2:	f7fb fa95 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8005efc:	f7fb fa90 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 8005f00:	2133      	movs	r1, #51	@ 0x33
 8005f02:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8005f06:	f7fb fa8b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8005f10:	f7fb fa86 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 8005f14:	2134      	movs	r1, #52	@ 0x34
 8005f16:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8005f1a:	f7fb fa81 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 8005f1e:	2100      	movs	r1, #0
 8005f20:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8005f24:	f7fb fa7c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 8005f28:	213a      	movs	r1, #58	@ 0x3a
 8005f2a:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8005f2e:	f7fb fa77 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 8005f32:	2100      	movs	r1, #0
 8005f34:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8005f38:	f7fb fa72 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 8005f3c:	214a      	movs	r1, #74	@ 0x4a
 8005f3e:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8005f42:	f7fb fa6d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 8005f46:	2100      	movs	r1, #0
 8005f48:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8005f4c:	f7fb fa68 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 8005f50:	215c      	movs	r1, #92	@ 0x5c
 8005f52:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8005f56:	f7fb fa63 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8005f60:	f7fb fa5e 	bl	8001420 <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 8005f64:	2181      	movs	r1, #129	@ 0x81
 8005f66:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8005f6a:	f7fb fa59 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 8005f6e:	2100      	movs	r1, #0
 8005f70:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8005f74:	f7fb fa54 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 8005f78:	21a6      	movs	r1, #166	@ 0xa6
 8005f7a:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8005f7e:	f7fb fa4f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 8005f82:	2100      	movs	r1, #0
 8005f84:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8005f88:	f7fb fa4a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 8005f8c:	21e5      	movs	r1, #229	@ 0xe5
 8005f8e:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8005f92:	f7fb fa45 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 8005f96:	2101      	movs	r1, #1
 8005f98:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8005f9c:	f7fb fa40 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 8005fa0:	2113      	movs	r1, #19
 8005fa2:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8005fa6:	f7fb fa3b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 8005faa:	2101      	movs	r1, #1
 8005fac:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8005fb0:	f7fb fa36 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 8005fb4:	2154      	movs	r1, #84	@ 0x54
 8005fb6:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8005fba:	f7fb fa31 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8005fc4:	f7fb fa2c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 8005fc8:	2182      	movs	r1, #130	@ 0x82
 8005fca:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8005fce:	f7fb fa27 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8005fd8:	f7fb fa22 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 8005fdc:	21ca      	movs	r1, #202	@ 0xca
 8005fde:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8005fe2:	f7fb fa1d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8005fec:	f7fb fa18 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8005ff6:	f7fb fa13 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8006000:	f7fb fa0e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 8006004:	2101      	movs	r1, #1
 8006006:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 800600a:	f7fb fa09 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 800600e:	2102      	movs	r1, #2
 8006010:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8006014:	f7fb fa04 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 8006018:	2134      	movs	r1, #52	@ 0x34
 800601a:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 800601e:	f7fb f9ff 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 8006022:	2102      	movs	r1, #2
 8006024:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8006028:	f7fb f9fa 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 800602c:	2167      	movs	r1, #103	@ 0x67
 800602e:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8006032:	f7fb f9f5 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 8006036:	2102      	movs	r1, #2
 8006038:	f24d 3020 	movw	r0, #54048	@ 0xd320
 800603c:	f7fb f9f0 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 8006040:	2184      	movs	r1, #132	@ 0x84
 8006042:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8006046:	f7fb f9eb 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 800604a:	2102      	movs	r1, #2
 800604c:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8006050:	f7fb f9e6 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 8006054:	21a4      	movs	r1, #164	@ 0xa4
 8006056:	f24d 3023 	movw	r0, #54051	@ 0xd323
 800605a:	f7fb f9e1 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 800605e:	2102      	movs	r1, #2
 8006060:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8006064:	f7fb f9dc 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 8006068:	21b7      	movs	r1, #183	@ 0xb7
 800606a:	f24d 3025 	movw	r0, #54053	@ 0xd325
 800606e:	f7fb f9d7 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 8006072:	2102      	movs	r1, #2
 8006074:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8006078:	f7fb f9d2 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 800607c:	21cf      	movs	r1, #207	@ 0xcf
 800607e:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8006082:	f7fb f9cd 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 8006086:	2102      	movs	r1, #2
 8006088:	f24d 3028 	movw	r0, #54056	@ 0xd328
 800608c:	f7fb f9c8 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 8006090:	21de      	movs	r1, #222	@ 0xde
 8006092:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8006096:	f7fb f9c3 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 800609a:	2102      	movs	r1, #2
 800609c:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 80060a0:	f7fb f9be 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 80060a4:	21f2      	movs	r1, #242	@ 0xf2
 80060a6:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 80060aa:	f7fb f9b9 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 80060ae:	2102      	movs	r1, #2
 80060b0:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 80060b4:	f7fb f9b4 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 80060b8:	21fe      	movs	r1, #254	@ 0xfe
 80060ba:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 80060be:	f7fb f9af 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 80060c2:	2103      	movs	r1, #3
 80060c4:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 80060c8:	f7fb f9aa 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 80060cc:	2110      	movs	r1, #16
 80060ce:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 80060d2:	f7fb f9a5 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 80060d6:	2103      	movs	r1, #3
 80060d8:	f24d 3030 	movw	r0, #54064	@ 0xd330
 80060dc:	f7fb f9a0 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 80060e0:	2133      	movs	r1, #51	@ 0x33
 80060e2:	f24d 3031 	movw	r0, #54065	@ 0xd331
 80060e6:	f7fb f99b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 80060ea:	2103      	movs	r1, #3
 80060ec:	f24d 3032 	movw	r0, #54066	@ 0xd332
 80060f0:	f7fb f996 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 80060f4:	216d      	movs	r1, #109	@ 0x6d
 80060f6:	f24d 3033 	movw	r0, #54067	@ 0xd333
 80060fa:	f7fb f991 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 80060fe:	2100      	movs	r1, #0
 8006100:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8006104:	f7fb f98c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 8006108:	2133      	movs	r1, #51	@ 0x33
 800610a:	f24d 4001 	movw	r0, #54273	@ 0xd401
 800610e:	f7fb f987 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 8006112:	2100      	movs	r1, #0
 8006114:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8006118:	f7fb f982 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 800611c:	2134      	movs	r1, #52	@ 0x34
 800611e:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8006122:	f7fb f97d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 8006126:	2100      	movs	r1, #0
 8006128:	f24d 4004 	movw	r0, #54276	@ 0xd404
 800612c:	f7fb f978 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 8006130:	213a      	movs	r1, #58	@ 0x3a
 8006132:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8006136:	f7fb f973 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 800613a:	2100      	movs	r1, #0
 800613c:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8006140:	f7fb f96e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 8006144:	214a      	movs	r1, #74	@ 0x4a
 8006146:	f24d 4007 	movw	r0, #54279	@ 0xd407
 800614a:	f7fb f969 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 800614e:	2100      	movs	r1, #0
 8006150:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8006154:	f7fb f964 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8006158:	215c      	movs	r1, #92	@ 0x5c
 800615a:	f24d 4009 	movw	r0, #54281	@ 0xd409
 800615e:	f7fb f95f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 8006162:	2100      	movs	r1, #0
 8006164:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8006168:	f7fb f95a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 800616c:	2181      	movs	r1, #129	@ 0x81
 800616e:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8006172:	f7fb f955 	bl	8001420 <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 8006176:	2100      	movs	r1, #0
 8006178:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 800617c:	f7fb f950 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 8006180:	21a6      	movs	r1, #166	@ 0xa6
 8006182:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8006186:	f7fb f94b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 800618a:	2100      	movs	r1, #0
 800618c:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8006190:	f7fb f946 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 8006194:	21e5      	movs	r1, #229	@ 0xe5
 8006196:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 800619a:	f7fb f941 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 800619e:	2101      	movs	r1, #1
 80061a0:	f24d 4010 	movw	r0, #54288	@ 0xd410
 80061a4:	f7fb f93c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 80061a8:	2113      	movs	r1, #19
 80061aa:	f24d 4011 	movw	r0, #54289	@ 0xd411
 80061ae:	f7fb f937 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 80061b2:	2101      	movs	r1, #1
 80061b4:	f24d 4012 	movw	r0, #54290	@ 0xd412
 80061b8:	f7fb f932 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 80061bc:	2154      	movs	r1, #84	@ 0x54
 80061be:	f24d 4013 	movw	r0, #54291	@ 0xd413
 80061c2:	f7fb f92d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 80061c6:	2101      	movs	r1, #1
 80061c8:	f24d 4014 	movw	r0, #54292	@ 0xd414
 80061cc:	f7fb f928 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 80061d0:	2182      	movs	r1, #130	@ 0x82
 80061d2:	f24d 4015 	movw	r0, #54293	@ 0xd415
 80061d6:	f7fb f923 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 80061da:	2101      	movs	r1, #1
 80061dc:	f24d 4016 	movw	r0, #54294	@ 0xd416
 80061e0:	f7fb f91e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 80061e4:	21ca      	movs	r1, #202	@ 0xca
 80061e6:	f24d 4017 	movw	r0, #54295	@ 0xd417
 80061ea:	f7fb f919 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 80061ee:	2102      	movs	r1, #2
 80061f0:	f24d 4018 	movw	r0, #54296	@ 0xd418
 80061f4:	f7fb f914 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 80061f8:	2100      	movs	r1, #0
 80061fa:	f24d 4019 	movw	r0, #54297	@ 0xd419
 80061fe:	f7fb f90f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 8006202:	2102      	movs	r1, #2
 8006204:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8006208:	f7fb f90a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 800620c:	2101      	movs	r1, #1
 800620e:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8006212:	f7fb f905 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 8006216:	2102      	movs	r1, #2
 8006218:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 800621c:	f7fb f900 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 8006220:	2134      	movs	r1, #52	@ 0x34
 8006222:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 8006226:	f7fb f8fb 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 800622a:	2102      	movs	r1, #2
 800622c:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8006230:	f7fb f8f6 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 8006234:	2167      	movs	r1, #103	@ 0x67
 8006236:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 800623a:	f7fb f8f1 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 800623e:	2102      	movs	r1, #2
 8006240:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8006244:	f7fb f8ec 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 8006248:	2184      	movs	r1, #132	@ 0x84
 800624a:	f24d 4021 	movw	r0, #54305	@ 0xd421
 800624e:	f7fb f8e7 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 8006252:	2102      	movs	r1, #2
 8006254:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8006258:	f7fb f8e2 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 800625c:	21a4      	movs	r1, #164	@ 0xa4
 800625e:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8006262:	f7fb f8dd 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 8006266:	2102      	movs	r1, #2
 8006268:	f24d 4024 	movw	r0, #54308	@ 0xd424
 800626c:	f7fb f8d8 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 8006270:	21b7      	movs	r1, #183	@ 0xb7
 8006272:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8006276:	f7fb f8d3 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 800627a:	2102      	movs	r1, #2
 800627c:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8006280:	f7fb f8ce 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 8006284:	21cf      	movs	r1, #207	@ 0xcf
 8006286:	f24d 4027 	movw	r0, #54311	@ 0xd427
 800628a:	f7fb f8c9 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 800628e:	2102      	movs	r1, #2
 8006290:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8006294:	f7fb f8c4 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 8006298:	21de      	movs	r1, #222	@ 0xde
 800629a:	f24d 4029 	movw	r0, #54313	@ 0xd429
 800629e:	f7fb f8bf 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 80062a2:	2102      	movs	r1, #2
 80062a4:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 80062a8:	f7fb f8ba 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 80062ac:	21f2      	movs	r1, #242	@ 0xf2
 80062ae:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 80062b2:	f7fb f8b5 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 80062b6:	2102      	movs	r1, #2
 80062b8:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 80062bc:	f7fb f8b0 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 80062c0:	21fe      	movs	r1, #254	@ 0xfe
 80062c2:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 80062c6:	f7fb f8ab 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 80062ca:	2103      	movs	r1, #3
 80062cc:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 80062d0:	f7fb f8a6 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 80062d4:	2110      	movs	r1, #16
 80062d6:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 80062da:	f7fb f8a1 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 80062de:	2103      	movs	r1, #3
 80062e0:	f24d 4030 	movw	r0, #54320	@ 0xd430
 80062e4:	f7fb f89c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 80062e8:	2133      	movs	r1, #51	@ 0x33
 80062ea:	f24d 4031 	movw	r0, #54321	@ 0xd431
 80062ee:	f7fb f897 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 80062f2:	2103      	movs	r1, #3
 80062f4:	f24d 4032 	movw	r0, #54322	@ 0xd432
 80062f8:	f7fb f892 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 80062fc:	216d      	movs	r1, #109	@ 0x6d
 80062fe:	f24d 4033 	movw	r0, #54323	@ 0xd433
 8006302:	f7fb f88d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 8006306:	2100      	movs	r1, #0
 8006308:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 800630c:	f7fb f888 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 8006310:	2133      	movs	r1, #51	@ 0x33
 8006312:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8006316:	f7fb f883 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 800631a:	2100      	movs	r1, #0
 800631c:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8006320:	f7fb f87e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 8006324:	2134      	movs	r1, #52	@ 0x34
 8006326:	f24d 5003 	movw	r0, #54531	@ 0xd503
 800632a:	f7fb f879 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 800632e:	2100      	movs	r1, #0
 8006330:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8006334:	f7fb f874 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 8006338:	213a      	movs	r1, #58	@ 0x3a
 800633a:	f24d 5005 	movw	r0, #54533	@ 0xd505
 800633e:	f7fb f86f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 8006342:	2100      	movs	r1, #0
 8006344:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8006348:	f7fb f86a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 800634c:	214a      	movs	r1, #74	@ 0x4a
 800634e:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8006352:	f7fb f865 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 8006356:	2100      	movs	r1, #0
 8006358:	f24d 5008 	movw	r0, #54536	@ 0xd508
 800635c:	f7fb f860 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8006360:	215c      	movs	r1, #92	@ 0x5c
 8006362:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8006366:	f7fb f85b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 800636a:	2100      	movs	r1, #0
 800636c:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8006370:	f7fb f856 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 8006374:	2181      	movs	r1, #129	@ 0x81
 8006376:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 800637a:	f7fb f851 	bl	8001420 <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 800637e:	2100      	movs	r1, #0
 8006380:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8006384:	f7fb f84c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 8006388:	21a6      	movs	r1, #166	@ 0xa6
 800638a:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 800638e:	f7fb f847 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 8006392:	2100      	movs	r1, #0
 8006394:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8006398:	f7fb f842 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 800639c:	21e5      	movs	r1, #229	@ 0xe5
 800639e:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 80063a2:	f7fb f83d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 80063a6:	2101      	movs	r1, #1
 80063a8:	f24d 5010 	movw	r0, #54544	@ 0xd510
 80063ac:	f7fb f838 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 80063b0:	2113      	movs	r1, #19
 80063b2:	f24d 5011 	movw	r0, #54545	@ 0xd511
 80063b6:	f7fb f833 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 80063ba:	2101      	movs	r1, #1
 80063bc:	f24d 5012 	movw	r0, #54546	@ 0xd512
 80063c0:	f7fb f82e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 80063c4:	2154      	movs	r1, #84	@ 0x54
 80063c6:	f24d 5013 	movw	r0, #54547	@ 0xd513
 80063ca:	f7fb f829 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 80063ce:	2101      	movs	r1, #1
 80063d0:	f24d 5014 	movw	r0, #54548	@ 0xd514
 80063d4:	f7fb f824 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 80063d8:	2182      	movs	r1, #130	@ 0x82
 80063da:	f24d 5015 	movw	r0, #54549	@ 0xd515
 80063de:	f7fb f81f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 80063e2:	2101      	movs	r1, #1
 80063e4:	f24d 5016 	movw	r0, #54550	@ 0xd516
 80063e8:	f7fb f81a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 80063ec:	21ca      	movs	r1, #202	@ 0xca
 80063ee:	f24d 5017 	movw	r0, #54551	@ 0xd517
 80063f2:	f7fb f815 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 80063f6:	2102      	movs	r1, #2
 80063f8:	f24d 5018 	movw	r0, #54552	@ 0xd518
 80063fc:	f7fb f810 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 8006400:	2100      	movs	r1, #0
 8006402:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8006406:	f7fb f80b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 800640a:	2102      	movs	r1, #2
 800640c:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8006410:	f7fb f806 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 8006414:	2101      	movs	r1, #1
 8006416:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 800641a:	f7fb f801 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 800641e:	2102      	movs	r1, #2
 8006420:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8006424:	f7fa fffc 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 8006428:	2134      	movs	r1, #52	@ 0x34
 800642a:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 800642e:	f7fa fff7 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 8006432:	2102      	movs	r1, #2
 8006434:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8006438:	f7fa fff2 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 800643c:	2167      	movs	r1, #103	@ 0x67
 800643e:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8006442:	f7fa ffed 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 8006446:	2102      	movs	r1, #2
 8006448:	f24d 5020 	movw	r0, #54560	@ 0xd520
 800644c:	f7fa ffe8 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 8006450:	2184      	movs	r1, #132	@ 0x84
 8006452:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8006456:	f7fa ffe3 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 800645a:	2102      	movs	r1, #2
 800645c:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8006460:	f7fa ffde 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 8006464:	21a4      	movs	r1, #164	@ 0xa4
 8006466:	f24d 5023 	movw	r0, #54563	@ 0xd523
 800646a:	f7fa ffd9 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 800646e:	2102      	movs	r1, #2
 8006470:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8006474:	f7fa ffd4 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 8006478:	21b7      	movs	r1, #183	@ 0xb7
 800647a:	f24d 5025 	movw	r0, #54565	@ 0xd525
 800647e:	f7fa ffcf 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 8006482:	2102      	movs	r1, #2
 8006484:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8006488:	f7fa ffca 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 800648c:	21cf      	movs	r1, #207	@ 0xcf
 800648e:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8006492:	f7fa ffc5 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 8006496:	2102      	movs	r1, #2
 8006498:	f24d 5028 	movw	r0, #54568	@ 0xd528
 800649c:	f7fa ffc0 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 80064a0:	21de      	movs	r1, #222	@ 0xde
 80064a2:	f24d 5029 	movw	r0, #54569	@ 0xd529
 80064a6:	f7fa ffbb 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 80064aa:	2102      	movs	r1, #2
 80064ac:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 80064b0:	f7fa ffb6 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 80064b4:	21f2      	movs	r1, #242	@ 0xf2
 80064b6:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 80064ba:	f7fa ffb1 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 80064be:	2102      	movs	r1, #2
 80064c0:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 80064c4:	f7fa ffac 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 80064c8:	21fe      	movs	r1, #254	@ 0xfe
 80064ca:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 80064ce:	f7fa ffa7 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 80064d2:	2103      	movs	r1, #3
 80064d4:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 80064d8:	f7fa ffa2 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 80064dc:	2110      	movs	r1, #16
 80064de:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 80064e2:	f7fa ff9d 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 80064e6:	2103      	movs	r1, #3
 80064e8:	f24d 5030 	movw	r0, #54576	@ 0xd530
 80064ec:	f7fa ff98 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 80064f0:	2133      	movs	r1, #51	@ 0x33
 80064f2:	f24d 5031 	movw	r0, #54577	@ 0xd531
 80064f6:	f7fa ff93 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 80064fa:	2103      	movs	r1, #3
 80064fc:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8006500:	f7fa ff8e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 8006504:	216d      	movs	r1, #109	@ 0x6d
 8006506:	f24d 5033 	movw	r0, #54579	@ 0xd533
 800650a:	f7fa ff89 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 800650e:	2100      	movs	r1, #0
 8006510:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8006514:	f7fa ff84 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 8006518:	2133      	movs	r1, #51	@ 0x33
 800651a:	f24d 6001 	movw	r0, #54785	@ 0xd601
 800651e:	f7fa ff7f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 8006522:	2100      	movs	r1, #0
 8006524:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8006528:	f7fa ff7a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 800652c:	2134      	movs	r1, #52	@ 0x34
 800652e:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8006532:	f7fa ff75 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 8006536:	2100      	movs	r1, #0
 8006538:	f24d 6004 	movw	r0, #54788	@ 0xd604
 800653c:	f7fa ff70 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 8006540:	213a      	movs	r1, #58	@ 0x3a
 8006542:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8006546:	f7fa ff6b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 800654a:	2100      	movs	r1, #0
 800654c:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8006550:	f7fa ff66 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 8006554:	214a      	movs	r1, #74	@ 0x4a
 8006556:	f24d 6007 	movw	r0, #54791	@ 0xd607
 800655a:	f7fa ff61 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 800655e:	2100      	movs	r1, #0
 8006560:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8006564:	f7fa ff5c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8006568:	215c      	movs	r1, #92	@ 0x5c
 800656a:	f24d 6009 	movw	r0, #54793	@ 0xd609
 800656e:	f7fa ff57 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 8006572:	2100      	movs	r1, #0
 8006574:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8006578:	f7fa ff52 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 800657c:	2181      	movs	r1, #129	@ 0x81
 800657e:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8006582:	f7fa ff4d 	bl	8001420 <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 8006586:	2100      	movs	r1, #0
 8006588:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 800658c:	f7fa ff48 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 8006590:	21a6      	movs	r1, #166	@ 0xa6
 8006592:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8006596:	f7fa ff43 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 800659a:	2100      	movs	r1, #0
 800659c:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 80065a0:	f7fa ff3e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 80065a4:	21e5      	movs	r1, #229	@ 0xe5
 80065a6:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 80065aa:	f7fa ff39 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 80065ae:	2101      	movs	r1, #1
 80065b0:	f24d 6010 	movw	r0, #54800	@ 0xd610
 80065b4:	f7fa ff34 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 80065b8:	2113      	movs	r1, #19
 80065ba:	f24d 6011 	movw	r0, #54801	@ 0xd611
 80065be:	f7fa ff2f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 80065c2:	2101      	movs	r1, #1
 80065c4:	f24d 6012 	movw	r0, #54802	@ 0xd612
 80065c8:	f7fa ff2a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 80065cc:	2154      	movs	r1, #84	@ 0x54
 80065ce:	f24d 6013 	movw	r0, #54803	@ 0xd613
 80065d2:	f7fa ff25 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 80065d6:	2101      	movs	r1, #1
 80065d8:	f24d 6014 	movw	r0, #54804	@ 0xd614
 80065dc:	f7fa ff20 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 80065e0:	2182      	movs	r1, #130	@ 0x82
 80065e2:	f24d 6015 	movw	r0, #54805	@ 0xd615
 80065e6:	f7fa ff1b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 80065ea:	2101      	movs	r1, #1
 80065ec:	f24d 6016 	movw	r0, #54806	@ 0xd616
 80065f0:	f7fa ff16 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 80065f4:	21ca      	movs	r1, #202	@ 0xca
 80065f6:	f24d 6017 	movw	r0, #54807	@ 0xd617
 80065fa:	f7fa ff11 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 80065fe:	2102      	movs	r1, #2
 8006600:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8006604:	f7fa ff0c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 8006608:	2100      	movs	r1, #0
 800660a:	f24d 6019 	movw	r0, #54809	@ 0xd619
 800660e:	f7fa ff07 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 8006612:	2102      	movs	r1, #2
 8006614:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8006618:	f7fa ff02 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 800661c:	2101      	movs	r1, #1
 800661e:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8006622:	f7fa fefd 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 8006626:	2102      	movs	r1, #2
 8006628:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 800662c:	f7fa fef8 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8006630:	2134      	movs	r1, #52	@ 0x34
 8006632:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8006636:	f7fa fef3 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 800663a:	2102      	movs	r1, #2
 800663c:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8006640:	f7fa feee 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 8006644:	2167      	movs	r1, #103	@ 0x67
 8006646:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 800664a:	f7fa fee9 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 800664e:	2102      	movs	r1, #2
 8006650:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8006654:	f7fa fee4 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8006658:	2184      	movs	r1, #132	@ 0x84
 800665a:	f24d 6021 	movw	r0, #54817	@ 0xd621
 800665e:	f7fa fedf 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 8006662:	2102      	movs	r1, #2
 8006664:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8006668:	f7fa feda 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 800666c:	21a4      	movs	r1, #164	@ 0xa4
 800666e:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8006672:	f7fa fed5 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 8006676:	2102      	movs	r1, #2
 8006678:	f24d 6024 	movw	r0, #54820	@ 0xd624
 800667c:	f7fa fed0 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8006680:	21b7      	movs	r1, #183	@ 0xb7
 8006682:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8006686:	f7fa fecb 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 800668a:	2102      	movs	r1, #2
 800668c:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8006690:	f7fa fec6 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 8006694:	21cf      	movs	r1, #207	@ 0xcf
 8006696:	f24d 6027 	movw	r0, #54823	@ 0xd627
 800669a:	f7fa fec1 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 800669e:	2102      	movs	r1, #2
 80066a0:	f24d 6028 	movw	r0, #54824	@ 0xd628
 80066a4:	f7fa febc 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 80066a8:	21de      	movs	r1, #222	@ 0xde
 80066aa:	f24d 6029 	movw	r0, #54825	@ 0xd629
 80066ae:	f7fa feb7 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 80066b2:	2102      	movs	r1, #2
 80066b4:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 80066b8:	f7fa feb2 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 80066bc:	21f2      	movs	r1, #242	@ 0xf2
 80066be:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 80066c2:	f7fa fead 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 80066c6:	2102      	movs	r1, #2
 80066c8:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 80066cc:	f7fa fea8 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 80066d0:	21fe      	movs	r1, #254	@ 0xfe
 80066d2:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 80066d6:	f7fa fea3 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 80066da:	2103      	movs	r1, #3
 80066dc:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 80066e0:	f7fa fe9e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 80066e4:	2110      	movs	r1, #16
 80066e6:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 80066ea:	f7fa fe99 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 80066ee:	2103      	movs	r1, #3
 80066f0:	f24d 6030 	movw	r0, #54832	@ 0xd630
 80066f4:	f7fa fe94 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 80066f8:	2133      	movs	r1, #51	@ 0x33
 80066fa:	f24d 6031 	movw	r0, #54833	@ 0xd631
 80066fe:	f7fa fe8f 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 8006702:	2103      	movs	r1, #3
 8006704:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8006708:	f7fa fe8a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 800670c:	216d      	movs	r1, #109	@ 0x6d
 800670e:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8006712:	f7fa fe85 	bl	8001420 <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 8006716:	2155      	movs	r1, #85	@ 0x55
 8006718:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 800671c:	f7fa fe80 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8006720:	21aa      	movs	r1, #170	@ 0xaa
 8006722:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8006726:	f7fa fe7b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 800672a:	2152      	movs	r1, #82	@ 0x52
 800672c:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8006730:	f7fa fe76 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8006734:	2108      	movs	r1, #8
 8006736:	f24f 0003 	movw	r0, #61443	@ 0xf003
 800673a:	f7fa fe71 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 800673e:	2100      	movs	r1, #0
 8006740:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8006744:	f7fa fe6c 	bl	8001420 <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8006748:	21cc      	movs	r1, #204	@ 0xcc
 800674a:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 800674e:	f7fa fe67 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 8006752:	2100      	movs	r1, #0
 8006754:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8006758:	f7fa fe62 	bl	8001420 <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 800675c:	2105      	movs	r1, #5
 800675e:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8006762:	f7fa fe5d 	bl	8001420 <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 8006766:	2170      	movs	r1, #112	@ 0x70
 8006768:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 800676c:	f7fa fe58 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8006770:	2170      	movs	r1, #112	@ 0x70
 8006772:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8006776:	f7fa fe53 	bl	8001420 <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 800677a:	2101      	movs	r1, #1
 800677c:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8006780:	f7fa fe4e 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 8006784:	2103      	movs	r1, #3
 8006786:	f64b 0001 	movw	r0, #47105	@ 0xb801
 800678a:	f7fa fe49 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 800678e:	2103      	movs	r1, #3
 8006790:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8006794:	f7fa fe44 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 8006798:	2103      	movs	r1, #3
 800679a:	f64b 0003 	movw	r0, #47107	@ 0xb803
 800679e:	f7fa fe3f 	bl	8001420 <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 80067a2:	2102      	movs	r1, #2
 80067a4:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80067a8:	f7fa fe3a 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 80067ac:	2100      	movs	r1, #0
 80067ae:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 80067b2:	f7fa fe35 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 80067b6:	2100      	movs	r1, #0
 80067b8:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 80067bc:	f7fa fe30 	bl	8001420 <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 80067c0:	21d0      	movs	r1, #208	@ 0xd0
 80067c2:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 80067c6:	f7fa fe2b 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 80067ca:	2102      	movs	r1, #2
 80067cc:	f64c 1001 	movw	r0, #51457	@ 0xc901
 80067d0:	f7fa fe26 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 80067d4:	2150      	movs	r1, #80	@ 0x50
 80067d6:	f64c 1002 	movw	r0, #51458	@ 0xc902
 80067da:	f7fa fe21 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 80067de:	2150      	movs	r1, #80	@ 0x50
 80067e0:	f64c 1003 	movw	r0, #51459	@ 0xc903
 80067e4:	f7fa fe1c 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 80067e8:	2150      	movs	r1, #80	@ 0x50
 80067ea:	f64c 1004 	movw	r0, #51460	@ 0xc904
 80067ee:	f7fa fe17 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 80067f2:	2100      	movs	r1, #0
 80067f4:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 80067f8:	f7fa fe12 	bl	8001420 <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 80067fc:	2155      	movs	r1, #85	@ 0x55
 80067fe:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8006802:	f7fa fe0d 	bl	8001420 <lcd_write_reg>
 8006806:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800680a:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800680e:	4b1b      	ldr	r3, [pc, #108]	@ (800687c <lcd_init+0x422c>)
 8006810:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006814:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006816:	4b19      	ldr	r3, [pc, #100]	@ (800687c <lcd_init+0x422c>)
 8006818:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800681c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800681e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8006822:	b29a      	uxth	r2, r3
 8006824:	4b16      	ldr	r3, [pc, #88]	@ (8006880 <lcd_init+0x4230>)
 8006826:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006828:	4b14      	ldr	r3, [pc, #80]	@ (800687c <lcd_init+0x422c>)
 800682a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800682e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006830:	4b12      	ldr	r3, [pc, #72]	@ (800687c <lcd_init+0x422c>)
 8006832:	2280      	movs	r2, #128	@ 0x80
 8006834:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006836:	4b11      	ldr	r3, [pc, #68]	@ (800687c <lcd_init+0x422c>)
 8006838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800683c:	611a      	str	r2, [r3, #16]
}
 800683e:	bf00      	nop
 8006840:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 8006844:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006848:	4b0c      	ldr	r3, [pc, #48]	@ (800687c <lcd_init+0x422c>)
 800684a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800684e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006850:	4b0a      	ldr	r3, [pc, #40]	@ (800687c <lcd_init+0x422c>)
 8006852:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006856:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006858:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 800685c:	b29a      	uxth	r2, r3
 800685e:	4b08      	ldr	r3, [pc, #32]	@ (8006880 <lcd_init+0x4230>)
 8006860:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006862:	4b06      	ldr	r3, [pc, #24]	@ (800687c <lcd_init+0x422c>)
 8006864:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006868:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800686a:	4b04      	ldr	r3, [pc, #16]	@ (800687c <lcd_init+0x422c>)
 800686c:	2280      	movs	r2, #128	@ 0x80
 800686e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006870:	4b02      	ldr	r3, [pc, #8]	@ (800687c <lcd_init+0x422c>)
 8006872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006876:	611a      	str	r2, [r3, #16]
}
 8006878:	f000 be33 	b.w	80074e2 <lcd_init+0x4e92>
 800687c:	40011000 	.word	0x40011000
 8006880:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 8006884:	4bc3      	ldr	r3, [pc, #780]	@ (8006b94 <lcd_init+0x4544>)
 8006886:	889b      	ldrh	r3, [r3, #4]
 8006888:	f649 0206 	movw	r2, #38918	@ 0x9806
 800688c:	4293      	cmp	r3, r2
 800688e:	f040 8407 	bne.w	80070a0 <lcd_init+0x4a50>
 8006892:	23ff      	movs	r3, #255	@ 0xff
 8006894:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006898:	4bbf      	ldr	r3, [pc, #764]	@ (8006b98 <lcd_init+0x4548>)
 800689a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800689e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068a0:	4bbd      	ldr	r3, [pc, #756]	@ (8006b98 <lcd_init+0x4548>)
 80068a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068a6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068a8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	4bbb      	ldr	r3, [pc, #748]	@ (8006b9c <lcd_init+0x454c>)
 80068b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068b2:	4bb9      	ldr	r3, [pc, #740]	@ (8006b98 <lcd_init+0x4548>)
 80068b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068ba:	4bb7      	ldr	r3, [pc, #732]	@ (8006b98 <lcd_init+0x4548>)
 80068bc:	2280      	movs	r2, #128	@ 0x80
 80068be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068c0:	4bb5      	ldr	r3, [pc, #724]	@ (8006b98 <lcd_init+0x4548>)
 80068c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068c6:	611a      	str	r2, [r3, #16]
}
 80068c8:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 80068ca:	20ff      	movs	r0, #255	@ 0xff
 80068cc:	f7fa fd84 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 80068d0:	2098      	movs	r0, #152	@ 0x98
 80068d2:	f7fa fd81 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 80068d6:	2006      	movs	r0, #6
 80068d8:	f7fa fd7e 	bl	80013d8 <lcd_wr_xdata>
 80068dc:	23bc      	movs	r3, #188	@ 0xbc
 80068de:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068e2:	4bad      	ldr	r3, [pc, #692]	@ (8006b98 <lcd_init+0x4548>)
 80068e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068ea:	4bab      	ldr	r3, [pc, #684]	@ (8006b98 <lcd_init+0x4548>)
 80068ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068f2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	4ba8      	ldr	r3, [pc, #672]	@ (8006b9c <lcd_init+0x454c>)
 80068fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068fc:	4ba6      	ldr	r3, [pc, #664]	@ (8006b98 <lcd_init+0x4548>)
 80068fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006902:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006904:	4ba4      	ldr	r3, [pc, #656]	@ (8006b98 <lcd_init+0x4548>)
 8006906:	2280      	movs	r2, #128	@ 0x80
 8006908:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800690a:	4ba3      	ldr	r3, [pc, #652]	@ (8006b98 <lcd_init+0x4548>)
 800690c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006910:	611a      	str	r2, [r3, #16]
}
 8006912:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 8006914:	2001      	movs	r0, #1
 8006916:	f7fa fd5f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 800691a:	200f      	movs	r0, #15
 800691c:	f7fa fd5c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8006920:	2061      	movs	r0, #97	@ 0x61
 8006922:	f7fa fd59 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006926:	20ff      	movs	r0, #255	@ 0xff
 8006928:	f7fa fd56 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800692c:	2001      	movs	r0, #1
 800692e:	f7fa fd53 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006932:	2001      	movs	r0, #1
 8006934:	f7fa fd50 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006938:	200b      	movs	r0, #11
 800693a:	f7fa fd4d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 800693e:	2010      	movs	r0, #16
 8006940:	f7fa fd4a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 8006944:	2037      	movs	r0, #55	@ 0x37
 8006946:	f7fa fd47 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 800694a:	2063      	movs	r0, #99	@ 0x63
 800694c:	f7fa fd44 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006950:	20ff      	movs	r0, #255	@ 0xff
 8006952:	f7fa fd41 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006956:	20ff      	movs	r0, #255	@ 0xff
 8006958:	f7fa fd3e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800695c:	2001      	movs	r0, #1
 800695e:	f7fa fd3b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006962:	2001      	movs	r0, #1
 8006964:	f7fa fd38 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006968:	2000      	movs	r0, #0
 800696a:	f7fa fd35 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800696e:	2000      	movs	r0, #0
 8006970:	f7fa fd32 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006974:	20ff      	movs	r0, #255	@ 0xff
 8006976:	f7fa fd2f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 800697a:	2052      	movs	r0, #82	@ 0x52
 800697c:	f7fa fd2c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006980:	2001      	movs	r0, #1
 8006982:	f7fa fd29 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006986:	2000      	movs	r0, #0
 8006988:	f7fa fd26 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 800698c:	2040      	movs	r0, #64	@ 0x40
 800698e:	f7fa fd23 	bl	80013d8 <lcd_wr_xdata>
 8006992:	23bd      	movs	r3, #189	@ 0xbd
 8006994:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006998:	4b7f      	ldr	r3, [pc, #508]	@ (8006b98 <lcd_init+0x4548>)
 800699a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800699e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069a0:	4b7d      	ldr	r3, [pc, #500]	@ (8006b98 <lcd_init+0x4548>)
 80069a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069a6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069a8:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	4b7b      	ldr	r3, [pc, #492]	@ (8006b9c <lcd_init+0x454c>)
 80069b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069b2:	4b79      	ldr	r3, [pc, #484]	@ (8006b98 <lcd_init+0x4548>)
 80069b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069ba:	4b77      	ldr	r3, [pc, #476]	@ (8006b98 <lcd_init+0x4548>)
 80069bc:	2280      	movs	r2, #128	@ 0x80
 80069be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069c0:	4b75      	ldr	r3, [pc, #468]	@ (8006b98 <lcd_init+0x4548>)
 80069c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069c6:	611a      	str	r2, [r3, #16]
}
 80069c8:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 80069ca:	2001      	movs	r0, #1
 80069cc:	f7fa fd04 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80069d0:	2023      	movs	r0, #35	@ 0x23
 80069d2:	f7fa fd01 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80069d6:	2045      	movs	r0, #69	@ 0x45
 80069d8:	f7fa fcfe 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80069dc:	2067      	movs	r0, #103	@ 0x67
 80069de:	f7fa fcfb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80069e2:	2001      	movs	r0, #1
 80069e4:	f7fa fcf8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80069e8:	2023      	movs	r0, #35	@ 0x23
 80069ea:	f7fa fcf5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80069ee:	2045      	movs	r0, #69	@ 0x45
 80069f0:	f7fa fcf2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80069f4:	2067      	movs	r0, #103	@ 0x67
 80069f6:	f7fa fcef 	bl	80013d8 <lcd_wr_xdata>
 80069fa:	23be      	movs	r3, #190	@ 0xbe
 80069fc:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a00:	4b65      	ldr	r3, [pc, #404]	@ (8006b98 <lcd_init+0x4548>)
 8006a02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a06:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a08:	4b63      	ldr	r3, [pc, #396]	@ (8006b98 <lcd_init+0x4548>)
 8006a0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a0e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a10:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	4b61      	ldr	r3, [pc, #388]	@ (8006b9c <lcd_init+0x454c>)
 8006a18:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8006b98 <lcd_init+0x4548>)
 8006a1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a20:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a22:	4b5d      	ldr	r3, [pc, #372]	@ (8006b98 <lcd_init+0x4548>)
 8006a24:	2280      	movs	r2, #128	@ 0x80
 8006a26:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a28:	4b5b      	ldr	r3, [pc, #364]	@ (8006b98 <lcd_init+0x4548>)
 8006a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a2e:	611a      	str	r2, [r3, #16]
}
 8006a30:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 8006a32:	2000      	movs	r0, #0
 8006a34:	f7fa fcd0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006a38:	2001      	movs	r0, #1
 8006a3a:	f7fa fccd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 8006a3e:	20ab      	movs	r0, #171	@ 0xab
 8006a40:	f7fa fcca 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 8006a44:	2060      	movs	r0, #96	@ 0x60
 8006a46:	f7fa fcc7 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006a4a:	2022      	movs	r0, #34	@ 0x22
 8006a4c:	f7fa fcc4 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006a50:	2022      	movs	r0, #34	@ 0x22
 8006a52:	f7fa fcc1 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006a56:	2022      	movs	r0, #34	@ 0x22
 8006a58:	f7fa fcbe 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006a5c:	2022      	movs	r0, #34	@ 0x22
 8006a5e:	f7fa fcbb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006a62:	2022      	movs	r0, #34	@ 0x22
 8006a64:	f7fa fcb8 	bl	80013d8 <lcd_wr_xdata>
 8006a68:	23c7      	movs	r3, #199	@ 0xc7
 8006a6a:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8006b98 <lcd_init+0x4548>)
 8006a70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a74:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a76:	4b48      	ldr	r3, [pc, #288]	@ (8006b98 <lcd_init+0x4548>)
 8006a78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a7c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a7e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	4b45      	ldr	r3, [pc, #276]	@ (8006b9c <lcd_init+0x454c>)
 8006a86:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a88:	4b43      	ldr	r3, [pc, #268]	@ (8006b98 <lcd_init+0x4548>)
 8006a8a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a8e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a90:	4b41      	ldr	r3, [pc, #260]	@ (8006b98 <lcd_init+0x4548>)
 8006a92:	2280      	movs	r2, #128	@ 0x80
 8006a94:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a96:	4b40      	ldr	r3, [pc, #256]	@ (8006b98 <lcd_init+0x4548>)
 8006a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a9c:	611a      	str	r2, [r3, #16]
}
 8006a9e:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 8006aa0:	2036      	movs	r0, #54	@ 0x36
 8006aa2:	f7fa fc99 	bl	80013d8 <lcd_wr_xdata>
 8006aa6:	23ed      	movs	r3, #237	@ 0xed
 8006aa8:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006aac:	4b3a      	ldr	r3, [pc, #232]	@ (8006b98 <lcd_init+0x4548>)
 8006aae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ab2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ab4:	4b38      	ldr	r3, [pc, #224]	@ (8006b98 <lcd_init+0x4548>)
 8006ab6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006aba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006abc:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	4b36      	ldr	r3, [pc, #216]	@ (8006b9c <lcd_init+0x454c>)
 8006ac4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006ac6:	4b34      	ldr	r3, [pc, #208]	@ (8006b98 <lcd_init+0x4548>)
 8006ac8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006acc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ace:	4b32      	ldr	r3, [pc, #200]	@ (8006b98 <lcd_init+0x4548>)
 8006ad0:	2280      	movs	r2, #128	@ 0x80
 8006ad2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006ad4:	4b30      	ldr	r3, [pc, #192]	@ (8006b98 <lcd_init+0x4548>)
 8006ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ada:	611a      	str	r2, [r3, #16]
}
 8006adc:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 8006ade:	207f      	movs	r0, #127	@ 0x7f
 8006ae0:	f7fa fc7a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8006ae4:	200f      	movs	r0, #15
 8006ae6:	f7fa fc77 	bl	80013d8 <lcd_wr_xdata>
 8006aea:	23c0      	movs	r3, #192	@ 0xc0
 8006aec:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006af0:	4b29      	ldr	r3, [pc, #164]	@ (8006b98 <lcd_init+0x4548>)
 8006af2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006af6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006af8:	4b27      	ldr	r3, [pc, #156]	@ (8006b98 <lcd_init+0x4548>)
 8006afa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006afe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b00:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	4b25      	ldr	r3, [pc, #148]	@ (8006b9c <lcd_init+0x454c>)
 8006b08:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b0a:	4b23      	ldr	r3, [pc, #140]	@ (8006b98 <lcd_init+0x4548>)
 8006b0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b10:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b12:	4b21      	ldr	r3, [pc, #132]	@ (8006b98 <lcd_init+0x4548>)
 8006b14:	2280      	movs	r2, #128	@ 0x80
 8006b16:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b18:	4b1f      	ldr	r3, [pc, #124]	@ (8006b98 <lcd_init+0x4548>)
 8006b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b1e:	611a      	str	r2, [r3, #16]
}
 8006b20:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 8006b22:	200f      	movs	r0, #15
 8006b24:	f7fa fc58 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006b28:	200b      	movs	r0, #11
 8006b2a:	f7fa fc55 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 8006b2e:	200a      	movs	r0, #10
 8006b30:	f7fa fc52 	bl	80013d8 <lcd_wr_xdata>
 8006b34:	23fc      	movs	r3, #252	@ 0xfc
 8006b36:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b3a:	4b17      	ldr	r3, [pc, #92]	@ (8006b98 <lcd_init+0x4548>)
 8006b3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b40:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b42:	4b15      	ldr	r3, [pc, #84]	@ (8006b98 <lcd_init+0x4548>)
 8006b44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b48:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b4a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	4b12      	ldr	r3, [pc, #72]	@ (8006b9c <lcd_init+0x454c>)
 8006b52:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b54:	4b10      	ldr	r3, [pc, #64]	@ (8006b98 <lcd_init+0x4548>)
 8006b56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b5a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b98 <lcd_init+0x4548>)
 8006b5e:	2280      	movs	r2, #128	@ 0x80
 8006b60:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b62:	4b0d      	ldr	r3, [pc, #52]	@ (8006b98 <lcd_init+0x4548>)
 8006b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b68:	611a      	str	r2, [r3, #16]
}
 8006b6a:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 8006b6c:	2008      	movs	r0, #8
 8006b6e:	f7fa fc33 	bl	80013d8 <lcd_wr_xdata>
 8006b72:	23df      	movs	r3, #223	@ 0xdf
 8006b74:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b78:	4b07      	ldr	r3, [pc, #28]	@ (8006b98 <lcd_init+0x4548>)
 8006b7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b7e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b80:	4b05      	ldr	r3, [pc, #20]	@ (8006b98 <lcd_init+0x4548>)
 8006b82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b86:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b88:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	4b03      	ldr	r3, [pc, #12]	@ (8006b9c <lcd_init+0x454c>)
 8006b90:	60da      	str	r2, [r3, #12]
 8006b92:	e005      	b.n	8006ba0 <lcd_init+0x4550>
 8006b94:	20000038 	.word	0x20000038
 8006b98:	40011000 	.word	0x40011000
 8006b9c:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006ba0:	4bc7      	ldr	r3, [pc, #796]	@ (8006ec0 <lcd_init+0x4870>)
 8006ba2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006ba6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ba8:	4bc5      	ldr	r3, [pc, #788]	@ (8006ec0 <lcd_init+0x4870>)
 8006baa:	2280      	movs	r2, #128	@ 0x80
 8006bac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006bae:	4bc4      	ldr	r3, [pc, #784]	@ (8006ec0 <lcd_init+0x4870>)
 8006bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bb4:	611a      	str	r2, [r3, #16]
}
 8006bb6:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 8006bb8:	2000      	movs	r0, #0
 8006bba:	f7fa fc0d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f7fa fc0a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	f7fa fc07 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006bca:	2000      	movs	r0, #0
 8006bcc:	f7fa fc04 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f7fa fc01 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 8006bd6:	2020      	movs	r0, #32
 8006bd8:	f7fa fbfe 	bl	80013d8 <lcd_wr_xdata>
 8006bdc:	23f3      	movs	r3, #243	@ 0xf3
 8006bde:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006be2:	4bb7      	ldr	r3, [pc, #732]	@ (8006ec0 <lcd_init+0x4870>)
 8006be4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006be8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006bea:	4bb5      	ldr	r3, [pc, #724]	@ (8006ec0 <lcd_init+0x4870>)
 8006bec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bf0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006bf2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	4bb2      	ldr	r3, [pc, #712]	@ (8006ec4 <lcd_init+0x4874>)
 8006bfa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006bfc:	4bb0      	ldr	r3, [pc, #704]	@ (8006ec0 <lcd_init+0x4870>)
 8006bfe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c02:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c04:	4bae      	ldr	r3, [pc, #696]	@ (8006ec0 <lcd_init+0x4870>)
 8006c06:	2280      	movs	r2, #128	@ 0x80
 8006c08:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c0a:	4bad      	ldr	r3, [pc, #692]	@ (8006ec0 <lcd_init+0x4870>)
 8006c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c10:	611a      	str	r2, [r3, #16]
}
 8006c12:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 8006c14:	2074      	movs	r0, #116	@ 0x74
 8006c16:	f7fa fbdf 	bl	80013d8 <lcd_wr_xdata>
 8006c1a:	23b4      	movs	r3, #180	@ 0xb4
 8006c1c:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c20:	4ba7      	ldr	r3, [pc, #668]	@ (8006ec0 <lcd_init+0x4870>)
 8006c22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c26:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006c28:	4ba5      	ldr	r3, [pc, #660]	@ (8006ec0 <lcd_init+0x4870>)
 8006c2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c2e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006c30:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	4ba3      	ldr	r3, [pc, #652]	@ (8006ec4 <lcd_init+0x4874>)
 8006c38:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006c3a:	4ba1      	ldr	r3, [pc, #644]	@ (8006ec0 <lcd_init+0x4870>)
 8006c3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c40:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c42:	4b9f      	ldr	r3, [pc, #636]	@ (8006ec0 <lcd_init+0x4870>)
 8006c44:	2280      	movs	r2, #128	@ 0x80
 8006c46:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c48:	4b9d      	ldr	r3, [pc, #628]	@ (8006ec0 <lcd_init+0x4870>)
 8006c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c4e:	611a      	str	r2, [r3, #16]
}
 8006c50:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 8006c52:	2000      	movs	r0, #0
 8006c54:	f7fa fbc0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f7fa fbbd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f7fa fbba 	bl	80013d8 <lcd_wr_xdata>
 8006c64:	23f7      	movs	r3, #247	@ 0xf7
 8006c66:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c6a:	4b95      	ldr	r3, [pc, #596]	@ (8006ec0 <lcd_init+0x4870>)
 8006c6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c70:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006c72:	4b93      	ldr	r3, [pc, #588]	@ (8006ec0 <lcd_init+0x4870>)
 8006c74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c78:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006c7a:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	4b90      	ldr	r3, [pc, #576]	@ (8006ec4 <lcd_init+0x4874>)
 8006c82:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006c84:	4b8e      	ldr	r3, [pc, #568]	@ (8006ec0 <lcd_init+0x4870>)
 8006c86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c8a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c8c:	4b8c      	ldr	r3, [pc, #560]	@ (8006ec0 <lcd_init+0x4870>)
 8006c8e:	2280      	movs	r2, #128	@ 0x80
 8006c90:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c92:	4b8b      	ldr	r3, [pc, #556]	@ (8006ec0 <lcd_init+0x4870>)
 8006c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c98:	611a      	str	r2, [r3, #16]
}
 8006c9a:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 8006c9c:	2082      	movs	r0, #130	@ 0x82
 8006c9e:	f7fa fb9b 	bl	80013d8 <lcd_wr_xdata>
 8006ca2:	23b1      	movs	r3, #177	@ 0xb1
 8006ca4:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006ca8:	4b85      	ldr	r3, [pc, #532]	@ (8006ec0 <lcd_init+0x4870>)
 8006caa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006cae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006cb0:	4b83      	ldr	r3, [pc, #524]	@ (8006ec0 <lcd_init+0x4870>)
 8006cb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006cb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006cb8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	4b81      	ldr	r3, [pc, #516]	@ (8006ec4 <lcd_init+0x4874>)
 8006cc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ec0 <lcd_init+0x4870>)
 8006cc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006cc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006cca:	4b7d      	ldr	r3, [pc, #500]	@ (8006ec0 <lcd_init+0x4870>)
 8006ccc:	2280      	movs	r2, #128	@ 0x80
 8006cce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006cd0:	4b7b      	ldr	r3, [pc, #492]	@ (8006ec0 <lcd_init+0x4870>)
 8006cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cd6:	611a      	str	r2, [r3, #16]
}
 8006cd8:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f7fa fb7c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8006ce0:	2013      	movs	r0, #19
 8006ce2:	f7fa fb79 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8006ce6:	2013      	movs	r0, #19
 8006ce8:	f7fa fb76 	bl	80013d8 <lcd_wr_xdata>
 8006cec:	23f2      	movs	r3, #242	@ 0xf2
 8006cee:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006cf2:	4b73      	ldr	r3, [pc, #460]	@ (8006ec0 <lcd_init+0x4870>)
 8006cf4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006cf8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006cfa:	4b71      	ldr	r3, [pc, #452]	@ (8006ec0 <lcd_init+0x4870>)
 8006cfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d00:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006d02:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	4b6e      	ldr	r3, [pc, #440]	@ (8006ec4 <lcd_init+0x4874>)
 8006d0a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ec0 <lcd_init+0x4870>)
 8006d0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006d12:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006d14:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec0 <lcd_init+0x4870>)
 8006d16:	2280      	movs	r2, #128	@ 0x80
 8006d18:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006d1a:	4b69      	ldr	r3, [pc, #420]	@ (8006ec0 <lcd_init+0x4870>)
 8006d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d20:	611a      	str	r2, [r3, #16]
}
 8006d22:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 8006d24:	2080      	movs	r0, #128	@ 0x80
 8006d26:	f7fa fb57 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8006d2a:	2004      	movs	r0, #4
 8006d2c:	f7fa fb54 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8006d30:	2040      	movs	r0, #64	@ 0x40
 8006d32:	f7fa fb51 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8006d36:	2028      	movs	r0, #40	@ 0x28
 8006d38:	f7fa fb4e 	bl	80013d8 <lcd_wr_xdata>
 8006d3c:	23c1      	movs	r3, #193	@ 0xc1
 8006d3e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006d42:	4b5f      	ldr	r3, [pc, #380]	@ (8006ec0 <lcd_init+0x4870>)
 8006d44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ec0 <lcd_init+0x4870>)
 8006d4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006d52:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	4b5a      	ldr	r3, [pc, #360]	@ (8006ec4 <lcd_init+0x4874>)
 8006d5a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006d5c:	4b58      	ldr	r3, [pc, #352]	@ (8006ec0 <lcd_init+0x4870>)
 8006d5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006d62:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006d64:	4b56      	ldr	r3, [pc, #344]	@ (8006ec0 <lcd_init+0x4870>)
 8006d66:	2280      	movs	r2, #128	@ 0x80
 8006d68:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006d6a:	4b55      	ldr	r3, [pc, #340]	@ (8006ec0 <lcd_init+0x4870>)
 8006d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d70:	611a      	str	r2, [r3, #16]
}
 8006d72:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 8006d74:	2017      	movs	r0, #23
 8006d76:	f7fa fb2f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 8006d7a:	2088      	movs	r0, #136	@ 0x88
 8006d7c:	f7fa fb2c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 8006d80:	2088      	movs	r0, #136	@ 0x88
 8006d82:	f7fa fb29 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 8006d86:	2020      	movs	r0, #32
 8006d88:	f7fa fb26 	bl	80013d8 <lcd_wr_xdata>
 8006d8c:	23e0      	movs	r3, #224	@ 0xe0
 8006d8e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006d92:	4b4b      	ldr	r3, [pc, #300]	@ (8006ec0 <lcd_init+0x4870>)
 8006d94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d98:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006d9a:	4b49      	ldr	r3, [pc, #292]	@ (8006ec0 <lcd_init+0x4870>)
 8006d9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006da0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006da2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	4b46      	ldr	r3, [pc, #280]	@ (8006ec4 <lcd_init+0x4874>)
 8006daa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006dac:	4b44      	ldr	r3, [pc, #272]	@ (8006ec0 <lcd_init+0x4870>)
 8006dae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006db2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006db4:	4b42      	ldr	r3, [pc, #264]	@ (8006ec0 <lcd_init+0x4870>)
 8006db6:	2280      	movs	r2, #128	@ 0x80
 8006db8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006dba:	4b41      	ldr	r3, [pc, #260]	@ (8006ec0 <lcd_init+0x4870>)
 8006dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dc0:	611a      	str	r2, [r3, #16]
}
 8006dc2:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	f7fa fb07 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 8006dca:	200a      	movs	r0, #10
 8006dcc:	f7fa fb04 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 8006dd0:	2012      	movs	r0, #18
 8006dd2:	f7fa fb01 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 8006dd6:	2010      	movs	r0, #16
 8006dd8:	f7fa fafe 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006ddc:	200e      	movs	r0, #14
 8006dde:	f7fa fafb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 8006de2:	2020      	movs	r0, #32
 8006de4:	f7fa faf8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 8006de8:	20cc      	movs	r0, #204	@ 0xcc
 8006dea:	f7fa faf5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 8006dee:	2007      	movs	r0, #7
 8006df0:	f7fa faf2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 8006df4:	2006      	movs	r0, #6
 8006df6:	f7fa faef 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 8006dfa:	200b      	movs	r0, #11
 8006dfc:	f7fa faec 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 8006e00:	200e      	movs	r0, #14
 8006e02:	f7fa fae9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 8006e06:	200f      	movs	r0, #15
 8006e08:	f7fa fae6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 8006e0c:	200d      	movs	r0, #13
 8006e0e:	f7fa fae3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 8006e12:	2015      	movs	r0, #21
 8006e14:	f7fa fae0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 8006e18:	2010      	movs	r0, #16
 8006e1a:	f7fa fadd 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 8006e1e:	2000      	movs	r0, #0
 8006e20:	f7fa fada 	bl	80013d8 <lcd_wr_xdata>
 8006e24:	23e1      	movs	r3, #225	@ 0xe1
 8006e26:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006e2a:	4b25      	ldr	r3, [pc, #148]	@ (8006ec0 <lcd_init+0x4870>)
 8006e2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e30:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006e32:	4b23      	ldr	r3, [pc, #140]	@ (8006ec0 <lcd_init+0x4870>)
 8006e34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e38:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006e3a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	4b20      	ldr	r3, [pc, #128]	@ (8006ec4 <lcd_init+0x4874>)
 8006e42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006e44:	4b1e      	ldr	r3, [pc, #120]	@ (8006ec0 <lcd_init+0x4870>)
 8006e46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006e4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ec0 <lcd_init+0x4870>)
 8006e4e:	2280      	movs	r2, #128	@ 0x80
 8006e50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006e52:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec0 <lcd_init+0x4870>)
 8006e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e58:	611a      	str	r2, [r3, #16]
}
 8006e5a:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f7fa fabb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 8006e62:	200b      	movs	r0, #11
 8006e64:	f7fa fab8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 8006e68:	2013      	movs	r0, #19
 8006e6a:	f7fa fab5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 8006e6e:	200d      	movs	r0, #13
 8006e70:	f7fa fab2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006e74:	200e      	movs	r0, #14
 8006e76:	f7fa faaf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 8006e7a:	201b      	movs	r0, #27
 8006e7c:	f7fa faac 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 8006e80:	2071      	movs	r0, #113	@ 0x71
 8006e82:	f7fa faa9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 8006e86:	2006      	movs	r0, #6
 8006e88:	f7fa faa6 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 8006e8c:	2006      	movs	r0, #6
 8006e8e:	f7fa faa3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 8006e92:	200a      	movs	r0, #10
 8006e94:	f7fa faa0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 8006e98:	200f      	movs	r0, #15
 8006e9a:	f7fa fa9d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 8006e9e:	200e      	movs	r0, #14
 8006ea0:	f7fa fa9a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 8006ea4:	200f      	movs	r0, #15
 8006ea6:	f7fa fa97 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 8006eaa:	2015      	movs	r0, #21
 8006eac:	f7fa fa94 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 8006eb0:	200c      	movs	r0, #12
 8006eb2:	f7fa fa91 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	f7fa fa8e 	bl	80013d8 <lcd_wr_xdata>
 8006ebc:	e004      	b.n	8006ec8 <lcd_init+0x4878>
 8006ebe:	bf00      	nop
 8006ec0:	40011000 	.word	0x40011000
 8006ec4:	40010c00 	.word	0x40010c00
 8006ec8:	232a      	movs	r3, #42	@ 0x2a
 8006eca:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006ece:	4b72      	ldr	r3, [pc, #456]	@ (8007098 <lcd_init+0x4a48>)
 8006ed0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ed4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ed6:	4b70      	ldr	r3, [pc, #448]	@ (8007098 <lcd_init+0x4a48>)
 8006ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006edc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006ede:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	4b6d      	ldr	r3, [pc, #436]	@ (800709c <lcd_init+0x4a4c>)
 8006ee6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006ee8:	4b6b      	ldr	r3, [pc, #428]	@ (8007098 <lcd_init+0x4a48>)
 8006eea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006eee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ef0:	4b69      	ldr	r3, [pc, #420]	@ (8007098 <lcd_init+0x4a48>)
 8006ef2:	2280      	movs	r2, #128	@ 0x80
 8006ef4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006ef6:	4b68      	ldr	r3, [pc, #416]	@ (8007098 <lcd_init+0x4a48>)
 8006ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006efc:	611a      	str	r2, [r3, #16]
}
 8006efe:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 8006f00:	2000      	movs	r0, #0
 8006f02:	f7fa fa69 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006f06:	2000      	movs	r0, #0
 8006f08:	f7fa fa66 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	f7fa fa63 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 8006f12:	20df      	movs	r0, #223	@ 0xdf
 8006f14:	f7fa fa60 	bl	80013d8 <lcd_wr_xdata>
 8006f18:	232b      	movs	r3, #43	@ 0x2b
 8006f1a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8007098 <lcd_init+0x4a48>)
 8006f20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f24:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006f26:	4b5c      	ldr	r3, [pc, #368]	@ (8007098 <lcd_init+0x4a48>)
 8006f28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f2c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006f2e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	4b59      	ldr	r3, [pc, #356]	@ (800709c <lcd_init+0x4a4c>)
 8006f36:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006f38:	4b57      	ldr	r3, [pc, #348]	@ (8007098 <lcd_init+0x4a48>)
 8006f3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006f3e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006f40:	4b55      	ldr	r3, [pc, #340]	@ (8007098 <lcd_init+0x4a48>)
 8006f42:	2280      	movs	r2, #128	@ 0x80
 8006f44:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006f46:	4b54      	ldr	r3, [pc, #336]	@ (8007098 <lcd_init+0x4a48>)
 8006f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f4c:	611a      	str	r2, [r3, #16]
}
 8006f4e:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 8006f50:	2000      	movs	r0, #0
 8006f52:	f7fa fa41 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006f56:	2000      	movs	r0, #0
 8006f58:	f7fa fa3e 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8006f5c:	2003      	movs	r0, #3
 8006f5e:	f7fa fa3b 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 8006f62:	201f      	movs	r0, #31
 8006f64:	f7fa fa38 	bl	80013d8 <lcd_wr_xdata>
 8006f68:	233a      	movs	r3, #58	@ 0x3a
 8006f6a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8007098 <lcd_init+0x4a48>)
 8006f70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f74:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006f76:	4b48      	ldr	r3, [pc, #288]	@ (8007098 <lcd_init+0x4a48>)
 8006f78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f7c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006f7e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	4b45      	ldr	r3, [pc, #276]	@ (800709c <lcd_init+0x4a4c>)
 8006f86:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006f88:	4b43      	ldr	r3, [pc, #268]	@ (8007098 <lcd_init+0x4a48>)
 8006f8a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006f8e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006f90:	4b41      	ldr	r3, [pc, #260]	@ (8007098 <lcd_init+0x4a48>)
 8006f92:	2280      	movs	r2, #128	@ 0x80
 8006f94:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006f96:	4b40      	ldr	r3, [pc, #256]	@ (8007098 <lcd_init+0x4a48>)
 8006f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f9c:	611a      	str	r2, [r3, #16]
}
 8006f9e:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 8006fa0:	2055      	movs	r0, #85	@ 0x55
 8006fa2:	f7fa fa19 	bl	80013d8 <lcd_wr_xdata>
 8006fa6:	2336      	movs	r3, #54	@ 0x36
 8006fa8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006fac:	4b3a      	ldr	r3, [pc, #232]	@ (8007098 <lcd_init+0x4a48>)
 8006fae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006fb2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006fb4:	4b38      	ldr	r3, [pc, #224]	@ (8007098 <lcd_init+0x4a48>)
 8006fb6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006fba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006fbc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	4b36      	ldr	r3, [pc, #216]	@ (800709c <lcd_init+0x4a4c>)
 8006fc4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006fc6:	4b34      	ldr	r3, [pc, #208]	@ (8007098 <lcd_init+0x4a48>)
 8006fc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006fcc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006fce:	4b32      	ldr	r3, [pc, #200]	@ (8007098 <lcd_init+0x4a48>)
 8006fd0:	2280      	movs	r2, #128	@ 0x80
 8006fd2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006fd4:	4b30      	ldr	r3, [pc, #192]	@ (8007098 <lcd_init+0x4a48>)
 8006fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fda:	611a      	str	r2, [r3, #16]
}
 8006fdc:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 8006fde:	2000      	movs	r0, #0
 8006fe0:	f7fa f9fa 	bl	80013d8 <lcd_wr_xdata>
 8006fe4:	2311      	movs	r3, #17
 8006fe6:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006fea:	4b2b      	ldr	r3, [pc, #172]	@ (8007098 <lcd_init+0x4a48>)
 8006fec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ff0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ff2:	4b29      	ldr	r3, [pc, #164]	@ (8007098 <lcd_init+0x4a48>)
 8006ff4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ff8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006ffa:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	4b26      	ldr	r3, [pc, #152]	@ (800709c <lcd_init+0x4a4c>)
 8007002:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007004:	4b24      	ldr	r3, [pc, #144]	@ (8007098 <lcd_init+0x4a48>)
 8007006:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800700a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800700c:	4b22      	ldr	r3, [pc, #136]	@ (8007098 <lcd_init+0x4a48>)
 800700e:	2280      	movs	r2, #128	@ 0x80
 8007010:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007012:	4b21      	ldr	r3, [pc, #132]	@ (8007098 <lcd_init+0x4a48>)
 8007014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007018:	611a      	str	r2, [r3, #16]
}
 800701a:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 800701c:	2078      	movs	r0, #120	@ 0x78
 800701e:	f000 ffc1 	bl	8007fa4 <HAL_Delay>
 8007022:	2329      	movs	r3, #41	@ 0x29
 8007024:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007028:	4b1b      	ldr	r3, [pc, #108]	@ (8007098 <lcd_init+0x4a48>)
 800702a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800702e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007030:	4b19      	ldr	r3, [pc, #100]	@ (8007098 <lcd_init+0x4a48>)
 8007032:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007036:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007038:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800703c:	b29a      	uxth	r2, r3
 800703e:	4b17      	ldr	r3, [pc, #92]	@ (800709c <lcd_init+0x4a4c>)
 8007040:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007042:	4b15      	ldr	r3, [pc, #84]	@ (8007098 <lcd_init+0x4a48>)
 8007044:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007048:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800704a:	4b13      	ldr	r3, [pc, #76]	@ (8007098 <lcd_init+0x4a48>)
 800704c:	2280      	movs	r2, #128	@ 0x80
 800704e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007050:	4b11      	ldr	r3, [pc, #68]	@ (8007098 <lcd_init+0x4a48>)
 8007052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007056:	611a      	str	r2, [r3, #16]
}
 8007058:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 800705a:	2014      	movs	r0, #20
 800705c:	f000 ffa2 	bl	8007fa4 <HAL_Delay>
 8007060:	232c      	movs	r3, #44	@ 0x2c
 8007062:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007066:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <lcd_init+0x4a48>)
 8007068:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800706c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800706e:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <lcd_init+0x4a48>)
 8007070:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007074:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007076:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 800707a:	b29a      	uxth	r2, r3
 800707c:	4b07      	ldr	r3, [pc, #28]	@ (800709c <lcd_init+0x4a4c>)
 800707e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007080:	4b05      	ldr	r3, [pc, #20]	@ (8007098 <lcd_init+0x4a48>)
 8007082:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007086:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007088:	4b03      	ldr	r3, [pc, #12]	@ (8007098 <lcd_init+0x4a48>)
 800708a:	2280      	movs	r2, #128	@ 0x80
 800708c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800708e:	4b02      	ldr	r3, [pc, #8]	@ (8007098 <lcd_init+0x4a48>)
 8007090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007094:	611a      	str	r2, [r3, #16]
}
 8007096:	e224      	b.n	80074e2 <lcd_init+0x4e92>
 8007098:	40011000 	.word	0x40011000
 800709c:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 80070a0:	4bbe      	ldr	r3, [pc, #760]	@ (800739c <lcd_init+0x4d4c>)
 80070a2:	889b      	ldrh	r3, [r3, #4]
 80070a4:	f641 1263 	movw	r2, #6499	@ 0x1963
 80070a8:	4293      	cmp	r3, r2
 80070aa:	f040 821a 	bne.w	80074e2 <lcd_init+0x4e92>
 80070ae:	23e2      	movs	r3, #226	@ 0xe2
 80070b0:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80070b4:	4bba      	ldr	r3, [pc, #744]	@ (80073a0 <lcd_init+0x4d50>)
 80070b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070ba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80070bc:	4bb8      	ldr	r3, [pc, #736]	@ (80073a0 <lcd_init+0x4d50>)
 80070be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80070c2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80070c4:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	4bb6      	ldr	r3, [pc, #728]	@ (80073a4 <lcd_init+0x4d54>)
 80070cc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80070ce:	4bb4      	ldr	r3, [pc, #720]	@ (80073a0 <lcd_init+0x4d50>)
 80070d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80070d4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80070d6:	4bb2      	ldr	r3, [pc, #712]	@ (80073a0 <lcd_init+0x4d50>)
 80070d8:	2280      	movs	r2, #128	@ 0x80
 80070da:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80070dc:	4bb0      	ldr	r3, [pc, #704]	@ (80073a0 <lcd_init+0x4d50>)
 80070de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070e2:	611a      	str	r2, [r3, #16]
}
 80070e4:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 80070e6:	201d      	movs	r0, #29
 80070e8:	f7fa f976 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 80070ec:	2002      	movs	r0, #2
 80070ee:	f7fa f973 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 80070f2:	2004      	movs	r0, #4
 80070f4:	f7fa f970 	bl	80013d8 <lcd_wr_xdata>
 80070f8:	23e0      	movs	r3, #224	@ 0xe0
 80070fa:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80070fe:	4ba8      	ldr	r3, [pc, #672]	@ (80073a0 <lcd_init+0x4d50>)
 8007100:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007104:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007106:	4ba6      	ldr	r3, [pc, #664]	@ (80073a0 <lcd_init+0x4d50>)
 8007108:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800710c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800710e:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 8007112:	b29a      	uxth	r2, r3
 8007114:	4ba3      	ldr	r3, [pc, #652]	@ (80073a4 <lcd_init+0x4d54>)
 8007116:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007118:	4ba1      	ldr	r3, [pc, #644]	@ (80073a0 <lcd_init+0x4d50>)
 800711a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800711e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007120:	4b9f      	ldr	r3, [pc, #636]	@ (80073a0 <lcd_init+0x4d50>)
 8007122:	2280      	movs	r2, #128	@ 0x80
 8007124:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007126:	4b9e      	ldr	r3, [pc, #632]	@ (80073a0 <lcd_init+0x4d50>)
 8007128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800712c:	611a      	str	r2, [r3, #16]
}
 800712e:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 8007130:	2001      	movs	r0, #1
 8007132:	f7fa f951 	bl	80013d8 <lcd_wr_xdata>
        HAL_Delay(10);
 8007136:	200a      	movs	r0, #10
 8007138:	f000 ff34 	bl	8007fa4 <HAL_Delay>
 800713c:	23e0      	movs	r3, #224	@ 0xe0
 800713e:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007142:	4b97      	ldr	r3, [pc, #604]	@ (80073a0 <lcd_init+0x4d50>)
 8007144:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007148:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800714a:	4b95      	ldr	r3, [pc, #596]	@ (80073a0 <lcd_init+0x4d50>)
 800714c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007150:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007152:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8007156:	b29a      	uxth	r2, r3
 8007158:	4b92      	ldr	r3, [pc, #584]	@ (80073a4 <lcd_init+0x4d54>)
 800715a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800715c:	4b90      	ldr	r3, [pc, #576]	@ (80073a0 <lcd_init+0x4d50>)
 800715e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007162:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007164:	4b8e      	ldr	r3, [pc, #568]	@ (80073a0 <lcd_init+0x4d50>)
 8007166:	2280      	movs	r2, #128	@ 0x80
 8007168:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800716a:	4b8d      	ldr	r3, [pc, #564]	@ (80073a0 <lcd_init+0x4d50>)
 800716c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007170:	611a      	str	r2, [r3, #16]
}
 8007172:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 8007174:	2003      	movs	r0, #3
 8007176:	f7fa f92f 	bl	80013d8 <lcd_wr_xdata>
        HAL_Delay(12);
 800717a:	200c      	movs	r0, #12
 800717c:	f000 ff12 	bl	8007fa4 <HAL_Delay>
 8007180:	2301      	movs	r3, #1
 8007182:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007186:	4b86      	ldr	r3, [pc, #536]	@ (80073a0 <lcd_init+0x4d50>)
 8007188:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800718c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800718e:	4b84      	ldr	r3, [pc, #528]	@ (80073a0 <lcd_init+0x4d50>)
 8007190:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007194:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007196:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 800719a:	b29a      	uxth	r2, r3
 800719c:	4b81      	ldr	r3, [pc, #516]	@ (80073a4 <lcd_init+0x4d54>)
 800719e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80071a0:	4b7f      	ldr	r3, [pc, #508]	@ (80073a0 <lcd_init+0x4d50>)
 80071a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80071a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80071a8:	4b7d      	ldr	r3, [pc, #500]	@ (80073a0 <lcd_init+0x4d50>)
 80071aa:	2280      	movs	r2, #128	@ 0x80
 80071ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80071ae:	4b7c      	ldr	r3, [pc, #496]	@ (80073a0 <lcd_init+0x4d50>)
 80071b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071b4:	611a      	str	r2, [r3, #16]
}
 80071b6:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 80071b8:	200a      	movs	r0, #10
 80071ba:	f000 fef3 	bl	8007fa4 <HAL_Delay>
 80071be:	23e6      	movs	r3, #230	@ 0xe6
 80071c0:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80071c4:	4b76      	ldr	r3, [pc, #472]	@ (80073a0 <lcd_init+0x4d50>)
 80071c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071ca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80071cc:	4b74      	ldr	r3, [pc, #464]	@ (80073a0 <lcd_init+0x4d50>)
 80071ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80071d2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80071d4:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 80071d8:	b29a      	uxth	r2, r3
 80071da:	4b72      	ldr	r3, [pc, #456]	@ (80073a4 <lcd_init+0x4d54>)
 80071dc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80071de:	4b70      	ldr	r3, [pc, #448]	@ (80073a0 <lcd_init+0x4d50>)
 80071e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80071e4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80071e6:	4b6e      	ldr	r3, [pc, #440]	@ (80073a0 <lcd_init+0x4d50>)
 80071e8:	2280      	movs	r2, #128	@ 0x80
 80071ea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80071ec:	4b6c      	ldr	r3, [pc, #432]	@ (80073a0 <lcd_init+0x4d50>)
 80071ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071f2:	611a      	str	r2, [r3, #16]
}
 80071f4:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 80071f6:	202f      	movs	r0, #47	@ 0x2f
 80071f8:	f7fa f8ee 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80071fc:	20ff      	movs	r0, #255	@ 0xff
 80071fe:	f7fa f8eb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8007202:	20ff      	movs	r0, #255	@ 0xff
 8007204:	f7fa f8e8 	bl	80013d8 <lcd_wr_xdata>
 8007208:	23b0      	movs	r3, #176	@ 0xb0
 800720a:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800720e:	4b64      	ldr	r3, [pc, #400]	@ (80073a0 <lcd_init+0x4d50>)
 8007210:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007214:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007216:	4b62      	ldr	r3, [pc, #392]	@ (80073a0 <lcd_init+0x4d50>)
 8007218:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800721c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800721e:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 8007222:	b29a      	uxth	r2, r3
 8007224:	4b5f      	ldr	r3, [pc, #380]	@ (80073a4 <lcd_init+0x4d54>)
 8007226:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007228:	4b5d      	ldr	r3, [pc, #372]	@ (80073a0 <lcd_init+0x4d50>)
 800722a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800722e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007230:	4b5b      	ldr	r3, [pc, #364]	@ (80073a0 <lcd_init+0x4d50>)
 8007232:	2280      	movs	r2, #128	@ 0x80
 8007234:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007236:	4b5a      	ldr	r3, [pc, #360]	@ (80073a0 <lcd_init+0x4d50>)
 8007238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800723c:	611a      	str	r2, [r3, #16]
}
 800723e:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 8007240:	2020      	movs	r0, #32
 8007242:	f7fa f8c9 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 8007246:	2000      	movs	r0, #0
 8007248:	f7fa f8c6 	bl	80013d8 <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 800724c:	2003      	movs	r0, #3
 800724e:	f7fa f8c3 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 8007252:	f240 301f 	movw	r0, #799	@ 0x31f
 8007256:	f7fa f8bf 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 800725a:	2001      	movs	r0, #1
 800725c:	f7fa f8bc 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8007260:	f240 10df 	movw	r0, #479	@ 0x1df
 8007264:	f7fa f8b8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 8007268:	2000      	movs	r0, #0
 800726a:	f7fa f8b5 	bl	80013d8 <lcd_wr_xdata>
 800726e:	23b4      	movs	r3, #180	@ 0xb4
 8007270:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007274:	4b4a      	ldr	r3, [pc, #296]	@ (80073a0 <lcd_init+0x4d50>)
 8007276:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800727a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800727c:	4b48      	ldr	r3, [pc, #288]	@ (80073a0 <lcd_init+0x4d50>)
 800727e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007282:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007284:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8007288:	b29a      	uxth	r2, r3
 800728a:	4b46      	ldr	r3, [pc, #280]	@ (80073a4 <lcd_init+0x4d54>)
 800728c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800728e:	4b44      	ldr	r3, [pc, #272]	@ (80073a0 <lcd_init+0x4d50>)
 8007290:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007294:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007296:	4b42      	ldr	r3, [pc, #264]	@ (80073a0 <lcd_init+0x4d50>)
 8007298:	2280      	movs	r2, #128	@ 0x80
 800729a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800729c:	4b40      	ldr	r3, [pc, #256]	@ (80073a0 <lcd_init+0x4d50>)
 800729e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072a2:	611a      	str	r2, [r3, #16]
}
 80072a4:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 80072a6:	2004      	movs	r0, #4
 80072a8:	f7fa f896 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 80072ac:	f240 401f 	movw	r0, #1055	@ 0x41f
 80072b0:	f7fa f892 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 80072b4:	2000      	movs	r0, #0
 80072b6:	f7fa f88f 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 80072ba:	202e      	movs	r0, #46	@ 0x2e
 80072bc:	f7fa f88c 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 80072c0:	2000      	movs	r0, #0
 80072c2:	f7fa f889 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80072c6:	2000      	movs	r0, #0
 80072c8:	f7fa f886 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80072cc:	2000      	movs	r0, #0
 80072ce:	f7fa f883 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80072d2:	2000      	movs	r0, #0
 80072d4:	f7fa f880 	bl	80013d8 <lcd_wr_xdata>
 80072d8:	23b6      	movs	r3, #182	@ 0xb6
 80072da:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80072de:	4b30      	ldr	r3, [pc, #192]	@ (80073a0 <lcd_init+0x4d50>)
 80072e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072e4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80072e6:	4b2e      	ldr	r3, [pc, #184]	@ (80073a0 <lcd_init+0x4d50>)
 80072e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80072ec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80072ee:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	4b2b      	ldr	r3, [pc, #172]	@ (80073a4 <lcd_init+0x4d54>)
 80072f6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80072f8:	4b29      	ldr	r3, [pc, #164]	@ (80073a0 <lcd_init+0x4d50>)
 80072fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80072fe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007300:	4b27      	ldr	r3, [pc, #156]	@ (80073a0 <lcd_init+0x4d50>)
 8007302:	2280      	movs	r2, #128	@ 0x80
 8007304:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007306:	4b26      	ldr	r3, [pc, #152]	@ (80073a0 <lcd_init+0x4d50>)
 8007308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800730c:	611a      	str	r2, [r3, #16]
}
 800730e:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 8007310:	2002      	movs	r0, #2
 8007312:	f7fa f861 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 8007316:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 800731a:	f7fa f85d 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 800731e:	2000      	movs	r0, #0
 8007320:	f7fa f85a 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 8007324:	2017      	movs	r0, #23
 8007326:	f7fa f857 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 800732a:	2015      	movs	r0, #21
 800732c:	f7fa f854 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8007330:	2000      	movs	r0, #0
 8007332:	f7fa f851 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8007336:	2000      	movs	r0, #0
 8007338:	f7fa f84e 	bl	80013d8 <lcd_wr_xdata>
 800733c:	23f0      	movs	r3, #240	@ 0xf0
 800733e:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007342:	4b17      	ldr	r3, [pc, #92]	@ (80073a0 <lcd_init+0x4d50>)
 8007344:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007348:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800734a:	4b15      	ldr	r3, [pc, #84]	@ (80073a0 <lcd_init+0x4d50>)
 800734c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007350:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007352:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8007356:	b29a      	uxth	r2, r3
 8007358:	4b12      	ldr	r3, [pc, #72]	@ (80073a4 <lcd_init+0x4d54>)
 800735a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800735c:	4b10      	ldr	r3, [pc, #64]	@ (80073a0 <lcd_init+0x4d50>)
 800735e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007362:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007364:	4b0e      	ldr	r3, [pc, #56]	@ (80073a0 <lcd_init+0x4d50>)
 8007366:	2280      	movs	r2, #128	@ 0x80
 8007368:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800736a:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <lcd_init+0x4d50>)
 800736c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007370:	611a      	str	r2, [r3, #16]
}
 8007372:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 8007374:	2003      	movs	r0, #3
 8007376:	f7fa f82f 	bl	80013d8 <lcd_wr_xdata>
 800737a:	2329      	movs	r3, #41	@ 0x29
 800737c:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007380:	4b07      	ldr	r3, [pc, #28]	@ (80073a0 <lcd_init+0x4d50>)
 8007382:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007386:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007388:	4b05      	ldr	r3, [pc, #20]	@ (80073a0 <lcd_init+0x4d50>)
 800738a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800738e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007390:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 8007394:	b29a      	uxth	r2, r3
 8007396:	4b03      	ldr	r3, [pc, #12]	@ (80073a4 <lcd_init+0x4d54>)
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	e005      	b.n	80073a8 <lcd_init+0x4d58>
 800739c:	20000038 	.word	0x20000038
 80073a0:	40011000 	.word	0x40011000
 80073a4:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 80073a8:	4b56      	ldr	r3, [pc, #344]	@ (8007504 <lcd_init+0x4eb4>)
 80073aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80073ae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80073b0:	4b54      	ldr	r3, [pc, #336]	@ (8007504 <lcd_init+0x4eb4>)
 80073b2:	2280      	movs	r2, #128	@ 0x80
 80073b4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80073b6:	4b53      	ldr	r3, [pc, #332]	@ (8007504 <lcd_init+0x4eb4>)
 80073b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073bc:	611a      	str	r2, [r3, #16]
}
 80073be:	bf00      	nop
 80073c0:	23d0      	movs	r3, #208	@ 0xd0
 80073c2:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80073c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007504 <lcd_init+0x4eb4>)
 80073c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80073ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007504 <lcd_init+0x4eb4>)
 80073d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80073d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80073d6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80073da:	b29a      	uxth	r2, r3
 80073dc:	4b4a      	ldr	r3, [pc, #296]	@ (8007508 <lcd_init+0x4eb8>)
 80073de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80073e0:	4b48      	ldr	r3, [pc, #288]	@ (8007504 <lcd_init+0x4eb4>)
 80073e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80073e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80073e8:	4b46      	ldr	r3, [pc, #280]	@ (8007504 <lcd_init+0x4eb4>)
 80073ea:	2280      	movs	r2, #128	@ 0x80
 80073ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80073ee:	4b45      	ldr	r3, [pc, #276]	@ (8007504 <lcd_init+0x4eb4>)
 80073f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073f4:	611a      	str	r2, [r3, #16]
}
 80073f6:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 80073f8:	2000      	movs	r0, #0
 80073fa:	f7f9 ffed 	bl	80013d8 <lcd_wr_xdata>
 80073fe:	23be      	movs	r3, #190	@ 0xbe
 8007400:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007404:	4b3f      	ldr	r3, [pc, #252]	@ (8007504 <lcd_init+0x4eb4>)
 8007406:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800740a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800740c:	4b3d      	ldr	r3, [pc, #244]	@ (8007504 <lcd_init+0x4eb4>)
 800740e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007412:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007414:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8007418:	b29a      	uxth	r2, r3
 800741a:	4b3b      	ldr	r3, [pc, #236]	@ (8007508 <lcd_init+0x4eb8>)
 800741c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800741e:	4b39      	ldr	r3, [pc, #228]	@ (8007504 <lcd_init+0x4eb4>)
 8007420:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007424:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007426:	4b37      	ldr	r3, [pc, #220]	@ (8007504 <lcd_init+0x4eb4>)
 8007428:	2280      	movs	r2, #128	@ 0x80
 800742a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800742c:	4b35      	ldr	r3, [pc, #212]	@ (8007504 <lcd_init+0x4eb4>)
 800742e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007432:	611a      	str	r2, [r3, #16]
}
 8007434:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 8007436:	2005      	movs	r0, #5
 8007438:	f7f9 ffce 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 800743c:	20fe      	movs	r0, #254	@ 0xfe
 800743e:	f7f9 ffcb 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 8007442:	2001      	movs	r0, #1
 8007444:	f7f9 ffc8 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 8007448:	2000      	movs	r0, #0
 800744a:	f7f9 ffc5 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 800744e:	2000      	movs	r0, #0
 8007450:	f7f9 ffc2 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 8007454:	2000      	movs	r0, #0
 8007456:	f7f9 ffbf 	bl	80013d8 <lcd_wr_xdata>
 800745a:	23b8      	movs	r3, #184	@ 0xb8
 800745c:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007460:	4b28      	ldr	r3, [pc, #160]	@ (8007504 <lcd_init+0x4eb4>)
 8007462:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007466:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007468:	4b26      	ldr	r3, [pc, #152]	@ (8007504 <lcd_init+0x4eb4>)
 800746a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800746e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007470:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8007474:	b29a      	uxth	r2, r3
 8007476:	4b24      	ldr	r3, [pc, #144]	@ (8007508 <lcd_init+0x4eb8>)
 8007478:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800747a:	4b22      	ldr	r3, [pc, #136]	@ (8007504 <lcd_init+0x4eb4>)
 800747c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007480:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007482:	4b20      	ldr	r3, [pc, #128]	@ (8007504 <lcd_init+0x4eb4>)
 8007484:	2280      	movs	r2, #128	@ 0x80
 8007486:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007488:	4b1e      	ldr	r3, [pc, #120]	@ (8007504 <lcd_init+0x4eb4>)
 800748a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800748e:	611a      	str	r2, [r3, #16]
}
 8007490:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 8007492:	2003      	movs	r0, #3
 8007494:	f7f9 ffa0 	bl	80013d8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 8007498:	2001      	movs	r0, #1
 800749a:	f7f9 ff9d 	bl	80013d8 <lcd_wr_xdata>
 800749e:	23ba      	movs	r3, #186	@ 0xba
 80074a0:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80074a4:	4b17      	ldr	r3, [pc, #92]	@ (8007504 <lcd_init+0x4eb4>)
 80074a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074aa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80074ac:	4b15      	ldr	r3, [pc, #84]	@ (8007504 <lcd_init+0x4eb4>)
 80074ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80074b2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80074b4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	4b13      	ldr	r3, [pc, #76]	@ (8007508 <lcd_init+0x4eb8>)
 80074bc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80074be:	4b11      	ldr	r3, [pc, #68]	@ (8007504 <lcd_init+0x4eb4>)
 80074c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80074c4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80074c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <lcd_init+0x4eb4>)
 80074c8:	2280      	movs	r2, #128	@ 0x80
 80074ca:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80074cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <lcd_init+0x4eb4>)
 80074ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074d2:	611a      	str	r2, [r3, #16]
}
 80074d4:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 80074d6:	2001      	movs	r0, #1
 80074d8:	f7f9 ff7e 	bl	80013d8 <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 80074dc:	2064      	movs	r0, #100	@ 0x64
 80074de:	f7fa ff1f 	bl	8002320 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 80074e2:	2000      	movs	r0, #0
 80074e4:	f7fa ffdc 	bl	80024a0 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 80074e8:	4b06      	ldr	r3, [pc, #24]	@ (8007504 <lcd_init+0x4eb4>)
 80074ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80074ee:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 80074f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80074f4:	f000 f80a 	bl	800750c <lcd_clear>
}
 80074f8:	bf00      	nop
 80074fa:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40011000 	.word	0x40011000
 8007508:	40010c00 	.word	0x40010c00

0800750c <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 800751a:	4b27      	ldr	r3, [pc, #156]	@ (80075b8 <lcd_clear+0xac>)
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 8007520:	4b25      	ldr	r3, [pc, #148]	@ (80075b8 <lcd_clear+0xac>)
 8007522:	885b      	ldrh	r3, [r3, #2]
 8007524:	461a      	mov	r2, r3
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 800752e:	2100      	movs	r1, #0
 8007530:	2000      	movs	r0, #0
 8007532:	f7fa f80b 	bl	800154c <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8007536:	4b20      	ldr	r3, [pc, #128]	@ (80075b8 <lcd_clear+0xac>)
 8007538:	891b      	ldrh	r3, [r3, #8]
 800753a:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800753c:	4b1f      	ldr	r3, [pc, #124]	@ (80075bc <lcd_clear+0xb0>)
 800753e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007542:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007544:	4b1d      	ldr	r3, [pc, #116]	@ (80075bc <lcd_clear+0xb0>)
 8007546:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800754a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800754c:	89fb      	ldrh	r3, [r7, #14]
 800754e:	b29a      	uxth	r2, r3
 8007550:	4b1b      	ldr	r3, [pc, #108]	@ (80075c0 <lcd_clear+0xb4>)
 8007552:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007554:	4b19      	ldr	r3, [pc, #100]	@ (80075bc <lcd_clear+0xb0>)
 8007556:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800755a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800755c:	4b17      	ldr	r3, [pc, #92]	@ (80075bc <lcd_clear+0xb0>)
 800755e:	2280      	movs	r2, #128	@ 0x80
 8007560:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007562:	4b16      	ldr	r3, [pc, #88]	@ (80075bc <lcd_clear+0xb0>)
 8007564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007568:	611a      	str	r2, [r3, #16]
}
 800756a:	bf00      	nop
}
 800756c:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 800756e:	4b13      	ldr	r3, [pc, #76]	@ (80075bc <lcd_clear+0xb0>)
 8007570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007574:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007576:	4b11      	ldr	r3, [pc, #68]	@ (80075bc <lcd_clear+0xb0>)
 8007578:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800757c:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 800757e:	2300      	movs	r3, #0
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e00c      	b.n	800759e <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 8007584:	4a0e      	ldr	r2, [pc, #56]	@ (80075c0 <lcd_clear+0xb4>)
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 800758a:	4b0c      	ldr	r3, [pc, #48]	@ (80075bc <lcd_clear+0xb0>)
 800758c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007590:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <lcd_clear+0xb0>)
 8007594:	2280      	movs	r2, #128	@ 0x80
 8007596:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	3301      	adds	r3, #1
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d3ee      	bcc.n	8007584 <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 80075a6:	4b05      	ldr	r3, [pc, #20]	@ (80075bc <lcd_clear+0xb0>)
 80075a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075ac:	611a      	str	r2, [r3, #16]
}
 80075ae:	bf00      	nop
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000038 	.word	0x20000038
 80075bc:	40011000 	.word	0x40011000
 80075c0:	40010c00 	.word	0x40010c00

080075c4 <lcd_fill>:
 * @param       (sx,sy),(ex,ey):�����ζԽ�����,�����СΪ:(ex - sx + 1) * (ey - sy + 1)
 * @param       color: Ҫ������ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint32_t color)
{
 80075c4:	b590      	push	{r4, r7, lr}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	461a      	mov	r2, r3
 80075d2:	4623      	mov	r3, r4
 80075d4:	80fb      	strh	r3, [r7, #6]
 80075d6:	4603      	mov	r3, r0
 80075d8:	80bb      	strh	r3, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	807b      	strh	r3, [r7, #2]
 80075de:	4613      	mov	r3, r2
 80075e0:	803b      	strh	r3, [r7, #0]
    uint16_t i, j;
    uint16_t xlen = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	817b      	strh	r3, [r7, #10]
    xlen = ex - sx + 1;
 80075e6:	887a      	ldrh	r2, [r7, #2]
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3301      	adds	r3, #1
 80075f0:	817b      	strh	r3, [r7, #10]

    for (i = sy; i <= ey; i++)
 80075f2:	88bb      	ldrh	r3, [r7, #4]
 80075f4:	81fb      	strh	r3, [r7, #14]
 80075f6:	e044      	b.n	8007682 <lcd_fill+0xbe>
    {
        lcd_set_cursor(sx, i);      /* ���ù��λ�� */
 80075f8:	89fa      	ldrh	r2, [r7, #14]
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f7f9 ffa4 	bl	800154c <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8007604:	4b23      	ldr	r3, [pc, #140]	@ (8007694 <lcd_fill+0xd0>)
 8007606:	891b      	ldrh	r3, [r3, #8]
 8007608:	813b      	strh	r3, [r7, #8]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800760a:	4b23      	ldr	r3, [pc, #140]	@ (8007698 <lcd_fill+0xd4>)
 800760c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007610:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8007612:	4b21      	ldr	r3, [pc, #132]	@ (8007698 <lcd_fill+0xd4>)
 8007614:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007618:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800761a:	893b      	ldrh	r3, [r7, #8]
 800761c:	b29a      	uxth	r2, r3
 800761e:	4b1f      	ldr	r3, [pc, #124]	@ (800769c <lcd_fill+0xd8>)
 8007620:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8007622:	4b1d      	ldr	r3, [pc, #116]	@ (8007698 <lcd_fill+0xd4>)
 8007624:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007628:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800762a:	4b1b      	ldr	r3, [pc, #108]	@ (8007698 <lcd_fill+0xd4>)
 800762c:	2280      	movs	r2, #128	@ 0x80
 800762e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007630:	4b19      	ldr	r3, [pc, #100]	@ (8007698 <lcd_fill+0xd4>)
 8007632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007636:	611a      	str	r2, [r3, #16]
}
 8007638:	bf00      	nop
}
 800763a:	bf00      	nop
        lcd_write_ram_prepare();    /* ��ʼд��GRAM */

        for (j = 0; j < xlen; j++)
 800763c:	2300      	movs	r3, #0
 800763e:	81bb      	strh	r3, [r7, #12]
 8007640:	e018      	b.n	8007674 <lcd_fill+0xb0>
        {
            lcd_wr_data(color);     /* д������ */
 8007642:	4b15      	ldr	r3, [pc, #84]	@ (8007698 <lcd_fill+0xd4>)
 8007644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007648:	611a      	str	r2, [r3, #16]
 800764a:	4b13      	ldr	r3, [pc, #76]	@ (8007698 <lcd_fill+0xd4>)
 800764c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007650:	611a      	str	r2, [r3, #16]
 8007652:	4a12      	ldr	r2, [pc, #72]	@ (800769c <lcd_fill+0xd8>)
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	60d3      	str	r3, [r2, #12]
 8007658:	4b0f      	ldr	r3, [pc, #60]	@ (8007698 <lcd_fill+0xd4>)
 800765a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800765e:	611a      	str	r2, [r3, #16]
 8007660:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <lcd_fill+0xd4>)
 8007662:	2280      	movs	r2, #128	@ 0x80
 8007664:	611a      	str	r2, [r3, #16]
 8007666:	4b0c      	ldr	r3, [pc, #48]	@ (8007698 <lcd_fill+0xd4>)
 8007668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800766c:	611a      	str	r2, [r3, #16]
        for (j = 0; j < xlen; j++)
 800766e:	89bb      	ldrh	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	81bb      	strh	r3, [r7, #12]
 8007674:	89ba      	ldrh	r2, [r7, #12]
 8007676:	897b      	ldrh	r3, [r7, #10]
 8007678:	429a      	cmp	r2, r3
 800767a:	d3e2      	bcc.n	8007642 <lcd_fill+0x7e>
    for (i = sy; i <= ey; i++)
 800767c:	89fb      	ldrh	r3, [r7, #14]
 800767e:	3301      	adds	r3, #1
 8007680:	81fb      	strh	r3, [r7, #14]
 8007682:	89fa      	ldrh	r2, [r7, #14]
 8007684:	883b      	ldrh	r3, [r7, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d9b6      	bls.n	80075f8 <lcd_fill+0x34>
        }
    }
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	bd90      	pop	{r4, r7, pc}
 8007694:	20000038 	.word	0x20000038
 8007698:	40011000 	.word	0x40011000
 800769c:	40010c00 	.word	0x40010c00

080076a0 <lcd_draw_hline>:
 * @param       len  : �߳���
 * @param       color: ���ε���ɫ
 * @retval      ��
 */
void lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af02      	add	r7, sp, #8
 80076a6:	4604      	mov	r4, r0
 80076a8:	4608      	mov	r0, r1
 80076aa:	4611      	mov	r1, r2
 80076ac:	461a      	mov	r2, r3
 80076ae:	4623      	mov	r3, r4
 80076b0:	80fb      	strh	r3, [r7, #6]
 80076b2:	4603      	mov	r3, r0
 80076b4:	80bb      	strh	r3, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	807b      	strh	r3, [r7, #2]
 80076ba:	4613      	mov	r3, r2
 80076bc:	803b      	strh	r3, [r7, #0]
    if ((len == 0) || (x > lcddev.width) || (y > lcddev.height))return;
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d018      	beq.n	80076f6 <lcd_draw_hline+0x56>
 80076c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007700 <lcd_draw_hline+0x60>)
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d813      	bhi.n	80076f6 <lcd_draw_hline+0x56>
 80076ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007700 <lcd_draw_hline+0x60>)
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	88ba      	ldrh	r2, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d80e      	bhi.n	80076f6 <lcd_draw_hline+0x56>

    lcd_fill(x, y, x + len - 1, y, color);
 80076d8:	88fa      	ldrh	r2, [r7, #6]
 80076da:	887b      	ldrh	r3, [r7, #2]
 80076dc:	4413      	add	r3, r2
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	883b      	ldrh	r3, [r7, #0]
 80076e6:	88bc      	ldrh	r4, [r7, #4]
 80076e8:	88b9      	ldrh	r1, [r7, #4]
 80076ea:	88f8      	ldrh	r0, [r7, #6]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	4623      	mov	r3, r4
 80076f0:	f7ff ff68 	bl	80075c4 <lcd_fill>
 80076f4:	e000      	b.n	80076f8 <lcd_draw_hline+0x58>
    if ((len == 0) || (x > lcddev.width) || (y > lcddev.height))return;
 80076f6:	bf00      	nop
}
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd90      	pop	{r4, r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000038 	.word	0x20000038

08007704 <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	4604      	mov	r4, r0
 800770c:	4608      	mov	r0, r1
 800770e:	4611      	mov	r1, r2
 8007710:	461a      	mov	r2, r3
 8007712:	4623      	mov	r3, r4
 8007714:	80fb      	strh	r3, [r7, #6]
 8007716:	4603      	mov	r3, r0
 8007718:	80bb      	strh	r3, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
 800771e:	4613      	mov	r3, r2
 8007720:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8007722:	88bb      	ldrh	r3, [r7, #4]
 8007724:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 800772e:	78bb      	ldrb	r3, [r7, #2]
 8007730:	08db      	lsrs	r3, r3, #3
 8007732:	b2db      	uxtb	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	78bb      	ldrb	r3, [r7, #2]
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	bf14      	ite	ne
 8007742:	2301      	movne	r3, #1
 8007744:	2300      	moveq	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	4413      	add	r3, r2
 800774a:	b2db      	uxtb	r3, r3
 800774c:	78ba      	ldrb	r2, [r7, #2]
 800774e:	0852      	lsrs	r2, r2, #1
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	3b20      	subs	r3, #32
 800775c:	70fb      	strb	r3, [r7, #3]

    switch (size)
 800775e:	78bb      	ldrb	r3, [r7, #2]
 8007760:	3b0c      	subs	r3, #12
 8007762:	2b14      	cmp	r3, #20
 8007764:	f200 80b1 	bhi.w	80078ca <lcd_show_char+0x1c6>
 8007768:	a201      	add	r2, pc, #4	@ (adr r2, 8007770 <lcd_show_char+0x6c>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	080077c5 	.word	0x080077c5
 8007774:	080078cb 	.word	0x080078cb
 8007778:	080078cb 	.word	0x080078cb
 800777c:	080078cb 	.word	0x080078cb
 8007780:	080077d7 	.word	0x080077d7
 8007784:	080078cb 	.word	0x080078cb
 8007788:	080078cb 	.word	0x080078cb
 800778c:	080078cb 	.word	0x080078cb
 8007790:	080078cb 	.word	0x080078cb
 8007794:	080078cb 	.word	0x080078cb
 8007798:	080078cb 	.word	0x080078cb
 800779c:	080078cb 	.word	0x080078cb
 80077a0:	080077e3 	.word	0x080077e3
 80077a4:	080078cb 	.word	0x080078cb
 80077a8:	080078cb 	.word	0x080078cb
 80077ac:	080078cb 	.word	0x080078cb
 80077b0:	080078cb 	.word	0x080078cb
 80077b4:	080078cb 	.word	0x080078cb
 80077b8:	080078cb 	.word	0x080078cb
 80077bc:	080078cb 	.word	0x080078cb
 80077c0:	080077f5 	.word	0x080077f5
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	4613      	mov	r3, r2
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4a42      	ldr	r2, [pc, #264]	@ (80078d8 <lcd_show_char+0x1d4>)
 80077d0:	4413      	add	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]
            break;
 80077d4:	e014      	b.n	8007800 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	4a40      	ldr	r2, [pc, #256]	@ (80078dc <lcd_show_char+0x1d8>)
 80077dc:	4413      	add	r3, r2
 80077de:	613b      	str	r3, [r7, #16]
            break;
 80077e0:	e00e      	b.n	8007800 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	4613      	mov	r3, r2
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4a3c      	ldr	r2, [pc, #240]	@ (80078e0 <lcd_show_char+0x1dc>)
 80077ee:	4413      	add	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]
            break;
 80077f2:	e005      	b.n	8007800 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	019b      	lsls	r3, r3, #6
 80077f8:	4a3a      	ldr	r2, [pc, #232]	@ (80078e4 <lcd_show_char+0x1e0>)
 80077fa:	4413      	add	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]
            break;
 80077fe:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 8007800:	2300      	movs	r3, #0
 8007802:	757b      	strb	r3, [r7, #21]
 8007804:	e05c      	b.n	80078c0 <lcd_show_char+0x1bc>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 8007806:	7d7b      	ldrb	r3, [r7, #21]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8007810:	2300      	movs	r3, #0
 8007812:	75bb      	strb	r3, [r7, #22]
 8007814:	e04c      	b.n	80078b0 <lcd_show_char+0x1ac>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 8007816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800781a:	2b00      	cmp	r3, #0
 800781c:	da06      	bge.n	800782c <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 800781e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007820:	88b9      	ldrh	r1, [r7, #4]
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	4618      	mov	r0, r3
 8007826:	f7fa fd31 	bl	800228c <lcd_draw_point>
 800782a:	e022      	b.n	8007872 <lcd_show_char+0x16e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 800782c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007830:	2b00      	cmp	r3, #0
 8007832:	d107      	bne.n	8007844 <lcd_show_char+0x140>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 8007834:	4b2c      	ldr	r3, [pc, #176]	@ (80078e8 <lcd_show_char+0x1e4>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	88b9      	ldrh	r1, [r7, #4]
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	4618      	mov	r0, r3
 800783e:	f7fa fd25 	bl	800228c <lcd_draw_point>
 8007842:	e016      	b.n	8007872 <lcd_show_char+0x16e>
            } else if (mode == 1)
 8007844:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007848:	2b01      	cmp	r3, #1
 800784a:	d107      	bne.n	800785c <lcd_show_char+0x158>
            {
            	lcd_draw_point(x, y, RED);
 800784c:	88b9      	ldrh	r1, [r7, #4]
 800784e:	88fb      	ldrh	r3, [r7, #6]
 8007850:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8007854:	4618      	mov	r0, r3
 8007856:	f7fa fd19 	bl	800228c <lcd_draw_point>
 800785a:	e00a      	b.n	8007872 <lcd_show_char+0x16e>
            } else if (mode == 2)
 800785c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007860:	2b02      	cmp	r3, #2
 8007862:	d106      	bne.n	8007872 <lcd_show_char+0x16e>
            {
            	lcd_draw_point(x, y, GREEN);
 8007864:	88b9      	ldrh	r1, [r7, #4]
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800786c:	4618      	mov	r0, r3
 800786e:	f7fa fd0d 	bl	800228c <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	75fb      	strb	r3, [r7, #23]
            y++;
 8007878:	88bb      	ldrh	r3, [r7, #4]
 800787a:	3301      	adds	r3, #1
 800787c:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 800787e:	4b1b      	ldr	r3, [pc, #108]	@ (80078ec <lcd_show_char+0x1e8>)
 8007880:	885b      	ldrh	r3, [r3, #2]
 8007882:	88ba      	ldrh	r2, [r7, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	d222      	bcs.n	80078ce <lcd_show_char+0x1ca>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 8007888:	88ba      	ldrh	r2, [r7, #4]
 800788a:	89fb      	ldrh	r3, [r7, #14]
 800788c:	1ad2      	subs	r2, r2, r3
 800788e:	78bb      	ldrb	r3, [r7, #2]
 8007890:	429a      	cmp	r2, r3
 8007892:	d10a      	bne.n	80078aa <lcd_show_char+0x1a6>
            {
                y = y0; /* y���긴λ */
 8007894:	89fb      	ldrh	r3, [r7, #14]
 8007896:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	3301      	adds	r3, #1
 800789c:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 800789e:	4b13      	ldr	r3, [pc, #76]	@ (80078ec <lcd_show_char+0x1e8>)
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	88fa      	ldrh	r2, [r7, #6]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d307      	bcc.n	80078b8 <lcd_show_char+0x1b4>
 80078a8:	e012      	b.n	80078d0 <lcd_show_char+0x1cc>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 80078aa:	7dbb      	ldrb	r3, [r7, #22]
 80078ac:	3301      	adds	r3, #1
 80078ae:	75bb      	strb	r3, [r7, #22]
 80078b0:	7dbb      	ldrb	r3, [r7, #22]
 80078b2:	2b07      	cmp	r3, #7
 80078b4:	d9af      	bls.n	8007816 <lcd_show_char+0x112>
 80078b6:	e000      	b.n	80078ba <lcd_show_char+0x1b6>

                break;
 80078b8:	bf00      	nop
    for (t = 0; t < csize; t++)
 80078ba:	7d7b      	ldrb	r3, [r7, #21]
 80078bc:	3301      	adds	r3, #1
 80078be:	757b      	strb	r3, [r7, #21]
 80078c0:	7d7a      	ldrb	r2, [r7, #21]
 80078c2:	7b7b      	ldrb	r3, [r7, #13]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d39e      	bcc.n	8007806 <lcd_show_char+0x102>
 80078c8:	e002      	b.n	80078d0 <lcd_show_char+0x1cc>
            return ;
 80078ca:	bf00      	nop
 80078cc:	e000      	b.n	80078d0 <lcd_show_char+0x1cc>
            if (y >= lcddev.height)return;  /* �������� */
 80078ce:	bf00      	nop
            }
        }
    }
}
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd90      	pop	{r4, r7, pc}
 80078d6:	bf00      	nop
 80078d8:	08008efc 	.word	0x08008efc
 80078dc:	08009370 	.word	0x08009370
 80078e0:	08009960 	.word	0x08009960
 80078e4:	0800a6bc 	.word	0x0800a6bc
 80078e8:	20000000 	.word	0x20000000
 80078ec:	20000038 	.word	0x20000038

080078f0 <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 80078f0:	b590      	push	{r4, r7, lr}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	4611      	mov	r1, r2
 80078fc:	461a      	mov	r2, r3
 80078fe:	4623      	mov	r3, r4
 8007900:	80fb      	strh	r3, [r7, #6]
 8007902:	4603      	mov	r3, r0
 8007904:	80bb      	strh	r3, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	807b      	strh	r3, [r7, #2]
 800790a:	4613      	mov	r3, r2
 800790c:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	73fb      	strb	r3, [r7, #15]
    width += x;
 8007912:	887a      	ldrh	r2, [r7, #2]
 8007914:	88fb      	ldrh	r3, [r7, #6]
 8007916:	4413      	add	r3, r2
 8007918:	807b      	strh	r3, [r7, #2]
    height += y;
 800791a:	883a      	ldrh	r2, [r7, #0]
 800791c:	88bb      	ldrh	r3, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))
 8007922:	e027      	b.n	8007974 <lcd_show_string+0x84>
    {
        if (x >= width)
 8007924:	88fa      	ldrh	r2, [r7, #6]
 8007926:	887b      	ldrh	r3, [r7, #2]
 8007928:	429a      	cmp	r2, r3
 800792a:	d307      	bcc.n	800793c <lcd_show_string+0x4c>
        {
            x = x0;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	80fb      	strh	r3, [r7, #6]
            y += size;
 8007930:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007934:	b29a      	uxth	r2, r3
 8007936:	88bb      	ldrh	r3, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height) break;
 800793c:	88ba      	ldrh	r2, [r7, #4]
 800793e:	883b      	ldrh	r3, [r7, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d220      	bcs.n	8007986 <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	f897 4020 	ldrb.w	r4, [r7, #32]
 800794c:	88b9      	ldrh	r1, [r7, #4]
 800794e:	88f8      	ldrh	r0, [r7, #6]
 8007950:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	2300      	movs	r3, #0
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	4623      	mov	r3, r4
 800795a:	f7ff fed3 	bl	8007704 <lcd_show_char>
        x += size / 2;
 800795e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	b2db      	uxtb	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	88fb      	ldrh	r3, [r7, #6]
 800796a:	4413      	add	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
        p++;
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	3301      	adds	r3, #1
 8007972:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b7e      	cmp	r3, #126	@ 0x7e
 800797a:	d805      	bhi.n	8007988 <lcd_show_string+0x98>
 800797c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b1f      	cmp	r3, #31
 8007982:	d8cf      	bhi.n	8007924 <lcd_show_string+0x34>
    }
}
 8007984:	e000      	b.n	8007988 <lcd_show_string+0x98>
        if (y >= height) break;
 8007986:	bf00      	nop
}
 8007988:	bf00      	nop
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	bd90      	pop	{r4, r7, pc}

08007990 <lcd_show_string_highlight>:

void lcd_show_string_highlight(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color, uint32_t nth)
{
 8007990:	b590      	push	{r4, r7, lr}
 8007992:	b087      	sub	sp, #28
 8007994:	af02      	add	r7, sp, #8
 8007996:	4604      	mov	r4, r0
 8007998:	4608      	mov	r0, r1
 800799a:	4611      	mov	r1, r2
 800799c:	461a      	mov	r2, r3
 800799e:	4623      	mov	r3, r4
 80079a0:	80fb      	strh	r3, [r7, #6]
 80079a2:	4603      	mov	r3, r0
 80079a4:	80bb      	strh	r3, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	807b      	strh	r3, [r7, #2]
 80079aa:	4613      	mov	r3, r2
 80079ac:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	72fb      	strb	r3, [r7, #11]
    uint32_t count = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
    width += x;
 80079b6:	887a      	ldrh	r2, [r7, #2]
 80079b8:	88fb      	ldrh	r3, [r7, #6]
 80079ba:	4413      	add	r3, r2
 80079bc:	807b      	strh	r3, [r7, #2]
    height += y;
 80079be:	883a      	ldrh	r2, [r7, #0]
 80079c0:	88bb      	ldrh	r3, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))
 80079c6:	e04f      	b.n	8007a68 <lcd_show_string_highlight+0xd8>
    {
        if (x >= width)
 80079c8:	88fa      	ldrh	r2, [r7, #6]
 80079ca:	887b      	ldrh	r3, [r7, #2]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d307      	bcc.n	80079e0 <lcd_show_string_highlight+0x50>
        {
            x = x0;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	80fb      	strh	r3, [r7, #6]
            y += size;
 80079d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079d8:	b29a      	uxth	r2, r3
 80079da:	88bb      	ldrh	r3, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height) break;
 80079e0:	88ba      	ldrh	r2, [r7, #4]
 80079e2:	883b      	ldrh	r3, [r7, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d248      	bcs.n	8007a7a <lcd_show_string_highlight+0xea>

        if (count != nth) {
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d00c      	beq.n	8007a0a <lcd_show_string_highlight+0x7a>
        	lcd_show_char(x, y, *p, size, 0, BLACK);
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079f8:	88b9      	ldrh	r1, [r7, #4]
 80079fa:	88f8      	ldrh	r0, [r7, #6]
 80079fc:	2400      	movs	r4, #0
 80079fe:	9401      	str	r4, [sp, #4]
 8007a00:	2400      	movs	r4, #0
 8007a02:	9400      	str	r4, [sp, #0]
 8007a04:	f7ff fe7e 	bl	8007704 <lcd_show_char>
 8007a08:	e020      	b.n	8007a4c <lcd_show_string_highlight+0xbc>
        } else if (color == RED) {
 8007a0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a0c:	f5b3 4f78 	cmp.w	r3, #63488	@ 0xf800
 8007a10:	d10c      	bne.n	8007a2c <lcd_show_string_highlight+0x9c>
        	lcd_show_char(x, y, *p, size, 1, BLACK);
 8007a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a14:	781a      	ldrb	r2, [r3, #0]
 8007a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a1a:	88b9      	ldrh	r1, [r7, #4]
 8007a1c:	88f8      	ldrh	r0, [r7, #6]
 8007a1e:	2400      	movs	r4, #0
 8007a20:	9401      	str	r4, [sp, #4]
 8007a22:	2401      	movs	r4, #1
 8007a24:	9400      	str	r4, [sp, #0]
 8007a26:	f7ff fe6d 	bl	8007704 <lcd_show_char>
 8007a2a:	e00f      	b.n	8007a4c <lcd_show_string_highlight+0xbc>
        } else if (color == GREEN) {
 8007a2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a2e:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 8007a32:	d10b      	bne.n	8007a4c <lcd_show_string_highlight+0xbc>
        	lcd_show_char(x, y, *p, size, 2, BLACK);
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a3c:	88b9      	ldrh	r1, [r7, #4]
 8007a3e:	88f8      	ldrh	r0, [r7, #6]
 8007a40:	2400      	movs	r4, #0
 8007a42:	9401      	str	r4, [sp, #4]
 8007a44:	2402      	movs	r4, #2
 8007a46:	9400      	str	r4, [sp, #0]
 8007a48:	f7ff fe5c 	bl	8007704 <lcd_show_char>
        }

        x += size / 2;
 8007a4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	4413      	add	r3, r2
 8007a5a:	80fb      	strh	r3, [r7, #6]
        p++;
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	3301      	adds	r3, #1
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
        count++;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3301      	adds	r3, #1
 8007a66:	60fb      	str	r3, [r7, #12]
    while ((*p <= '~') && (*p >= ' '))
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b7e      	cmp	r3, #126	@ 0x7e
 8007a6e:	d805      	bhi.n	8007a7c <lcd_show_string_highlight+0xec>
 8007a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b1f      	cmp	r3, #31
 8007a76:	d8a7      	bhi.n	80079c8 <lcd_show_string_highlight+0x38>
    }
}
 8007a78:	e000      	b.n	8007a7c <lcd_show_string_highlight+0xec>
        if (y >= height) break;
 8007a7a:	bf00      	nop
}
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd90      	pop	{r4, r7, pc}

08007a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a88:	f000 fa2a 	bl	8007ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a8c:	f000 f834 	bl	8007af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a90:	f7f8 fed0 	bl	8000834 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8007a94:	f7fa fddc 	bl	8002650 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  print_screen();
 8007a98:	f7f9 fa2e 	bl	8000ef8 <print_screen>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8007a9c:	2120      	movs	r1, #32
 8007a9e:	4813      	ldr	r0, [pc, #76]	@ (8007aec <main+0x68>)
 8007aa0:	f000 fd46 	bl	8008530 <HAL_GPIO_ReadPin>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <main+0x34>
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007ab0:	480f      	ldr	r0, [pc, #60]	@ (8007af0 <main+0x6c>)
 8007ab2:	f000 fd54 	bl	800855e <HAL_GPIO_WritePin>
 8007ab6:	e7f1      	b.n	8007a9c <main+0x18>
	  } else if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007ab8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007abc:	480c      	ldr	r0, [pc, #48]	@ (8007af0 <main+0x6c>)
 8007abe:	f000 fd37 	bl	8008530 <HAL_GPIO_ReadPin>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d105      	bne.n	8007ad4 <main+0x50>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2104      	movs	r1, #4
 8007acc:	4809      	ldr	r0, [pc, #36]	@ (8007af4 <main+0x70>)
 8007ace:	f000 fd46 	bl	800855e <HAL_GPIO_WritePin>
 8007ad2:	e7e3      	b.n	8007a9c <main+0x18>
	  } else {
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007ada:	4805      	ldr	r0, [pc, #20]	@ (8007af0 <main+0x6c>)
 8007adc:	f000 fd3f 	bl	800855e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	4803      	ldr	r0, [pc, #12]	@ (8007af4 <main+0x70>)
 8007ae6:	f000 fd3a 	bl	800855e <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8007aea:	e7d7      	b.n	8007a9c <main+0x18>
 8007aec:	40011000 	.word	0x40011000
 8007af0:	40010800 	.word	0x40010800
 8007af4:	40011400 	.word	0x40011400

08007af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b090      	sub	sp, #64	@ 0x40
 8007afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007afe:	f107 0318 	add.w	r3, r7, #24
 8007b02:	2228      	movs	r2, #40	@ 0x28
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 f942 	bl	8008d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b0c:	1d3b      	adds	r3, r7, #4
 8007b0e:	2200      	movs	r2, #0
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	605a      	str	r2, [r3, #4]
 8007b14:	609a      	str	r2, [r3, #8]
 8007b16:	60da      	str	r2, [r3, #12]
 8007b18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007b22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007b24:	2300      	movs	r3, #0
 8007b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007b34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007b36:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8007b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b3c:	f107 0318 	add.w	r3, r7, #24
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fd3d 	bl	80085c0 <HAL_RCC_OscConfig>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007b4c:	f000 f819 	bl	8007b82 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b50:	230f      	movs	r3, #15
 8007b52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b54:	2302      	movs	r3, #2
 8007b56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007b5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007b66:	1d3b      	adds	r3, r7, #4
 8007b68:	2102      	movs	r1, #2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 ffaa 	bl	8008ac4 <HAL_RCC_ClockConfig>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007b76:	f000 f804 	bl	8007b82 <Error_Handler>
  }
}
 8007b7a:	bf00      	nop
 8007b7c:	3740      	adds	r7, #64	@ 0x40
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b82:	b480      	push	{r7}
 8007b84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007b86:	b672      	cpsid	i
}
 8007b88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <Error_Handler+0x8>
	...

08007b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007b96:	4b16      	ldr	r3, [pc, #88]	@ (8007bf0 <HAL_MspInit+0x60>)
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	4a15      	ldr	r2, [pc, #84]	@ (8007bf0 <HAL_MspInit+0x60>)
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
 8007ba0:	6193      	str	r3, [r2, #24]
 8007ba2:	4b13      	ldr	r3, [pc, #76]	@ (8007bf0 <HAL_MspInit+0x60>)
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bae:	4b10      	ldr	r3, [pc, #64]	@ (8007bf0 <HAL_MspInit+0x60>)
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8007bf0 <HAL_MspInit+0x60>)
 8007bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bb8:	61d3      	str	r3, [r2, #28]
 8007bba:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf0 <HAL_MspInit+0x60>)
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bc2:	607b      	str	r3, [r7, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8007bc6:	2005      	movs	r0, #5
 8007bc8:	f000 fadc 	bl	8008184 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007bcc:	4b09      	ldr	r3, [pc, #36]	@ (8007bf4 <HAL_MspInit+0x64>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	4a04      	ldr	r2, [pc, #16]	@ (8007bf4 <HAL_MspInit+0x64>)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	40010000 	.word	0x40010000

08007bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007bfc:	bf00      	nop
 8007bfe:	e7fd      	b.n	8007bfc <NMI_Handler+0x4>

08007c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c04:	bf00      	nop
 8007c06:	e7fd      	b.n	8007c04 <HardFault_Handler+0x4>

08007c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c0c:	bf00      	nop
 8007c0e:	e7fd      	b.n	8007c0c <MemManage_Handler+0x4>

08007c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c14:	bf00      	nop
 8007c16:	e7fd      	b.n	8007c14 <BusFault_Handler+0x4>

08007c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c1c:	bf00      	nop
 8007c1e:	e7fd      	b.n	8007c1c <UsageFault_Handler+0x4>

08007c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c24:	bf00      	nop
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr

08007c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c30:	bf00      	nop
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c3c:	bf00      	nop
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr

08007c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c48:	f000 f990 	bl	8007f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c4c:	bf00      	nop
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007c54:	2001      	movs	r0, #1
 8007c56:	f000 fc9b 	bl	8008590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007c5a:	bf00      	nop
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007c62:	2020      	movs	r0, #32
 8007c64:	f000 fc94 	bl	8008590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007c68:	bf00      	nop
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007c70:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007c74:	f000 fc8c 	bl	8008590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007c78:	bf00      	nop
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8007c86:	2064      	movs	r0, #100	@ 0x64
 8007c88:	f000 f98c 	bl	8007fa4 <HAL_Delay>
	uint32_t limit = mode ? HAMMING_DECODING_LENGTH : HAMMING_ENCODING_LENGTH;
 8007c8c:	4b78      	ldr	r3, [pc, #480]	@ (8007e70 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <HAL_GPIO_EXTI_Callback+0x1c>
 8007c94:	2308      	movs	r3, #8
 8007c96:	e000      	b.n	8007c9a <HAL_GPIO_EXTI_Callback+0x1e>
 8007c98:	2304      	movs	r3, #4
 8007c9a:	60fb      	str	r3, [r7, #12]
	switch (GPIO_Pin) {
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca2:	d03f      	beq.n	8007d24 <HAL_GPIO_EXTI_Callback+0xa8>
 8007ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca8:	f300 80d3 	bgt.w	8007e52 <HAL_GPIO_EXTI_Callback+0x1d6>
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d07c      	beq.n	8007daa <HAL_GPIO_EXTI_Callback+0x12e>
 8007cb0:	2b20      	cmp	r3, #32
 8007cb2:	f040 80ce 	bne.w	8007e52 <HAL_GPIO_EXTI_Callback+0x1d6>
		case KEY0_Pin:
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8007cb6:	2120      	movs	r1, #32
 8007cb8:	486e      	ldr	r0, [pc, #440]	@ (8007e74 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8007cba:	f000 fc39 	bl	8008530 <HAL_GPIO_ReadPin>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f040 80c8 	bne.w	8007e56 <HAL_GPIO_EXTI_Callback+0x1da>
				// if both keys pressed, clear the screen and input.
				if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007cc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cca:	486b      	ldr	r0, [pc, #428]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8007ccc:	f000 fc30 	bl	8008530 <HAL_GPIO_ReadPin>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d109      	bne.n	8007cea <HAL_GPIO_EXTI_Callback+0x6e>
					input_data = input_length = 0; // clear input
 8007cd6:	4b69      	ldr	r3, [pc, #420]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	4b67      	ldr	r3, [pc, #412]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a67      	ldr	r2, [pc, #412]	@ (8007e80 <HAL_GPIO_EXTI_Callback+0x204>)
 8007ce2:	6013      	str	r3, [r2, #0]
					print_screen(); // clear screen
 8007ce4:	f7f9 f908 	bl	8000ef8 <print_screen>
					break;
 8007ce8:	e0be      	b.n	8007e68 <HAL_GPIO_EXTI_Callback+0x1ec>
				}

				// input 0
				if (input_length >= limit) break;
 8007cea:	4b64      	ldr	r3, [pc, #400]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	f240 80b2 	bls.w	8007e5a <HAL_GPIO_EXTI_Callback+0x1de>

				// constrain input when reach the input limit, refresh to input
				input_length++;
 8007cf6:	4b61      	ldr	r3, [pc, #388]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	4a5f      	ldr	r2, [pc, #380]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007cfe:	6013      	str	r3, [r2, #0]

				// refresh specific zone
				if (mode == HAMMING_ENCODING_MODE) fresh_origin();
 8007d00:	4b5b      	ldr	r3, [pc, #364]	@ (8007e70 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <HAL_GPIO_EXTI_Callback+0x92>
 8007d08:	f7f8 fe38 	bl	800097c <fresh_origin>
 8007d0c:	e001      	b.n	8007d12 <HAL_GPIO_EXTI_Callback+0x96>
				else fresh_hamming();
 8007d0e:	f7f8 fe7f 	bl	8000a10 <fresh_hamming>

				if (input_length == limit) print_result(); // print result at the end
 8007d12:	4b5a      	ldr	r3, [pc, #360]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	f040 809c 	bne.w	8007e56 <HAL_GPIO_EXTI_Callback+0x1da>
 8007d1e:	f7f8 febf 	bl	8000aa0 <print_result>
			}
			break;
 8007d22:	e098      	b.n	8007e56 <HAL_GPIO_EXTI_Callback+0x1da>

		case KEY1_Pin:
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007d24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d28:	4853      	ldr	r0, [pc, #332]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8007d2a:	f000 fc01 	bl	8008530 <HAL_GPIO_ReadPin>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f040 8094 	bne.w	8007e5e <HAL_GPIO_EXTI_Callback+0x1e2>
				// if both keys pressed, clear the screen and input.
				if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8007d36:	2120      	movs	r1, #32
 8007d38:	484e      	ldr	r0, [pc, #312]	@ (8007e74 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8007d3a:	f000 fbf9 	bl	8008530 <HAL_GPIO_ReadPin>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <HAL_GPIO_EXTI_Callback+0xdc>
					input_data = input_length = 0; // clear input
 8007d44:	4b4d      	ldr	r3, [pc, #308]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8007e80 <HAL_GPIO_EXTI_Callback+0x204>)
 8007d50:	6013      	str	r3, [r2, #0]
					print_screen(); // clear screen
 8007d52:	f7f9 f8d1 	bl	8000ef8 <print_screen>
					break;
 8007d56:	e087      	b.n	8007e68 <HAL_GPIO_EXTI_Callback+0x1ec>
				}

				// input 1
				if (input_length < limit) input_data |= (1 << (limit - input_length - 1));
 8007d58:	4b48      	ldr	r3, [pc, #288]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d97f      	bls.n	8007e62 <HAL_GPIO_EXTI_Callback+0x1e6>
 8007d62:	4b46      	ldr	r3, [pc, #280]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d72:	461a      	mov	r2, r3
 8007d74:	4b42      	ldr	r3, [pc, #264]	@ (8007e80 <HAL_GPIO_EXTI_Callback+0x204>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	4a41      	ldr	r2, [pc, #260]	@ (8007e80 <HAL_GPIO_EXTI_Callback+0x204>)
 8007d7c:	6013      	str	r3, [r2, #0]
				else break;

				// constrain input when reach the input limit, refresh to input
				input_length++;
 8007d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a3d      	ldr	r2, [pc, #244]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007d86:	6013      	str	r3, [r2, #0]

				// refresh specific zone
				if (mode == HAMMING_ENCODING_MODE) fresh_origin();
 8007d88:	4b39      	ldr	r3, [pc, #228]	@ (8007e70 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <HAL_GPIO_EXTI_Callback+0x11a>
 8007d90:	f7f8 fdf4 	bl	800097c <fresh_origin>
 8007d94:	e001      	b.n	8007d9a <HAL_GPIO_EXTI_Callback+0x11e>
				else fresh_hamming();
 8007d96:	f7f8 fe3b 	bl	8000a10 <fresh_hamming>

				if (input_length == limit) print_result(); // print result at the end
 8007d9a:	4b38      	ldr	r3, [pc, #224]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d15c      	bne.n	8007e5e <HAL_GPIO_EXTI_Callback+0x1e2>
 8007da4:	f7f8 fe7c 	bl	8000aa0 <print_result>
			}
			break;
 8007da8:	e059      	b.n	8007e5e <HAL_GPIO_EXTI_Callback+0x1e2>

		case WK_UP_Pin:
			if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) == GPIO_PIN_SET) {
 8007daa:	2101      	movs	r1, #1
 8007dac:	4832      	ldr	r0, [pc, #200]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8007dae:	f000 fbbf 	bl	8008530 <HAL_GPIO_ReadPin>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d156      	bne.n	8007e66 <HAL_GPIO_EXTI_Callback+0x1ea>
				mode = mode ? 0 : 1; // change mode
 8007db8:	4b2d      	ldr	r3, [pc, #180]	@ (8007e70 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bf0c      	ite	eq
 8007dc0:	2301      	moveq	r3, #1
 8007dc2:	2300      	movne	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4b29      	ldr	r3, [pc, #164]	@ (8007e70 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8007dca:	601a      	str	r2, [r3, #0]
				input_data = input_length = 0; // clear input
 8007dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x200>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007e80 <HAL_GPIO_EXTI_Callback+0x204>)
 8007dd8:	6013      	str	r3, [r2, #0]
				print_screen(); // clear screen
 8007dda:	f7f9 f88d 	bl	8000ef8 <print_screen>

				// flash leds
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8007dde:	2200      	movs	r2, #0
 8007de0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007de4:	4824      	ldr	r0, [pc, #144]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8007de6:	f000 fbba 	bl	800855e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2104      	movs	r1, #4
 8007dee:	4825      	ldr	r0, [pc, #148]	@ (8007e84 <HAL_GPIO_EXTI_Callback+0x208>)
 8007df0:	f000 fbb5 	bl	800855e <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8007df4:	2064      	movs	r0, #100	@ 0x64
 8007df6:	f000 f8d5 	bl	8007fa4 <HAL_Delay>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007e00:	481d      	ldr	r0, [pc, #116]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8007e02:	f000 fbac 	bl	800855e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007e06:	2201      	movs	r2, #1
 8007e08:	2104      	movs	r1, #4
 8007e0a:	481e      	ldr	r0, [pc, #120]	@ (8007e84 <HAL_GPIO_EXTI_Callback+0x208>)
 8007e0c:	f000 fba7 	bl	800855e <HAL_GPIO_WritePin>

				// flash a second time when changing from decode to encode
				if (mode == HAMMING_ENCODING_MODE) {
 8007e10:	4b17      	ldr	r3, [pc, #92]	@ (8007e70 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d126      	bne.n	8007e66 <HAL_GPIO_EXTI_Callback+0x1ea>
					HAL_Delay(100);
 8007e18:	2064      	movs	r0, #100	@ 0x64
 8007e1a:	f000 f8c3 	bl	8007fa4 <HAL_Delay>
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007e24:	4814      	ldr	r0, [pc, #80]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8007e26:	f000 fb9a 	bl	800855e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2104      	movs	r1, #4
 8007e2e:	4815      	ldr	r0, [pc, #84]	@ (8007e84 <HAL_GPIO_EXTI_Callback+0x208>)
 8007e30:	f000 fb95 	bl	800855e <HAL_GPIO_WritePin>
					HAL_Delay(100);
 8007e34:	2064      	movs	r0, #100	@ 0x64
 8007e36:	f000 f8b5 	bl	8007fa4 <HAL_Delay>
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007e40:	480d      	ldr	r0, [pc, #52]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8007e42:	f000 fb8c 	bl	800855e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007e46:	2201      	movs	r2, #1
 8007e48:	2104      	movs	r1, #4
 8007e4a:	480e      	ldr	r0, [pc, #56]	@ (8007e84 <HAL_GPIO_EXTI_Callback+0x208>)
 8007e4c:	f000 fb87 	bl	800855e <HAL_GPIO_WritePin>
				}
			}
			break;
 8007e50:	e009      	b.n	8007e66 <HAL_GPIO_EXTI_Callback+0x1ea>
		default: break;
 8007e52:	bf00      	nop
 8007e54:	e008      	b.n	8007e68 <HAL_GPIO_EXTI_Callback+0x1ec>
			break;
 8007e56:	bf00      	nop
 8007e58:	e006      	b.n	8007e68 <HAL_GPIO_EXTI_Callback+0x1ec>
				if (input_length >= limit) break;
 8007e5a:	bf00      	nop
 8007e5c:	e004      	b.n	8007e68 <HAL_GPIO_EXTI_Callback+0x1ec>
			break;
 8007e5e:	bf00      	nop
 8007e60:	e002      	b.n	8007e68 <HAL_GPIO_EXTI_Callback+0x1ec>
				else break;
 8007e62:	bf00      	nop
 8007e64:	e000      	b.n	8007e68 <HAL_GPIO_EXTI_Callback+0x1ec>
			break;
 8007e66:	bf00      	nop
	}
}
 8007e68:	bf00      	nop
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	2000002c 	.word	0x2000002c
 8007e74:	40011000 	.word	0x40011000
 8007e78:	40010800 	.word	0x40010800
 8007e7c:	20000034 	.word	0x20000034
 8007e80:	20000030 	.word	0x20000030
 8007e84:	40011400 	.word	0x40011400

08007e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007e8c:	bf00      	nop
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bc80      	pop	{r7}
 8007e92:	4770      	bx	lr

08007e94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007e94:	480c      	ldr	r0, [pc, #48]	@ (8007ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007e96:	490d      	ldr	r1, [pc, #52]	@ (8007ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007e98:	4a0d      	ldr	r2, [pc, #52]	@ (8007ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007e9c:	e002      	b.n	8007ea4 <LoopCopyDataInit>

08007e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ea2:	3304      	adds	r3, #4

08007ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ea8:	d3f9      	bcc.n	8007e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8007ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007eac:	4c0a      	ldr	r4, [pc, #40]	@ (8007ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007eb0:	e001      	b.n	8007eb6 <LoopFillZerobss>

08007eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007eb4:	3204      	adds	r2, #4

08007eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007eb8:	d3fb      	bcc.n	8007eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007eba:	f7ff ffe5 	bl	8007e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ebe:	f000 ff6f 	bl	8008da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007ec2:	f7ff fddf 	bl	8007a84 <main>
  bx lr
 8007ec6:	4770      	bx	lr
  ldr r0, =_sdata
 8007ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ecc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8007ed0:	0800be94 	.word	0x0800be94
  ldr r2, =_sbss
 8007ed4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8007ed8:	2000004c 	.word	0x2000004c

08007edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007edc:	e7fe      	b.n	8007edc <ADC1_2_IRQHandler>
	...

08007ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ee4:	4b08      	ldr	r3, [pc, #32]	@ (8007f08 <HAL_Init+0x28>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a07      	ldr	r2, [pc, #28]	@ (8007f08 <HAL_Init+0x28>)
 8007eea:	f043 0310 	orr.w	r3, r3, #16
 8007eee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ef0:	2003      	movs	r0, #3
 8007ef2:	f000 f947 	bl	8008184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f000 f808 	bl	8007f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007efc:	f7ff fe48 	bl	8007b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	40022000 	.word	0x40022000

08007f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007f14:	4b12      	ldr	r3, [pc, #72]	@ (8007f60 <HAL_InitTick+0x54>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	4b12      	ldr	r3, [pc, #72]	@ (8007f64 <HAL_InitTick+0x58>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f95f 	bl	80081ee <HAL_SYSTICK_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e00e      	b.n	8007f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b0f      	cmp	r3, #15
 8007f3e:	d80a      	bhi.n	8007f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007f40:	2200      	movs	r2, #0
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f48:	f000 f927 	bl	800819a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007f4c:	4a06      	ldr	r2, [pc, #24]	@ (8007f68 <HAL_InitTick+0x5c>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	e000      	b.n	8007f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000004 	.word	0x20000004
 8007f64:	2000000c 	.word	0x2000000c
 8007f68:	20000008 	.word	0x20000008

08007f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007f70:	4b05      	ldr	r3, [pc, #20]	@ (8007f88 <HAL_IncTick+0x1c>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	4b05      	ldr	r3, [pc, #20]	@ (8007f8c <HAL_IncTick+0x20>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	4a03      	ldr	r2, [pc, #12]	@ (8007f8c <HAL_IncTick+0x20>)
 8007f7e:	6013      	str	r3, [r2, #0]
}
 8007f80:	bf00      	nop
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bc80      	pop	{r7}
 8007f86:	4770      	bx	lr
 8007f88:	2000000c 	.word	0x2000000c
 8007f8c:	20000048 	.word	0x20000048

08007f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  return uwTick;
 8007f94:	4b02      	ldr	r3, [pc, #8]	@ (8007fa0 <HAL_GetTick+0x10>)
 8007f96:	681b      	ldr	r3, [r3, #0]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr
 8007fa0:	20000048 	.word	0x20000048

08007fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007fac:	f7ff fff0 	bl	8007f90 <HAL_GetTick>
 8007fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fbc:	d005      	beq.n	8007fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe8 <HAL_Delay+0x44>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007fca:	bf00      	nop
 8007fcc:	f7ff ffe0 	bl	8007f90 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d8f7      	bhi.n	8007fcc <HAL_Delay+0x28>
  {
  }
}
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	2000000c 	.word	0x2000000c

08007fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8008030 <__NVIC_SetPriorityGrouping+0x44>)
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008008:	4013      	ands	r3, r2
 800800a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800801c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800801e:	4a04      	ldr	r2, [pc, #16]	@ (8008030 <__NVIC_SetPriorityGrouping+0x44>)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	60d3      	str	r3, [r2, #12]
}
 8008024:	bf00      	nop
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	e000ed00 	.word	0xe000ed00

08008034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008038:	4b04      	ldr	r3, [pc, #16]	@ (800804c <__NVIC_GetPriorityGrouping+0x18>)
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	0a1b      	lsrs	r3, r3, #8
 800803e:	f003 0307 	and.w	r3, r3, #7
}
 8008042:	4618      	mov	r0, r3
 8008044:	46bd      	mov	sp, r7
 8008046:	bc80      	pop	{r7}
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	e000ed00 	.word	0xe000ed00

08008050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800805a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800805e:	2b00      	cmp	r3, #0
 8008060:	db0b      	blt.n	800807a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	f003 021f 	and.w	r2, r3, #31
 8008068:	4906      	ldr	r1, [pc, #24]	@ (8008084 <__NVIC_EnableIRQ+0x34>)
 800806a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800806e:	095b      	lsrs	r3, r3, #5
 8008070:	2001      	movs	r0, #1
 8008072:	fa00 f202 	lsl.w	r2, r0, r2
 8008076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr
 8008084:	e000e100 	.word	0xe000e100

08008088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008098:	2b00      	cmp	r3, #0
 800809a:	db0a      	blt.n	80080b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	490c      	ldr	r1, [pc, #48]	@ (80080d4 <__NVIC_SetPriority+0x4c>)
 80080a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a6:	0112      	lsls	r2, r2, #4
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	440b      	add	r3, r1
 80080ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80080b0:	e00a      	b.n	80080c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	4908      	ldr	r1, [pc, #32]	@ (80080d8 <__NVIC_SetPriority+0x50>)
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	3b04      	subs	r3, #4
 80080c0:	0112      	lsls	r2, r2, #4
 80080c2:	b2d2      	uxtb	r2, r2
 80080c4:	440b      	add	r3, r1
 80080c6:	761a      	strb	r2, [r3, #24]
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	e000e100 	.word	0xe000e100
 80080d8:	e000ed00 	.word	0xe000ed00

080080dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080dc:	b480      	push	{r7}
 80080de:	b089      	sub	sp, #36	@ 0x24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f1c3 0307 	rsb	r3, r3, #7
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	bf28      	it	cs
 80080fa:	2304      	movcs	r3, #4
 80080fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	3304      	adds	r3, #4
 8008102:	2b06      	cmp	r3, #6
 8008104:	d902      	bls.n	800810c <NVIC_EncodePriority+0x30>
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	3b03      	subs	r3, #3
 800810a:	e000      	b.n	800810e <NVIC_EncodePriority+0x32>
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	fa02 f303 	lsl.w	r3, r2, r3
 800811a:	43da      	mvns	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	401a      	ands	r2, r3
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008124:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	fa01 f303 	lsl.w	r3, r1, r3
 800812e:	43d9      	mvns	r1, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008134:	4313      	orrs	r3, r2
         );
}
 8008136:	4618      	mov	r0, r3
 8008138:	3724      	adds	r7, #36	@ 0x24
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3b01      	subs	r3, #1
 800814c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008150:	d301      	bcc.n	8008156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008152:	2301      	movs	r3, #1
 8008154:	e00f      	b.n	8008176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008156:	4a0a      	ldr	r2, [pc, #40]	@ (8008180 <SysTick_Config+0x40>)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3b01      	subs	r3, #1
 800815c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800815e:	210f      	movs	r1, #15
 8008160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008164:	f7ff ff90 	bl	8008088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008168:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <SysTick_Config+0x40>)
 800816a:	2200      	movs	r2, #0
 800816c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800816e:	4b04      	ldr	r3, [pc, #16]	@ (8008180 <SysTick_Config+0x40>)
 8008170:	2207      	movs	r2, #7
 8008172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	e000e010 	.word	0xe000e010

08008184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff ff2d 	bl	8007fec <__NVIC_SetPriorityGrouping>
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800819a:	b580      	push	{r7, lr}
 800819c:	b086      	sub	sp, #24
 800819e:	af00      	add	r7, sp, #0
 80081a0:	4603      	mov	r3, r0
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	607a      	str	r2, [r7, #4]
 80081a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80081ac:	f7ff ff42 	bl	8008034 <__NVIC_GetPriorityGrouping>
 80081b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	6978      	ldr	r0, [r7, #20]
 80081b8:	f7ff ff90 	bl	80080dc <NVIC_EncodePriority>
 80081bc:	4602      	mov	r2, r0
 80081be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081c2:	4611      	mov	r1, r2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff ff5f 	bl	8008088 <__NVIC_SetPriority>
}
 80081ca:	bf00      	nop
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	4603      	mov	r3, r0
 80081da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff ff35 	bl	8008050 <__NVIC_EnableIRQ>
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff ffa2 	bl	8008140 <SysTick_Config>
 80081fc:	4603      	mov	r3, r0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008208:	b480      	push	{r7}
 800820a:	b08b      	sub	sp, #44	@ 0x2c
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008212:	2300      	movs	r3, #0
 8008214:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008216:	2300      	movs	r3, #0
 8008218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800821a:	e179      	b.n	8008510 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800821c:	2201      	movs	r2, #1
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	fa02 f303 	lsl.w	r3, r2, r3
 8008224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	4013      	ands	r3, r2
 800822e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	429a      	cmp	r2, r3
 8008236:	f040 8168 	bne.w	800850a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	4a96      	ldr	r2, [pc, #600]	@ (8008498 <HAL_GPIO_Init+0x290>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d05e      	beq.n	8008302 <HAL_GPIO_Init+0xfa>
 8008244:	4a94      	ldr	r2, [pc, #592]	@ (8008498 <HAL_GPIO_Init+0x290>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d875      	bhi.n	8008336 <HAL_GPIO_Init+0x12e>
 800824a:	4a94      	ldr	r2, [pc, #592]	@ (800849c <HAL_GPIO_Init+0x294>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d058      	beq.n	8008302 <HAL_GPIO_Init+0xfa>
 8008250:	4a92      	ldr	r2, [pc, #584]	@ (800849c <HAL_GPIO_Init+0x294>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d86f      	bhi.n	8008336 <HAL_GPIO_Init+0x12e>
 8008256:	4a92      	ldr	r2, [pc, #584]	@ (80084a0 <HAL_GPIO_Init+0x298>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d052      	beq.n	8008302 <HAL_GPIO_Init+0xfa>
 800825c:	4a90      	ldr	r2, [pc, #576]	@ (80084a0 <HAL_GPIO_Init+0x298>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d869      	bhi.n	8008336 <HAL_GPIO_Init+0x12e>
 8008262:	4a90      	ldr	r2, [pc, #576]	@ (80084a4 <HAL_GPIO_Init+0x29c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d04c      	beq.n	8008302 <HAL_GPIO_Init+0xfa>
 8008268:	4a8e      	ldr	r2, [pc, #568]	@ (80084a4 <HAL_GPIO_Init+0x29c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d863      	bhi.n	8008336 <HAL_GPIO_Init+0x12e>
 800826e:	4a8e      	ldr	r2, [pc, #568]	@ (80084a8 <HAL_GPIO_Init+0x2a0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d046      	beq.n	8008302 <HAL_GPIO_Init+0xfa>
 8008274:	4a8c      	ldr	r2, [pc, #560]	@ (80084a8 <HAL_GPIO_Init+0x2a0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d85d      	bhi.n	8008336 <HAL_GPIO_Init+0x12e>
 800827a:	2b12      	cmp	r3, #18
 800827c:	d82a      	bhi.n	80082d4 <HAL_GPIO_Init+0xcc>
 800827e:	2b12      	cmp	r3, #18
 8008280:	d859      	bhi.n	8008336 <HAL_GPIO_Init+0x12e>
 8008282:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <HAL_GPIO_Init+0x80>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	08008303 	.word	0x08008303
 800828c:	080082dd 	.word	0x080082dd
 8008290:	080082ef 	.word	0x080082ef
 8008294:	08008331 	.word	0x08008331
 8008298:	08008337 	.word	0x08008337
 800829c:	08008337 	.word	0x08008337
 80082a0:	08008337 	.word	0x08008337
 80082a4:	08008337 	.word	0x08008337
 80082a8:	08008337 	.word	0x08008337
 80082ac:	08008337 	.word	0x08008337
 80082b0:	08008337 	.word	0x08008337
 80082b4:	08008337 	.word	0x08008337
 80082b8:	08008337 	.word	0x08008337
 80082bc:	08008337 	.word	0x08008337
 80082c0:	08008337 	.word	0x08008337
 80082c4:	08008337 	.word	0x08008337
 80082c8:	08008337 	.word	0x08008337
 80082cc:	080082e5 	.word	0x080082e5
 80082d0:	080082f9 	.word	0x080082f9
 80082d4:	4a75      	ldr	r2, [pc, #468]	@ (80084ac <HAL_GPIO_Init+0x2a4>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d013      	beq.n	8008302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80082da:	e02c      	b.n	8008336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	623b      	str	r3, [r7, #32]
          break;
 80082e2:	e029      	b.n	8008338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	3304      	adds	r3, #4
 80082ea:	623b      	str	r3, [r7, #32]
          break;
 80082ec:	e024      	b.n	8008338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	3308      	adds	r3, #8
 80082f4:	623b      	str	r3, [r7, #32]
          break;
 80082f6:	e01f      	b.n	8008338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	330c      	adds	r3, #12
 80082fe:	623b      	str	r3, [r7, #32]
          break;
 8008300:	e01a      	b.n	8008338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d102      	bne.n	8008310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800830a:	2304      	movs	r3, #4
 800830c:	623b      	str	r3, [r7, #32]
          break;
 800830e:	e013      	b.n	8008338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d105      	bne.n	8008324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008318:	2308      	movs	r3, #8
 800831a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	69fa      	ldr	r2, [r7, #28]
 8008320:	611a      	str	r2, [r3, #16]
          break;
 8008322:	e009      	b.n	8008338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008324:	2308      	movs	r3, #8
 8008326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	69fa      	ldr	r2, [r7, #28]
 800832c:	615a      	str	r2, [r3, #20]
          break;
 800832e:	e003      	b.n	8008338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008330:	2300      	movs	r3, #0
 8008332:	623b      	str	r3, [r7, #32]
          break;
 8008334:	e000      	b.n	8008338 <HAL_GPIO_Init+0x130>
          break;
 8008336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2bff      	cmp	r3, #255	@ 0xff
 800833c:	d801      	bhi.n	8008342 <HAL_GPIO_Init+0x13a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	e001      	b.n	8008346 <HAL_GPIO_Init+0x13e>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3304      	adds	r3, #4
 8008346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2bff      	cmp	r3, #255	@ 0xff
 800834c:	d802      	bhi.n	8008354 <HAL_GPIO_Init+0x14c>
 800834e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	e002      	b.n	800835a <HAL_GPIO_Init+0x152>
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	3b08      	subs	r3, #8
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	210f      	movs	r1, #15
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	fa01 f303 	lsl.w	r3, r1, r3
 8008368:	43db      	mvns	r3, r3
 800836a:	401a      	ands	r2, r3
 800836c:	6a39      	ldr	r1, [r7, #32]
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	fa01 f303 	lsl.w	r3, r1, r3
 8008374:	431a      	orrs	r2, r3
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 80c1 	beq.w	800850a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008388:	4b49      	ldr	r3, [pc, #292]	@ (80084b0 <HAL_GPIO_Init+0x2a8>)
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	4a48      	ldr	r2, [pc, #288]	@ (80084b0 <HAL_GPIO_Init+0x2a8>)
 800838e:	f043 0301 	orr.w	r3, r3, #1
 8008392:	6193      	str	r3, [r2, #24]
 8008394:	4b46      	ldr	r3, [pc, #280]	@ (80084b0 <HAL_GPIO_Init+0x2a8>)
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80083a0:	4a44      	ldr	r2, [pc, #272]	@ (80084b4 <HAL_GPIO_Init+0x2ac>)
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	089b      	lsrs	r3, r3, #2
 80083a6:	3302      	adds	r3, #2
 80083a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	220f      	movs	r2, #15
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	43db      	mvns	r3, r3
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4013      	ands	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a3c      	ldr	r2, [pc, #240]	@ (80084b8 <HAL_GPIO_Init+0x2b0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d01f      	beq.n	800840c <HAL_GPIO_Init+0x204>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a3b      	ldr	r2, [pc, #236]	@ (80084bc <HAL_GPIO_Init+0x2b4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d019      	beq.n	8008408 <HAL_GPIO_Init+0x200>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a3a      	ldr	r2, [pc, #232]	@ (80084c0 <HAL_GPIO_Init+0x2b8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d013      	beq.n	8008404 <HAL_GPIO_Init+0x1fc>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a39      	ldr	r2, [pc, #228]	@ (80084c4 <HAL_GPIO_Init+0x2bc>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00d      	beq.n	8008400 <HAL_GPIO_Init+0x1f8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a38      	ldr	r2, [pc, #224]	@ (80084c8 <HAL_GPIO_Init+0x2c0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d007      	beq.n	80083fc <HAL_GPIO_Init+0x1f4>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a37      	ldr	r2, [pc, #220]	@ (80084cc <HAL_GPIO_Init+0x2c4>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d101      	bne.n	80083f8 <HAL_GPIO_Init+0x1f0>
 80083f4:	2305      	movs	r3, #5
 80083f6:	e00a      	b.n	800840e <HAL_GPIO_Init+0x206>
 80083f8:	2306      	movs	r3, #6
 80083fa:	e008      	b.n	800840e <HAL_GPIO_Init+0x206>
 80083fc:	2304      	movs	r3, #4
 80083fe:	e006      	b.n	800840e <HAL_GPIO_Init+0x206>
 8008400:	2303      	movs	r3, #3
 8008402:	e004      	b.n	800840e <HAL_GPIO_Init+0x206>
 8008404:	2302      	movs	r3, #2
 8008406:	e002      	b.n	800840e <HAL_GPIO_Init+0x206>
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <HAL_GPIO_Init+0x206>
 800840c:	2300      	movs	r3, #0
 800840e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008410:	f002 0203 	and.w	r2, r2, #3
 8008414:	0092      	lsls	r2, r2, #2
 8008416:	4093      	lsls	r3, r2
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800841e:	4925      	ldr	r1, [pc, #148]	@ (80084b4 <HAL_GPIO_Init+0x2ac>)
 8008420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008422:	089b      	lsrs	r3, r3, #2
 8008424:	3302      	adds	r3, #2
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d006      	beq.n	8008446 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008438:	4b25      	ldr	r3, [pc, #148]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4924      	ldr	r1, [pc, #144]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	4313      	orrs	r3, r2
 8008442:	600b      	str	r3, [r1, #0]
 8008444:	e006      	b.n	8008454 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008446:	4b22      	ldr	r3, [pc, #136]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	43db      	mvns	r3, r3
 800844e:	4920      	ldr	r1, [pc, #128]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 8008450:	4013      	ands	r3, r2
 8008452:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d006      	beq.n	800846e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008460:	4b1b      	ldr	r3, [pc, #108]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	491a      	ldr	r1, [pc, #104]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	4313      	orrs	r3, r2
 800846a:	604b      	str	r3, [r1, #4]
 800846c:	e006      	b.n	800847c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800846e:	4b18      	ldr	r3, [pc, #96]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	43db      	mvns	r3, r3
 8008476:	4916      	ldr	r1, [pc, #88]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 8008478:	4013      	ands	r3, r2
 800847a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d025      	beq.n	80084d4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008488:	4b11      	ldr	r3, [pc, #68]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	4910      	ldr	r1, [pc, #64]	@ (80084d0 <HAL_GPIO_Init+0x2c8>)
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	4313      	orrs	r3, r2
 8008492:	608b      	str	r3, [r1, #8]
 8008494:	e025      	b.n	80084e2 <HAL_GPIO_Init+0x2da>
 8008496:	bf00      	nop
 8008498:	10320000 	.word	0x10320000
 800849c:	10310000 	.word	0x10310000
 80084a0:	10220000 	.word	0x10220000
 80084a4:	10210000 	.word	0x10210000
 80084a8:	10120000 	.word	0x10120000
 80084ac:	10110000 	.word	0x10110000
 80084b0:	40021000 	.word	0x40021000
 80084b4:	40010000 	.word	0x40010000
 80084b8:	40010800 	.word	0x40010800
 80084bc:	40010c00 	.word	0x40010c00
 80084c0:	40011000 	.word	0x40011000
 80084c4:	40011400 	.word	0x40011400
 80084c8:	40011800 	.word	0x40011800
 80084cc:	40011c00 	.word	0x40011c00
 80084d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80084d4:	4b15      	ldr	r3, [pc, #84]	@ (800852c <HAL_GPIO_Init+0x324>)
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	43db      	mvns	r3, r3
 80084dc:	4913      	ldr	r1, [pc, #76]	@ (800852c <HAL_GPIO_Init+0x324>)
 80084de:	4013      	ands	r3, r2
 80084e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d006      	beq.n	80084fc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80084ee:	4b0f      	ldr	r3, [pc, #60]	@ (800852c <HAL_GPIO_Init+0x324>)
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	490e      	ldr	r1, [pc, #56]	@ (800852c <HAL_GPIO_Init+0x324>)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60cb      	str	r3, [r1, #12]
 80084fa:	e006      	b.n	800850a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80084fc:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <HAL_GPIO_Init+0x324>)
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	43db      	mvns	r3, r3
 8008504:	4909      	ldr	r1, [pc, #36]	@ (800852c <HAL_GPIO_Init+0x324>)
 8008506:	4013      	ands	r3, r2
 8008508:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	3301      	adds	r3, #1
 800850e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	fa22 f303 	lsr.w	r3, r2, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	f47f ae7e 	bne.w	800821c <HAL_GPIO_Init+0x14>
  }
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	372c      	adds	r7, #44	@ 0x2c
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr
 800852c:	40010400 	.word	0x40010400

08008530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	887b      	ldrh	r3, [r7, #2]
 8008542:	4013      	ands	r3, r2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008548:	2301      	movs	r3, #1
 800854a:	73fb      	strb	r3, [r7, #15]
 800854c:	e001      	b.n	8008552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008552:	7bfb      	ldrb	r3, [r7, #15]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr

0800855e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800855e:	b480      	push	{r7}
 8008560:	b083      	sub	sp, #12
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	460b      	mov	r3, r1
 8008568:	807b      	strh	r3, [r7, #2]
 800856a:	4613      	mov	r3, r2
 800856c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800856e:	787b      	ldrb	r3, [r7, #1]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008574:	887a      	ldrh	r2, [r7, #2]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800857a:	e003      	b.n	8008584 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800857c:	887b      	ldrh	r3, [r7, #2]
 800857e:	041a      	lsls	r2, r3, #16
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	611a      	str	r2, [r3, #16]
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
	...

08008590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800859a:	4b08      	ldr	r3, [pc, #32]	@ (80085bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800859c:	695a      	ldr	r2, [r3, #20]
 800859e:	88fb      	ldrh	r3, [r7, #6]
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80085a6:	4a05      	ldr	r2, [pc, #20]	@ (80085bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085a8:	88fb      	ldrh	r3, [r7, #6]
 80085aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80085ac:	88fb      	ldrh	r3, [r7, #6]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff fb64 	bl	8007c7c <HAL_GPIO_EXTI_Callback>
  }
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	40010400 	.word	0x40010400

080085c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e272      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 8087 	beq.w	80086ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80085e0:	4b92      	ldr	r3, [pc, #584]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f003 030c 	and.w	r3, r3, #12
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d00c      	beq.n	8008606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80085ec:	4b8f      	ldr	r3, [pc, #572]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f003 030c 	and.w	r3, r3, #12
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d112      	bne.n	800861e <HAL_RCC_OscConfig+0x5e>
 80085f8:	4b8c      	ldr	r3, [pc, #560]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008604:	d10b      	bne.n	800861e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008606:	4b89      	ldr	r3, [pc, #548]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d06c      	beq.n	80086ec <HAL_RCC_OscConfig+0x12c>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d168      	bne.n	80086ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e24c      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008626:	d106      	bne.n	8008636 <HAL_RCC_OscConfig+0x76>
 8008628:	4b80      	ldr	r3, [pc, #512]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a7f      	ldr	r2, [pc, #508]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 800862e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	e02e      	b.n	8008694 <HAL_RCC_OscConfig+0xd4>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10c      	bne.n	8008658 <HAL_RCC_OscConfig+0x98>
 800863e:	4b7b      	ldr	r3, [pc, #492]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a7a      	ldr	r2, [pc, #488]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	4b78      	ldr	r3, [pc, #480]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a77      	ldr	r2, [pc, #476]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008650:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	e01d      	b.n	8008694 <HAL_RCC_OscConfig+0xd4>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008660:	d10c      	bne.n	800867c <HAL_RCC_OscConfig+0xbc>
 8008662:	4b72      	ldr	r3, [pc, #456]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a71      	ldr	r2, [pc, #452]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	4b6f      	ldr	r3, [pc, #444]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a6e      	ldr	r2, [pc, #440]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	e00b      	b.n	8008694 <HAL_RCC_OscConfig+0xd4>
 800867c:	4b6b      	ldr	r3, [pc, #428]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a6a      	ldr	r2, [pc, #424]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4b68      	ldr	r3, [pc, #416]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a67      	ldr	r2, [pc, #412]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 800868e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d013      	beq.n	80086c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800869c:	f7ff fc78 	bl	8007f90 <HAL_GetTick>
 80086a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086a4:	f7ff fc74 	bl	8007f90 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b64      	cmp	r3, #100	@ 0x64
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e200      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b6:	4b5d      	ldr	r3, [pc, #372]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0f0      	beq.n	80086a4 <HAL_RCC_OscConfig+0xe4>
 80086c2:	e014      	b.n	80086ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c4:	f7ff fc64 	bl	8007f90 <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086cc:	f7ff fc60 	bl	8007f90 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b64      	cmp	r3, #100	@ 0x64
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e1ec      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086de:	4b53      	ldr	r3, [pc, #332]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f0      	bne.n	80086cc <HAL_RCC_OscConfig+0x10c>
 80086ea:	e000      	b.n	80086ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d063      	beq.n	80087c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80086fa:	4b4c      	ldr	r3, [pc, #304]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f003 030c 	and.w	r3, r3, #12
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00b      	beq.n	800871e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008706:	4b49      	ldr	r3, [pc, #292]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	2b08      	cmp	r3, #8
 8008710:	d11c      	bne.n	800874c <HAL_RCC_OscConfig+0x18c>
 8008712:	4b46      	ldr	r3, [pc, #280]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d116      	bne.n	800874c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800871e:	4b43      	ldr	r3, [pc, #268]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <HAL_RCC_OscConfig+0x176>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d001      	beq.n	8008736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e1c0      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008736:	4b3d      	ldr	r3, [pc, #244]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	4939      	ldr	r1, [pc, #228]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008746:	4313      	orrs	r3, r2
 8008748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800874a:	e03a      	b.n	80087c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d020      	beq.n	8008796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008754:	4b36      	ldr	r3, [pc, #216]	@ (8008830 <HAL_RCC_OscConfig+0x270>)
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800875a:	f7ff fc19 	bl	8007f90 <HAL_GetTick>
 800875e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008762:	f7ff fc15 	bl	8007f90 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e1a1      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008774:	4b2d      	ldr	r3, [pc, #180]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0302 	and.w	r3, r3, #2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0f0      	beq.n	8008762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008780:	4b2a      	ldr	r3, [pc, #168]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	4927      	ldr	r1, [pc, #156]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 8008790:	4313      	orrs	r3, r2
 8008792:	600b      	str	r3, [r1, #0]
 8008794:	e015      	b.n	80087c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008796:	4b26      	ldr	r3, [pc, #152]	@ (8008830 <HAL_RCC_OscConfig+0x270>)
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800879c:	f7ff fbf8 	bl	8007f90 <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a4:	f7ff fbf4 	bl	8007f90 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e180      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087b6:	4b1d      	ldr	r3, [pc, #116]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f0      	bne.n	80087a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0308 	and.w	r3, r3, #8
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d03a      	beq.n	8008844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d019      	beq.n	800880a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087d6:	4b17      	ldr	r3, [pc, #92]	@ (8008834 <HAL_RCC_OscConfig+0x274>)
 80087d8:	2201      	movs	r2, #1
 80087da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087dc:	f7ff fbd8 	bl	8007f90 <HAL_GetTick>
 80087e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087e2:	e008      	b.n	80087f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087e4:	f7ff fbd4 	bl	8007f90 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e160      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f6:	4b0d      	ldr	r3, [pc, #52]	@ (800882c <HAL_RCC_OscConfig+0x26c>)
 80087f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0f0      	beq.n	80087e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008802:	2001      	movs	r0, #1
 8008804:	f000 faa6 	bl	8008d54 <RCC_Delay>
 8008808:	e01c      	b.n	8008844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800880a:	4b0a      	ldr	r3, [pc, #40]	@ (8008834 <HAL_RCC_OscConfig+0x274>)
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008810:	f7ff fbbe 	bl	8007f90 <HAL_GetTick>
 8008814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008816:	e00f      	b.n	8008838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008818:	f7ff fbba 	bl	8007f90 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d908      	bls.n	8008838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e146      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
 800882a:	bf00      	nop
 800882c:	40021000 	.word	0x40021000
 8008830:	42420000 	.word	0x42420000
 8008834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008838:	4b92      	ldr	r3, [pc, #584]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 800883a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e9      	bne.n	8008818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80a6 	beq.w	800899e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008852:	2300      	movs	r3, #0
 8008854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008856:	4b8b      	ldr	r3, [pc, #556]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10d      	bne.n	800887e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008862:	4b88      	ldr	r3, [pc, #544]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	4a87      	ldr	r2, [pc, #540]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800886c:	61d3      	str	r3, [r2, #28]
 800886e:	4b85      	ldr	r3, [pc, #532]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008876:	60bb      	str	r3, [r7, #8]
 8008878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800887a:	2301      	movs	r3, #1
 800887c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800887e:	4b82      	ldr	r3, [pc, #520]	@ (8008a88 <HAL_RCC_OscConfig+0x4c8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008886:	2b00      	cmp	r3, #0
 8008888:	d118      	bne.n	80088bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800888a:	4b7f      	ldr	r3, [pc, #508]	@ (8008a88 <HAL_RCC_OscConfig+0x4c8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a7e      	ldr	r2, [pc, #504]	@ (8008a88 <HAL_RCC_OscConfig+0x4c8>)
 8008890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008896:	f7ff fb7b 	bl	8007f90 <HAL_GetTick>
 800889a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800889c:	e008      	b.n	80088b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800889e:	f7ff fb77 	bl	8007f90 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	2b64      	cmp	r3, #100	@ 0x64
 80088aa:	d901      	bls.n	80088b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e103      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b0:	4b75      	ldr	r3, [pc, #468]	@ (8008a88 <HAL_RCC_OscConfig+0x4c8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0f0      	beq.n	800889e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d106      	bne.n	80088d2 <HAL_RCC_OscConfig+0x312>
 80088c4:	4b6f      	ldr	r3, [pc, #444]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	4a6e      	ldr	r2, [pc, #440]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80088ca:	f043 0301 	orr.w	r3, r3, #1
 80088ce:	6213      	str	r3, [r2, #32]
 80088d0:	e02d      	b.n	800892e <HAL_RCC_OscConfig+0x36e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10c      	bne.n	80088f4 <HAL_RCC_OscConfig+0x334>
 80088da:	4b6a      	ldr	r3, [pc, #424]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	4a69      	ldr	r2, [pc, #420]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80088e0:	f023 0301 	bic.w	r3, r3, #1
 80088e4:	6213      	str	r3, [r2, #32]
 80088e6:	4b67      	ldr	r3, [pc, #412]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	4a66      	ldr	r2, [pc, #408]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80088ec:	f023 0304 	bic.w	r3, r3, #4
 80088f0:	6213      	str	r3, [r2, #32]
 80088f2:	e01c      	b.n	800892e <HAL_RCC_OscConfig+0x36e>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	2b05      	cmp	r3, #5
 80088fa:	d10c      	bne.n	8008916 <HAL_RCC_OscConfig+0x356>
 80088fc:	4b61      	ldr	r3, [pc, #388]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	4a60      	ldr	r2, [pc, #384]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008902:	f043 0304 	orr.w	r3, r3, #4
 8008906:	6213      	str	r3, [r2, #32]
 8008908:	4b5e      	ldr	r3, [pc, #376]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	4a5d      	ldr	r2, [pc, #372]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 800890e:	f043 0301 	orr.w	r3, r3, #1
 8008912:	6213      	str	r3, [r2, #32]
 8008914:	e00b      	b.n	800892e <HAL_RCC_OscConfig+0x36e>
 8008916:	4b5b      	ldr	r3, [pc, #364]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	4a5a      	ldr	r2, [pc, #360]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	6213      	str	r3, [r2, #32]
 8008922:	4b58      	ldr	r3, [pc, #352]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	4a57      	ldr	r2, [pc, #348]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008928:	f023 0304 	bic.w	r3, r3, #4
 800892c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d015      	beq.n	8008962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008936:	f7ff fb2b 	bl	8007f90 <HAL_GetTick>
 800893a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800893c:	e00a      	b.n	8008954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800893e:	f7ff fb27 	bl	8007f90 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800894c:	4293      	cmp	r3, r2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e0b1      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008954:	4b4b      	ldr	r3, [pc, #300]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0ee      	beq.n	800893e <HAL_RCC_OscConfig+0x37e>
 8008960:	e014      	b.n	800898c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008962:	f7ff fb15 	bl	8007f90 <HAL_GetTick>
 8008966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008968:	e00a      	b.n	8008980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800896a:	f7ff fb11 	bl	8007f90 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008978:	4293      	cmp	r3, r2
 800897a:	d901      	bls.n	8008980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e09b      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008980:	4b40      	ldr	r3, [pc, #256]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1ee      	bne.n	800896a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d105      	bne.n	800899e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008992:	4b3c      	ldr	r3, [pc, #240]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	4a3b      	ldr	r2, [pc, #236]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800899c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 8087 	beq.w	8008ab6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089a8:	4b36      	ldr	r3, [pc, #216]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f003 030c 	and.w	r3, r3, #12
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	d061      	beq.n	8008a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d146      	bne.n	8008a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089bc:	4b33      	ldr	r3, [pc, #204]	@ (8008a8c <HAL_RCC_OscConfig+0x4cc>)
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089c2:	f7ff fae5 	bl	8007f90 <HAL_GetTick>
 80089c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089c8:	e008      	b.n	80089dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089ca:	f7ff fae1 	bl	8007f90 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e06d      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089dc:	4b29      	ldr	r3, [pc, #164]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1f0      	bne.n	80089ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089f0:	d108      	bne.n	8008a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80089f2:	4b24      	ldr	r3, [pc, #144]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	4921      	ldr	r1, [pc, #132]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a04:	4b1f      	ldr	r3, [pc, #124]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a19      	ldr	r1, [r3, #32]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a14:	430b      	orrs	r3, r1
 8008a16:	491b      	ldr	r1, [pc, #108]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a8c <HAL_RCC_OscConfig+0x4cc>)
 8008a1e:	2201      	movs	r2, #1
 8008a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a22:	f7ff fab5 	bl	8007f90 <HAL_GetTick>
 8008a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008a28:	e008      	b.n	8008a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a2a:	f7ff fab1 	bl	8007f90 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d901      	bls.n	8008a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e03d      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008a3c:	4b11      	ldr	r3, [pc, #68]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0f0      	beq.n	8008a2a <HAL_RCC_OscConfig+0x46a>
 8008a48:	e035      	b.n	8008ab6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a4a:	4b10      	ldr	r3, [pc, #64]	@ (8008a8c <HAL_RCC_OscConfig+0x4cc>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a50:	f7ff fa9e 	bl	8007f90 <HAL_GetTick>
 8008a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a56:	e008      	b.n	8008a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a58:	f7ff fa9a 	bl	8007f90 <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d901      	bls.n	8008a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e026      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a6a:	4b06      	ldr	r3, [pc, #24]	@ (8008a84 <HAL_RCC_OscConfig+0x4c4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1f0      	bne.n	8008a58 <HAL_RCC_OscConfig+0x498>
 8008a76:	e01e      	b.n	8008ab6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d107      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e019      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
 8008a84:	40021000 	.word	0x40021000
 8008a88:	40007000 	.word	0x40007000
 8008a8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008a90:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac0 <HAL_RCC_OscConfig+0x500>)
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d106      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d001      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e000      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	40021000 	.word	0x40021000

08008ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0d0      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8008c84 <HAL_RCC_ClockConfig+0x1c0>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d910      	bls.n	8008b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ae6:	4b67      	ldr	r3, [pc, #412]	@ (8008c84 <HAL_RCC_ClockConfig+0x1c0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f023 0207 	bic.w	r2, r3, #7
 8008aee:	4965      	ldr	r1, [pc, #404]	@ (8008c84 <HAL_RCC_ClockConfig+0x1c0>)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008af6:	4b63      	ldr	r3, [pc, #396]	@ (8008c84 <HAL_RCC_ClockConfig+0x1c0>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d001      	beq.n	8008b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e0b8      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d020      	beq.n	8008b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b20:	4b59      	ldr	r3, [pc, #356]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	4a58      	ldr	r2, [pc, #352]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0308 	and.w	r3, r3, #8
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b38:	4b53      	ldr	r3, [pc, #332]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	4a52      	ldr	r2, [pc, #328]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b44:	4b50      	ldr	r3, [pc, #320]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	494d      	ldr	r1, [pc, #308]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d040      	beq.n	8008be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d107      	bne.n	8008b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b6a:	4b47      	ldr	r3, [pc, #284]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d115      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e07f      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d107      	bne.n	8008b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b82:	4b41      	ldr	r3, [pc, #260]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d109      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e073      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b92:	4b3d      	ldr	r3, [pc, #244]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e06b      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ba2:	4b39      	ldr	r3, [pc, #228]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f023 0203 	bic.w	r2, r3, #3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4936      	ldr	r1, [pc, #216]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bb4:	f7ff f9ec 	bl	8007f90 <HAL_GetTick>
 8008bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bba:	e00a      	b.n	8008bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bbc:	f7ff f9e8 	bl	8007f90 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e053      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f003 020c 	and.w	r2, r3, #12
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d1eb      	bne.n	8008bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008be4:	4b27      	ldr	r3, [pc, #156]	@ (8008c84 <HAL_RCC_ClockConfig+0x1c0>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d210      	bcs.n	8008c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf2:	4b24      	ldr	r3, [pc, #144]	@ (8008c84 <HAL_RCC_ClockConfig+0x1c0>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f023 0207 	bic.w	r2, r3, #7
 8008bfa:	4922      	ldr	r1, [pc, #136]	@ (8008c84 <HAL_RCC_ClockConfig+0x1c0>)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c02:	4b20      	ldr	r3, [pc, #128]	@ (8008c84 <HAL_RCC_ClockConfig+0x1c0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d001      	beq.n	8008c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e032      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d008      	beq.n	8008c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c20:	4b19      	ldr	r3, [pc, #100]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	4916      	ldr	r1, [pc, #88]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0308 	and.w	r3, r3, #8
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c3e:	4b12      	ldr	r3, [pc, #72]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	490e      	ldr	r1, [pc, #56]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008c52:	f000 f821 	bl	8008c98 <HAL_RCC_GetSysClockFreq>
 8008c56:	4602      	mov	r2, r0
 8008c58:	4b0b      	ldr	r3, [pc, #44]	@ (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	091b      	lsrs	r3, r3, #4
 8008c5e:	f003 030f 	and.w	r3, r3, #15
 8008c62:	490a      	ldr	r1, [pc, #40]	@ (8008c8c <HAL_RCC_ClockConfig+0x1c8>)
 8008c64:	5ccb      	ldrb	r3, [r1, r3]
 8008c66:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6a:	4a09      	ldr	r2, [pc, #36]	@ (8008c90 <HAL_RCC_ClockConfig+0x1cc>)
 8008c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008c6e:	4b09      	ldr	r3, [pc, #36]	@ (8008c94 <HAL_RCC_ClockConfig+0x1d0>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7ff f94a 	bl	8007f0c <HAL_InitTick>

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	40022000 	.word	0x40022000
 8008c88:	40021000 	.word	0x40021000
 8008c8c:	0800be7c 	.word	0x0800be7c
 8008c90:	20000004 	.word	0x20000004
 8008c94:	20000008 	.word	0x20000008

08008c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c98:	b490      	push	{r4, r7}
 8008c9a:	b08a      	sub	sp, #40	@ 0x28
 8008c9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008c9e:	4b29      	ldr	r3, [pc, #164]	@ (8008d44 <HAL_RCC_GetSysClockFreq+0xac>)
 8008ca0:	1d3c      	adds	r4, r7, #4
 8008ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008ca8:	f240 2301 	movw	r3, #513	@ 0x201
 8008cac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61fb      	str	r3, [r7, #28]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cba:	2300      	movs	r3, #0
 8008cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008cc2:	4b21      	ldr	r3, [pc, #132]	@ (8008d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f003 030c 	and.w	r3, r3, #12
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d002      	beq.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d003      	beq.n	8008cde <HAL_RCC_GetSysClockFreq+0x46>
 8008cd6:	e02b      	b.n	8008d30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008cda:	623b      	str	r3, [r7, #32]
      break;
 8008cdc:	e02b      	b.n	8008d36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	0c9b      	lsrs	r3, r3, #18
 8008ce2:	f003 030f 	and.w	r3, r3, #15
 8008ce6:	3328      	adds	r3, #40	@ 0x28
 8008ce8:	443b      	add	r3, r7
 8008cea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008cee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d012      	beq.n	8008d20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008cfa:	4b13      	ldr	r3, [pc, #76]	@ (8008d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	0c5b      	lsrs	r3, r3, #17
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	3328      	adds	r3, #40	@ 0x28
 8008d06:	443b      	add	r3, r7
 8008d08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008d0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	4a0e      	ldr	r2, [pc, #56]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008d12:	fb03 f202 	mul.w	r2, r3, r2
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d1e:	e004      	b.n	8008d2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	4a0b      	ldr	r2, [pc, #44]	@ (8008d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d24:	fb02 f303 	mul.w	r3, r2, r3
 8008d28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2c:	623b      	str	r3, [r7, #32]
      break;
 8008d2e:	e002      	b.n	8008d36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008d30:	4b06      	ldr	r3, [pc, #24]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008d32:	623b      	str	r3, [r7, #32]
      break;
 8008d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d36:	6a3b      	ldr	r3, [r7, #32]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3728      	adds	r7, #40	@ 0x28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc90      	pop	{r4, r7}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	08008eec 	.word	0x08008eec
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	007a1200 	.word	0x007a1200
 8008d50:	003d0900 	.word	0x003d0900

08008d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d88 <RCC_Delay+0x34>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a0a      	ldr	r2, [pc, #40]	@ (8008d8c <RCC_Delay+0x38>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	0a5b      	lsrs	r3, r3, #9
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	fb02 f303 	mul.w	r3, r2, r3
 8008d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008d70:	bf00      	nop
  }
  while (Delay --);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1e5a      	subs	r2, r3, #1
 8008d76:	60fa      	str	r2, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1f9      	bne.n	8008d70 <RCC_Delay+0x1c>
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr
 8008d88:	20000004 	.word	0x20000004
 8008d8c:	10624dd3 	.word	0x10624dd3

08008d90 <memset>:
 8008d90:	4603      	mov	r3, r0
 8008d92:	4402      	add	r2, r0
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d100      	bne.n	8008d9a <memset+0xa>
 8008d98:	4770      	bx	lr
 8008d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d9e:	e7f9      	b.n	8008d94 <memset+0x4>

08008da0 <__libc_init_array>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	2600      	movs	r6, #0
 8008da4:	4d0c      	ldr	r5, [pc, #48]	@ (8008dd8 <__libc_init_array+0x38>)
 8008da6:	4c0d      	ldr	r4, [pc, #52]	@ (8008ddc <__libc_init_array+0x3c>)
 8008da8:	1b64      	subs	r4, r4, r5
 8008daa:	10a4      	asrs	r4, r4, #2
 8008dac:	42a6      	cmp	r6, r4
 8008dae:	d109      	bne.n	8008dc4 <__libc_init_array+0x24>
 8008db0:	f000 f81a 	bl	8008de8 <_init>
 8008db4:	2600      	movs	r6, #0
 8008db6:	4d0a      	ldr	r5, [pc, #40]	@ (8008de0 <__libc_init_array+0x40>)
 8008db8:	4c0a      	ldr	r4, [pc, #40]	@ (8008de4 <__libc_init_array+0x44>)
 8008dba:	1b64      	subs	r4, r4, r5
 8008dbc:	10a4      	asrs	r4, r4, #2
 8008dbe:	42a6      	cmp	r6, r4
 8008dc0:	d105      	bne.n	8008dce <__libc_init_array+0x2e>
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc8:	4798      	blx	r3
 8008dca:	3601      	adds	r6, #1
 8008dcc:	e7ee      	b.n	8008dac <__libc_init_array+0xc>
 8008dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd2:	4798      	blx	r3
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	e7f2      	b.n	8008dbe <__libc_init_array+0x1e>
 8008dd8:	0800be8c 	.word	0x0800be8c
 8008ddc:	0800be8c 	.word	0x0800be8c
 8008de0:	0800be8c 	.word	0x0800be8c
 8008de4:	0800be90 	.word	0x0800be90

08008de8 <_init>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr

08008df4 <_fini>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	bf00      	nop
 8008df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfa:	bc08      	pop	{r3}
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	4770      	bx	lr
