
assignment3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a704  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033fc  0800a8ec  0800a8ec  0000b8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dce8  0800dce8  00011a9c  2**0
                  CONTENTS
  4 .ARM          00000000  0800dce8  0800dce8  00011a9c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dce8  0800dce8  00011a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dce8  0800dce8  0000ece8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dcec  0800dcec  0000ecec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002a9c  20000000  0800dcf0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20002a9c  0801078c  00011a9c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ce0  0801078c  00011ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011a9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d601  00000000  00000000  00011ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002426  00000000  00000000  0001f0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000214f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a84  00000000  00000000  00022260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5f9  00000000  00000000  00022ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a41  00000000  00000000  0003d2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098b74  00000000  00000000  0004dd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6892  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000e68d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  000ea688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20002a9c 	.word	0x20002a9c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a8d4 	.word	0x0800a8d4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20002aa0 	.word	0x20002aa0
 8000224:	0800a8d4 	.word	0x0800a8d4

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a45      	ldr	r2, [pc, #276]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a3f      	ldr	r2, [pc, #252]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x130>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	4b3a      	ldr	r3, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a39      	ldr	r2, [pc, #228]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b37      	ldr	r3, [pc, #220]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000896:	4834      	ldr	r0, [pc, #208]	@ (8000968 <MX_GPIO_Init+0x134>)
 8000898:	f007 fdbb 	bl	8008412 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2104      	movs	r1, #4
 80008a0:	4832      	ldr	r0, [pc, #200]	@ (800096c <MX_GPIO_Init+0x138>)
 80008a2:	f007 fdb6 	bl	8008412 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_GPIO_Init+0x13c>)
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	482b      	ldr	r0, [pc, #172]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008ba:	f007 fbff 	bl	80080bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	4829      	ldr	r0, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x144>)
 80008d2:	f007 fbf3 	bl	80080bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	481e      	ldr	r0, [pc, #120]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008f0:	f007 fbe4 	bl	80080bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4817      	ldr	r0, [pc, #92]	@ (8000968 <MX_GPIO_Init+0x134>)
 800090a:	f007 fbd7 	bl	80080bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800090e:	2304      	movs	r3, #4
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	@ (800096c <MX_GPIO_Init+0x138>)
 8000926:	f007 fbc9 	bl	80080bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	2006      	movs	r0, #6
 8000930:	f007 fa4b 	bl	8007dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000934:	2006      	movs	r0, #6
 8000936:	f007 fa64 	bl	8007e02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	2017      	movs	r0, #23
 8000940:	f007 fa43 	bl	8007dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000944:	2017      	movs	r0, #23
 8000946:	f007 fa5c 	bl	8007e02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800094a:	2202      	movs	r2, #2
 800094c:	2101      	movs	r1, #1
 800094e:	2028      	movs	r0, #40	@ 0x28
 8000950:	f007 fa3b 	bl	8007dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000954:	2028      	movs	r0, #40	@ 0x28
 8000956:	f007 fa54 	bl	8007e02 <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	40011400 	.word	0x40011400
 8000970:	10110000 	.word	0x10110000
 8000974:	10210000 	.word	0x10210000
 8000978:	40011000 	.word	0x40011000

0800097c <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <lcd_wr_xdata+0x40>)
 8000988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800098c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <lcd_wr_xdata+0x40>)
 8000990:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000994:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <lcd_wr_xdata+0x44>)
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <lcd_wr_xdata+0x40>)
 800099e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009a2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <lcd_wr_xdata+0x40>)
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <lcd_wr_xdata+0x40>)
 80009ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b0:	611a      	str	r2, [r3, #16]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	460a      	mov	r2, r1
 80009ce:	80fb      	strh	r3, [r7, #6]
 80009d0:	4613      	mov	r3, r2
 80009d2:	80bb      	strh	r3, [r7, #4]
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <lcd_write_reg+0x7c>)
 80009da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80009de:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <lcd_write_reg+0x7c>)
 80009e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009e6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <lcd_write_reg+0x80>)
 80009ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <lcd_write_reg+0x7c>)
 80009f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <lcd_write_reg+0x7c>)
 80009fa:	2280      	movs	r2, #128	@ 0x80
 80009fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a04:	611a      	str	r2, [r3, #16]
}
 8000a06:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <lcd_write_reg+0x80>)
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	60d3      	str	r3, [r2, #12]
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	611a      	str	r2, [r3, #16]
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a32:	611a      	str	r2, [r3, #16]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40011000 	.word	0x40011000
 8000a44:	40010c00 	.word	0x40010c00

08000a48 <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    while (i--);
 8000a50:	bf00      	nop
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	1e5a      	subs	r2, r3, #1
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1fa      	bne.n	8000a52 <lcd_opt_delay+0xa>
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a72:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	4818      	ldr	r0, [pc, #96]	@ (8000ae8 <lcd_rd_data+0x80>)
 8000a86:	f007 fb19 	bl	80080bc <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <lcd_rd_data+0x84>)
 8000a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a90:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <lcd_rd_data+0x84>)
 8000a94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a98:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <lcd_rd_data+0x84>)
 8000a9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000aa0:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f7ff ffd0 	bl	8000a48 <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <lcd_rd_data+0x80>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <lcd_rd_data+0x84>)
 8000ab2:	2240      	movs	r2, #64	@ 0x40
 8000ab4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <lcd_rd_data+0x84>)
 8000ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000abc:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000abe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac2:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <lcd_rd_data+0x80>)
 8000ad6:	f007 faf1 	bl	80080bc <HAL_GPIO_Init>

    return ram;
 8000ada:	8afb      	ldrh	r3, [r7, #22]
 8000adc:	b29b      	uxth	r3, r3
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40011000 	.word	0x40011000

08000af0 <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	@ 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8000b00:	4b44      	ldr	r3, [pc, #272]	@ (8000c14 <lcd_set_cursor+0x124>)
 8000b02:	889b      	ldrh	r3, [r3, #4]
 8000b04:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	f040 8189 	bne.w	8000e20 <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 8000b0e:	4b41      	ldr	r3, [pc, #260]	@ (8000c14 <lcd_set_cursor+0x124>)
 8000b10:	799b      	ldrb	r3, [r3, #6]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f040 8084 	bne.w	8000c20 <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8000b18:	4b3e      	ldr	r3, [pc, #248]	@ (8000c14 <lcd_set_cursor+0x124>)
 8000b1a:	881a      	ldrh	r2, [r3, #0]
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	3b01      	subs	r3, #1
 8000b24:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8000b26:	4b3b      	ldr	r3, [pc, #236]	@ (8000c14 <lcd_set_cursor+0x124>)
 8000b28:	895b      	ldrh	r3, [r3, #10]
 8000b2a:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b32:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000b34:	4b38      	ldr	r3, [pc, #224]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b3a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b36      	ldr	r3, [pc, #216]	@ (8000c1c <lcd_set_cursor+0x12c>)
 8000b42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000b44:	4b34      	ldr	r3, [pc, #208]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000b4c:	4b32      	ldr	r3, [pc, #200]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000b52:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b58:	611a      	str	r2, [r3, #16]
}
 8000b5a:	bf00      	nop
            lcd_wr_data(0);
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <lcd_set_cursor+0x12c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b86:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 8000b88:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b8e:	611a      	str	r2, [r3, #16]
 8000b90:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000b92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <lcd_set_cursor+0x12c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000ba0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ba4:	611a      	str	r2, [r3, #16]
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000ba8:	2280      	movs	r2, #128	@ 0x80
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb2:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 8000bb4:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000bb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000bbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <lcd_set_cursor+0x12c>)
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000bd0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000bd8:	2280      	movs	r2, #128	@ 0x80
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000be2:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000be6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000bee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	4a09      	ldr	r2, [pc, #36]	@ (8000c1c <lcd_set_cursor+0x12c>)
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	60d3      	str	r3, [r2, #12]
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000bfe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000c06:	2280      	movs	r2, #128	@ 0x80
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <lcd_set_cursor+0x128>)
 8000c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c10:	611a      	str	r2, [r3, #16]
 8000c12:	e081      	b.n	8000d18 <lcd_set_cursor+0x228>
 8000c14:	20002ab8 	.word	0x20002ab8
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8000c20:	4b7c      	ldr	r3, [pc, #496]	@ (8000e14 <lcd_set_cursor+0x324>)
 8000c22:	895b      	ldrh	r3, [r3, #10]
 8000c24:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000c26:	4b7c      	ldr	r3, [pc, #496]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c2c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c34:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000c36:	8a3b      	ldrh	r3, [r7, #16]
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b78      	ldr	r3, [pc, #480]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000c3c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000c3e:	4b76      	ldr	r3, [pc, #472]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c40:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c44:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000c46:	4b74      	ldr	r3, [pc, #464]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000c4c:	4b72      	ldr	r3, [pc, #456]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c52:	611a      	str	r2, [r3, #16]
}
 8000c54:	bf00      	nop
            lcd_wr_data(x >> 8);
 8000c56:	4b70      	ldr	r3, [pc, #448]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c64:	611a      	str	r2, [r3, #16]
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b6b      	ldr	r3, [pc, #428]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	4b69      	ldr	r3, [pc, #420]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c72:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	4b67      	ldr	r3, [pc, #412]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	4b66      	ldr	r3, [pc, #408]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c84:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000c86:	4b64      	ldr	r3, [pc, #400]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	4b62      	ldr	r3, [pc, #392]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000c90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c94:	611a      	str	r2, [r3, #16]
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4a60      	ldr	r2, [pc, #384]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	60d3      	str	r3, [r2, #12]
 8000c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000ca0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ca4:	611a      	str	r2, [r3, #16]
 8000ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000ca8:	2280      	movs	r2, #128	@ 0x80
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	4b5a      	ldr	r3, [pc, #360]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb2:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 8000cb4:	4b58      	ldr	r3, [pc, #352]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	4b56      	ldr	r3, [pc, #344]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000cbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	4b53      	ldr	r3, [pc, #332]	@ (8000e14 <lcd_set_cursor+0x324>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	121a      	asrs	r2, r3, #8
 8000ccc:	4b53      	ldr	r3, [pc, #332]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	4b51      	ldr	r3, [pc, #324]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000cd2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	4b4e      	ldr	r3, [pc, #312]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce4:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	4b4a      	ldr	r3, [pc, #296]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000cf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	4b47      	ldr	r3, [pc, #284]	@ (8000e14 <lcd_set_cursor+0x324>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4a47      	ldr	r2, [pc, #284]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	60d3      	str	r3, [r2, #12]
 8000d02:	4b45      	ldr	r3, [pc, #276]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d04:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	4b43      	ldr	r3, [pc, #268]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d0c:	2280      	movs	r2, #128	@ 0x80
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	4b41      	ldr	r3, [pc, #260]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d16:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8000d18:	4b3e      	ldr	r3, [pc, #248]	@ (8000e14 <lcd_set_cursor+0x324>)
 8000d1a:	899b      	ldrh	r3, [r3, #12]
 8000d1c:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d24:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000d26:	4b3c      	ldr	r3, [pc, #240]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d2c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000d2e:	8a7b      	ldrh	r3, [r7, #18]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b3a      	ldr	r3, [pc, #232]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000d34:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000d36:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d3c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000d3e:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d40:	2280      	movs	r2, #128	@ 0x80
 8000d42:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000d44:	4b34      	ldr	r3, [pc, #208]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d4a:	611a      	str	r2, [r3, #16]
}
 8000d4c:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000d4e:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	4b30      	ldr	r3, [pc, #192]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	88bb      	ldrh	r3, [r7, #4]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7c:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8000d7e:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	4a22      	ldr	r2, [pc, #136]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	60d3      	str	r3, [r2, #12]
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000d98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000daa:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000dae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000db6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <lcd_set_cursor+0x324>)
 8000dbe:	885b      	ldrh	r3, [r3, #2]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	121a      	asrs	r2, r3, #8
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000dca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000dd2:	2280      	movs	r2, #128	@ 0x80
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ddc:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000de8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <lcd_set_cursor+0x324>)
 8000df0:	885b      	ldrh	r3, [r3, #2]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <lcd_set_cursor+0x32c>)
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	60d3      	str	r3, [r2, #12]
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000dfc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000e04:	2280      	movs	r2, #128	@ 0x80
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <lcd_set_cursor+0x328>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e0e:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8000e10:	e176      	b.n	8001100 <lcd_set_cursor+0x610>
 8000e12:	bf00      	nop
 8000e14:	20002ab8 	.word	0x20002ab8
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 8000e20:	4b6a      	ldr	r3, [pc, #424]	@ (8000fcc <lcd_set_cursor+0x4dc>)
 8000e22:	889b      	ldrh	r3, [r3, #4]
 8000e24:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	f040 80d5 	bne.w	8000fd8 <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 8000e2e:	4b67      	ldr	r3, [pc, #412]	@ (8000fcc <lcd_set_cursor+0x4dc>)
 8000e30:	895b      	ldrh	r3, [r3, #10]
 8000e32:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e34:	4b66      	ldr	r3, [pc, #408]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e3a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000e3c:	4b64      	ldr	r3, [pc, #400]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e42:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000e44:	8b7b      	ldrh	r3, [r7, #26]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b62      	ldr	r3, [pc, #392]	@ (8000fd4 <lcd_set_cursor+0x4e4>)
 8000e4a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000e4c:	4b60      	ldr	r3, [pc, #384]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e52:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000e54:	4b5e      	ldr	r3, [pc, #376]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e56:	2280      	movs	r2, #128	@ 0x80
 8000e58:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e60:	611a      	str	r2, [r3, #16]
}
 8000e62:	bf00      	nop
        lcd_wr_data(x >> 8);
 8000e64:	4b5a      	ldr	r3, [pc, #360]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	4b58      	ldr	r3, [pc, #352]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	0a1b      	lsrs	r3, r3, #8
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b56      	ldr	r3, [pc, #344]	@ (8000fd4 <lcd_set_cursor+0x4e4>)
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	4b54      	ldr	r3, [pc, #336]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e80:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	4b52      	ldr	r3, [pc, #328]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e88:	2280      	movs	r2, #128	@ 0x80
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	4b50      	ldr	r3, [pc, #320]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e92:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8000e94:	4b4d      	ldr	r3, [pc, #308]	@ (8000fcc <lcd_set_cursor+0x4dc>)
 8000e96:	895b      	ldrh	r3, [r3, #10]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000ea0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ea4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000ea8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000eac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000eae:	8b3b      	ldrh	r3, [r7, #24]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b48      	ldr	r3, [pc, #288]	@ (8000fd4 <lcd_set_cursor+0x4e4>)
 8000eb4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000eb6:	4b46      	ldr	r3, [pc, #280]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000eb8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ebc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ebe:	4b44      	ldr	r3, [pc, #272]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000ec4:	4b42      	ldr	r3, [pc, #264]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eca:	611a      	str	r2, [r3, #16]
}
 8000ecc:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 8000ece:	4b40      	ldr	r3, [pc, #256]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000ed0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8000fd4 <lcd_set_cursor+0x4e4>)
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	60d3      	str	r3, [r2, #12]
 8000ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000ee8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	4b38      	ldr	r3, [pc, #224]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000ef0:	2280      	movs	r2, #128	@ 0x80
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	4b36      	ldr	r3, [pc, #216]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efa:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8000efc:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <lcd_set_cursor+0x4dc>)
 8000efe:	899b      	ldrh	r3, [r3, #12]
 8000f00:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f02:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f08:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f0a:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f10:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f12:	8afb      	ldrh	r3, [r7, #22]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <lcd_set_cursor+0x4e4>)
 8000f18:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f20:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f22:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f24:	2280      	movs	r2, #128	@ 0x80
 8000f26:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f2e:	611a      	str	r2, [r3, #16]
}
 8000f30:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000f32:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <lcd_set_cursor+0x4e4>)
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f60:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <lcd_set_cursor+0x4dc>)
 8000f64:	899b      	ldrh	r3, [r3, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f72:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f7a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f7c:	8abb      	ldrh	r3, [r7, #20]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <lcd_set_cursor+0x4e4>)
 8000f82:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f8a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f8c:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f8e:	2280      	movs	r2, #128	@ 0x80
 8000f90:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f98:	611a      	str	r2, [r3, #16]
}
 8000f9a:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000f9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000fa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <lcd_set_cursor+0x4e4>)
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	60d3      	str	r3, [r2, #12]
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000fb6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000fbe:	2280      	movs	r2, #128	@ 0x80
 8000fc0:	611a      	str	r2, [r3, #16]
 8000fc2:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <lcd_set_cursor+0x4e0>)
 8000fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc8:	611a      	str	r2, [r3, #16]
}
 8000fca:	e099      	b.n	8001100 <lcd_set_cursor+0x610>
 8000fcc:	20002ab8 	.word	0x20002ab8
 8000fd0:	40011000 	.word	0x40011000
 8000fd4:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 8000fd8:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <lcd_set_cursor+0x61c>)
 8000fda:	895b      	ldrh	r3, [r3, #10]
 8000fdc:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000fde:	4b4c      	ldr	r3, [pc, #304]	@ (8001110 <lcd_set_cursor+0x620>)
 8000fe0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000fe4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8001110 <lcd_set_cursor+0x620>)
 8000fe8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000fee:	8bfb      	ldrh	r3, [r7, #30]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b48      	ldr	r3, [pc, #288]	@ (8001114 <lcd_set_cursor+0x624>)
 8000ff4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000ff6:	4b46      	ldr	r3, [pc, #280]	@ (8001110 <lcd_set_cursor+0x620>)
 8000ff8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ffc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ffe:	4b44      	ldr	r3, [pc, #272]	@ (8001110 <lcd_set_cursor+0x620>)
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001004:	4b42      	ldr	r3, [pc, #264]	@ (8001110 <lcd_set_cursor+0x620>)
 8001006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100a:	611a      	str	r2, [r3, #16]
}
 800100c:	bf00      	nop
        lcd_wr_data(x >> 8);
 800100e:	4b40      	ldr	r3, [pc, #256]	@ (8001110 <lcd_set_cursor+0x620>)
 8001010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	4b3e      	ldr	r3, [pc, #248]	@ (8001110 <lcd_set_cursor+0x620>)
 8001018:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b3b      	ldr	r3, [pc, #236]	@ (8001114 <lcd_set_cursor+0x624>)
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	4b39      	ldr	r3, [pc, #228]	@ (8001110 <lcd_set_cursor+0x620>)
 800102a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	4b37      	ldr	r3, [pc, #220]	@ (8001110 <lcd_set_cursor+0x620>)
 8001032:	2280      	movs	r2, #128	@ 0x80
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <lcd_set_cursor+0x620>)
 8001038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800103c:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 800103e:	4b34      	ldr	r3, [pc, #208]	@ (8001110 <lcd_set_cursor+0x620>)
 8001040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <lcd_set_cursor+0x620>)
 8001048:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <lcd_set_cursor+0x624>)
 8001052:	b2db      	uxtb	r3, r3
 8001054:	60d3      	str	r3, [r2, #12]
 8001056:	4b2e      	ldr	r3, [pc, #184]	@ (8001110 <lcd_set_cursor+0x620>)
 8001058:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	4b2c      	ldr	r3, [pc, #176]	@ (8001110 <lcd_set_cursor+0x620>)
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	4b2a      	ldr	r3, [pc, #168]	@ (8001110 <lcd_set_cursor+0x620>)
 8001066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800106a:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800106c:	4b27      	ldr	r3, [pc, #156]	@ (800110c <lcd_set_cursor+0x61c>)
 800106e:	899b      	ldrh	r3, [r3, #12]
 8001070:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001072:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <lcd_set_cursor+0x620>)
 8001074:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001078:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800107a:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <lcd_set_cursor+0x620>)
 800107c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001080:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001082:	8bbb      	ldrh	r3, [r7, #28]
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <lcd_set_cursor+0x624>)
 8001088:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <lcd_set_cursor+0x620>)
 800108c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001090:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001092:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <lcd_set_cursor+0x620>)
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001098:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <lcd_set_cursor+0x620>)
 800109a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800109e:	611a      	str	r2, [r3, #16]
}
 80010a0:	bf00      	nop
        lcd_wr_data(y >> 8);
 80010a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <lcd_set_cursor+0x620>)
 80010a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <lcd_set_cursor+0x620>)
 80010ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <lcd_set_cursor+0x624>)
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <lcd_set_cursor+0x620>)
 80010be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <lcd_set_cursor+0x620>)
 80010c6:	2280      	movs	r2, #128	@ 0x80
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <lcd_set_cursor+0x620>)
 80010cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d0:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <lcd_set_cursor+0x620>)
 80010d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <lcd_set_cursor+0x620>)
 80010dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <lcd_set_cursor+0x624>)
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	60d3      	str	r3, [r2, #12]
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <lcd_set_cursor+0x620>)
 80010ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <lcd_set_cursor+0x620>)
 80010f4:	2280      	movs	r2, #128	@ 0x80
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <lcd_set_cursor+0x620>)
 80010fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010fe:	611a      	str	r2, [r3, #16]
}
 8001100:	bf00      	nop
 8001102:	3724      	adds	r7, #36	@ 0x24
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20002ab8 	.word	0x20002ab8
 8001110:	40011000 	.word	0x40011000
 8001114:	40010c00 	.word	0x40010c00

08001118 <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t dirreg = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 800112a:	4b5f      	ldr	r3, [pc, #380]	@ (80012a8 <lcd_scan_dir+0x190>)
 800112c:	799b      	ldrb	r3, [r3, #6]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d105      	bne.n	800113e <lcd_scan_dir+0x26>
 8001132:	4b5d      	ldr	r3, [pc, #372]	@ (80012a8 <lcd_scan_dir+0x190>)
 8001134:	889b      	ldrh	r3, [r3, #4]
 8001136:	f641 1263 	movw	r2, #6499	@ 0x1963
 800113a:	4293      	cmp	r3, r2
 800113c:	d109      	bne.n	8001152 <lcd_scan_dir+0x3a>
 800113e:	4b5a      	ldr	r3, [pc, #360]	@ (80012a8 <lcd_scan_dir+0x190>)
 8001140:	799b      	ldrb	r3, [r3, #6]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d134      	bne.n	80011b0 <lcd_scan_dir+0x98>
 8001146:	4b58      	ldr	r3, [pc, #352]	@ (80012a8 <lcd_scan_dir+0x190>)
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	f641 1263 	movw	r2, #6499	@ 0x1963
 800114e:	4293      	cmp	r3, r2
 8001150:	d12e      	bne.n	80011b0 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b07      	cmp	r3, #7
 8001156:	d82b      	bhi.n	80011b0 <lcd_scan_dir+0x98>
 8001158:	a201      	add	r2, pc, #4	@ (adr r2, 8001160 <lcd_scan_dir+0x48>)
 800115a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115e:	bf00      	nop
 8001160:	08001181 	.word	0x08001181
 8001164:	08001187 	.word	0x08001187
 8001168:	0800118d 	.word	0x0800118d
 800116c:	08001193 	.word	0x08001193
 8001170:	08001199 	.word	0x08001199
 8001174:	0800119f 	.word	0x0800119f
 8001178:	080011a5 	.word	0x080011a5
 800117c:	080011ab 	.word	0x080011ab
        {
            case 0:
                dir = 6;
 8001180:	2306      	movs	r3, #6
 8001182:	71fb      	strb	r3, [r7, #7]
                break;
 8001184:	e014      	b.n	80011b0 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 8001186:	2307      	movs	r3, #7
 8001188:	71fb      	strb	r3, [r7, #7]
                break;
 800118a:	e011      	b.n	80011b0 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 800118c:	2304      	movs	r3, #4
 800118e:	71fb      	strb	r3, [r7, #7]
                break;
 8001190:	e00e      	b.n	80011b0 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 8001192:	2305      	movs	r3, #5
 8001194:	71fb      	strb	r3, [r7, #7]
                break;
 8001196:	e00b      	b.n	80011b0 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	71fb      	strb	r3, [r7, #7]
                break;
 800119c:	e008      	b.n	80011b0 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]
                break;
 80011a2:	e005      	b.n	80011b0 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 80011a4:	2303      	movs	r3, #3
 80011a6:	71fb      	strb	r3, [r7, #7]
                break;
 80011a8:	e002      	b.n	80011b0 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	71fb      	strb	r3, [r7, #7]
                break;
 80011ae:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	d835      	bhi.n	8001222 <lcd_scan_dir+0x10a>
 80011b6:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <lcd_scan_dir+0xa4>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	08001223 	.word	0x08001223
 80011c0:	080011dd 	.word	0x080011dd
 80011c4:	080011e7 	.word	0x080011e7
 80011c8:	080011f1 	.word	0x080011f1
 80011cc:	080011fb 	.word	0x080011fb
 80011d0:	08001205 	.word	0x08001205
 80011d4:	0800120f 	.word	0x0800120f
 80011d8:	08001219 	.word	0x08001219
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80011dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 80011e4:	e01d      	b.n	8001222 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80011e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 80011ee:	e018      	b.n	8001222 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80011f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80011f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 80011f8:	e013      	b.n	8001222 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80011fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011fc:	f043 0320 	orr.w	r3, r3, #32
 8001200:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001202:	e00e      	b.n	8001222 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001204:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001206:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800120a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800120c:	e009      	b.n	8001222 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800120e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001210:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001214:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001216:	e004      	b.n	8001222 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001218:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800121a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800121e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001220:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 8001222:	2336      	movs	r3, #54	@ 0x36
 8001224:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (lcddev.id == 0X5510)
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <lcd_scan_dir+0x190>)
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	f245 5210 	movw	r2, #21776	@ 0x5510
 800122e:	4293      	cmp	r3, r2
 8001230:	d102      	bne.n	8001238 <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 8001232:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 8001236:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <lcd_scan_dir+0x190>)
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001240:	4293      	cmp	r3, r2
 8001242:	d00b      	beq.n	800125c <lcd_scan_dir+0x144>
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <lcd_scan_dir+0x190>)
 8001246:	889b      	ldrh	r3, [r3, #4]
 8001248:	f247 7289 	movw	r2, #30601	@ 0x7789
 800124c:	4293      	cmp	r3, r2
 800124e:	d005      	beq.n	800125c <lcd_scan_dir+0x144>
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <lcd_scan_dir+0x190>)
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001258:	4293      	cmp	r3, r2
 800125a:	d103      	bne.n	8001264 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 800125c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lcd_write_reg(dirreg, regval);
 8001264:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fbaa 	bl	80009c4 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <lcd_scan_dir+0x190>)
 8001272:	889b      	ldrh	r3, [r3, #4]
 8001274:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001278:	4293      	cmp	r3, r2
 800127a:	d027      	beq.n	80012cc <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 800127c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	2b00      	cmp	r3, #0
 8001284:	d012      	beq.n	80012ac <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <lcd_scan_dir+0x190>)
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <lcd_scan_dir+0x190>)
 800128c:	885b      	ldrh	r3, [r3, #2]
 800128e:	429a      	cmp	r2, r3
 8001290:	d21c      	bcs.n	80012cc <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <lcd_scan_dir+0x190>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <lcd_scan_dir+0x190>)
 800129a:	885a      	ldrh	r2, [r3, #2]
 800129c:	4b02      	ldr	r3, [pc, #8]	@ (80012a8 <lcd_scan_dir+0x190>)
 800129e:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80012a0:	4a01      	ldr	r2, [pc, #4]	@ (80012a8 <lcd_scan_dir+0x190>)
 80012a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80012a4:	8053      	strh	r3, [r2, #2]
 80012a6:	e011      	b.n	80012cc <lcd_scan_dir+0x1b4>
 80012a8:	20002ab8 	.word	0x20002ab8
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 80012ac:	4b9c      	ldr	r3, [pc, #624]	@ (8001520 <lcd_scan_dir+0x408>)
 80012ae:	881a      	ldrh	r2, [r3, #0]
 80012b0:	4b9b      	ldr	r3, [pc, #620]	@ (8001520 <lcd_scan_dir+0x408>)
 80012b2:	885b      	ldrh	r3, [r3, #2]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d909      	bls.n	80012cc <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 80012b8:	4b99      	ldr	r3, [pc, #612]	@ (8001520 <lcd_scan_dir+0x408>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 80012be:	4b98      	ldr	r3, [pc, #608]	@ (8001520 <lcd_scan_dir+0x408>)
 80012c0:	885a      	ldrh	r2, [r3, #2]
 80012c2:	4b97      	ldr	r3, [pc, #604]	@ (8001520 <lcd_scan_dir+0x408>)
 80012c4:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80012c6:	4a96      	ldr	r2, [pc, #600]	@ (8001520 <lcd_scan_dir+0x408>)
 80012c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80012ca:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 80012cc:	4b94      	ldr	r3, [pc, #592]	@ (8001520 <lcd_scan_dir+0x408>)
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	f245 5210 	movw	r2, #21776	@ 0x5510
 80012d4:	4293      	cmp	r3, r2
 80012d6:	f040 81af 	bne.w	8001638 <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 80012da:	4b91      	ldr	r3, [pc, #580]	@ (8001520 <lcd_scan_dir+0x408>)
 80012dc:	895b      	ldrh	r3, [r3, #10]
 80012de:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80012e0:	4b90      	ldr	r3, [pc, #576]	@ (8001524 <lcd_scan_dir+0x40c>)
 80012e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80012e8:	4b8e      	ldr	r3, [pc, #568]	@ (8001524 <lcd_scan_dir+0x40c>)
 80012ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80012f0:	8bbb      	ldrh	r3, [r7, #28]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001528 <lcd_scan_dir+0x410>)
 80012f6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80012f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001524 <lcd_scan_dir+0x40c>)
 80012fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012fe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001300:	4b88      	ldr	r3, [pc, #544]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001302:	2280      	movs	r2, #128	@ 0x80
 8001304:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001306:	4b87      	ldr	r3, [pc, #540]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800130c:	611a      	str	r2, [r3, #16]
}
 800130e:	bf00      	nop
        lcd_wr_data(0);
 8001310:	4b84      	ldr	r3, [pc, #528]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001312:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <lcd_scan_dir+0x40c>)
 800131a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	4b81      	ldr	r3, [pc, #516]	@ (8001528 <lcd_scan_dir+0x410>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	4b7f      	ldr	r3, [pc, #508]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001328:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800132c:	611a      	str	r2, [r3, #16]
 800132e:	4b7d      	ldr	r3, [pc, #500]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001330:	2280      	movs	r2, #128	@ 0x80
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	4b7b      	ldr	r3, [pc, #492]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133a:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 800133c:	4b78      	ldr	r3, [pc, #480]	@ (8001520 <lcd_scan_dir+0x408>)
 800133e:	895b      	ldrh	r3, [r3, #10]
 8001340:	3301      	adds	r3, #1
 8001342:	b29b      	uxth	r3, r3
 8001344:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001346:	4b77      	ldr	r3, [pc, #476]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001348:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800134c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800134e:	4b75      	ldr	r3, [pc, #468]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001350:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001354:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001356:	8b7b      	ldrh	r3, [r7, #26]
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b73      	ldr	r3, [pc, #460]	@ (8001528 <lcd_scan_dir+0x410>)
 800135c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800135e:	4b71      	ldr	r3, [pc, #452]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001360:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001364:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001366:	4b6f      	ldr	r3, [pc, #444]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800136c:	4b6d      	ldr	r3, [pc, #436]	@ (8001524 <lcd_scan_dir+0x40c>)
 800136e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001372:	611a      	str	r2, [r3, #16]
}
 8001374:	bf00      	nop
        lcd_wr_data(0);
 8001376:	4b6b      	ldr	r3, [pc, #428]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001378:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800137c:	611a      	str	r2, [r3, #16]
 800137e:	4b69      	ldr	r3, [pc, #420]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001380:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	4b68      	ldr	r3, [pc, #416]	@ (8001528 <lcd_scan_dir+0x410>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	4b65      	ldr	r3, [pc, #404]	@ (8001524 <lcd_scan_dir+0x40c>)
 800138e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	4b63      	ldr	r3, [pc, #396]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	611a      	str	r2, [r3, #16]
 800139a:	4b62      	ldr	r3, [pc, #392]	@ (8001524 <lcd_scan_dir+0x40c>)
 800139c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a0:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 80013a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001520 <lcd_scan_dir+0x408>)
 80013a4:	895b      	ldrh	r3, [r3, #10]
 80013a6:	3302      	adds	r3, #2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80013ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <lcd_scan_dir+0x40c>)
 80013ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80013b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001524 <lcd_scan_dir+0x40c>)
 80013b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80013bc:	8b3b      	ldrh	r3, [r7, #24]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b59      	ldr	r3, [pc, #356]	@ (8001528 <lcd_scan_dir+0x410>)
 80013c2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80013c4:	4b57      	ldr	r3, [pc, #348]	@ (8001524 <lcd_scan_dir+0x40c>)
 80013c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013ca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80013cc:	4b55      	ldr	r3, [pc, #340]	@ (8001524 <lcd_scan_dir+0x40c>)
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80013d2:	4b54      	ldr	r3, [pc, #336]	@ (8001524 <lcd_scan_dir+0x40c>)
 80013d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013d8:	611a      	str	r2, [r3, #16]
}
 80013da:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 80013dc:	4b51      	ldr	r3, [pc, #324]	@ (8001524 <lcd_scan_dir+0x40c>)
 80013de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001524 <lcd_scan_dir+0x40c>)
 80013e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001520 <lcd_scan_dir+0x408>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	121a      	asrs	r2, r3, #8
 80013f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001528 <lcd_scan_dir+0x410>)
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001524 <lcd_scan_dir+0x40c>)
 80013fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	4b48      	ldr	r3, [pc, #288]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	611a      	str	r2, [r3, #16]
 8001406:	4b47      	ldr	r3, [pc, #284]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800140c:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 800140e:	4b44      	ldr	r3, [pc, #272]	@ (8001520 <lcd_scan_dir+0x408>)
 8001410:	895b      	ldrh	r3, [r3, #10]
 8001412:	3303      	adds	r3, #3
 8001414:	b29b      	uxth	r3, r3
 8001416:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001418:	4b42      	ldr	r3, [pc, #264]	@ (8001524 <lcd_scan_dir+0x40c>)
 800141a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800141e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001420:	4b40      	ldr	r3, [pc, #256]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001422:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001426:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001428:	8afb      	ldrh	r3, [r7, #22]
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b3e      	ldr	r3, [pc, #248]	@ (8001528 <lcd_scan_dir+0x410>)
 800142e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001430:	4b3c      	ldr	r3, [pc, #240]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001432:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001436:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001438:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <lcd_scan_dir+0x40c>)
 800143a:	2280      	movs	r2, #128	@ 0x80
 800143c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800143e:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001444:	611a      	str	r2, [r3, #16]
}
 8001446:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8001448:	4b36      	ldr	r3, [pc, #216]	@ (8001524 <lcd_scan_dir+0x40c>)
 800144a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	4b34      	ldr	r3, [pc, #208]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001452:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001456:	611a      	str	r2, [r3, #16]
 8001458:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <lcd_scan_dir+0x408>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4a32      	ldr	r2, [pc, #200]	@ (8001528 <lcd_scan_dir+0x410>)
 8001460:	b2db      	uxtb	r3, r3
 8001462:	60d3      	str	r3, [r2, #12]
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001466:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <lcd_scan_dir+0x40c>)
 800146e:	2280      	movs	r2, #128	@ 0x80
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001478:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800147a:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <lcd_scan_dir+0x408>)
 800147c:	899b      	ldrh	r3, [r3, #12]
 800147e:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001482:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001486:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001488:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <lcd_scan_dir+0x40c>)
 800148a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800148e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001490:	8abb      	ldrh	r3, [r7, #20]
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <lcd_scan_dir+0x410>)
 8001496:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <lcd_scan_dir+0x40c>)
 800149a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800149e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80014a0:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <lcd_scan_dir+0x40c>)
 80014a2:	2280      	movs	r2, #128	@ 0x80
 80014a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <lcd_scan_dir+0x40c>)
 80014a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ac:	611a      	str	r2, [r3, #16]
}
 80014ae:	bf00      	nop
        lcd_wr_data(0);
 80014b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <lcd_scan_dir+0x40c>)
 80014b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <lcd_scan_dir+0x40c>)
 80014ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <lcd_scan_dir+0x410>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <lcd_scan_dir+0x40c>)
 80014c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <lcd_scan_dir+0x40c>)
 80014d0:	2280      	movs	r2, #128	@ 0x80
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <lcd_scan_dir+0x40c>)
 80014d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014da:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <lcd_scan_dir+0x408>)
 80014de:	899b      	ldrh	r3, [r3, #12]
 80014e0:	3301      	adds	r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80014e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <lcd_scan_dir+0x40c>)
 80014e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80014ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <lcd_scan_dir+0x40c>)
 80014f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80014f6:	8a7b      	ldrh	r3, [r7, #18]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <lcd_scan_dir+0x410>)
 80014fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80014fe:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001500:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001504:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001508:	2280      	movs	r2, #128	@ 0x80
 800150a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <lcd_scan_dir+0x40c>)
 800150e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001512:	611a      	str	r2, [r3, #16]
}
 8001514:	bf00      	nop
        lcd_wr_data(0);
 8001516:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <lcd_scan_dir+0x40c>)
 8001518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	e005      	b.n	800152c <lcd_scan_dir+0x414>
 8001520:	20002ab8 	.word	0x20002ab8
 8001524:	40011000 	.word	0x40011000
 8001528:	40010c00 	.word	0x40010c00
 800152c:	4b3f      	ldr	r3, [pc, #252]	@ (800162c <lcd_scan_dir+0x514>)
 800152e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	4b3e      	ldr	r3, [pc, #248]	@ (8001630 <lcd_scan_dir+0x518>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	4b3c      	ldr	r3, [pc, #240]	@ (800162c <lcd_scan_dir+0x514>)
 800153c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <lcd_scan_dir+0x514>)
 8001544:	2280      	movs	r2, #128	@ 0x80
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	4b38      	ldr	r3, [pc, #224]	@ (800162c <lcd_scan_dir+0x514>)
 800154a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800154e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 8001550:	4b38      	ldr	r3, [pc, #224]	@ (8001634 <lcd_scan_dir+0x51c>)
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	3302      	adds	r3, #2
 8001556:	b29b      	uxth	r3, r3
 8001558:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800155a:	4b34      	ldr	r3, [pc, #208]	@ (800162c <lcd_scan_dir+0x514>)
 800155c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001560:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001562:	4b32      	ldr	r3, [pc, #200]	@ (800162c <lcd_scan_dir+0x514>)
 8001564:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001568:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800156a:	8a3b      	ldrh	r3, [r7, #16]
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <lcd_scan_dir+0x518>)
 8001570:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001572:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <lcd_scan_dir+0x514>)
 8001574:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001578:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800157a:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <lcd_scan_dir+0x514>)
 800157c:	2280      	movs	r2, #128	@ 0x80
 800157e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001580:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <lcd_scan_dir+0x514>)
 8001582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001586:	611a      	str	r2, [r3, #16]
}
 8001588:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 800158a:	4b28      	ldr	r3, [pc, #160]	@ (800162c <lcd_scan_dir+0x514>)
 800158c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <lcd_scan_dir+0x514>)
 8001594:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001598:	611a      	str	r2, [r3, #16]
 800159a:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <lcd_scan_dir+0x51c>)
 800159c:	885b      	ldrh	r3, [r3, #2]
 800159e:	3b01      	subs	r3, #1
 80015a0:	121a      	asrs	r2, r3, #8
 80015a2:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <lcd_scan_dir+0x518>)
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <lcd_scan_dir+0x514>)
 80015a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015ac:	611a      	str	r2, [r3, #16]
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <lcd_scan_dir+0x514>)
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <lcd_scan_dir+0x514>)
 80015b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ba:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 80015bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <lcd_scan_dir+0x51c>)
 80015be:	899b      	ldrh	r3, [r3, #12]
 80015c0:	3303      	adds	r3, #3
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <lcd_scan_dir+0x514>)
 80015c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <lcd_scan_dir+0x514>)
 80015d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <lcd_scan_dir+0x518>)
 80015dc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80015de:	4b13      	ldr	r3, [pc, #76]	@ (800162c <lcd_scan_dir+0x514>)
 80015e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015e4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <lcd_scan_dir+0x514>)
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <lcd_scan_dir+0x514>)
 80015ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f2:	611a      	str	r2, [r3, #16]
}
 80015f4:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <lcd_scan_dir+0x514>)
 80015f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <lcd_scan_dir+0x514>)
 8001600:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <lcd_scan_dir+0x51c>)
 8001608:	885b      	ldrh	r3, [r3, #2]
 800160a:	3b01      	subs	r3, #1
 800160c:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <lcd_scan_dir+0x518>)
 800160e:	b2db      	uxtb	r3, r3
 8001610:	60d3      	str	r3, [r2, #12]
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <lcd_scan_dir+0x514>)
 8001614:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	4b04      	ldr	r3, [pc, #16]	@ (800162c <lcd_scan_dir+0x514>)
 800161c:	2280      	movs	r2, #128	@ 0x80
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	4b02      	ldr	r3, [pc, #8]	@ (800162c <lcd_scan_dir+0x514>)
 8001622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001626:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 8001628:	e0f8      	b.n	800181c <lcd_scan_dir+0x704>
 800162a:	bf00      	nop
 800162c:	40011000 	.word	0x40011000
 8001630:	40010c00 	.word	0x40010c00
 8001634:	20002ab8 	.word	0x20002ab8
        lcd_wr_regno(lcddev.setxcmd);
 8001638:	4b7a      	ldr	r3, [pc, #488]	@ (8001824 <lcd_scan_dir+0x70c>)
 800163a:	895b      	ldrh	r3, [r3, #10]
 800163c:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800163e:	4b7a      	ldr	r3, [pc, #488]	@ (8001828 <lcd_scan_dir+0x710>)
 8001640:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001644:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001646:	4b78      	ldr	r3, [pc, #480]	@ (8001828 <lcd_scan_dir+0x710>)
 8001648:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800164c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800164e:	8c3b      	ldrh	r3, [r7, #32]
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b76      	ldr	r3, [pc, #472]	@ (800182c <lcd_scan_dir+0x714>)
 8001654:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001656:	4b74      	ldr	r3, [pc, #464]	@ (8001828 <lcd_scan_dir+0x710>)
 8001658:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800165c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800165e:	4b72      	ldr	r3, [pc, #456]	@ (8001828 <lcd_scan_dir+0x710>)
 8001660:	2280      	movs	r2, #128	@ 0x80
 8001662:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001664:	4b70      	ldr	r3, [pc, #448]	@ (8001828 <lcd_scan_dir+0x710>)
 8001666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800166a:	611a      	str	r2, [r3, #16]
}
 800166c:	bf00      	nop
        lcd_wr_data(0);
 800166e:	4b6e      	ldr	r3, [pc, #440]	@ (8001828 <lcd_scan_dir+0x710>)
 8001670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	4b6c      	ldr	r3, [pc, #432]	@ (8001828 <lcd_scan_dir+0x710>)
 8001678:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	4b6b      	ldr	r3, [pc, #428]	@ (800182c <lcd_scan_dir+0x714>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	4b68      	ldr	r3, [pc, #416]	@ (8001828 <lcd_scan_dir+0x710>)
 8001686:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	4b66      	ldr	r3, [pc, #408]	@ (8001828 <lcd_scan_dir+0x710>)
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	4b65      	ldr	r3, [pc, #404]	@ (8001828 <lcd_scan_dir+0x710>)
 8001694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001698:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 800169a:	4b63      	ldr	r3, [pc, #396]	@ (8001828 <lcd_scan_dir+0x710>)
 800169c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	4b61      	ldr	r3, [pc, #388]	@ (8001828 <lcd_scan_dir+0x710>)
 80016a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	4b60      	ldr	r3, [pc, #384]	@ (800182c <lcd_scan_dir+0x714>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001828 <lcd_scan_dir+0x710>)
 80016b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016b6:	611a      	str	r2, [r3, #16]
 80016b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001828 <lcd_scan_dir+0x710>)
 80016ba:	2280      	movs	r2, #128	@ 0x80
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	4b5a      	ldr	r3, [pc, #360]	@ (8001828 <lcd_scan_dir+0x710>)
 80016c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c4:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 80016c6:	4b58      	ldr	r3, [pc, #352]	@ (8001828 <lcd_scan_dir+0x710>)
 80016c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	4b56      	ldr	r3, [pc, #344]	@ (8001828 <lcd_scan_dir+0x710>)
 80016d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <lcd_scan_dir+0x70c>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	121a      	asrs	r2, r3, #8
 80016de:	4b53      	ldr	r3, [pc, #332]	@ (800182c <lcd_scan_dir+0x714>)
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	4b51      	ldr	r3, [pc, #324]	@ (8001828 <lcd_scan_dir+0x710>)
 80016e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001828 <lcd_scan_dir+0x710>)
 80016ec:	2280      	movs	r2, #128	@ 0x80
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001828 <lcd_scan_dir+0x710>)
 80016f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f6:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 80016f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001828 <lcd_scan_dir+0x710>)
 80016fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	4b49      	ldr	r3, [pc, #292]	@ (8001828 <lcd_scan_dir+0x710>)
 8001702:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	4b46      	ldr	r3, [pc, #280]	@ (8001824 <lcd_scan_dir+0x70c>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	3b01      	subs	r3, #1
 800170e:	4a47      	ldr	r2, [pc, #284]	@ (800182c <lcd_scan_dir+0x714>)
 8001710:	b2db      	uxtb	r3, r3
 8001712:	60d3      	str	r3, [r2, #12]
 8001714:	4b44      	ldr	r3, [pc, #272]	@ (8001828 <lcd_scan_dir+0x710>)
 8001716:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	4b42      	ldr	r3, [pc, #264]	@ (8001828 <lcd_scan_dir+0x710>)
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <lcd_scan_dir+0x710>)
 8001724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001728:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800172a:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <lcd_scan_dir+0x70c>)
 800172c:	899b      	ldrh	r3, [r3, #12]
 800172e:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001730:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <lcd_scan_dir+0x710>)
 8001732:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001736:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001738:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <lcd_scan_dir+0x710>)
 800173a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800173e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001740:	8bfb      	ldrh	r3, [r7, #30]
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b39      	ldr	r3, [pc, #228]	@ (800182c <lcd_scan_dir+0x714>)
 8001746:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001748:	4b37      	ldr	r3, [pc, #220]	@ (8001828 <lcd_scan_dir+0x710>)
 800174a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800174e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001750:	4b35      	ldr	r3, [pc, #212]	@ (8001828 <lcd_scan_dir+0x710>)
 8001752:	2280      	movs	r2, #128	@ 0x80
 8001754:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001756:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <lcd_scan_dir+0x710>)
 8001758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800175c:	611a      	str	r2, [r3, #16]
}
 800175e:	bf00      	nop
        lcd_wr_data(0);
 8001760:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <lcd_scan_dir+0x710>)
 8001762:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001766:	611a      	str	r2, [r3, #16]
 8001768:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <lcd_scan_dir+0x710>)
 800176a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	4b2e      	ldr	r3, [pc, #184]	@ (800182c <lcd_scan_dir+0x714>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	4b2c      	ldr	r3, [pc, #176]	@ (8001828 <lcd_scan_dir+0x710>)
 8001778:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <lcd_scan_dir+0x710>)
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <lcd_scan_dir+0x710>)
 8001786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800178a:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 800178c:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <lcd_scan_dir+0x710>)
 800178e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	4b24      	ldr	r3, [pc, #144]	@ (8001828 <lcd_scan_dir+0x710>)
 8001796:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	4b23      	ldr	r3, [pc, #140]	@ (800182c <lcd_scan_dir+0x714>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <lcd_scan_dir+0x710>)
 80017a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <lcd_scan_dir+0x710>)
 80017ac:	2280      	movs	r2, #128	@ 0x80
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <lcd_scan_dir+0x710>)
 80017b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b6:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <lcd_scan_dir+0x710>)
 80017ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <lcd_scan_dir+0x710>)
 80017c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <lcd_scan_dir+0x70c>)
 80017ca:	885b      	ldrh	r3, [r3, #2]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	121a      	asrs	r2, r3, #8
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <lcd_scan_dir+0x714>)
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <lcd_scan_dir+0x710>)
 80017d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <lcd_scan_dir+0x710>)
 80017de:	2280      	movs	r2, #128	@ 0x80
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <lcd_scan_dir+0x710>)
 80017e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e8:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <lcd_scan_dir+0x710>)
 80017ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f0:	611a      	str	r2, [r3, #16]
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <lcd_scan_dir+0x710>)
 80017f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <lcd_scan_dir+0x70c>)
 80017fc:	885b      	ldrh	r3, [r3, #2]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <lcd_scan_dir+0x714>)
 8001802:	b2db      	uxtb	r3, r3
 8001804:	60d3      	str	r3, [r2, #12]
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <lcd_scan_dir+0x710>)
 8001808:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <lcd_scan_dir+0x710>)
 8001810:	2280      	movs	r2, #128	@ 0x80
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <lcd_scan_dir+0x710>)
 8001816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800181a:	611a      	str	r2, [r3, #16]
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	@ 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20002ab8 	.word	0x20002ab8
 8001828:	40011000 	.word	0x40011000
 800182c:	40010c00 	.word	0x40010c00

08001830 <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	603a      	str	r2, [r7, #0]
 800183a:	80fb      	strh	r3, [r7, #6]
 800183c:	460b      	mov	r3, r1
 800183e:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 8001840:	88ba      	ldrh	r2, [r7, #4]
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f952 	bl	8000af0 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 800184c:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <lcd_draw_point+0x88>)
 800184e:	891b      	ldrh	r3, [r3, #8]
 8001850:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001852:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <lcd_draw_point+0x8c>)
 8001854:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001858:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800185a:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <lcd_draw_point+0x8c>)
 800185c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001860:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001862:	89fb      	ldrh	r3, [r7, #14]
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <lcd_draw_point+0x90>)
 8001868:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <lcd_draw_point+0x8c>)
 800186c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001870:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <lcd_draw_point+0x8c>)
 8001874:	2280      	movs	r2, #128	@ 0x80
 8001876:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001878:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <lcd_draw_point+0x8c>)
 800187a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800187e:	611a      	str	r2, [r3, #16]
}
 8001880:	bf00      	nop
}
 8001882:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 8001884:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <lcd_draw_point+0x8c>)
 8001886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800188a:	611a      	str	r2, [r3, #16]
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <lcd_draw_point+0x8c>)
 800188e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <lcd_draw_point+0x90>)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	60d3      	str	r3, [r2, #12]
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <lcd_draw_point+0x8c>)
 800189c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <lcd_draw_point+0x8c>)
 80018a4:	2280      	movs	r2, #128	@ 0x80
 80018a6:	611a      	str	r2, [r3, #16]
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <lcd_draw_point+0x8c>)
 80018aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ae:	611a      	str	r2, [r3, #16]
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20002ab8 	.word	0x20002ab8
 80018bc:	40011000 	.word	0x40011000
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	00000000 	.word	0x00000000

080018c8 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	23be      	movs	r3, #190	@ 0xbe
 80018d4:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80018d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80018d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80018de:	4b58      	ldr	r3, [pc, #352]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80018e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <lcd_ssd_backlight_set+0x17c>)
 80018ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80018ee:	4b54      	ldr	r3, [pc, #336]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80018f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80018f6:	4b52      	ldr	r3, [pc, #328]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80018f8:	2280      	movs	r2, #128	@ 0x80
 80018fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80018fc:	4b50      	ldr	r3, [pc, #320]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80018fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001902:	611a      	str	r2, [r3, #16]
}
 8001904:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 8001906:	4b4e      	ldr	r3, [pc, #312]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001908:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001910:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	4b4b      	ldr	r3, [pc, #300]	@ (8001a44 <lcd_ssd_backlight_set+0x17c>)
 8001918:	2205      	movs	r2, #5
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	4b48      	ldr	r3, [pc, #288]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 800191e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	4b46      	ldr	r3, [pc, #280]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001926:	2280      	movs	r2, #128	@ 0x80
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	4b45      	ldr	r3, [pc, #276]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 800192c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001930:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 8001932:	4b43      	ldr	r3, [pc, #268]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	4b41      	ldr	r3, [pc, #260]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 800193c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe feeb 	bl	8000720 <__aeabi_i2d>
 800194a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001a38 <lcd_ssd_backlight_set+0x170>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe fc6a 	bl	8000228 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4c3a      	ldr	r4, [pc, #232]	@ (8001a44 <lcd_ssd_backlight_set+0x17c>)
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7fe ff49 	bl	80007f4 <__aeabi_d2uiz>
 8001962:	4603      	mov	r3, r0
 8001964:	60e3      	str	r3, [r4, #12]
 8001966:	4b36      	ldr	r3, [pc, #216]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001968:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800196c:	611a      	str	r2, [r3, #16]
 800196e:	4b34      	ldr	r3, [pc, #208]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001970:	2280      	movs	r2, #128	@ 0x80
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	4b32      	ldr	r3, [pc, #200]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800197a:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 800197c:	4b30      	ldr	r3, [pc, #192]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 800197e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001982:	611a      	str	r2, [r3, #16]
 8001984:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001986:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <lcd_ssd_backlight_set+0x17c>)
 800198e:	2201      	movs	r2, #1
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001994:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001998:	611a      	str	r2, [r3, #16]
 800199a:	4b29      	ldr	r3, [pc, #164]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 800199c:	2280      	movs	r2, #128	@ 0x80
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a6:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <lcd_ssd_backlight_set+0x17c>)
 80019ba:	22ff      	movs	r2, #255	@ 0xff
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019d2:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <lcd_ssd_backlight_set+0x17c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019f4:	2280      	movs	r2, #128	@ 0x80
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 80019fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019fe:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001a02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001a0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <lcd_ssd_backlight_set+0x17c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001a18:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <lcd_ssd_backlight_set+0x178>)
 8001a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a2a:	611a      	str	r2, [r3, #16]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	f3af 8000 	nop.w
 8001a38:	66666666 	.word	0x66666666
 8001a3c:	40046666 	.word	0x40046666
 8001a40:	40011000 	.word	0x40011000
 8001a44:	40010c00 	.word	0x40010c00

08001a48 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 8001a52:	4a68      	ldr	r2, [pc, #416]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d165      	bne.n	8001b2a <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8001a5e:	4b65      	ldr	r3, [pc, #404]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001a60:	22f0      	movs	r2, #240	@ 0xf0
 8001a62:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8001a64:	4b63      	ldr	r3, [pc, #396]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001a66:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001a6a:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001a6c:	4b61      	ldr	r3, [pc, #388]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001a6e:	889b      	ldrh	r3, [r3, #4]
 8001a70:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d114      	bne.n	8001aa2 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8001a78:	4b5e      	ldr	r3, [pc, #376]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001a7a:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001a7e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001a80:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001a82:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001a86:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001a88:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001a8a:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001a8e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8001a90:	4b58      	ldr	r3, [pc, #352]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001a92:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001a96:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001a98:	4b56      	ldr	r3, [pc, #344]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001a9a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a9e:	805a      	strh	r2, [r3, #2]
 8001aa0:	e020      	b.n	8001ae4 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8001aa2:	4b54      	ldr	r3, [pc, #336]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001aa4:	889b      	ldrh	r3, [r3, #4]
 8001aa6:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d111      	bne.n	8001ad2 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001aae:	4b51      	ldr	r3, [pc, #324]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001ab0:	222c      	movs	r2, #44	@ 0x2c
 8001ab2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001ab6:	222b      	movs	r2, #43	@ 0x2b
 8001ab8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 8001aba:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001abc:	222a      	movs	r2, #42	@ 0x2a
 8001abe:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001ac2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ac6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001aca:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ace:	805a      	strh	r2, [r3, #2]
 8001ad0:	e008      	b.n	8001ae4 <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001ad2:	4b48      	ldr	r3, [pc, #288]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001ad4:	222c      	movs	r2, #44	@ 0x2c
 8001ad6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001ad8:	4b46      	ldr	r3, [pc, #280]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001ada:	222a      	movs	r2, #42	@ 0x2a
 8001adc:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001ade:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001ae0:	222b      	movs	r2, #43	@ 0x2b
 8001ae2:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001ae4:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001ae6:	889b      	ldrh	r3, [r3, #4]
 8001ae8:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d005      	beq.n	8001afc <lcd_display_dir+0xb4>
 8001af0:	4b40      	ldr	r3, [pc, #256]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001af2:	889b      	ldrh	r3, [r3, #4]
 8001af4:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d107      	bne.n	8001b0c <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8001afc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001afe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b02:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001b04:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b06:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b0a:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 8001b0c:	4b39      	ldr	r3, [pc, #228]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b0e:	889b      	ldrh	r3, [r3, #4]
 8001b10:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d165      	bne.n	8001be4 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001b18:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b1a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b1e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001b20:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b22:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b26:	805a      	strh	r2, [r3, #2]
 8001b28:	e05c      	b.n	8001be4 <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 8001b2a:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b2c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b30:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 8001b32:	4b30      	ldr	r3, [pc, #192]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b34:	22f0      	movs	r2, #240	@ 0xf0
 8001b36:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001b38:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b3a:	889b      	ldrh	r3, [r3, #4]
 8001b3c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d114      	bne.n	8001b6e <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8001b44:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b46:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001b4a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001b4c:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b4e:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001b52:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001b54:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b56:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001b5a:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8001b5c:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b5e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b62:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b66:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b6a:	805a      	strh	r2, [r3, #2]
 8001b6c:	e026      	b.n	8001bbc <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b70:	889b      	ldrh	r3, [r3, #4]
 8001b72:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d005      	beq.n	8001b86 <lcd_display_dir+0x13e>
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b7c:	889b      	ldrh	r3, [r3, #4]
 8001b7e:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d111      	bne.n	8001baa <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001b86:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b88:	222c      	movs	r2, #44	@ 0x2c
 8001b8a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b8e:	222a      	movs	r2, #42	@ 0x2a
 8001b90:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b94:	222b      	movs	r2, #43	@ 0x2b
 8001b96:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001b9a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b9e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 8001ba0:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001ba2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ba6:	805a      	strh	r2, [r3, #2]
 8001ba8:	e008      	b.n	8001bbc <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001bac:	222c      	movs	r2, #44	@ 0x2c
 8001bae:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001bb0:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001bb2:	222a      	movs	r2, #42	@ 0x2a
 8001bb4:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001bb8:	222b      	movs	r2, #43	@ 0x2b
 8001bba:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001bbe:	889b      	ldrh	r3, [r3, #4]
 8001bc0:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d005      	beq.n	8001bd4 <lcd_display_dir+0x18c>
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001bca:	889b      	ldrh	r3, [r3, #4]
 8001bcc:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d107      	bne.n	8001be4 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001bd6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001bda:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <lcd_display_dir+0x1ac>)
 8001bde:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001be2:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff fa97 	bl	8001118 <lcd_scan_dir>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20002ab8 	.word	0x20002ab8

08001bf8 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0da      	sub	sp, #360	@ 0x168
 8001bfc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 8001bfe:	4bbe      	ldr	r3, [pc, #760]	@ (8001ef8 <lcd_init+0x300>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	4abd      	ldr	r2, [pc, #756]	@ (8001ef8 <lcd_init+0x300>)
 8001c04:	f043 0310 	orr.w	r3, r3, #16
 8001c08:	6193      	str	r3, [r2, #24]
 8001c0a:	4bbb      	ldr	r3, [pc, #748]	@ (8001ef8 <lcd_init+0x300>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 0210 	and.w	r2, r3, #16
 8001c12:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c16:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c24:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 8001c26:	4bb4      	ldr	r3, [pc, #720]	@ (8001ef8 <lcd_init+0x300>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	4ab3      	ldr	r2, [pc, #716]	@ (8001ef8 <lcd_init+0x300>)
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	6193      	str	r3, [r2, #24]
 8001c32:	4bb1      	ldr	r3, [pc, #708]	@ (8001ef8 <lcd_init+0x300>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f003 0210 	and.w	r2, r3, #16
 8001c3a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c48:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c4c:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 8001c4e:	4baa      	ldr	r3, [pc, #680]	@ (8001ef8 <lcd_init+0x300>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	4aa9      	ldr	r2, [pc, #676]	@ (8001ef8 <lcd_init+0x300>)
 8001c54:	f043 0310 	orr.w	r3, r3, #16
 8001c58:	6193      	str	r3, [r2, #24]
 8001c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8001ef8 <lcd_init+0x300>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0210 	and.w	r2, r3, #16
 8001c62:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c66:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c70:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001c74:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 8001c76:	4ba0      	ldr	r3, [pc, #640]	@ (8001ef8 <lcd_init+0x300>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a9f      	ldr	r2, [pc, #636]	@ (8001ef8 <lcd_init+0x300>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	6193      	str	r3, [r2, #24]
 8001c82:	4b9d      	ldr	r3, [pc, #628]	@ (8001ef8 <lcd_init+0x300>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0210 	and.w	r2, r3, #16
 8001c8a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c8e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c98:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001c9c:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 8001c9e:	4b96      	ldr	r3, [pc, #600]	@ (8001ef8 <lcd_init+0x300>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a95      	ldr	r2, [pc, #596]	@ (8001ef8 <lcd_init+0x300>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b93      	ldr	r3, [pc, #588]	@ (8001ef8 <lcd_init+0x300>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0210 	and.w	r2, r3, #16
 8001cb2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cb6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cc0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001cc4:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 8001cc6:	4b8c      	ldr	r3, [pc, #560]	@ (8001ef8 <lcd_init+0x300>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	4a8b      	ldr	r2, [pc, #556]	@ (8001ef8 <lcd_init+0x300>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	6193      	str	r3, [r2, #24]
 8001cd2:	4b89      	ldr	r3, [pc, #548]	@ (8001ef8 <lcd_init+0x300>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0208 	and.w	r2, r3, #8
 8001cda:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cde:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ce8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cec:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8001cee:	4b82      	ldr	r3, [pc, #520]	@ (8001ef8 <lcd_init+0x300>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4a81      	ldr	r2, [pc, #516]	@ (8001ef8 <lcd_init+0x300>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6193      	str	r3, [r2, #24]
 8001cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef8 <lcd_init+0x300>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0201 	and.w	r2, r3, #1
 8001d02:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d06:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d10:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d14:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 8001d16:	4b79      	ldr	r3, [pc, #484]	@ (8001efc <lcd_init+0x304>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001d1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d26:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001d2a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001d36:	4a71      	ldr	r2, [pc, #452]	@ (8001efc <lcd_init+0x304>)
 8001d38:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d3c:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8001d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d42:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 8001d46:	2301      	movs	r3, #1
 8001d48:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 8001d52:	2303      	movs	r3, #3
 8001d54:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 8001d58:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4868      	ldr	r0, [pc, #416]	@ (8001f00 <lcd_init+0x308>)
 8001d60:	f006 f9ac 	bl	80080bc <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 8001d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d68:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 8001d72:	2301      	movs	r3, #1
 8001d74:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 8001d7e:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d82:	4619      	mov	r1, r3
 8001d84:	485e      	ldr	r0, [pc, #376]	@ (8001f00 <lcd_init+0x308>)
 8001d86:	f006 f999 	bl	80080bc <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 8001d90:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d94:	4619      	mov	r1, r3
 8001d96:	485a      	ldr	r0, [pc, #360]	@ (8001f00 <lcd_init+0x308>)
 8001d98:	f006 f990 	bl	80080bc <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 8001d9c:	2340      	movs	r3, #64	@ 0x40
 8001d9e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 8001da2:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001da6:	4619      	mov	r1, r3
 8001da8:	4855      	ldr	r0, [pc, #340]	@ (8001f00 <lcd_init+0x308>)
 8001daa:	f006 f987 	bl	80080bc <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 8001dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 8001db6:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4850      	ldr	r0, [pc, #320]	@ (8001f00 <lcd_init+0x308>)
 8001dbe:	f006 f97d 	bl	80080bc <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8001dc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dc6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8001dd0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	484b      	ldr	r0, [pc, #300]	@ (8001f04 <lcd_init+0x30c>)
 8001dd8:	f006 f970 	bl	80080bc <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 8001ddc:	4b48      	ldr	r3, [pc, #288]	@ (8001f00 <lcd_init+0x308>)
 8001dde:	2280      	movs	r2, #128	@ 0x80
 8001de0:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 8001de2:	4b47      	ldr	r3, [pc, #284]	@ (8001f00 <lcd_init+0x308>)
 8001de4:	2240      	movs	r2, #64	@ 0x40
 8001de6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8001de8:	4b45      	ldr	r3, [pc, #276]	@ (8001f00 <lcd_init+0x308>)
 8001dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dee:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8001df0:	4b43      	ldr	r3, [pc, #268]	@ (8001f00 <lcd_init+0x308>)
 8001df2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001df6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8001df8:	4b42      	ldr	r3, [pc, #264]	@ (8001f04 <lcd_init+0x30c>)
 8001dfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dfe:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8001e00:	4841      	ldr	r0, [pc, #260]	@ (8001f08 <lcd_init+0x310>)
 8001e02:	f7fe fe21 	bl	8000a48 <lcd_opt_delay>
 8001e06:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e0a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e0e:	22d3      	movs	r2, #211	@ 0xd3
 8001e10:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001e12:	4b3b      	ldr	r3, [pc, #236]	@ (8001f00 <lcd_init+0x308>)
 8001e14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e18:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001e1a:	4b39      	ldr	r3, [pc, #228]	@ (8001f00 <lcd_init+0x308>)
 8001e1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e20:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001e22:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b35      	ldr	r3, [pc, #212]	@ (8001f04 <lcd_init+0x30c>)
 8001e30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001e32:	4b33      	ldr	r3, [pc, #204]	@ (8001f00 <lcd_init+0x308>)
 8001e34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001e3a:	4b31      	ldr	r3, [pc, #196]	@ (8001f00 <lcd_init+0x308>)
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001e40:	4b2f      	ldr	r3, [pc, #188]	@ (8001f00 <lcd_init+0x308>)
 8001e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e46:	611a      	str	r2, [r3, #16]
}
 8001e48:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 8001e4a:	f7fe fe0d 	bl	8000a68 <lcd_rd_data>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b2e      	ldr	r3, [pc, #184]	@ (8001f0c <lcd_init+0x314>)
 8001e54:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 8001e56:	f7fe fe07 	bl	8000a68 <lcd_rd_data>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <lcd_init+0x314>)
 8001e60:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 8001e62:	f7fe fe01 	bl	8000a68 <lcd_rd_data>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <lcd_init+0x314>)
 8001e6c:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8001e6e:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <lcd_init+0x314>)
 8001e70:	889b      	ldrh	r3, [r3, #4]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <lcd_init+0x314>)
 8001e78:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 8001e7a:	f7fe fdf5 	bl	8000a68 <lcd_rd_data>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <lcd_init+0x314>)
 8001e84:	889b      	ldrh	r3, [r3, #4]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <lcd_init+0x314>)
 8001e8c:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <lcd_init+0x314>)
 8001e90:	889b      	ldrh	r3, [r3, #4]
 8001e92:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f000 820e 	beq.w	80022b8 <lcd_init+0x6c0>
 8001e9c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ea0:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001ea8:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <lcd_init+0x308>)
 8001eaa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001eae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <lcd_init+0x308>)
 8001eb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001eb8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ebc:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <lcd_init+0x30c>)
 8001ec6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <lcd_init+0x308>)
 8001eca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ece:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <lcd_init+0x308>)
 8001ed2:	2280      	movs	r2, #128	@ 0x80
 8001ed4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <lcd_init+0x308>)
 8001ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001edc:	611a      	str	r2, [r3, #16]
}
 8001ede:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8001ee0:	f7fe fdc2 	bl	8000a68 <lcd_rd_data>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <lcd_init+0x314>)
 8001eea:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 8001eec:	f7fe fdbc 	bl	8000a68 <lcd_rd_data>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	e00c      	b.n	8001f10 <lcd_init+0x318>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40011000 	.word	0x40011000
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	0001ffff 	.word	0x0001ffff
 8001f0c:	20002ab8 	.word	0x20002ab8
 8001f10:	4bb1      	ldr	r3, [pc, #708]	@ (80021d8 <lcd_init+0x5e0>)
 8001f12:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 8001f14:	f7fe fda8 	bl	8000a68 <lcd_rd_data>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4bae      	ldr	r3, [pc, #696]	@ (80021d8 <lcd_init+0x5e0>)
 8001f1e:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8001f20:	4bad      	ldr	r3, [pc, #692]	@ (80021d8 <lcd_init+0x5e0>)
 8001f22:	889b      	ldrh	r3, [r3, #4]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4bab      	ldr	r3, [pc, #684]	@ (80021d8 <lcd_init+0x5e0>)
 8001f2a:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 8001f2c:	f7fe fd9c 	bl	8000a68 <lcd_rd_data>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	4ba8      	ldr	r3, [pc, #672]	@ (80021d8 <lcd_init+0x5e0>)
 8001f36:	889b      	ldrh	r3, [r3, #4]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4ba6      	ldr	r3, [pc, #664]	@ (80021d8 <lcd_init+0x5e0>)
 8001f3e:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 8001f40:	4ba5      	ldr	r3, [pc, #660]	@ (80021d8 <lcd_init+0x5e0>)
 8001f42:	889b      	ldrh	r3, [r3, #4]
 8001f44:	f248 5252 	movw	r2, #34130	@ 0x8552
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d103      	bne.n	8001f54 <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 8001f4c:	4ba2      	ldr	r3, [pc, #648]	@ (80021d8 <lcd_init+0x5e0>)
 8001f4e:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001f52:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 8001f54:	4ba0      	ldr	r3, [pc, #640]	@ (80021d8 <lcd_init+0x5e0>)
 8001f56:	889b      	ldrh	r3, [r3, #4]
 8001f58:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f000 81ab 	beq.w	80022b8 <lcd_init+0x6c0>
 8001f62:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f66:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f6a:	22d4      	movs	r2, #212	@ 0xd4
 8001f6c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001f6e:	4b9b      	ldr	r3, [pc, #620]	@ (80021dc <lcd_init+0x5e4>)
 8001f70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f74:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001f76:	4b99      	ldr	r3, [pc, #612]	@ (80021dc <lcd_init+0x5e4>)
 8001f78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f7c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001f7e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f82:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b95      	ldr	r3, [pc, #596]	@ (80021e0 <lcd_init+0x5e8>)
 8001f8c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001f8e:	4b93      	ldr	r3, [pc, #588]	@ (80021dc <lcd_init+0x5e4>)
 8001f90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f94:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001f96:	4b91      	ldr	r3, [pc, #580]	@ (80021dc <lcd_init+0x5e4>)
 8001f98:	2280      	movs	r2, #128	@ 0x80
 8001f9a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80021dc <lcd_init+0x5e4>)
 8001f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fa2:	611a      	str	r2, [r3, #16]
}
 8001fa4:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 8001fa6:	f7fe fd5f 	bl	8000a68 <lcd_rd_data>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b8a      	ldr	r3, [pc, #552]	@ (80021d8 <lcd_init+0x5e0>)
 8001fb0:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 8001fb2:	f7fe fd59 	bl	8000a68 <lcd_rd_data>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b87      	ldr	r3, [pc, #540]	@ (80021d8 <lcd_init+0x5e0>)
 8001fbc:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 8001fbe:	f7fe fd53 	bl	8000a68 <lcd_rd_data>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b84      	ldr	r3, [pc, #528]	@ (80021d8 <lcd_init+0x5e0>)
 8001fc8:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8001fca:	4b83      	ldr	r3, [pc, #524]	@ (80021d8 <lcd_init+0x5e0>)
 8001fcc:	889b      	ldrh	r3, [r3, #4]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b81      	ldr	r3, [pc, #516]	@ (80021d8 <lcd_init+0x5e0>)
 8001fd4:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 8001fd6:	f7fe fd47 	bl	8000a68 <lcd_rd_data>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b7e      	ldr	r3, [pc, #504]	@ (80021d8 <lcd_init+0x5e0>)
 8001fe0:	889b      	ldrh	r3, [r3, #4]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80021d8 <lcd_init+0x5e0>)
 8001fe8:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 8001fea:	4b7b      	ldr	r3, [pc, #492]	@ (80021d8 <lcd_init+0x5e0>)
 8001fec:	889b      	ldrh	r3, [r3, #4]
 8001fee:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	f000 8160 	beq.w	80022b8 <lcd_init+0x6c0>
 8001ff8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ffc:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002000:	22d3      	movs	r2, #211	@ 0xd3
 8002002:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002004:	4b75      	ldr	r3, [pc, #468]	@ (80021dc <lcd_init+0x5e4>)
 8002006:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800200a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800200c:	4b73      	ldr	r3, [pc, #460]	@ (80021dc <lcd_init+0x5e4>)
 800200e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002012:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002014:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002018:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b6f      	ldr	r3, [pc, #444]	@ (80021e0 <lcd_init+0x5e8>)
 8002022:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002024:	4b6d      	ldr	r3, [pc, #436]	@ (80021dc <lcd_init+0x5e4>)
 8002026:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800202a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800202c:	4b6b      	ldr	r3, [pc, #428]	@ (80021dc <lcd_init+0x5e4>)
 800202e:	2280      	movs	r2, #128	@ 0x80
 8002030:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002032:	4b6a      	ldr	r3, [pc, #424]	@ (80021dc <lcd_init+0x5e4>)
 8002034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002038:	611a      	str	r2, [r3, #16]
}
 800203a:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 800203c:	f7fe fd14 	bl	8000a68 <lcd_rd_data>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b64      	ldr	r3, [pc, #400]	@ (80021d8 <lcd_init+0x5e0>)
 8002046:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002048:	f7fe fd0e 	bl	8000a68 <lcd_rd_data>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	4b61      	ldr	r3, [pc, #388]	@ (80021d8 <lcd_init+0x5e0>)
 8002052:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 8002054:	f7fe fd08 	bl	8000a68 <lcd_rd_data>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	4b5e      	ldr	r3, [pc, #376]	@ (80021d8 <lcd_init+0x5e0>)
 800205e:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8002060:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <lcd_init+0x5e0>)
 8002062:	889b      	ldrh	r3, [r3, #4]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b5b      	ldr	r3, [pc, #364]	@ (80021d8 <lcd_init+0x5e0>)
 800206a:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 800206c:	f7fe fcfc 	bl	8000a68 <lcd_rd_data>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	4b58      	ldr	r3, [pc, #352]	@ (80021d8 <lcd_init+0x5e0>)
 8002076:	889b      	ldrh	r3, [r3, #4]
 8002078:	4313      	orrs	r3, r2
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b56      	ldr	r3, [pc, #344]	@ (80021d8 <lcd_init+0x5e0>)
 800207e:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 8002080:	4b55      	ldr	r3, [pc, #340]	@ (80021d8 <lcd_init+0x5e0>)
 8002082:	889b      	ldrh	r3, [r3, #4]
 8002084:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002088:	4293      	cmp	r3, r2
 800208a:	f000 8115 	beq.w	80022b8 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 800208e:	2155      	movs	r1, #85	@ 0x55
 8002090:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8002094:	f7fe fc96 	bl	80009c4 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8002098:	21aa      	movs	r1, #170	@ 0xaa
 800209a:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800209e:	f7fe fc91 	bl	80009c4 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 80020a2:	2152      	movs	r1, #82	@ 0x52
 80020a4:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80020a8:	f7fe fc8c 	bl	80009c4 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 80020ac:	2108      	movs	r1, #8
 80020ae:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80020b2:	f7fe fc87 	bl	80009c4 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 80020b6:	2101      	movs	r1, #1
 80020b8:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80020bc:	f7fe fc82 	bl	80009c4 <lcd_write_reg>
 80020c0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020c4:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 80020c8:	f44f 4245 	mov.w	r2, #50432	@ 0xc500
 80020cc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80020ce:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <lcd_init+0x5e4>)
 80020d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020d4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80020d6:	4b41      	ldr	r3, [pc, #260]	@ (80021dc <lcd_init+0x5e4>)
 80020d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020dc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80020de:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020e2:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b3d      	ldr	r3, [pc, #244]	@ (80021e0 <lcd_init+0x5e8>)
 80020ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80020ee:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <lcd_init+0x5e4>)
 80020f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80020f6:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <lcd_init+0x5e4>)
 80020f8:	2280      	movs	r2, #128	@ 0x80
 80020fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80020fc:	4b37      	ldr	r3, [pc, #220]	@ (80021dc <lcd_init+0x5e4>)
 80020fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002102:	611a      	str	r2, [r3, #16]
}
 8002104:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 8002106:	f7fe fcaf 	bl	8000a68 <lcd_rd_data>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b32      	ldr	r3, [pc, #200]	@ (80021d8 <lcd_init+0x5e0>)
 8002110:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8002112:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <lcd_init+0x5e0>)
 8002114:	889b      	ldrh	r3, [r3, #4]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	b29a      	uxth	r2, r3
 800211a:	4b2f      	ldr	r3, [pc, #188]	@ (80021d8 <lcd_init+0x5e0>)
 800211c:	809a      	strh	r2, [r3, #4]
 800211e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002122:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002126:	f24c 5201 	movw	r2, #50433	@ 0xc501
 800212a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800212c:	4b2b      	ldr	r3, [pc, #172]	@ (80021dc <lcd_init+0x5e4>)
 800212e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002132:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002134:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <lcd_init+0x5e4>)
 8002136:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800213a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800213c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002140:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <lcd_init+0x5e8>)
 800214a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800214c:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <lcd_init+0x5e4>)
 800214e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002152:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002154:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <lcd_init+0x5e4>)
 8002156:	2280      	movs	r2, #128	@ 0x80
 8002158:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800215a:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <lcd_init+0x5e4>)
 800215c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002160:	611a      	str	r2, [r3, #16]
}
 8002162:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 8002164:	f7fe fc80 	bl	8000a68 <lcd_rd_data>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <lcd_init+0x5e0>)
 800216e:	889b      	ldrh	r3, [r3, #4]
 8002170:	4313      	orrs	r3, r2
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <lcd_init+0x5e0>)
 8002176:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 8002178:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <lcd_init+0x5e0>)
 800217a:	889b      	ldrh	r3, [r3, #4]
 800217c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002180:	4293      	cmp	r3, r2
 8002182:	f000 8099 	beq.w	80022b8 <lcd_init+0x6c0>
 8002186:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800218a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800218e:	22d3      	movs	r2, #211	@ 0xd3
 8002190:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <lcd_init+0x5e4>)
 8002194:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002198:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <lcd_init+0x5e4>)
 800219c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021a0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80021a2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021a6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <lcd_init+0x5e8>)
 80021b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <lcd_init+0x5e4>)
 80021b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80021ba:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <lcd_init+0x5e4>)
 80021bc:	2280      	movs	r2, #128	@ 0x80
 80021be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <lcd_init+0x5e4>)
 80021c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021c6:	611a      	str	r2, [r3, #16]
}
 80021c8:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 80021ca:	f7fe fc4d 	bl	8000a68 <lcd_rd_data>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b01      	ldr	r3, [pc, #4]	@ (80021d8 <lcd_init+0x5e0>)
 80021d4:	809a      	strh	r2, [r3, #4]
 80021d6:	e005      	b.n	80021e4 <lcd_init+0x5ec>
 80021d8:	20002ab8 	.word	0x20002ab8
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 80021e4:	f7fe fc40 	bl	8000a68 <lcd_rd_data>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	4bb2      	ldr	r3, [pc, #712]	@ (80024b8 <lcd_init+0x8c0>)
 80021ee:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 80021f0:	f7fe fc3a 	bl	8000a68 <lcd_rd_data>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4baf      	ldr	r3, [pc, #700]	@ (80024b8 <lcd_init+0x8c0>)
 80021fa:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 80021fc:	4bae      	ldr	r3, [pc, #696]	@ (80024b8 <lcd_init+0x8c0>)
 80021fe:	889b      	ldrh	r3, [r3, #4]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	b29a      	uxth	r2, r3
 8002204:	4bac      	ldr	r3, [pc, #688]	@ (80024b8 <lcd_init+0x8c0>)
 8002206:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002208:	f7fe fc2e 	bl	8000a68 <lcd_rd_data>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	4ba9      	ldr	r3, [pc, #676]	@ (80024b8 <lcd_init+0x8c0>)
 8002212:	889b      	ldrh	r3, [r3, #4]
 8002214:	4313      	orrs	r3, r2
 8002216:	b29a      	uxth	r2, r3
 8002218:	4ba7      	ldr	r3, [pc, #668]	@ (80024b8 <lcd_init+0x8c0>)
 800221a:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 800221c:	4ba6      	ldr	r3, [pc, #664]	@ (80024b8 <lcd_init+0x8c0>)
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	f649 0206 	movw	r2, #38918	@ 0x9806
 8002224:	4293      	cmp	r3, r2
 8002226:	d047      	beq.n	80022b8 <lcd_init+0x6c0>
 8002228:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800222c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002230:	22a1      	movs	r2, #161	@ 0xa1
 8002232:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002234:	4ba1      	ldr	r3, [pc, #644]	@ (80024bc <lcd_init+0x8c4>)
 8002236:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800223a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800223c:	4b9f      	ldr	r3, [pc, #636]	@ (80024bc <lcd_init+0x8c4>)
 800223e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002242:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002244:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002248:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b29a      	uxth	r2, r3
 8002250:	4b9b      	ldr	r3, [pc, #620]	@ (80024c0 <lcd_init+0x8c8>)
 8002252:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002254:	4b99      	ldr	r3, [pc, #612]	@ (80024bc <lcd_init+0x8c4>)
 8002256:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800225a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800225c:	4b97      	ldr	r3, [pc, #604]	@ (80024bc <lcd_init+0x8c4>)
 800225e:	2280      	movs	r2, #128	@ 0x80
 8002260:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002262:	4b96      	ldr	r3, [pc, #600]	@ (80024bc <lcd_init+0x8c4>)
 8002264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002268:	611a      	str	r2, [r3, #16]
}
 800226a:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 800226c:	f7fe fbfc 	bl	8000a68 <lcd_rd_data>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	4b90      	ldr	r3, [pc, #576]	@ (80024b8 <lcd_init+0x8c0>)
 8002276:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 8002278:	f7fe fbf6 	bl	8000a68 <lcd_rd_data>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	4b8d      	ldr	r3, [pc, #564]	@ (80024b8 <lcd_init+0x8c0>)
 8002282:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8002284:	4b8c      	ldr	r3, [pc, #560]	@ (80024b8 <lcd_init+0x8c0>)
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b29a      	uxth	r2, r3
 800228c:	4b8a      	ldr	r3, [pc, #552]	@ (80024b8 <lcd_init+0x8c0>)
 800228e:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 8002290:	f7fe fbea 	bl	8000a68 <lcd_rd_data>
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	4b87      	ldr	r3, [pc, #540]	@ (80024b8 <lcd_init+0x8c0>)
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b85      	ldr	r3, [pc, #532]	@ (80024b8 <lcd_init+0x8c0>)
 80022a2:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 80022a4:	4b84      	ldr	r3, [pc, #528]	@ (80024b8 <lcd_init+0x8c0>)
 80022a6:	889b      	ldrh	r3, [r3, #4]
 80022a8:	f245 7261 	movw	r2, #22369	@ 0x5761
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d103      	bne.n	80022b8 <lcd_init+0x6c0>
 80022b0:	4b81      	ldr	r3, [pc, #516]	@ (80024b8 <lcd_init+0x8c0>)
 80022b2:	f641 1263 	movw	r2, #6499	@ 0x1963
 80022b6:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 80022b8:	4b7f      	ldr	r3, [pc, #508]	@ (80024b8 <lcd_init+0x8c0>)
 80022ba:	889b      	ldrh	r3, [r3, #4]
 80022bc:	f247 7289 	movw	r2, #30601	@ 0x7789
 80022c0:	4293      	cmp	r3, r2
 80022c2:	f040 82f3 	bne.w	80028ac <lcd_init+0xcb4>
 80022c6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022ce:	2211      	movs	r2, #17
 80022d0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80022d2:	4b7a      	ldr	r3, [pc, #488]	@ (80024bc <lcd_init+0x8c4>)
 80022d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022d8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80022da:	4b78      	ldr	r3, [pc, #480]	@ (80024bc <lcd_init+0x8c4>)
 80022dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80022e2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b74      	ldr	r3, [pc, #464]	@ (80024c0 <lcd_init+0x8c8>)
 80022f0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80022f2:	4b72      	ldr	r3, [pc, #456]	@ (80024bc <lcd_init+0x8c4>)
 80022f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022f8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80022fa:	4b70      	ldr	r3, [pc, #448]	@ (80024bc <lcd_init+0x8c4>)
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002300:	4b6e      	ldr	r3, [pc, #440]	@ (80024bc <lcd_init+0x8c4>)
 8002302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002306:	611a      	str	r2, [r3, #16]
}
 8002308:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800230a:	2078      	movs	r0, #120	@ 0x78
 800230c:	f005 fc62 	bl	8007bd4 <HAL_Delay>
 8002310:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002314:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002318:	2236      	movs	r2, #54	@ 0x36
 800231a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800231c:	4b67      	ldr	r3, [pc, #412]	@ (80024bc <lcd_init+0x8c4>)
 800231e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002322:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002324:	4b65      	ldr	r3, [pc, #404]	@ (80024bc <lcd_init+0x8c4>)
 8002326:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800232a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800232c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002330:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29a      	uxth	r2, r3
 8002338:	4b61      	ldr	r3, [pc, #388]	@ (80024c0 <lcd_init+0x8c8>)
 800233a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800233c:	4b5f      	ldr	r3, [pc, #380]	@ (80024bc <lcd_init+0x8c4>)
 800233e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002342:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002344:	4b5d      	ldr	r3, [pc, #372]	@ (80024bc <lcd_init+0x8c4>)
 8002346:	2280      	movs	r2, #128	@ 0x80
 8002348:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800234a:	4b5c      	ldr	r3, [pc, #368]	@ (80024bc <lcd_init+0x8c4>)
 800234c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002350:	611a      	str	r2, [r3, #16]
}
 8002352:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe fb11 	bl	800097c <lcd_wr_xdata>
 800235a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800235e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002362:	223a      	movs	r2, #58	@ 0x3a
 8002364:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002366:	4b55      	ldr	r3, [pc, #340]	@ (80024bc <lcd_init+0x8c4>)
 8002368:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800236c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800236e:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <lcd_init+0x8c4>)
 8002370:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002374:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002376:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800237a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29a      	uxth	r2, r3
 8002382:	4b4f      	ldr	r3, [pc, #316]	@ (80024c0 <lcd_init+0x8c8>)
 8002384:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002386:	4b4d      	ldr	r3, [pc, #308]	@ (80024bc <lcd_init+0x8c4>)
 8002388:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800238c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800238e:	4b4b      	ldr	r3, [pc, #300]	@ (80024bc <lcd_init+0x8c4>)
 8002390:	2280      	movs	r2, #128	@ 0x80
 8002392:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002394:	4b49      	ldr	r3, [pc, #292]	@ (80024bc <lcd_init+0x8c4>)
 8002396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800239a:	611a      	str	r2, [r3, #16]
}
 800239c:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 800239e:	2005      	movs	r0, #5
 80023a0:	f7fe faec 	bl	800097c <lcd_wr_xdata>
 80023a4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023a8:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80023ac:	22b2      	movs	r2, #178	@ 0xb2
 80023ae:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80023b0:	4b42      	ldr	r3, [pc, #264]	@ (80024bc <lcd_init+0x8c4>)
 80023b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023b6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80023b8:	4b40      	ldr	r3, [pc, #256]	@ (80024bc <lcd_init+0x8c4>)
 80023ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023be:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80023c0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023c4:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	4b3c      	ldr	r3, [pc, #240]	@ (80024c0 <lcd_init+0x8c8>)
 80023ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80023d0:	4b3a      	ldr	r3, [pc, #232]	@ (80024bc <lcd_init+0x8c4>)
 80023d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80023d8:	4b38      	ldr	r3, [pc, #224]	@ (80024bc <lcd_init+0x8c4>)
 80023da:	2280      	movs	r2, #128	@ 0x80
 80023dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023de:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <lcd_init+0x8c4>)
 80023e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023e4:	611a      	str	r2, [r3, #16]
}
 80023e6:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 80023e8:	200c      	movs	r0, #12
 80023ea:	f7fe fac7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 80023ee:	200c      	movs	r0, #12
 80023f0:	f7fe fac4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7fe fac1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 80023fa:	2033      	movs	r0, #51	@ 0x33
 80023fc:	f7fe fabe 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002400:	2033      	movs	r0, #51	@ 0x33
 8002402:	f7fe fabb 	bl	800097c <lcd_wr_xdata>
 8002406:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800240a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800240e:	22b7      	movs	r2, #183	@ 0xb7
 8002410:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002412:	4b2a      	ldr	r3, [pc, #168]	@ (80024bc <lcd_init+0x8c4>)
 8002414:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002418:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800241a:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <lcd_init+0x8c4>)
 800241c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002420:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002422:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002426:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b24      	ldr	r3, [pc, #144]	@ (80024c0 <lcd_init+0x8c8>)
 8002430:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002432:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <lcd_init+0x8c4>)
 8002434:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002438:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800243a:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <lcd_init+0x8c4>)
 800243c:	2280      	movs	r2, #128	@ 0x80
 800243e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002440:	4b1e      	ldr	r3, [pc, #120]	@ (80024bc <lcd_init+0x8c4>)
 8002442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002446:	611a      	str	r2, [r3, #16]
}
 8002448:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 800244a:	2035      	movs	r0, #53	@ 0x35
 800244c:	f7fe fa96 	bl	800097c <lcd_wr_xdata>
 8002450:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002454:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002458:	22bb      	movs	r2, #187	@ 0xbb
 800245a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800245c:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <lcd_init+0x8c4>)
 800245e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002462:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <lcd_init+0x8c4>)
 8002466:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800246a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800246c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002470:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <lcd_init+0x8c8>)
 800247a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800247c:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <lcd_init+0x8c4>)
 800247e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002482:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002484:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <lcd_init+0x8c4>)
 8002486:	2280      	movs	r2, #128	@ 0x80
 8002488:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800248a:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <lcd_init+0x8c4>)
 800248c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002490:	611a      	str	r2, [r3, #16]
}
 8002492:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 8002494:	2032      	movs	r0, #50	@ 0x32
 8002496:	f7fe fa71 	bl	800097c <lcd_wr_xdata>
 800249a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800249e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024a2:	22c0      	movs	r2, #192	@ 0xc0
 80024a4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024a6:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <lcd_init+0x8c4>)
 80024a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024ac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024ae:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <lcd_init+0x8c4>)
 80024b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b4:	611a      	str	r2, [r3, #16]
 80024b6:	e005      	b.n	80024c4 <lcd_init+0x8cc>
 80024b8:	20002ab8 	.word	0x20002ab8
 80024bc:	40011000 	.word	0x40011000
 80024c0:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80024c4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4bbf      	ldr	r3, [pc, #764]	@ (80027d0 <lcd_init+0xbd8>)
 80024d2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80024d4:	4bbf      	ldr	r3, [pc, #764]	@ (80027d4 <lcd_init+0xbdc>)
 80024d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024da:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80024dc:	4bbd      	ldr	r3, [pc, #756]	@ (80027d4 <lcd_init+0xbdc>)
 80024de:	2280      	movs	r2, #128	@ 0x80
 80024e0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80024e2:	4bbc      	ldr	r3, [pc, #752]	@ (80027d4 <lcd_init+0xbdc>)
 80024e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e8:	611a      	str	r2, [r3, #16]
}
 80024ea:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 80024ec:	200c      	movs	r0, #12
 80024ee:	f7fe fa45 	bl	800097c <lcd_wr_xdata>
 80024f2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024f6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80024fa:	22c2      	movs	r2, #194	@ 0xc2
 80024fc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024fe:	4bb5      	ldr	r3, [pc, #724]	@ (80027d4 <lcd_init+0xbdc>)
 8002500:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002504:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002506:	4bb3      	ldr	r3, [pc, #716]	@ (80027d4 <lcd_init+0xbdc>)
 8002508:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800250c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800250e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002512:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29a      	uxth	r2, r3
 800251a:	4bad      	ldr	r3, [pc, #692]	@ (80027d0 <lcd_init+0xbd8>)
 800251c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800251e:	4bad      	ldr	r3, [pc, #692]	@ (80027d4 <lcd_init+0xbdc>)
 8002520:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002524:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002526:	4bab      	ldr	r3, [pc, #684]	@ (80027d4 <lcd_init+0xbdc>)
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800252c:	4ba9      	ldr	r3, [pc, #676]	@ (80027d4 <lcd_init+0xbdc>)
 800252e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002532:	611a      	str	r2, [r3, #16]
}
 8002534:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 8002536:	2001      	movs	r0, #1
 8002538:	f7fe fa20 	bl	800097c <lcd_wr_xdata>
 800253c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002540:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002544:	22c3      	movs	r2, #195	@ 0xc3
 8002546:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002548:	4ba2      	ldr	r3, [pc, #648]	@ (80027d4 <lcd_init+0xbdc>)
 800254a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800254e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002550:	4ba0      	ldr	r3, [pc, #640]	@ (80027d4 <lcd_init+0xbdc>)
 8002552:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002556:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002558:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800255c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b9a      	ldr	r3, [pc, #616]	@ (80027d0 <lcd_init+0xbd8>)
 8002566:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002568:	4b9a      	ldr	r3, [pc, #616]	@ (80027d4 <lcd_init+0xbdc>)
 800256a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800256e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002570:	4b98      	ldr	r3, [pc, #608]	@ (80027d4 <lcd_init+0xbdc>)
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002576:	4b97      	ldr	r3, [pc, #604]	@ (80027d4 <lcd_init+0xbdc>)
 8002578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800257c:	611a      	str	r2, [r3, #16]
}
 800257e:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 8002580:	2010      	movs	r0, #16
 8002582:	f7fe f9fb 	bl	800097c <lcd_wr_xdata>
 8002586:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800258a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800258e:	22c4      	movs	r2, #196	@ 0xc4
 8002590:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002592:	4b90      	ldr	r3, [pc, #576]	@ (80027d4 <lcd_init+0xbdc>)
 8002594:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002598:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800259a:	4b8e      	ldr	r3, [pc, #568]	@ (80027d4 <lcd_init+0xbdc>)
 800259c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025a0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80025a2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025a6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	4b88      	ldr	r3, [pc, #544]	@ (80027d0 <lcd_init+0xbd8>)
 80025b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025b2:	4b88      	ldr	r3, [pc, #544]	@ (80027d4 <lcd_init+0xbdc>)
 80025b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80025ba:	4b86      	ldr	r3, [pc, #536]	@ (80027d4 <lcd_init+0xbdc>)
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80025c0:	4b84      	ldr	r3, [pc, #528]	@ (80027d4 <lcd_init+0xbdc>)
 80025c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025c6:	611a      	str	r2, [r3, #16]
}
 80025c8:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 80025ca:	2020      	movs	r0, #32
 80025cc:	f7fe f9d6 	bl	800097c <lcd_wr_xdata>
 80025d0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025d8:	22c6      	movs	r2, #198	@ 0xc6
 80025da:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80025dc:	4b7d      	ldr	r3, [pc, #500]	@ (80027d4 <lcd_init+0xbdc>)
 80025de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025e2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80025e4:	4b7b      	ldr	r3, [pc, #492]	@ (80027d4 <lcd_init+0xbdc>)
 80025e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025ea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80025ec:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025f0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	4b75      	ldr	r3, [pc, #468]	@ (80027d0 <lcd_init+0xbd8>)
 80025fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025fc:	4b75      	ldr	r3, [pc, #468]	@ (80027d4 <lcd_init+0xbdc>)
 80025fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002602:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002604:	4b73      	ldr	r3, [pc, #460]	@ (80027d4 <lcd_init+0xbdc>)
 8002606:	2280      	movs	r2, #128	@ 0x80
 8002608:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800260a:	4b72      	ldr	r3, [pc, #456]	@ (80027d4 <lcd_init+0xbdc>)
 800260c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002610:	611a      	str	r2, [r3, #16]
}
 8002612:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 8002614:	200f      	movs	r0, #15
 8002616:	f7fe f9b1 	bl	800097c <lcd_wr_xdata>
 800261a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800261e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8002622:	22d0      	movs	r2, #208	@ 0xd0
 8002624:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002626:	4b6b      	ldr	r3, [pc, #428]	@ (80027d4 <lcd_init+0xbdc>)
 8002628:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800262c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800262e:	4b69      	ldr	r3, [pc, #420]	@ (80027d4 <lcd_init+0xbdc>)
 8002630:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002634:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002636:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800263a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29a      	uxth	r2, r3
 8002642:	4b63      	ldr	r3, [pc, #396]	@ (80027d0 <lcd_init+0xbd8>)
 8002644:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002646:	4b63      	ldr	r3, [pc, #396]	@ (80027d4 <lcd_init+0xbdc>)
 8002648:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800264c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800264e:	4b61      	ldr	r3, [pc, #388]	@ (80027d4 <lcd_init+0xbdc>)
 8002650:	2280      	movs	r2, #128	@ 0x80
 8002652:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002654:	4b5f      	ldr	r3, [pc, #380]	@ (80027d4 <lcd_init+0xbdc>)
 8002656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800265a:	611a      	str	r2, [r3, #16]
}
 800265c:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 800265e:	20a4      	movs	r0, #164	@ 0xa4
 8002660:	f7fe f98c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 8002664:	20a1      	movs	r0, #161	@ 0xa1
 8002666:	f7fe f989 	bl	800097c <lcd_wr_xdata>
 800266a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800266e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002672:	22e0      	movs	r2, #224	@ 0xe0
 8002674:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002676:	4b57      	ldr	r3, [pc, #348]	@ (80027d4 <lcd_init+0xbdc>)
 8002678:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800267c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800267e:	4b55      	ldr	r3, [pc, #340]	@ (80027d4 <lcd_init+0xbdc>)
 8002680:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002684:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002686:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800268a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29a      	uxth	r2, r3
 8002692:	4b4f      	ldr	r3, [pc, #316]	@ (80027d0 <lcd_init+0xbd8>)
 8002694:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002696:	4b4f      	ldr	r3, [pc, #316]	@ (80027d4 <lcd_init+0xbdc>)
 8002698:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800269c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800269e:	4b4d      	ldr	r3, [pc, #308]	@ (80027d4 <lcd_init+0xbdc>)
 80026a0:	2280      	movs	r2, #128	@ 0x80
 80026a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80026a4:	4b4b      	ldr	r3, [pc, #300]	@ (80027d4 <lcd_init+0xbdc>)
 80026a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026aa:	611a      	str	r2, [r3, #16]
}
 80026ac:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 80026ae:	20d0      	movs	r0, #208	@ 0xd0
 80026b0:	f7fe f964 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe f961 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80026ba:	2002      	movs	r0, #2
 80026bc:	f7fe f95e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80026c0:	2007      	movs	r0, #7
 80026c2:	f7fe f95b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 80026c6:	200a      	movs	r0, #10
 80026c8:	f7fe f958 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80026cc:	2028      	movs	r0, #40	@ 0x28
 80026ce:	f7fe f955 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80026d2:	2032      	movs	r0, #50	@ 0x32
 80026d4:	f7fe f952 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 80026d8:	2044      	movs	r0, #68	@ 0x44
 80026da:	f7fe f94f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 80026de:	2042      	movs	r0, #66	@ 0x42
 80026e0:	f7fe f94c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 80026e4:	2006      	movs	r0, #6
 80026e6:	f7fe f949 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 80026ea:	200e      	movs	r0, #14
 80026ec:	f7fe f946 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 80026f0:	2012      	movs	r0, #18
 80026f2:	f7fe f943 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 80026f6:	2014      	movs	r0, #20
 80026f8:	f7fe f940 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80026fc:	2017      	movs	r0, #23
 80026fe:	f7fe f93d 	bl	800097c <lcd_wr_xdata>
 8002702:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002706:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800270a:	22e1      	movs	r2, #225	@ 0xe1
 800270c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800270e:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <lcd_init+0xbdc>)
 8002710:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002714:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002716:	4b2f      	ldr	r3, [pc, #188]	@ (80027d4 <lcd_init+0xbdc>)
 8002718:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800271c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800271e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002722:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b29      	ldr	r3, [pc, #164]	@ (80027d0 <lcd_init+0xbd8>)
 800272c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800272e:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <lcd_init+0xbdc>)
 8002730:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002734:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <lcd_init+0xbdc>)
 8002738:	2280      	movs	r2, #128	@ 0x80
 800273a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800273c:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <lcd_init+0xbdc>)
 800273e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002742:	611a      	str	r2, [r3, #16]
}
 8002744:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 8002746:	20d0      	movs	r0, #208	@ 0xd0
 8002748:	f7fe f918 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe f915 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002752:	2002      	movs	r0, #2
 8002754:	f7fe f912 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002758:	2007      	movs	r0, #7
 800275a:	f7fe f90f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 800275e:	200a      	movs	r0, #10
 8002760:	f7fe f90c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002764:	2028      	movs	r0, #40	@ 0x28
 8002766:	f7fe f909 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 800276a:	2031      	movs	r0, #49	@ 0x31
 800276c:	f7fe f906 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002770:	2054      	movs	r0, #84	@ 0x54
 8002772:	f7fe f903 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 8002776:	2047      	movs	r0, #71	@ 0x47
 8002778:	f7fe f900 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 800277c:	200e      	movs	r0, #14
 800277e:	f7fe f8fd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 8002782:	201c      	movs	r0, #28
 8002784:	f7fe f8fa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002788:	2017      	movs	r0, #23
 800278a:	f7fe f8f7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 800278e:	201b      	movs	r0, #27
 8002790:	f7fe f8f4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 8002794:	201e      	movs	r0, #30
 8002796:	f7fe f8f1 	bl	800097c <lcd_wr_xdata>
 800279a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800279e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027a2:	222a      	movs	r2, #42	@ 0x2a
 80027a4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80027a6:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <lcd_init+0xbdc>)
 80027a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027ac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <lcd_init+0xbdc>)
 80027b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80027b6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <lcd_init+0xbd8>)
 80027c4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80027c6:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <lcd_init+0xbdc>)
 80027c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027cc:	611a      	str	r2, [r3, #16]
 80027ce:	e003      	b.n	80027d8 <lcd_init+0xbe0>
 80027d0:	40010c00 	.word	0x40010c00
 80027d4:	40011000 	.word	0x40011000
    LCD_WR(1);
 80027d8:	4b32      	ldr	r3, [pc, #200]	@ (80028a4 <lcd_init+0xcac>)
 80027da:	2280      	movs	r2, #128	@ 0x80
 80027dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027de:	4b31      	ldr	r3, [pc, #196]	@ (80028a4 <lcd_init+0xcac>)
 80027e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e4:	611a      	str	r2, [r3, #16]
}
 80027e6:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe f8c7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe f8c4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe f8c1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 80027fa:	20ef      	movs	r0, #239	@ 0xef
 80027fc:	f7fe f8be 	bl	800097c <lcd_wr_xdata>
 8002800:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002804:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002808:	222b      	movs	r2, #43	@ 0x2b
 800280a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800280c:	4b25      	ldr	r3, [pc, #148]	@ (80028a4 <lcd_init+0xcac>)
 800280e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002812:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002814:	4b23      	ldr	r3, [pc, #140]	@ (80028a4 <lcd_init+0xcac>)
 8002816:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800281a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800281c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002820:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29a      	uxth	r2, r3
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <lcd_init+0xcb0>)
 800282a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <lcd_init+0xcac>)
 800282e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002832:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002834:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <lcd_init+0xcac>)
 8002836:	2280      	movs	r2, #128	@ 0x80
 8002838:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800283a:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <lcd_init+0xcac>)
 800283c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002840:	611a      	str	r2, [r3, #16]
}
 8002842:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe f899 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800284a:	2000      	movs	r0, #0
 800284c:	f7fe f896 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002850:	2001      	movs	r0, #1
 8002852:	f7fe f893 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002856:	203f      	movs	r0, #63	@ 0x3f
 8002858:	f7fe f890 	bl	800097c <lcd_wr_xdata>
 800285c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002860:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002864:	2229      	movs	r2, #41	@ 0x29
 8002866:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002868:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <lcd_init+0xcac>)
 800286a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800286e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <lcd_init+0xcac>)
 8002872:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002876:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002878:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800287c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <lcd_init+0xcb0>)
 8002886:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <lcd_init+0xcac>)
 800288a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800288e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002890:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <lcd_init+0xcac>)
 8002892:	2280      	movs	r2, #128	@ 0x80
 8002894:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002896:	4b03      	ldr	r3, [pc, #12]	@ (80028a4 <lcd_init+0xcac>)
 8002898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800289c:	611a      	str	r2, [r3, #16]
}
 800289e:	f004 b8f4 	b.w	8006a8a <lcd_init+0x4e92>
 80028a2:	bf00      	nop
 80028a4:	40011000 	.word	0x40011000
 80028a8:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 80028ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002b94 <lcd_init+0xf9c>)
 80028ae:	889b      	ldrh	r3, [r3, #4]
 80028b0:	f249 3241 	movw	r2, #37697	@ 0x9341
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f040 83a1 	bne.w	8002ffc <lcd_init+0x1404>
 80028ba:	23cf      	movs	r3, #207	@ 0xcf
 80028bc:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80028c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002b98 <lcd_init+0xfa0>)
 80028c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028c6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80028c8:	4bb3      	ldr	r3, [pc, #716]	@ (8002b98 <lcd_init+0xfa0>)
 80028ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028ce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80028d0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4bb1      	ldr	r3, [pc, #708]	@ (8002b9c <lcd_init+0xfa4>)
 80028d8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028da:	4baf      	ldr	r3, [pc, #700]	@ (8002b98 <lcd_init+0xfa0>)
 80028dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028e0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028e2:	4bad      	ldr	r3, [pc, #692]	@ (8002b98 <lcd_init+0xfa0>)
 80028e4:	2280      	movs	r2, #128	@ 0x80
 80028e6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028e8:	4bab      	ldr	r3, [pc, #684]	@ (8002b98 <lcd_init+0xfa0>)
 80028ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ee:	611a      	str	r2, [r3, #16]
}
 80028f0:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fe f842 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 80028f8:	20c1      	movs	r0, #193	@ 0xc1
 80028fa:	f7fe f83f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 80028fe:	2030      	movs	r0, #48	@ 0x30
 8002900:	f7fe f83c 	bl	800097c <lcd_wr_xdata>
 8002904:	23ed      	movs	r3, #237	@ 0xed
 8002906:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800290a:	4ba3      	ldr	r3, [pc, #652]	@ (8002b98 <lcd_init+0xfa0>)
 800290c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002910:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002912:	4ba1      	ldr	r3, [pc, #644]	@ (8002b98 <lcd_init+0xfa0>)
 8002914:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002918:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800291a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b9e      	ldr	r3, [pc, #632]	@ (8002b9c <lcd_init+0xfa4>)
 8002922:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002924:	4b9c      	ldr	r3, [pc, #624]	@ (8002b98 <lcd_init+0xfa0>)
 8002926:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800292a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800292c:	4b9a      	ldr	r3, [pc, #616]	@ (8002b98 <lcd_init+0xfa0>)
 800292e:	2280      	movs	r2, #128	@ 0x80
 8002930:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002932:	4b99      	ldr	r3, [pc, #612]	@ (8002b98 <lcd_init+0xfa0>)
 8002934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002938:	611a      	str	r2, [r3, #16]
}
 800293a:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 800293c:	2064      	movs	r0, #100	@ 0x64
 800293e:	f7fe f81d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8002942:	2003      	movs	r0, #3
 8002944:	f7fe f81a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 8002948:	2012      	movs	r0, #18
 800294a:	f7fe f817 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 800294e:	2081      	movs	r0, #129	@ 0x81
 8002950:	f7fe f814 	bl	800097c <lcd_wr_xdata>
 8002954:	23e8      	movs	r3, #232	@ 0xe8
 8002956:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800295a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b98 <lcd_init+0xfa0>)
 800295c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002960:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002962:	4b8d      	ldr	r3, [pc, #564]	@ (8002b98 <lcd_init+0xfa0>)
 8002964:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002968:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800296a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b8a      	ldr	r3, [pc, #552]	@ (8002b9c <lcd_init+0xfa4>)
 8002972:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002974:	4b88      	ldr	r3, [pc, #544]	@ (8002b98 <lcd_init+0xfa0>)
 8002976:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800297a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800297c:	4b86      	ldr	r3, [pc, #536]	@ (8002b98 <lcd_init+0xfa0>)
 800297e:	2280      	movs	r2, #128	@ 0x80
 8002980:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002982:	4b85      	ldr	r3, [pc, #532]	@ (8002b98 <lcd_init+0xfa0>)
 8002984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002988:	611a      	str	r2, [r3, #16]
}
 800298a:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 800298c:	2085      	movs	r0, #133	@ 0x85
 800298e:	f7fd fff5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002992:	2010      	movs	r0, #16
 8002994:	f7fd fff2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8002998:	207a      	movs	r0, #122	@ 0x7a
 800299a:	f7fd ffef 	bl	800097c <lcd_wr_xdata>
 800299e:	23cb      	movs	r3, #203	@ 0xcb
 80029a0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002b98 <lcd_init+0xfa0>)
 80029a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029aa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002b98 <lcd_init+0xfa0>)
 80029ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029b2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029b4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	4b78      	ldr	r3, [pc, #480]	@ (8002b9c <lcd_init+0xfa4>)
 80029bc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029be:	4b76      	ldr	r3, [pc, #472]	@ (8002b98 <lcd_init+0xfa0>)
 80029c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029c4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029c6:	4b74      	ldr	r3, [pc, #464]	@ (8002b98 <lcd_init+0xfa0>)
 80029c8:	2280      	movs	r2, #128	@ 0x80
 80029ca:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029cc:	4b72      	ldr	r3, [pc, #456]	@ (8002b98 <lcd_init+0xfa0>)
 80029ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d2:	611a      	str	r2, [r3, #16]
}
 80029d4:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 80029d6:	2039      	movs	r0, #57	@ 0x39
 80029d8:	f7fd ffd0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80029dc:	202c      	movs	r0, #44	@ 0x2c
 80029de:	f7fd ffcd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fd ffca 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 80029e8:	2034      	movs	r0, #52	@ 0x34
 80029ea:	f7fd ffc7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80029ee:	2002      	movs	r0, #2
 80029f0:	f7fd ffc4 	bl	800097c <lcd_wr_xdata>
 80029f4:	23f7      	movs	r3, #247	@ 0xf7
 80029f6:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029fa:	4b67      	ldr	r3, [pc, #412]	@ (8002b98 <lcd_init+0xfa0>)
 80029fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a00:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a02:	4b65      	ldr	r3, [pc, #404]	@ (8002b98 <lcd_init+0xfa0>)
 8002a04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a08:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a0a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	4b62      	ldr	r3, [pc, #392]	@ (8002b9c <lcd_init+0xfa4>)
 8002a12:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a14:	4b60      	ldr	r3, [pc, #384]	@ (8002b98 <lcd_init+0xfa0>)
 8002a16:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a1a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b98 <lcd_init+0xfa0>)
 8002a1e:	2280      	movs	r2, #128	@ 0x80
 8002a20:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a22:	4b5d      	ldr	r3, [pc, #372]	@ (8002b98 <lcd_init+0xfa0>)
 8002a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a28:	611a      	str	r2, [r3, #16]
}
 8002a2a:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 8002a2c:	2020      	movs	r0, #32
 8002a2e:	f7fd ffa5 	bl	800097c <lcd_wr_xdata>
 8002a32:	23ea      	movs	r3, #234	@ 0xea
 8002a34:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a38:	4b57      	ldr	r3, [pc, #348]	@ (8002b98 <lcd_init+0xfa0>)
 8002a3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a3e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a40:	4b55      	ldr	r3, [pc, #340]	@ (8002b98 <lcd_init+0xfa0>)
 8002a42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a46:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a48:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	4b53      	ldr	r3, [pc, #332]	@ (8002b9c <lcd_init+0xfa4>)
 8002a50:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a52:	4b51      	ldr	r3, [pc, #324]	@ (8002b98 <lcd_init+0xfa0>)
 8002a54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a58:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002b98 <lcd_init+0xfa0>)
 8002a5c:	2280      	movs	r2, #128	@ 0x80
 8002a5e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a60:	4b4d      	ldr	r3, [pc, #308]	@ (8002b98 <lcd_init+0xfa0>)
 8002a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a66:	611a      	str	r2, [r3, #16]
}
 8002a68:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fd ff86 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fd ff83 	bl	800097c <lcd_wr_xdata>
 8002a76:	23c0      	movs	r3, #192	@ 0xc0
 8002a78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a7c:	4b46      	ldr	r3, [pc, #280]	@ (8002b98 <lcd_init+0xfa0>)
 8002a7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a82:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a84:	4b44      	ldr	r3, [pc, #272]	@ (8002b98 <lcd_init+0xfa0>)
 8002a86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a8a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	4b42      	ldr	r3, [pc, #264]	@ (8002b9c <lcd_init+0xfa4>)
 8002a94:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a96:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <lcd_init+0xfa0>)
 8002a98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a9c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b98 <lcd_init+0xfa0>)
 8002aa0:	2280      	movs	r2, #128	@ 0x80
 8002aa2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8002b98 <lcd_init+0xfa0>)
 8002aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aaa:	611a      	str	r2, [r3, #16]
}
 8002aac:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 8002aae:	201b      	movs	r0, #27
 8002ab0:	f7fd ff64 	bl	800097c <lcd_wr_xdata>
 8002ab4:	23c1      	movs	r3, #193	@ 0xc1
 8002ab6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002aba:	4b37      	ldr	r3, [pc, #220]	@ (8002b98 <lcd_init+0xfa0>)
 8002abc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ac0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ac2:	4b35      	ldr	r3, [pc, #212]	@ (8002b98 <lcd_init+0xfa0>)
 8002ac4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002aca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	4b32      	ldr	r3, [pc, #200]	@ (8002b9c <lcd_init+0xfa4>)
 8002ad2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ad4:	4b30      	ldr	r3, [pc, #192]	@ (8002b98 <lcd_init+0xfa0>)
 8002ad6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ada:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002adc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b98 <lcd_init+0xfa0>)
 8002ade:	2280      	movs	r2, #128	@ 0x80
 8002ae0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <lcd_init+0xfa0>)
 8002ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ae8:	611a      	str	r2, [r3, #16]
}
 8002aea:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 8002aec:	2001      	movs	r0, #1
 8002aee:	f7fd ff45 	bl	800097c <lcd_wr_xdata>
 8002af2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002af6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002afa:	22c5      	movs	r2, #197	@ 0xc5
 8002afc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002afe:	4b26      	ldr	r3, [pc, #152]	@ (8002b98 <lcd_init+0xfa0>)
 8002b00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b04:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b06:	4b24      	ldr	r3, [pc, #144]	@ (8002b98 <lcd_init+0xfa0>)
 8002b08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b0c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b0e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b12:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	4b20      	ldr	r3, [pc, #128]	@ (8002b9c <lcd_init+0xfa4>)
 8002b1c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <lcd_init+0xfa0>)
 8002b20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b24:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b26:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <lcd_init+0xfa0>)
 8002b28:	2280      	movs	r2, #128	@ 0x80
 8002b2a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b98 <lcd_init+0xfa0>)
 8002b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b32:	611a      	str	r2, [r3, #16]
}
 8002b34:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 8002b36:	2030      	movs	r0, #48	@ 0x30
 8002b38:	f7fd ff20 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 8002b3c:	2030      	movs	r0, #48	@ 0x30
 8002b3e:	f7fd ff1d 	bl	800097c <lcd_wr_xdata>
 8002b42:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b46:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002b4a:	22c7      	movs	r2, #199	@ 0xc7
 8002b4c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <lcd_init+0xfa0>)
 8002b50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b54:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <lcd_init+0xfa0>)
 8002b58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b5c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b5e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b62:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <lcd_init+0xfa4>)
 8002b6c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <lcd_init+0xfa0>)
 8002b70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b74:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b76:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <lcd_init+0xfa0>)
 8002b78:	2280      	movs	r2, #128	@ 0x80
 8002b7a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <lcd_init+0xfa0>)
 8002b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b82:	611a      	str	r2, [r3, #16]
}
 8002b84:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 8002b86:	20b7      	movs	r0, #183	@ 0xb7
 8002b88:	f7fd fef8 	bl	800097c <lcd_wr_xdata>
 8002b8c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b90:	e006      	b.n	8002ba0 <lcd_init+0xfa8>
 8002b92:	bf00      	nop
 8002b94:	20002ab8 	.word	0x20002ab8
 8002b98:	40011000 	.word	0x40011000
 8002b9c:	40010c00 	.word	0x40010c00
 8002ba0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ba4:	2236      	movs	r2, #54	@ 0x36
 8002ba6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ba8:	4bc1      	ldr	r3, [pc, #772]	@ (8002eb0 <lcd_init+0x12b8>)
 8002baa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bb0:	4bbf      	ldr	r3, [pc, #764]	@ (8002eb0 <lcd_init+0x12b8>)
 8002bb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bb8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	4bbb      	ldr	r3, [pc, #748]	@ (8002eb4 <lcd_init+0x12bc>)
 8002bc6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002bc8:	4bb9      	ldr	r3, [pc, #740]	@ (8002eb0 <lcd_init+0x12b8>)
 8002bca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002bce:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002bd0:	4bb7      	ldr	r3, [pc, #732]	@ (8002eb0 <lcd_init+0x12b8>)
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002bd6:	4bb6      	ldr	r3, [pc, #728]	@ (8002eb0 <lcd_init+0x12b8>)
 8002bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bdc:	611a      	str	r2, [r3, #16]
}
 8002bde:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8002be0:	2048      	movs	r0, #72	@ 0x48
 8002be2:	f7fd fecb 	bl	800097c <lcd_wr_xdata>
 8002be6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bea:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002bee:	223a      	movs	r2, #58	@ 0x3a
 8002bf0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002bf2:	4baf      	ldr	r3, [pc, #700]	@ (8002eb0 <lcd_init+0x12b8>)
 8002bf4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bf8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bfa:	4bad      	ldr	r3, [pc, #692]	@ (8002eb0 <lcd_init+0x12b8>)
 8002bfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c00:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c02:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c06:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	4ba9      	ldr	r3, [pc, #676]	@ (8002eb4 <lcd_init+0x12bc>)
 8002c10:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c12:	4ba7      	ldr	r3, [pc, #668]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c14:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c18:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c1a:	4ba5      	ldr	r3, [pc, #660]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c1c:	2280      	movs	r2, #128	@ 0x80
 8002c1e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c20:	4ba3      	ldr	r3, [pc, #652]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c26:	611a      	str	r2, [r3, #16]
}
 8002c28:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8002c2a:	2055      	movs	r0, #85	@ 0x55
 8002c2c:	f7fd fea6 	bl	800097c <lcd_wr_xdata>
 8002c30:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c38:	22b1      	movs	r2, #177	@ 0xb1
 8002c3a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c3c:	4b9c      	ldr	r3, [pc, #624]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c42:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c44:	4b9a      	ldr	r3, [pc, #616]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c4a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c4c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b96      	ldr	r3, [pc, #600]	@ (8002eb4 <lcd_init+0x12bc>)
 8002c5a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c5c:	4b94      	ldr	r3, [pc, #592]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c62:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c64:	4b92      	ldr	r3, [pc, #584]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c66:	2280      	movs	r2, #128	@ 0x80
 8002c68:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c6a:	4b91      	ldr	r3, [pc, #580]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c70:	611a      	str	r2, [r3, #16]
}
 8002c72:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fd fe81 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 8002c7a:	201a      	movs	r0, #26
 8002c7c:	f7fd fe7e 	bl	800097c <lcd_wr_xdata>
 8002c80:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c84:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002c88:	22b6      	movs	r2, #182	@ 0xb6
 8002c8a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c8c:	4b88      	ldr	r3, [pc, #544]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c92:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c94:	4b86      	ldr	r3, [pc, #536]	@ (8002eb0 <lcd_init+0x12b8>)
 8002c96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c9a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c9c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ca0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b82      	ldr	r3, [pc, #520]	@ (8002eb4 <lcd_init+0x12bc>)
 8002caa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cac:	4b80      	ldr	r3, [pc, #512]	@ (8002eb0 <lcd_init+0x12b8>)
 8002cae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cb2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002cb4:	4b7e      	ldr	r3, [pc, #504]	@ (8002eb0 <lcd_init+0x12b8>)
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cba:	4b7d      	ldr	r3, [pc, #500]	@ (8002eb0 <lcd_init+0x12b8>)
 8002cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc0:	611a      	str	r2, [r3, #16]
}
 8002cc2:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 8002cc4:	200a      	movs	r0, #10
 8002cc6:	f7fd fe59 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8002cca:	20a2      	movs	r0, #162	@ 0xa2
 8002ccc:	f7fd fe56 	bl	800097c <lcd_wr_xdata>
 8002cd0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002cd4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cd8:	22f2      	movs	r2, #242	@ 0xf2
 8002cda:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002cdc:	4b74      	ldr	r3, [pc, #464]	@ (8002eb0 <lcd_init+0x12b8>)
 8002cde:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ce2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ce4:	4b72      	ldr	r3, [pc, #456]	@ (8002eb0 <lcd_init+0x12b8>)
 8002ce6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002cec:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002cf0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b6e      	ldr	r3, [pc, #440]	@ (8002eb4 <lcd_init+0x12bc>)
 8002cfa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb0 <lcd_init+0x12b8>)
 8002cfe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d02:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d04:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d06:	2280      	movs	r2, #128	@ 0x80
 8002d08:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d0a:	4b69      	ldr	r3, [pc, #420]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d10:	611a      	str	r2, [r3, #16]
}
 8002d12:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fd fe31 	bl	800097c <lcd_wr_xdata>
 8002d1a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d1e:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002d22:	2226      	movs	r2, #38	@ 0x26
 8002d24:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d26:	4b62      	ldr	r3, [pc, #392]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d2c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d2e:	4b60      	ldr	r3, [pc, #384]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d34:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d36:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d3a:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b5c      	ldr	r3, [pc, #368]	@ (8002eb4 <lcd_init+0x12bc>)
 8002d44:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d46:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d48:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d4c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d4e:	4b58      	ldr	r3, [pc, #352]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d50:	2280      	movs	r2, #128	@ 0x80
 8002d52:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d54:	4b56      	ldr	r3, [pc, #344]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d5a:	611a      	str	r2, [r3, #16]
}
 8002d5c:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f7fd fe0c 	bl	800097c <lcd_wr_xdata>
 8002d64:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d6c:	22e0      	movs	r2, #224	@ 0xe0
 8002d6e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d70:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d76:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d78:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d7e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d80:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b49      	ldr	r3, [pc, #292]	@ (8002eb4 <lcd_init+0x12bc>)
 8002d8e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d90:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d92:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d96:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d98:	4b45      	ldr	r3, [pc, #276]	@ (8002eb0 <lcd_init+0x12b8>)
 8002d9a:	2280      	movs	r2, #128	@ 0x80
 8002d9c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d9e:	4b44      	ldr	r3, [pc, #272]	@ (8002eb0 <lcd_init+0x12b8>)
 8002da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da4:	611a      	str	r2, [r3, #16]
}
 8002da6:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 8002da8:	200f      	movs	r0, #15
 8002daa:	f7fd fde7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8002dae:	202a      	movs	r0, #42	@ 0x2a
 8002db0:	f7fd fde4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002db4:	2028      	movs	r0, #40	@ 0x28
 8002db6:	f7fd fde1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002dba:	2008      	movs	r0, #8
 8002dbc:	f7fd fdde 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8002dc0:	200e      	movs	r0, #14
 8002dc2:	f7fd fddb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002dc6:	2008      	movs	r0, #8
 8002dc8:	f7fd fdd8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002dcc:	2054      	movs	r0, #84	@ 0x54
 8002dce:	f7fd fdd5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 8002dd2:	20a9      	movs	r0, #169	@ 0xa9
 8002dd4:	f7fd fdd2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8002dd8:	2043      	movs	r0, #67	@ 0x43
 8002dda:	f7fd fdcf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 8002dde:	200a      	movs	r0, #10
 8002de0:	f7fd fdcc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002de4:	200f      	movs	r0, #15
 8002de6:	f7fd fdc9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fd fdc6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd fdc3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fd fdc0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fdbd 	bl	800097c <lcd_wr_xdata>
 8002e02:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e06:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002e0a:	22e1      	movs	r2, #225	@ 0xe1
 8002e0c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e0e:	4b28      	ldr	r3, [pc, #160]	@ (8002eb0 <lcd_init+0x12b8>)
 8002e10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e16:	4b26      	ldr	r3, [pc, #152]	@ (8002eb0 <lcd_init+0x12b8>)
 8002e18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e1e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e22:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <lcd_init+0x12bc>)
 8002e2c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e2e:	4b20      	ldr	r3, [pc, #128]	@ (8002eb0 <lcd_init+0x12b8>)
 8002e30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e34:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e36:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb0 <lcd_init+0x12b8>)
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <lcd_init+0x12b8>)
 8002e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e42:	611a      	str	r2, [r3, #16]
}
 8002e44:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fd fd98 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 8002e4c:	2015      	movs	r0, #21
 8002e4e:	f7fd fd95 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002e52:	2017      	movs	r0, #23
 8002e54:	f7fd fd92 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002e58:	2007      	movs	r0, #7
 8002e5a:	f7fd fd8f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 8002e5e:	2011      	movs	r0, #17
 8002e60:	f7fd fd8c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002e64:	2006      	movs	r0, #6
 8002e66:	f7fd fd89 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 8002e6a:	202b      	movs	r0, #43	@ 0x2b
 8002e6c:	f7fd fd86 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8002e70:	2056      	movs	r0, #86	@ 0x56
 8002e72:	f7fd fd83 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8002e76:	203c      	movs	r0, #60	@ 0x3c
 8002e78:	f7fd fd80 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8002e7c:	2005      	movs	r0, #5
 8002e7e:	f7fd fd7d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002e82:	2010      	movs	r0, #16
 8002e84:	f7fd fd7a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002e88:	200f      	movs	r0, #15
 8002e8a:	f7fd fd77 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002e8e:	203f      	movs	r0, #63	@ 0x3f
 8002e90:	f7fd fd74 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002e94:	203f      	movs	r0, #63	@ 0x3f
 8002e96:	f7fd fd71 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002e9a:	200f      	movs	r0, #15
 8002e9c:	f7fd fd6e 	bl	800097c <lcd_wr_xdata>
 8002ea0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ea4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ea8:	222b      	movs	r2, #43	@ 0x2b
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	e004      	b.n	8002eb8 <lcd_init+0x12c0>
 8002eae:	bf00      	nop
 8002eb0:	40011000 	.word	0x40011000
 8002eb4:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff4 <lcd_init+0x13fc>)
 8002eba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ebe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff4 <lcd_init+0x13fc>)
 8002ec2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ec6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ec8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ecc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b48      	ldr	r3, [pc, #288]	@ (8002ff8 <lcd_init+0x1400>)
 8002ed6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ed8:	4b46      	ldr	r3, [pc, #280]	@ (8002ff4 <lcd_init+0x13fc>)
 8002eda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ede:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ee0:	4b44      	ldr	r3, [pc, #272]	@ (8002ff4 <lcd_init+0x13fc>)
 8002ee2:	2280      	movs	r2, #128	@ 0x80
 8002ee4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ee6:	4b43      	ldr	r3, [pc, #268]	@ (8002ff4 <lcd_init+0x13fc>)
 8002ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eec:	611a      	str	r2, [r3, #16]
}
 8002eee:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fd fd43 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fd fd40 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7fd fd3d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002f02:	203f      	movs	r0, #63	@ 0x3f
 8002f04:	f7fd fd3a 	bl	800097c <lcd_wr_xdata>
 8002f08:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f0c:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002f10:	222a      	movs	r2, #42	@ 0x2a
 8002f12:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f14:	4b37      	ldr	r3, [pc, #220]	@ (8002ff4 <lcd_init+0x13fc>)
 8002f16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f1a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f1c:	4b35      	ldr	r3, [pc, #212]	@ (8002ff4 <lcd_init+0x13fc>)
 8002f1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f22:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f24:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f28:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <lcd_init+0x1400>)
 8002f32:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f34:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff4 <lcd_init+0x13fc>)
 8002f36:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f3a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <lcd_init+0x13fc>)
 8002f3e:	2280      	movs	r2, #128	@ 0x80
 8002f40:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f42:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff4 <lcd_init+0x13fc>)
 8002f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f48:	611a      	str	r2, [r3, #16]
}
 8002f4a:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fd fd15 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fd12 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f7fd fd0f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8002f5e:	20ef      	movs	r0, #239	@ 0xef
 8002f60:	f7fd fd0c 	bl	800097c <lcd_wr_xdata>
 8002f64:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f6c:	2211      	movs	r2, #17
 8002f6e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f70:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <lcd_init+0x13fc>)
 8002f72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f76:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <lcd_init+0x13fc>)
 8002f7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f7e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f80:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <lcd_init+0x1400>)
 8002f8e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f90:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <lcd_init+0x13fc>)
 8002f92:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f96:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f98:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <lcd_init+0x13fc>)
 8002f9a:	2280      	movs	r2, #128	@ 0x80
 8002f9c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <lcd_init+0x13fc>)
 8002fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa4:	611a      	str	r2, [r3, #16]
}
 8002fa6:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 8002fa8:	2078      	movs	r0, #120	@ 0x78
 8002faa:	f004 fe13 	bl	8007bd4 <HAL_Delay>
 8002fae:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fb2:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8002fb6:	2229      	movs	r2, #41	@ 0x29
 8002fb8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <lcd_init+0x13fc>)
 8002fbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fc0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <lcd_init+0x13fc>)
 8002fc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fc8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fca:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fce:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <lcd_init+0x1400>)
 8002fd8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <lcd_init+0x13fc>)
 8002fdc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fe0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fe2:	4b04      	ldr	r3, [pc, #16]	@ (8002ff4 <lcd_init+0x13fc>)
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fe8:	4b02      	ldr	r3, [pc, #8]	@ (8002ff4 <lcd_init+0x13fc>)
 8002fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fee:	611a      	str	r2, [r3, #16]
}
 8002ff0:	f003 bd4b 	b.w	8006a8a <lcd_init+0x4e92>
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 8002ffc:	4bbe      	ldr	r3, [pc, #760]	@ (80032f8 <lcd_init+0x1700>)
 8002ffe:	889b      	ldrh	r3, [r3, #4]
 8003000:	f245 3210 	movw	r2, #21264	@ 0x5310
 8003004:	4293      	cmp	r3, r2
 8003006:	f041 846d 	bne.w	80048e4 <lcd_init+0x2cec>
 800300a:	23ed      	movs	r3, #237	@ 0xed
 800300c:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003010:	4bba      	ldr	r3, [pc, #744]	@ (80032fc <lcd_init+0x1704>)
 8003012:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003016:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003018:	4bb8      	ldr	r3, [pc, #736]	@ (80032fc <lcd_init+0x1704>)
 800301a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800301e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003020:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8003024:	b29a      	uxth	r2, r3
 8003026:	4bb6      	ldr	r3, [pc, #728]	@ (8003300 <lcd_init+0x1708>)
 8003028:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800302a:	4bb4      	ldr	r3, [pc, #720]	@ (80032fc <lcd_init+0x1704>)
 800302c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003030:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003032:	4bb2      	ldr	r3, [pc, #712]	@ (80032fc <lcd_init+0x1704>)
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003038:	4bb0      	ldr	r3, [pc, #704]	@ (80032fc <lcd_init+0x1704>)
 800303a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800303e:	611a      	str	r2, [r3, #16]
}
 8003040:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 8003042:	2001      	movs	r0, #1
 8003044:	f7fd fc9a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 8003048:	20fe      	movs	r0, #254	@ 0xfe
 800304a:	f7fd fc97 	bl	800097c <lcd_wr_xdata>
 800304e:	23ee      	movs	r3, #238	@ 0xee
 8003050:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003054:	4ba9      	ldr	r3, [pc, #676]	@ (80032fc <lcd_init+0x1704>)
 8003056:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800305a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800305c:	4ba7      	ldr	r3, [pc, #668]	@ (80032fc <lcd_init+0x1704>)
 800305e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003062:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003064:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8003068:	b29a      	uxth	r2, r3
 800306a:	4ba5      	ldr	r3, [pc, #660]	@ (8003300 <lcd_init+0x1708>)
 800306c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800306e:	4ba3      	ldr	r3, [pc, #652]	@ (80032fc <lcd_init+0x1704>)
 8003070:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003074:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003076:	4ba1      	ldr	r3, [pc, #644]	@ (80032fc <lcd_init+0x1704>)
 8003078:	2280      	movs	r2, #128	@ 0x80
 800307a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800307c:	4b9f      	ldr	r3, [pc, #636]	@ (80032fc <lcd_init+0x1704>)
 800307e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003082:	611a      	str	r2, [r3, #16]
}
 8003084:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 8003086:	20de      	movs	r0, #222	@ 0xde
 8003088:	f7fd fc78 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 800308c:	2021      	movs	r0, #33	@ 0x21
 800308e:	f7fd fc75 	bl	800097c <lcd_wr_xdata>
 8003092:	23f1      	movs	r3, #241	@ 0xf1
 8003094:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003098:	4b98      	ldr	r3, [pc, #608]	@ (80032fc <lcd_init+0x1704>)
 800309a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800309e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030a0:	4b96      	ldr	r3, [pc, #600]	@ (80032fc <lcd_init+0x1704>)
 80030a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030a6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030a8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b94      	ldr	r3, [pc, #592]	@ (8003300 <lcd_init+0x1708>)
 80030b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030b2:	4b92      	ldr	r3, [pc, #584]	@ (80032fc <lcd_init+0x1704>)
 80030b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030ba:	4b90      	ldr	r3, [pc, #576]	@ (80032fc <lcd_init+0x1704>)
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030c0:	4b8e      	ldr	r3, [pc, #568]	@ (80032fc <lcd_init+0x1704>)
 80030c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c6:	611a      	str	r2, [r3, #16]
}
 80030c8:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7fd fc56 	bl	800097c <lcd_wr_xdata>
 80030d0:	23df      	movs	r3, #223	@ 0xdf
 80030d2:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030d6:	4b89      	ldr	r3, [pc, #548]	@ (80032fc <lcd_init+0x1704>)
 80030d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030de:	4b87      	ldr	r3, [pc, #540]	@ (80032fc <lcd_init+0x1704>)
 80030e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030e6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b84      	ldr	r3, [pc, #528]	@ (8003300 <lcd_init+0x1708>)
 80030ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030f0:	4b82      	ldr	r3, [pc, #520]	@ (80032fc <lcd_init+0x1704>)
 80030f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030f8:	4b80      	ldr	r3, [pc, #512]	@ (80032fc <lcd_init+0x1704>)
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030fe:	4b7f      	ldr	r3, [pc, #508]	@ (80032fc <lcd_init+0x1704>)
 8003100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003104:	611a      	str	r2, [r3, #16]
}
 8003106:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003108:	2010      	movs	r0, #16
 800310a:	f7fd fc37 	bl	800097c <lcd_wr_xdata>
 800310e:	23c4      	movs	r3, #196	@ 0xc4
 8003110:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003114:	4b79      	ldr	r3, [pc, #484]	@ (80032fc <lcd_init+0x1704>)
 8003116:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800311a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800311c:	4b77      	ldr	r3, [pc, #476]	@ (80032fc <lcd_init+0x1704>)
 800311e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003122:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003124:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003128:	b29a      	uxth	r2, r3
 800312a:	4b75      	ldr	r3, [pc, #468]	@ (8003300 <lcd_init+0x1708>)
 800312c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800312e:	4b73      	ldr	r3, [pc, #460]	@ (80032fc <lcd_init+0x1704>)
 8003130:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003134:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003136:	4b71      	ldr	r3, [pc, #452]	@ (80032fc <lcd_init+0x1704>)
 8003138:	2280      	movs	r2, #128	@ 0x80
 800313a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800313c:	4b6f      	ldr	r3, [pc, #444]	@ (80032fc <lcd_init+0x1704>)
 800313e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003142:	611a      	str	r2, [r3, #16]
}
 8003144:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 8003146:	208f      	movs	r0, #143	@ 0x8f
 8003148:	f7fd fc18 	bl	800097c <lcd_wr_xdata>
 800314c:	23c6      	movs	r3, #198	@ 0xc6
 800314e:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003152:	4b6a      	ldr	r3, [pc, #424]	@ (80032fc <lcd_init+0x1704>)
 8003154:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003158:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800315a:	4b68      	ldr	r3, [pc, #416]	@ (80032fc <lcd_init+0x1704>)
 800315c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003160:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003162:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8003166:	b29a      	uxth	r2, r3
 8003168:	4b65      	ldr	r3, [pc, #404]	@ (8003300 <lcd_init+0x1708>)
 800316a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800316c:	4b63      	ldr	r3, [pc, #396]	@ (80032fc <lcd_init+0x1704>)
 800316e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003172:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003174:	4b61      	ldr	r3, [pc, #388]	@ (80032fc <lcd_init+0x1704>)
 8003176:	2280      	movs	r2, #128	@ 0x80
 8003178:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800317a:	4b60      	ldr	r3, [pc, #384]	@ (80032fc <lcd_init+0x1704>)
 800317c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003180:	611a      	str	r2, [r3, #16]
}
 8003182:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fd fbf9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 800318a:	20e2      	movs	r0, #226	@ 0xe2
 800318c:	f7fd fbf6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003190:	20e2      	movs	r0, #226	@ 0xe2
 8003192:	f7fd fbf3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003196:	20e2      	movs	r0, #226	@ 0xe2
 8003198:	f7fd fbf0 	bl	800097c <lcd_wr_xdata>
 800319c:	23bf      	movs	r3, #191	@ 0xbf
 800319e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031a2:	4b56      	ldr	r3, [pc, #344]	@ (80032fc <lcd_init+0x1704>)
 80031a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031aa:	4b54      	ldr	r3, [pc, #336]	@ (80032fc <lcd_init+0x1704>)
 80031ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	4b51      	ldr	r3, [pc, #324]	@ (8003300 <lcd_init+0x1708>)
 80031ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031bc:	4b4f      	ldr	r3, [pc, #316]	@ (80032fc <lcd_init+0x1704>)
 80031be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80031c4:	4b4d      	ldr	r3, [pc, #308]	@ (80032fc <lcd_init+0x1704>)
 80031c6:	2280      	movs	r2, #128	@ 0x80
 80031c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80031ca:	4b4c      	ldr	r3, [pc, #304]	@ (80032fc <lcd_init+0x1704>)
 80031cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d0:	611a      	str	r2, [r3, #16]
}
 80031d2:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 80031d4:	20aa      	movs	r0, #170	@ 0xaa
 80031d6:	f7fd fbd1 	bl	800097c <lcd_wr_xdata>
 80031da:	23b0      	movs	r3, #176	@ 0xb0
 80031dc:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031e0:	4b46      	ldr	r3, [pc, #280]	@ (80032fc <lcd_init+0x1704>)
 80031e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031e8:	4b44      	ldr	r3, [pc, #272]	@ (80032fc <lcd_init+0x1704>)
 80031ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031f0:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	4b42      	ldr	r3, [pc, #264]	@ (8003300 <lcd_init+0x1708>)
 80031f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031fa:	4b40      	ldr	r3, [pc, #256]	@ (80032fc <lcd_init+0x1704>)
 80031fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003200:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003202:	4b3e      	ldr	r3, [pc, #248]	@ (80032fc <lcd_init+0x1704>)
 8003204:	2280      	movs	r2, #128	@ 0x80
 8003206:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003208:	4b3c      	ldr	r3, [pc, #240]	@ (80032fc <lcd_init+0x1704>)
 800320a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320e:	611a      	str	r2, [r3, #16]
}
 8003210:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 8003212:	200d      	movs	r0, #13
 8003214:	f7fd fbb2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003218:	2000      	movs	r0, #0
 800321a:	f7fd fbaf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 800321e:	200d      	movs	r0, #13
 8003220:	f7fd fbac 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fd fba9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 800322a:	2011      	movs	r0, #17
 800322c:	f7fd fba6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd fba3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8003236:	2019      	movs	r0, #25
 8003238:	f7fd fba0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800323c:	2000      	movs	r0, #0
 800323e:	f7fd fb9d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003242:	2021      	movs	r0, #33	@ 0x21
 8003244:	f7fd fb9a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003248:	2000      	movs	r0, #0
 800324a:	f7fd fb97 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 800324e:	202d      	movs	r0, #45	@ 0x2d
 8003250:	f7fd fb94 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003254:	2000      	movs	r0, #0
 8003256:	f7fd fb91 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 800325a:	203d      	movs	r0, #61	@ 0x3d
 800325c:	f7fd fb8e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003260:	2000      	movs	r0, #0
 8003262:	f7fd fb8b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003266:	205d      	movs	r0, #93	@ 0x5d
 8003268:	f7fd fb88 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800326c:	2000      	movs	r0, #0
 800326e:	f7fd fb85 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003272:	205d      	movs	r0, #93	@ 0x5d
 8003274:	f7fd fb82 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003278:	2000      	movs	r0, #0
 800327a:	f7fd fb7f 	bl	800097c <lcd_wr_xdata>
 800327e:	23b1      	movs	r3, #177	@ 0xb1
 8003280:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003284:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <lcd_init+0x1704>)
 8003286:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800328a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800328c:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <lcd_init+0x1704>)
 800328e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003292:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003294:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <lcd_init+0x1708>)
 800329c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800329e:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <lcd_init+0x1704>)
 80032a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <lcd_init+0x1704>)
 80032a8:	2280      	movs	r2, #128	@ 0x80
 80032aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80032ac:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <lcd_init+0x1704>)
 80032ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032b2:	611a      	str	r2, [r3, #16]
}
 80032b4:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 80032b6:	2080      	movs	r0, #128	@ 0x80
 80032b8:	f7fd fb60 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd fb5d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 80032c2:	208b      	movs	r0, #139	@ 0x8b
 80032c4:	f7fd fb5a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd fb57 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 80032ce:	2096      	movs	r0, #150	@ 0x96
 80032d0:	f7fd fb54 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fd fb51 	bl	800097c <lcd_wr_xdata>
 80032da:	23b2      	movs	r3, #178	@ 0xb2
 80032dc:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <lcd_init+0x1704>)
 80032e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <lcd_init+0x1704>)
 80032ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032f0:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	e005      	b.n	8003304 <lcd_init+0x170c>
 80032f8:	20002ab8 	.word	0x20002ab8
 80032fc:	40011000 	.word	0x40011000
 8003300:	40010c00 	.word	0x40010c00
 8003304:	4bd0      	ldr	r3, [pc, #832]	@ (8003648 <lcd_init+0x1a50>)
 8003306:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003308:	4bd0      	ldr	r3, [pc, #832]	@ (800364c <lcd_init+0x1a54>)
 800330a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800330e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003310:	4bce      	ldr	r3, [pc, #824]	@ (800364c <lcd_init+0x1a54>)
 8003312:	2280      	movs	r2, #128	@ 0x80
 8003314:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003316:	4bcd      	ldr	r3, [pc, #820]	@ (800364c <lcd_init+0x1a54>)
 8003318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800331c:	611a      	str	r2, [r3, #16]
}
 800331e:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 8003320:	2000      	movs	r0, #0
 8003322:	f7fd fb2b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd fb28 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800332c:	2002      	movs	r0, #2
 800332e:	f7fd fb25 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003332:	2000      	movs	r0, #0
 8003334:	f7fd fb22 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003338:	2003      	movs	r0, #3
 800333a:	f7fd fb1f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800333e:	2000      	movs	r0, #0
 8003340:	f7fd fb1c 	bl	800097c <lcd_wr_xdata>
 8003344:	23b3      	movs	r3, #179	@ 0xb3
 8003346:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800334a:	4bc0      	ldr	r3, [pc, #768]	@ (800364c <lcd_init+0x1a54>)
 800334c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003350:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003352:	4bbe      	ldr	r3, [pc, #760]	@ (800364c <lcd_init+0x1a54>)
 8003354:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003358:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800335a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 800335e:	b29a      	uxth	r2, r3
 8003360:	4bb9      	ldr	r3, [pc, #740]	@ (8003648 <lcd_init+0x1a50>)
 8003362:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003364:	4bb9      	ldr	r3, [pc, #740]	@ (800364c <lcd_init+0x1a54>)
 8003366:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800336a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800336c:	4bb7      	ldr	r3, [pc, #732]	@ (800364c <lcd_init+0x1a54>)
 800336e:	2280      	movs	r2, #128	@ 0x80
 8003370:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003372:	4bb6      	ldr	r3, [pc, #728]	@ (800364c <lcd_init+0x1a54>)
 8003374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003378:	611a      	str	r2, [r3, #16]
}
 800337a:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fd fafd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fd fafa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd faf7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fd faf4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f7fd faf1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fd faee 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fd faeb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fd fae8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7fd fae5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd fae2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fd fadf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fadc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fd fad9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fad6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7fd fad3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd fad0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033dc:	2000      	movs	r0, #0
 80033de:	f7fd facd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd faca 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7fd fac7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fd fac4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033f4:	2000      	movs	r0, #0
 80033f6:	f7fd fac1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033fa:	2000      	movs	r0, #0
 80033fc:	f7fd fabe 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003400:	2000      	movs	r0, #0
 8003402:	f7fd fabb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003406:	2000      	movs	r0, #0
 8003408:	f7fd fab8 	bl	800097c <lcd_wr_xdata>
 800340c:	23b4      	movs	r3, #180	@ 0xb4
 800340e:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003412:	4b8e      	ldr	r3, [pc, #568]	@ (800364c <lcd_init+0x1a54>)
 8003414:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003418:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800341a:	4b8c      	ldr	r3, [pc, #560]	@ (800364c <lcd_init+0x1a54>)
 800341c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003420:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003422:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8003426:	b29a      	uxth	r2, r3
 8003428:	4b87      	ldr	r3, [pc, #540]	@ (8003648 <lcd_init+0x1a50>)
 800342a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800342c:	4b87      	ldr	r3, [pc, #540]	@ (800364c <lcd_init+0x1a54>)
 800342e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003432:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003434:	4b85      	ldr	r3, [pc, #532]	@ (800364c <lcd_init+0x1a54>)
 8003436:	2280      	movs	r2, #128	@ 0x80
 8003438:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800343a:	4b84      	ldr	r3, [pc, #528]	@ (800364c <lcd_init+0x1a54>)
 800343c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003440:	611a      	str	r2, [r3, #16]
}
 8003442:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 8003444:	208b      	movs	r0, #139	@ 0x8b
 8003446:	f7fd fa99 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fd fa96 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 8003450:	2096      	movs	r0, #150	@ 0x96
 8003452:	f7fd fa93 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fd fa90 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 800345c:	20a1      	movs	r0, #161	@ 0xa1
 800345e:	f7fd fa8d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fa8a 	bl	800097c <lcd_wr_xdata>
 8003468:	23b5      	movs	r3, #181	@ 0xb5
 800346a:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800346e:	4b77      	ldr	r3, [pc, #476]	@ (800364c <lcd_init+0x1a54>)
 8003470:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003474:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003476:	4b75      	ldr	r3, [pc, #468]	@ (800364c <lcd_init+0x1a54>)
 8003478:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800347c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800347e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8003482:	b29a      	uxth	r2, r3
 8003484:	4b70      	ldr	r3, [pc, #448]	@ (8003648 <lcd_init+0x1a50>)
 8003486:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003488:	4b70      	ldr	r3, [pc, #448]	@ (800364c <lcd_init+0x1a54>)
 800348a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800348e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003490:	4b6e      	ldr	r3, [pc, #440]	@ (800364c <lcd_init+0x1a54>)
 8003492:	2280      	movs	r2, #128	@ 0x80
 8003494:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003496:	4b6d      	ldr	r3, [pc, #436]	@ (800364c <lcd_init+0x1a54>)
 8003498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800349c:	611a      	str	r2, [r3, #16]
}
 800349e:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 80034a0:	2002      	movs	r0, #2
 80034a2:	f7fd fa6b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7fd fa68 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80034ac:	2003      	movs	r0, #3
 80034ae:	f7fd fa65 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f7fd fa62 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80034b8:	2004      	movs	r0, #4
 80034ba:	f7fd fa5f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034be:	2000      	movs	r0, #0
 80034c0:	f7fd fa5c 	bl	800097c <lcd_wr_xdata>
 80034c4:	23b6      	movs	r3, #182	@ 0xb6
 80034c6:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80034ca:	4b60      	ldr	r3, [pc, #384]	@ (800364c <lcd_init+0x1a54>)
 80034cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034d0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80034d2:	4b5e      	ldr	r3, [pc, #376]	@ (800364c <lcd_init+0x1a54>)
 80034d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034d8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80034da:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 80034de:	b29a      	uxth	r2, r3
 80034e0:	4b59      	ldr	r3, [pc, #356]	@ (8003648 <lcd_init+0x1a50>)
 80034e2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034e4:	4b59      	ldr	r3, [pc, #356]	@ (800364c <lcd_init+0x1a54>)
 80034e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034ec:	4b57      	ldr	r3, [pc, #348]	@ (800364c <lcd_init+0x1a54>)
 80034ee:	2280      	movs	r2, #128	@ 0x80
 80034f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80034f2:	4b56      	ldr	r3, [pc, #344]	@ (800364c <lcd_init+0x1a54>)
 80034f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034f8:	611a      	str	r2, [r3, #16]
}
 80034fa:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 80034fc:	2000      	movs	r0, #0
 80034fe:	f7fd fa3d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd fa3a 	bl	800097c <lcd_wr_xdata>
 8003508:	23b7      	movs	r3, #183	@ 0xb7
 800350a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800350e:	4b4f      	ldr	r3, [pc, #316]	@ (800364c <lcd_init+0x1a54>)
 8003510:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003514:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003516:	4b4d      	ldr	r3, [pc, #308]	@ (800364c <lcd_init+0x1a54>)
 8003518:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800351c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800351e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003522:	b29a      	uxth	r2, r3
 8003524:	4b48      	ldr	r3, [pc, #288]	@ (8003648 <lcd_init+0x1a50>)
 8003526:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003528:	4b48      	ldr	r3, [pc, #288]	@ (800364c <lcd_init+0x1a54>)
 800352a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800352e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003530:	4b46      	ldr	r3, [pc, #280]	@ (800364c <lcd_init+0x1a54>)
 8003532:	2280      	movs	r2, #128	@ 0x80
 8003534:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003536:	4b45      	ldr	r3, [pc, #276]	@ (800364c <lcd_init+0x1a54>)
 8003538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800353c:	611a      	str	r2, [r3, #16]
}
 800353e:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 8003540:	2000      	movs	r0, #0
 8003542:	f7fd fa1b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003546:	2000      	movs	r0, #0
 8003548:	f7fd fa18 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 800354c:	203f      	movs	r0, #63	@ 0x3f
 800354e:	f7fd fa15 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003552:	2000      	movs	r0, #0
 8003554:	f7fd fa12 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 8003558:	205e      	movs	r0, #94	@ 0x5e
 800355a:	f7fd fa0f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800355e:	2000      	movs	r0, #0
 8003560:	f7fd fa0c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003564:	2064      	movs	r0, #100	@ 0x64
 8003566:	f7fd fa09 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800356a:	2000      	movs	r0, #0
 800356c:	f7fd fa06 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 8003570:	208c      	movs	r0, #140	@ 0x8c
 8003572:	f7fd fa03 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003576:	2000      	movs	r0, #0
 8003578:	f7fd fa00 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 800357c:	20ac      	movs	r0, #172	@ 0xac
 800357e:	f7fd f9fd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fd f9fa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003588:	20dc      	movs	r0, #220	@ 0xdc
 800358a:	f7fd f9f7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd f9f4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 8003594:	2070      	movs	r0, #112	@ 0x70
 8003596:	f7fd f9f1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800359a:	2000      	movs	r0, #0
 800359c:	f7fd f9ee 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 80035a0:	2090      	movs	r0, #144	@ 0x90
 80035a2:	f7fd f9eb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7fd f9e8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 80035ac:	20eb      	movs	r0, #235	@ 0xeb
 80035ae:	f7fd f9e5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7fd f9e2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80035b8:	20dc      	movs	r0, #220	@ 0xdc
 80035ba:	f7fd f9df 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fd f9dc 	bl	800097c <lcd_wr_xdata>
 80035c4:	23b8      	movs	r3, #184	@ 0xb8
 80035c6:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80035ca:	4b20      	ldr	r3, [pc, #128]	@ (800364c <lcd_init+0x1a54>)
 80035cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035d0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035d2:	4b1e      	ldr	r3, [pc, #120]	@ (800364c <lcd_init+0x1a54>)
 80035d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80035da:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 80035de:	b29a      	uxth	r2, r3
 80035e0:	4b19      	ldr	r3, [pc, #100]	@ (8003648 <lcd_init+0x1a50>)
 80035e2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035e4:	4b19      	ldr	r3, [pc, #100]	@ (800364c <lcd_init+0x1a54>)
 80035e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035ec:	4b17      	ldr	r3, [pc, #92]	@ (800364c <lcd_init+0x1a54>)
 80035ee:	2280      	movs	r2, #128	@ 0x80
 80035f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80035f2:	4b16      	ldr	r3, [pc, #88]	@ (800364c <lcd_init+0x1a54>)
 80035f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035f8:	611a      	str	r2, [r3, #16]
}
 80035fa:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 80035fc:	2000      	movs	r0, #0
 80035fe:	f7fd f9bd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003602:	2000      	movs	r0, #0
 8003604:	f7fd f9ba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003608:	2000      	movs	r0, #0
 800360a:	f7fd f9b7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800360e:	2000      	movs	r0, #0
 8003610:	f7fd f9b4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003614:	2000      	movs	r0, #0
 8003616:	f7fd f9b1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800361a:	2000      	movs	r0, #0
 800361c:	f7fd f9ae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003620:	2000      	movs	r0, #0
 8003622:	f7fd f9ab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003626:	2000      	movs	r0, #0
 8003628:	f7fd f9a8 	bl	800097c <lcd_wr_xdata>
 800362c:	23ba      	movs	r3, #186	@ 0xba
 800362e:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <lcd_init+0x1a54>)
 8003634:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003638:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800363a:	4b04      	ldr	r3, [pc, #16]	@ (800364c <lcd_init+0x1a54>)
 800363c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003640:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003642:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8003646:	e003      	b.n	8003650 <lcd_init+0x1a58>
 8003648:	40010c00 	.word	0x40010c00
 800364c:	40011000 	.word	0x40011000
 8003650:	b29a      	uxth	r2, r3
 8003652:	4bd9      	ldr	r3, [pc, #868]	@ (80039b8 <lcd_init+0x1dc0>)
 8003654:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003656:	4bd9      	ldr	r3, [pc, #868]	@ (80039bc <lcd_init+0x1dc4>)
 8003658:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800365c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800365e:	4bd7      	ldr	r3, [pc, #860]	@ (80039bc <lcd_init+0x1dc4>)
 8003660:	2280      	movs	r2, #128	@ 0x80
 8003662:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003664:	4bd5      	ldr	r3, [pc, #852]	@ (80039bc <lcd_init+0x1dc4>)
 8003666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800366a:	611a      	str	r2, [r3, #16]
}
 800366c:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 800366e:	2024      	movs	r0, #36	@ 0x24
 8003670:	f7fd f984 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003674:	2000      	movs	r0, #0
 8003676:	f7fd f981 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800367a:	2000      	movs	r0, #0
 800367c:	f7fd f97e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003680:	2000      	movs	r0, #0
 8003682:	f7fd f97b 	bl	800097c <lcd_wr_xdata>
 8003686:	23c1      	movs	r3, #193	@ 0xc1
 8003688:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800368c:	4bcb      	ldr	r3, [pc, #812]	@ (80039bc <lcd_init+0x1dc4>)
 800368e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003692:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003694:	4bc9      	ldr	r3, [pc, #804]	@ (80039bc <lcd_init+0x1dc4>)
 8003696:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800369a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800369c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	4bc5      	ldr	r3, [pc, #788]	@ (80039b8 <lcd_init+0x1dc0>)
 80036a4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80036a6:	4bc5      	ldr	r3, [pc, #788]	@ (80039bc <lcd_init+0x1dc4>)
 80036a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036ac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036ae:	4bc3      	ldr	r3, [pc, #780]	@ (80039bc <lcd_init+0x1dc4>)
 80036b0:	2280      	movs	r2, #128	@ 0x80
 80036b2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036b4:	4bc1      	ldr	r3, [pc, #772]	@ (80039bc <lcd_init+0x1dc4>)
 80036b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ba:	611a      	str	r2, [r3, #16]
}
 80036bc:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 80036be:	2020      	movs	r0, #32
 80036c0:	f7fd f95c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7fd f959 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 80036ca:	2054      	movs	r0, #84	@ 0x54
 80036cc:	f7fd f956 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f7fd f953 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80036d6:	20ff      	movs	r0, #255	@ 0xff
 80036d8:	f7fd f950 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036dc:	2000      	movs	r0, #0
 80036de:	f7fd f94d 	bl	800097c <lcd_wr_xdata>
 80036e2:	23c2      	movs	r3, #194	@ 0xc2
 80036e4:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80036e8:	4bb4      	ldr	r3, [pc, #720]	@ (80039bc <lcd_init+0x1dc4>)
 80036ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036ee:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80036f0:	4bb2      	ldr	r3, [pc, #712]	@ (80039bc <lcd_init+0x1dc4>)
 80036f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036f6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	4bae      	ldr	r3, [pc, #696]	@ (80039b8 <lcd_init+0x1dc0>)
 8003700:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003702:	4bae      	ldr	r3, [pc, #696]	@ (80039bc <lcd_init+0x1dc4>)
 8003704:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003708:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800370a:	4bac      	ldr	r3, [pc, #688]	@ (80039bc <lcd_init+0x1dc4>)
 800370c:	2280      	movs	r2, #128	@ 0x80
 800370e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003710:	4baa      	ldr	r3, [pc, #680]	@ (80039bc <lcd_init+0x1dc4>)
 8003712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003716:	611a      	str	r2, [r3, #16]
}
 8003718:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 800371a:	200a      	movs	r0, #10
 800371c:	f7fd f92e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003720:	2000      	movs	r0, #0
 8003722:	f7fd f92b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003726:	2004      	movs	r0, #4
 8003728:	f7fd f928 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800372c:	2000      	movs	r0, #0
 800372e:	f7fd f925 	bl	800097c <lcd_wr_xdata>
 8003732:	23c3      	movs	r3, #195	@ 0xc3
 8003734:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003738:	4ba0      	ldr	r3, [pc, #640]	@ (80039bc <lcd_init+0x1dc4>)
 800373a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800373e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003740:	4b9e      	ldr	r3, [pc, #632]	@ (80039bc <lcd_init+0x1dc4>)
 8003742:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003746:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003748:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800374c:	b29a      	uxth	r2, r3
 800374e:	4b9a      	ldr	r3, [pc, #616]	@ (80039b8 <lcd_init+0x1dc0>)
 8003750:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003752:	4b9a      	ldr	r3, [pc, #616]	@ (80039bc <lcd_init+0x1dc4>)
 8003754:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003758:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800375a:	4b98      	ldr	r3, [pc, #608]	@ (80039bc <lcd_init+0x1dc4>)
 800375c:	2280      	movs	r2, #128	@ 0x80
 800375e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003760:	4b96      	ldr	r3, [pc, #600]	@ (80039bc <lcd_init+0x1dc4>)
 8003762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003766:	611a      	str	r2, [r3, #16]
}
 8003768:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 800376a:	203c      	movs	r0, #60	@ 0x3c
 800376c:	f7fd f906 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003770:	2000      	movs	r0, #0
 8003772:	f7fd f903 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 8003776:	203a      	movs	r0, #58	@ 0x3a
 8003778:	f7fd f900 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800377c:	2000      	movs	r0, #0
 800377e:	f7fd f8fd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 8003782:	2039      	movs	r0, #57	@ 0x39
 8003784:	f7fd f8fa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003788:	2000      	movs	r0, #0
 800378a:	f7fd f8f7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 800378e:	2037      	movs	r0, #55	@ 0x37
 8003790:	f7fd f8f4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003794:	2000      	movs	r0, #0
 8003796:	f7fd f8f1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800379a:	203c      	movs	r0, #60	@ 0x3c
 800379c:	f7fd f8ee 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7fd f8eb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 80037a6:	2036      	movs	r0, #54	@ 0x36
 80037a8:	f7fd f8e8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7fd f8e5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80037b2:	2032      	movs	r0, #50	@ 0x32
 80037b4:	f7fd f8e2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037b8:	2000      	movs	r0, #0
 80037ba:	f7fd f8df 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 80037be:	202f      	movs	r0, #47	@ 0x2f
 80037c0:	f7fd f8dc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7fd f8d9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80037ca:	202c      	movs	r0, #44	@ 0x2c
 80037cc:	f7fd f8d6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037d0:	2000      	movs	r0, #0
 80037d2:	f7fd f8d3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80037d6:	2029      	movs	r0, #41	@ 0x29
 80037d8:	f7fd f8d0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037dc:	2000      	movs	r0, #0
 80037de:	f7fd f8cd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80037e2:	2026      	movs	r0, #38	@ 0x26
 80037e4:	f7fd f8ca 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037e8:	2000      	movs	r0, #0
 80037ea:	f7fd f8c7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80037ee:	2024      	movs	r0, #36	@ 0x24
 80037f0:	f7fd f8c4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037f4:	2000      	movs	r0, #0
 80037f6:	f7fd f8c1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80037fa:	2024      	movs	r0, #36	@ 0x24
 80037fc:	f7fd f8be 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003800:	2000      	movs	r0, #0
 8003802:	f7fd f8bb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8003806:	2023      	movs	r0, #35	@ 0x23
 8003808:	f7fd f8b8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800380c:	2000      	movs	r0, #0
 800380e:	f7fd f8b5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003812:	203c      	movs	r0, #60	@ 0x3c
 8003814:	f7fd f8b2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003818:	2000      	movs	r0, #0
 800381a:	f7fd f8af 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 800381e:	2036      	movs	r0, #54	@ 0x36
 8003820:	f7fd f8ac 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003824:	2000      	movs	r0, #0
 8003826:	f7fd f8a9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 800382a:	2032      	movs	r0, #50	@ 0x32
 800382c:	f7fd f8a6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003830:	2000      	movs	r0, #0
 8003832:	f7fd f8a3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 8003836:	202f      	movs	r0, #47	@ 0x2f
 8003838:	f7fd f8a0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800383c:	2000      	movs	r0, #0
 800383e:	f7fd f89d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8003842:	202c      	movs	r0, #44	@ 0x2c
 8003844:	f7fd f89a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003848:	2000      	movs	r0, #0
 800384a:	f7fd f897 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 800384e:	2029      	movs	r0, #41	@ 0x29
 8003850:	f7fd f894 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003854:	2000      	movs	r0, #0
 8003856:	f7fd f891 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 800385a:	2026      	movs	r0, #38	@ 0x26
 800385c:	f7fd f88e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003860:	2000      	movs	r0, #0
 8003862:	f7fd f88b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003866:	2024      	movs	r0, #36	@ 0x24
 8003868:	f7fd f888 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800386c:	2000      	movs	r0, #0
 800386e:	f7fd f885 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003872:	2024      	movs	r0, #36	@ 0x24
 8003874:	f7fd f882 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003878:	2000      	movs	r0, #0
 800387a:	f7fd f87f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 800387e:	2023      	movs	r0, #35	@ 0x23
 8003880:	f7fd f87c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003884:	2000      	movs	r0, #0
 8003886:	f7fd f879 	bl	800097c <lcd_wr_xdata>
 800388a:	23c4      	movs	r3, #196	@ 0xc4
 800388c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003890:	4b4a      	ldr	r3, [pc, #296]	@ (80039bc <lcd_init+0x1dc4>)
 8003892:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003896:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003898:	4b48      	ldr	r3, [pc, #288]	@ (80039bc <lcd_init+0x1dc4>)
 800389a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800389e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80038a0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	4b44      	ldr	r3, [pc, #272]	@ (80039b8 <lcd_init+0x1dc0>)
 80038a8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80038aa:	4b44      	ldr	r3, [pc, #272]	@ (80039bc <lcd_init+0x1dc4>)
 80038ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038b0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80038b2:	4b42      	ldr	r3, [pc, #264]	@ (80039bc <lcd_init+0x1dc4>)
 80038b4:	2280      	movs	r2, #128	@ 0x80
 80038b6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80038b8:	4b40      	ldr	r3, [pc, #256]	@ (80039bc <lcd_init+0x1dc4>)
 80038ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038be:	611a      	str	r2, [r3, #16]
}
 80038c0:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 80038c2:	2062      	movs	r0, #98	@ 0x62
 80038c4:	f7fd f85a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038c8:	2000      	movs	r0, #0
 80038ca:	f7fd f857 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 80038ce:	2005      	movs	r0, #5
 80038d0:	f7fd f854 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038d4:	2000      	movs	r0, #0
 80038d6:	f7fd f851 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 80038da:	2084      	movs	r0, #132	@ 0x84
 80038dc:	f7fd f84e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f7fd f84b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 80038e6:	20f0      	movs	r0, #240	@ 0xf0
 80038e8:	f7fd f848 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7fd f845 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 80038f2:	2018      	movs	r0, #24
 80038f4:	f7fd f842 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038f8:	2000      	movs	r0, #0
 80038fa:	f7fd f83f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 80038fe:	20a4      	movs	r0, #164	@ 0xa4
 8003900:	f7fd f83c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003904:	2000      	movs	r0, #0
 8003906:	f7fd f839 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 800390a:	2018      	movs	r0, #24
 800390c:	f7fd f836 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003910:	2000      	movs	r0, #0
 8003912:	f7fd f833 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003916:	2050      	movs	r0, #80	@ 0x50
 8003918:	f7fd f830 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800391c:	2000      	movs	r0, #0
 800391e:	f7fd f82d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8003922:	200c      	movs	r0, #12
 8003924:	f7fd f82a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003928:	2000      	movs	r0, #0
 800392a:	f7fd f827 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 800392e:	2017      	movs	r0, #23
 8003930:	f7fd f824 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003934:	2000      	movs	r0, #0
 8003936:	f7fd f821 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 800393a:	2095      	movs	r0, #149	@ 0x95
 800393c:	f7fd f81e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003940:	2000      	movs	r0, #0
 8003942:	f7fd f81b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003946:	20f3      	movs	r0, #243	@ 0xf3
 8003948:	f7fd f818 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800394c:	2000      	movs	r0, #0
 800394e:	f7fd f815 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 8003952:	20e6      	movs	r0, #230	@ 0xe6
 8003954:	f7fd f812 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003958:	2000      	movs	r0, #0
 800395a:	f7fd f80f 	bl	800097c <lcd_wr_xdata>
 800395e:	23c5      	movs	r3, #197	@ 0xc5
 8003960:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003964:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <lcd_init+0x1dc4>)
 8003966:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800396a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800396c:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <lcd_init+0x1dc4>)
 800396e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003972:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003974:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8003978:	b29a      	uxth	r2, r3
 800397a:	4b0f      	ldr	r3, [pc, #60]	@ (80039b8 <lcd_init+0x1dc0>)
 800397c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800397e:	4b0f      	ldr	r3, [pc, #60]	@ (80039bc <lcd_init+0x1dc4>)
 8003980:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003984:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <lcd_init+0x1dc4>)
 8003988:	2280      	movs	r2, #128	@ 0x80
 800398a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <lcd_init+0x1dc4>)
 800398e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003992:	611a      	str	r2, [r3, #16]
}
 8003994:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 8003996:	2032      	movs	r0, #50	@ 0x32
 8003998:	f7fc fff0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800399c:	2000      	movs	r0, #0
 800399e:	f7fc ffed 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80039a2:	2044      	movs	r0, #68	@ 0x44
 80039a4:	f7fc ffea 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039a8:	2000      	movs	r0, #0
 80039aa:	f7fc ffe7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 80039ae:	2065      	movs	r0, #101	@ 0x65
 80039b0:	f7fc ffe4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039b4:	2000      	movs	r0, #0
 80039b6:	e003      	b.n	80039c0 <lcd_init+0x1dc8>
 80039b8:	40010c00 	.word	0x40010c00
 80039bc:	40011000 	.word	0x40011000
 80039c0:	f7fc ffdc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 80039c4:	2076      	movs	r0, #118	@ 0x76
 80039c6:	f7fc ffd9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f7fc ffd6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80039d0:	2088      	movs	r0, #136	@ 0x88
 80039d2:	f7fc ffd3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7fc ffd0 	bl	800097c <lcd_wr_xdata>
 80039dc:	23c6      	movs	r3, #198	@ 0xc6
 80039de:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039e2:	4bd7      	ldr	r3, [pc, #860]	@ (8003d40 <lcd_init+0x2148>)
 80039e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039ea:	4bd5      	ldr	r3, [pc, #852]	@ (8003d40 <lcd_init+0x2148>)
 80039ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80039f2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	4bd2      	ldr	r3, [pc, #840]	@ (8003d44 <lcd_init+0x214c>)
 80039fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80039fc:	4bd0      	ldr	r3, [pc, #832]	@ (8003d40 <lcd_init+0x2148>)
 80039fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a02:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a04:	4bce      	ldr	r3, [pc, #824]	@ (8003d40 <lcd_init+0x2148>)
 8003a06:	2280      	movs	r2, #128	@ 0x80
 8003a08:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a0a:	4bcd      	ldr	r3, [pc, #820]	@ (8003d40 <lcd_init+0x2148>)
 8003a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a10:	611a      	str	r2, [r3, #16]
}
 8003a12:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 8003a14:	2020      	movs	r0, #32
 8003a16:	f7fc ffb1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f7fc ffae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003a20:	2017      	movs	r0, #23
 8003a22:	f7fc ffab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a26:	2000      	movs	r0, #0
 8003a28:	f7fc ffa8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f7fc ffa5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a32:	2000      	movs	r0, #0
 8003a34:	f7fc ffa2 	bl	800097c <lcd_wr_xdata>
 8003a38:	23c7      	movs	r3, #199	@ 0xc7
 8003a3a:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a3e:	4bc0      	ldr	r3, [pc, #768]	@ (8003d40 <lcd_init+0x2148>)
 8003a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a44:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a46:	4bbe      	ldr	r3, [pc, #760]	@ (8003d40 <lcd_init+0x2148>)
 8003a48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a4c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a4e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	4bbb      	ldr	r3, [pc, #748]	@ (8003d44 <lcd_init+0x214c>)
 8003a56:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a58:	4bb9      	ldr	r3, [pc, #740]	@ (8003d40 <lcd_init+0x2148>)
 8003a5a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a5e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a60:	4bb7      	ldr	r3, [pc, #732]	@ (8003d40 <lcd_init+0x2148>)
 8003a62:	2280      	movs	r2, #128	@ 0x80
 8003a64:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a66:	4bb6      	ldr	r3, [pc, #728]	@ (8003d40 <lcd_init+0x2148>)
 8003a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a6c:	611a      	str	r2, [r3, #16]
}
 8003a6e:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 8003a70:	2000      	movs	r0, #0
 8003a72:	f7fc ff83 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a76:	2000      	movs	r0, #0
 8003a78:	f7fc ff80 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f7fc ff7d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a82:	2000      	movs	r0, #0
 8003a84:	f7fc ff7a 	bl	800097c <lcd_wr_xdata>
 8003a88:	23c8      	movs	r3, #200	@ 0xc8
 8003a8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a8e:	4bac      	ldr	r3, [pc, #688]	@ (8003d40 <lcd_init+0x2148>)
 8003a90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a94:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a96:	4baa      	ldr	r3, [pc, #680]	@ (8003d40 <lcd_init+0x2148>)
 8003a98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a9c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a9e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	4ba7      	ldr	r3, [pc, #668]	@ (8003d44 <lcd_init+0x214c>)
 8003aa6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003aa8:	4ba5      	ldr	r3, [pc, #660]	@ (8003d40 <lcd_init+0x2148>)
 8003aaa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003aae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ab0:	4ba3      	ldr	r3, [pc, #652]	@ (8003d40 <lcd_init+0x2148>)
 8003ab2:	2280      	movs	r2, #128	@ 0x80
 8003ab4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ab6:	4ba2      	ldr	r3, [pc, #648]	@ (8003d40 <lcd_init+0x2148>)
 8003ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003abc:	611a      	str	r2, [r3, #16]
}
 8003abe:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f7fc ff5b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f7fc ff58 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7fc ff55 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fc ff52 	bl	800097c <lcd_wr_xdata>
 8003ad8:	23c9      	movs	r3, #201	@ 0xc9
 8003ada:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ade:	4b98      	ldr	r3, [pc, #608]	@ (8003d40 <lcd_init+0x2148>)
 8003ae0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ae4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003ae6:	4b96      	ldr	r3, [pc, #600]	@ (8003d40 <lcd_init+0x2148>)
 8003ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003aee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	4b93      	ldr	r3, [pc, #588]	@ (8003d44 <lcd_init+0x214c>)
 8003af6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003af8:	4b91      	ldr	r3, [pc, #580]	@ (8003d40 <lcd_init+0x2148>)
 8003afa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003afe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b00:	4b8f      	ldr	r3, [pc, #572]	@ (8003d40 <lcd_init+0x2148>)
 8003b02:	2280      	movs	r2, #128	@ 0x80
 8003b04:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b06:	4b8e      	ldr	r3, [pc, #568]	@ (8003d40 <lcd_init+0x2148>)
 8003b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b0c:	611a      	str	r2, [r3, #16]
}
 8003b0e:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8003b10:	2000      	movs	r0, #0
 8003b12:	f7fc ff33 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7fc ff30 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f7fc ff2d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7fc ff2a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f7fc ff27 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f7fc ff24 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b34:	2000      	movs	r0, #0
 8003b36:	f7fc ff21 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7fc ff1e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7fc ff1b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b46:	2000      	movs	r0, #0
 8003b48:	f7fc ff18 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f7fc ff15 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f7fc ff12 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f7fc ff0f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f7fc ff0c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b64:	2000      	movs	r0, #0
 8003b66:	f7fc ff09 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7fc ff06 	bl	800097c <lcd_wr_xdata>
 8003b70:	23e0      	movs	r3, #224	@ 0xe0
 8003b72:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b76:	4b72      	ldr	r3, [pc, #456]	@ (8003d40 <lcd_init+0x2148>)
 8003b78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b7c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b7e:	4b70      	ldr	r3, [pc, #448]	@ (8003d40 <lcd_init+0x2148>)
 8003b80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b84:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b86:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	4b6d      	ldr	r3, [pc, #436]	@ (8003d44 <lcd_init+0x214c>)
 8003b8e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b90:	4b6b      	ldr	r3, [pc, #428]	@ (8003d40 <lcd_init+0x2148>)
 8003b92:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b96:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b98:	4b69      	ldr	r3, [pc, #420]	@ (8003d40 <lcd_init+0x2148>)
 8003b9a:	2280      	movs	r2, #128	@ 0x80
 8003b9c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b9e:	4b68      	ldr	r3, [pc, #416]	@ (8003d40 <lcd_init+0x2148>)
 8003ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba4:	611a      	str	r2, [r3, #16]
}
 8003ba6:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 8003ba8:	2016      	movs	r0, #22
 8003baa:	f7fc fee7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f7fc fee4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003bb4:	201c      	movs	r0, #28
 8003bb6:	f7fc fee1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bba:	2000      	movs	r0, #0
 8003bbc:	f7fc fede 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003bc0:	2021      	movs	r0, #33	@ 0x21
 8003bc2:	f7fc fedb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f7fc fed8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003bcc:	2036      	movs	r0, #54	@ 0x36
 8003bce:	f7fc fed5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7fc fed2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8003bd8:	2046      	movs	r0, #70	@ 0x46
 8003bda:	f7fc fecf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bde:	2000      	movs	r0, #0
 8003be0:	f7fc fecc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003be4:	2052      	movs	r0, #82	@ 0x52
 8003be6:	f7fc fec9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7fc fec6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003bf0:	2064      	movs	r0, #100	@ 0x64
 8003bf2:	f7fc fec3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fc fec0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003bfc:	207a      	movs	r0, #122	@ 0x7a
 8003bfe:	f7fc febd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c02:	2000      	movs	r0, #0
 8003c04:	f7fc feba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003c08:	208b      	movs	r0, #139	@ 0x8b
 8003c0a:	f7fc feb7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f7fc feb4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003c14:	2099      	movs	r0, #153	@ 0x99
 8003c16:	f7fc feb1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f7fc feae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003c20:	20a8      	movs	r0, #168	@ 0xa8
 8003c22:	f7fc feab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fc fea8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003c2c:	20b9      	movs	r0, #185	@ 0xb9
 8003c2e:	f7fc fea5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c32:	2000      	movs	r0, #0
 8003c34:	f7fc fea2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003c38:	20c4      	movs	r0, #196	@ 0xc4
 8003c3a:	f7fc fe9f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7fc fe9c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003c44:	20ca      	movs	r0, #202	@ 0xca
 8003c46:	f7fc fe99 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fc fe96 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003c50:	20d2      	movs	r0, #210	@ 0xd2
 8003c52:	f7fc fe93 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c56:	2000      	movs	r0, #0
 8003c58:	f7fc fe90 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 8003c5c:	20d9      	movs	r0, #217	@ 0xd9
 8003c5e:	f7fc fe8d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7fc fe8a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003c68:	20e0      	movs	r0, #224	@ 0xe0
 8003c6a:	f7fc fe87 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7fc fe84 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003c74:	20f3      	movs	r0, #243	@ 0xf3
 8003c76:	f7fc fe81 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fc fe7e 	bl	800097c <lcd_wr_xdata>
 8003c80:	23e1      	movs	r3, #225	@ 0xe1
 8003c82:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c86:	4b2e      	ldr	r3, [pc, #184]	@ (8003d40 <lcd_init+0x2148>)
 8003c88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c8c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d40 <lcd_init+0x2148>)
 8003c90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c94:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c96:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	4b29      	ldr	r3, [pc, #164]	@ (8003d44 <lcd_init+0x214c>)
 8003c9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003ca0:	4b27      	ldr	r3, [pc, #156]	@ (8003d40 <lcd_init+0x2148>)
 8003ca2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ca6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ca8:	4b25      	ldr	r3, [pc, #148]	@ (8003d40 <lcd_init+0x2148>)
 8003caa:	2280      	movs	r2, #128	@ 0x80
 8003cac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <lcd_init+0x2148>)
 8003cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cb4:	611a      	str	r2, [r3, #16]
}
 8003cb6:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8003cb8:	2016      	movs	r0, #22
 8003cba:	f7fc fe5f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f7fc fe5c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003cc4:	201c      	movs	r0, #28
 8003cc6:	f7fc fe59 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7fc fe56 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8003cd0:	2022      	movs	r0, #34	@ 0x22
 8003cd2:	f7fc fe53 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f7fc fe50 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003cdc:	2036      	movs	r0, #54	@ 0x36
 8003cde:	f7fc fe4d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7fc fe4a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8003ce8:	2045      	movs	r0, #69	@ 0x45
 8003cea:	f7fc fe47 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fc fe44 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003cf4:	2052      	movs	r0, #82	@ 0x52
 8003cf6:	f7fc fe41 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fc fe3e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003d00:	2064      	movs	r0, #100	@ 0x64
 8003d02:	f7fc fe3b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7fc fe38 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003d0c:	207a      	movs	r0, #122	@ 0x7a
 8003d0e:	f7fc fe35 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7fc fe32 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003d18:	208b      	movs	r0, #139	@ 0x8b
 8003d1a:	f7fc fe2f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f7fc fe2c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003d24:	2099      	movs	r0, #153	@ 0x99
 8003d26:	f7fc fe29 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f7fc fe26 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003d30:	20a8      	movs	r0, #168	@ 0xa8
 8003d32:	f7fc fe23 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7fc fe20 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003d3c:	20b9      	movs	r0, #185	@ 0xb9
 8003d3e:	e003      	b.n	8003d48 <lcd_init+0x2150>
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40010c00 	.word	0x40010c00
 8003d48:	f7fc fe18 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7fc fe15 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003d52:	20c4      	movs	r0, #196	@ 0xc4
 8003d54:	f7fc fe12 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7fc fe0f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003d5e:	20ca      	movs	r0, #202	@ 0xca
 8003d60:	f7fc fe0c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d64:	2000      	movs	r0, #0
 8003d66:	f7fc fe09 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003d6a:	20d2      	movs	r0, #210	@ 0xd2
 8003d6c:	f7fc fe06 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fc fe03 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 8003d76:	20d8      	movs	r0, #216	@ 0xd8
 8003d78:	f7fc fe00 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7fc fdfd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003d82:	20e0      	movs	r0, #224	@ 0xe0
 8003d84:	f7fc fdfa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fc fdf7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003d8e:	20f3      	movs	r0, #243	@ 0xf3
 8003d90:	f7fc fdf4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7fc fdf1 	bl	800097c <lcd_wr_xdata>
 8003d9a:	23e2      	movs	r3, #226	@ 0xe2
 8003d9c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003da0:	4be3      	ldr	r3, [pc, #908]	@ (8004130 <lcd_init+0x2538>)
 8003da2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003da6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003da8:	4be1      	ldr	r3, [pc, #900]	@ (8004130 <lcd_init+0x2538>)
 8003daa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003db0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	4bdf      	ldr	r3, [pc, #892]	@ (8004134 <lcd_init+0x253c>)
 8003db8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003dba:	4bdd      	ldr	r3, [pc, #884]	@ (8004130 <lcd_init+0x2538>)
 8003dbc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003dc0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003dc2:	4bdb      	ldr	r3, [pc, #876]	@ (8004130 <lcd_init+0x2538>)
 8003dc4:	2280      	movs	r2, #128	@ 0x80
 8003dc6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003dc8:	4bd9      	ldr	r3, [pc, #868]	@ (8004130 <lcd_init+0x2538>)
 8003dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dce:	611a      	str	r2, [r3, #16]
}
 8003dd0:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 8003dd2:	2005      	movs	r0, #5
 8003dd4:	f7fc fdd2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f7fc fdcf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8003dde:	200b      	movs	r0, #11
 8003de0:	f7fc fdcc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7fc fdc9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 8003dea:	201b      	movs	r0, #27
 8003dec:	f7fc fdc6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f7fc fdc3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8003df6:	2034      	movs	r0, #52	@ 0x34
 8003df8:	f7fc fdc0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f7fc fdbd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003e02:	2044      	movs	r0, #68	@ 0x44
 8003e04:	f7fc fdba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7fc fdb7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 8003e0e:	204f      	movs	r0, #79	@ 0x4f
 8003e10:	f7fc fdb4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e14:	2000      	movs	r0, #0
 8003e16:	f7fc fdb1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8003e1a:	2061      	movs	r0, #97	@ 0x61
 8003e1c:	f7fc fdae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e20:	2000      	movs	r0, #0
 8003e22:	f7fc fdab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 8003e26:	2079      	movs	r0, #121	@ 0x79
 8003e28:	f7fc fda8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f7fc fda5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003e32:	2088      	movs	r0, #136	@ 0x88
 8003e34:	f7fc fda2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7fc fd9f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003e3e:	2097      	movs	r0, #151	@ 0x97
 8003e40:	f7fc fd9c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e44:	2000      	movs	r0, #0
 8003e46:	f7fc fd99 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003e4a:	20a6      	movs	r0, #166	@ 0xa6
 8003e4c:	f7fc fd96 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e50:	2000      	movs	r0, #0
 8003e52:	f7fc fd93 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003e56:	20b7      	movs	r0, #183	@ 0xb7
 8003e58:	f7fc fd90 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f7fc fd8d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003e62:	20c2      	movs	r0, #194	@ 0xc2
 8003e64:	f7fc fd8a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fc fd87 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003e6e:	20c7      	movs	r0, #199	@ 0xc7
 8003e70:	f7fc fd84 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fc fd81 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003e7a:	20d1      	movs	r0, #209	@ 0xd1
 8003e7c:	f7fc fd7e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7fc fd7b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 8003e86:	20d6      	movs	r0, #214	@ 0xd6
 8003e88:	f7fc fd78 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fc fd75 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003e92:	20dd      	movs	r0, #221	@ 0xdd
 8003e94:	f7fc fd72 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7fc fd6f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003e9e:	20f3      	movs	r0, #243	@ 0xf3
 8003ea0:	f7fc fd6c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fc fd69 	bl	800097c <lcd_wr_xdata>
 8003eaa:	23e3      	movs	r3, #227	@ 0xe3
 8003eac:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003eb0:	4b9f      	ldr	r3, [pc, #636]	@ (8004130 <lcd_init+0x2538>)
 8003eb2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003eb6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003eb8:	4b9d      	ldr	r3, [pc, #628]	@ (8004130 <lcd_init+0x2538>)
 8003eba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ebe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ec0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	4b9b      	ldr	r3, [pc, #620]	@ (8004134 <lcd_init+0x253c>)
 8003ec8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003eca:	4b99      	ldr	r3, [pc, #612]	@ (8004130 <lcd_init+0x2538>)
 8003ecc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ed0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ed2:	4b97      	ldr	r3, [pc, #604]	@ (8004130 <lcd_init+0x2538>)
 8003ed4:	2280      	movs	r2, #128	@ 0x80
 8003ed6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ed8:	4b95      	ldr	r3, [pc, #596]	@ (8004130 <lcd_init+0x2538>)
 8003eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ede:	611a      	str	r2, [r3, #16]
}
 8003ee0:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 8003ee2:	2005      	movs	r0, #5
 8003ee4:	f7fc fd4a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f7fc fd47 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 8003eee:	200a      	movs	r0, #10
 8003ef0:	f7fc fd44 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f7fc fd41 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003efa:	201c      	movs	r0, #28
 8003efc:	f7fc fd3e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f00:	2000      	movs	r0, #0
 8003f02:	f7fc fd3b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8003f06:	2033      	movs	r0, #51	@ 0x33
 8003f08:	f7fc fd38 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f7fc fd35 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003f12:	2044      	movs	r0, #68	@ 0x44
 8003f14:	f7fc fd32 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7fc fd2f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003f1e:	2050      	movs	r0, #80	@ 0x50
 8003f20:	f7fc fd2c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f24:	2000      	movs	r0, #0
 8003f26:	f7fc fd29 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 8003f2a:	2062      	movs	r0, #98	@ 0x62
 8003f2c:	f7fc fd26 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7fc fd23 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 8003f36:	2078      	movs	r0, #120	@ 0x78
 8003f38:	f7fc fd20 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f7fc fd1d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003f42:	2088      	movs	r0, #136	@ 0x88
 8003f44:	f7fc fd1a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f48:	2000      	movs	r0, #0
 8003f4a:	f7fc fd17 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003f4e:	2097      	movs	r0, #151	@ 0x97
 8003f50:	f7fc fd14 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f54:	2000      	movs	r0, #0
 8003f56:	f7fc fd11 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003f5a:	20a6      	movs	r0, #166	@ 0xa6
 8003f5c:	f7fc fd0e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f60:	2000      	movs	r0, #0
 8003f62:	f7fc fd0b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003f66:	20b7      	movs	r0, #183	@ 0xb7
 8003f68:	f7fc fd08 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fc fd05 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003f72:	20c2      	movs	r0, #194	@ 0xc2
 8003f74:	f7fc fd02 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7fc fcff 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003f7e:	20c7      	movs	r0, #199	@ 0xc7
 8003f80:	f7fc fcfc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f84:	2000      	movs	r0, #0
 8003f86:	f7fc fcf9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003f8a:	20d1      	movs	r0, #209	@ 0xd1
 8003f8c:	f7fc fcf6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7fc fcf3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 8003f96:	20d5      	movs	r0, #213	@ 0xd5
 8003f98:	f7fc fcf0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7fc fced 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003fa2:	20dd      	movs	r0, #221	@ 0xdd
 8003fa4:	f7fc fcea 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7fc fce7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003fae:	20f3      	movs	r0, #243	@ 0xf3
 8003fb0:	f7fc fce4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7fc fce1 	bl	800097c <lcd_wr_xdata>
 8003fba:	23e4      	movs	r3, #228	@ 0xe4
 8003fbc:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8004130 <lcd_init+0x2538>)
 8003fc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fc6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003fc8:	4b59      	ldr	r3, [pc, #356]	@ (8004130 <lcd_init+0x2538>)
 8003fca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003fd0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	4b57      	ldr	r3, [pc, #348]	@ (8004134 <lcd_init+0x253c>)
 8003fd8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003fda:	4b55      	ldr	r3, [pc, #340]	@ (8004130 <lcd_init+0x2538>)
 8003fdc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003fe0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003fe2:	4b53      	ldr	r3, [pc, #332]	@ (8004130 <lcd_init+0x2538>)
 8003fe4:	2280      	movs	r2, #128	@ 0x80
 8003fe6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003fe8:	4b51      	ldr	r3, [pc, #324]	@ (8004130 <lcd_init+0x2538>)
 8003fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fee:	611a      	str	r2, [r3, #16]
}
 8003ff0:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f7fc fcc2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7fc fcbf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003ffe:	2001      	movs	r0, #1
 8004000:	f7fc fcbc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004004:	2000      	movs	r0, #0
 8004006:	f7fc fcb9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800400a:	2002      	movs	r0, #2
 800400c:	f7fc fcb6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004010:	2000      	movs	r0, #0
 8004012:	f7fc fcb3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8004016:	202a      	movs	r0, #42	@ 0x2a
 8004018:	f7fc fcb0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800401c:	2000      	movs	r0, #0
 800401e:	f7fc fcad 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8004022:	203c      	movs	r0, #60	@ 0x3c
 8004024:	f7fc fcaa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004028:	2000      	movs	r0, #0
 800402a:	f7fc fca7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 800402e:	204b      	movs	r0, #75	@ 0x4b
 8004030:	f7fc fca4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004034:	2000      	movs	r0, #0
 8004036:	f7fc fca1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 800403a:	205d      	movs	r0, #93	@ 0x5d
 800403c:	f7fc fc9e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004040:	2000      	movs	r0, #0
 8004042:	f7fc fc9b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004046:	2074      	movs	r0, #116	@ 0x74
 8004048:	f7fc fc98 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800404c:	2000      	movs	r0, #0
 800404e:	f7fc fc95 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8004052:	2084      	movs	r0, #132	@ 0x84
 8004054:	f7fc fc92 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004058:	2000      	movs	r0, #0
 800405a:	f7fc fc8f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 800405e:	2093      	movs	r0, #147	@ 0x93
 8004060:	f7fc fc8c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004064:	2000      	movs	r0, #0
 8004066:	f7fc fc89 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 800406a:	20a2      	movs	r0, #162	@ 0xa2
 800406c:	f7fc fc86 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004070:	2000      	movs	r0, #0
 8004072:	f7fc fc83 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004076:	20b3      	movs	r0, #179	@ 0xb3
 8004078:	f7fc fc80 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800407c:	2000      	movs	r0, #0
 800407e:	f7fc fc7d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8004082:	20be      	movs	r0, #190	@ 0xbe
 8004084:	f7fc fc7a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004088:	2000      	movs	r0, #0
 800408a:	f7fc fc77 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 800408e:	20c4      	movs	r0, #196	@ 0xc4
 8004090:	f7fc fc74 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004094:	2000      	movs	r0, #0
 8004096:	f7fc fc71 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 800409a:	20cd      	movs	r0, #205	@ 0xcd
 800409c:	f7fc fc6e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fc fc6b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 80040a6:	20d3      	movs	r0, #211	@ 0xd3
 80040a8:	f7fc fc68 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fc fc65 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80040b2:	20dd      	movs	r0, #221	@ 0xdd
 80040b4:	f7fc fc62 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7fc fc5f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80040be:	20f3      	movs	r0, #243	@ 0xf3
 80040c0:	f7fc fc5c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fc fc59 	bl	800097c <lcd_wr_xdata>
 80040ca:	23e5      	movs	r3, #229	@ 0xe5
 80040cc:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80040d0:	4b17      	ldr	r3, [pc, #92]	@ (8004130 <lcd_init+0x2538>)
 80040d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80040d8:	4b15      	ldr	r3, [pc, #84]	@ (8004130 <lcd_init+0x2538>)
 80040da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80040e0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	4b13      	ldr	r3, [pc, #76]	@ (8004134 <lcd_init+0x253c>)
 80040e8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80040ea:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <lcd_init+0x2538>)
 80040ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80040f0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80040f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004130 <lcd_init+0x2538>)
 80040f4:	2280      	movs	r2, #128	@ 0x80
 80040f6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80040f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004130 <lcd_init+0x2538>)
 80040fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040fe:	611a      	str	r2, [r3, #16]
}
 8004100:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 8004102:	2000      	movs	r0, #0
 8004104:	f7fc fc3a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004108:	2000      	movs	r0, #0
 800410a:	f7fc fc37 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800410e:	2000      	movs	r0, #0
 8004110:	f7fc fc34 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004114:	2000      	movs	r0, #0
 8004116:	f7fc fc31 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800411a:	2002      	movs	r0, #2
 800411c:	f7fc fc2e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004120:	2000      	movs	r0, #0
 8004122:	f7fc fc2b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004126:	2029      	movs	r0, #41	@ 0x29
 8004128:	f7fc fc28 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800412c:	2000      	movs	r0, #0
 800412e:	e003      	b.n	8004138 <lcd_init+0x2540>
 8004130:	40011000 	.word	0x40011000
 8004134:	40010c00 	.word	0x40010c00
 8004138:	f7fc fc20 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800413c:	203c      	movs	r0, #60	@ 0x3c
 800413e:	f7fc fc1d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004142:	2000      	movs	r0, #0
 8004144:	f7fc fc1a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8004148:	204b      	movs	r0, #75	@ 0x4b
 800414a:	f7fc fc17 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800414e:	2000      	movs	r0, #0
 8004150:	f7fc fc14 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8004154:	205d      	movs	r0, #93	@ 0x5d
 8004156:	f7fc fc11 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800415a:	2000      	movs	r0, #0
 800415c:	f7fc fc0e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004160:	2074      	movs	r0, #116	@ 0x74
 8004162:	f7fc fc0b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004166:	2000      	movs	r0, #0
 8004168:	f7fc fc08 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 800416c:	2084      	movs	r0, #132	@ 0x84
 800416e:	f7fc fc05 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004172:	2000      	movs	r0, #0
 8004174:	f7fc fc02 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8004178:	2093      	movs	r0, #147	@ 0x93
 800417a:	f7fc fbff 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800417e:	2000      	movs	r0, #0
 8004180:	f7fc fbfc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004184:	20a2      	movs	r0, #162	@ 0xa2
 8004186:	f7fc fbf9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800418a:	2000      	movs	r0, #0
 800418c:	f7fc fbf6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004190:	20b3      	movs	r0, #179	@ 0xb3
 8004192:	f7fc fbf3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004196:	2000      	movs	r0, #0
 8004198:	f7fc fbf0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 800419c:	20be      	movs	r0, #190	@ 0xbe
 800419e:	f7fc fbed 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041a2:	2000      	movs	r0, #0
 80041a4:	f7fc fbea 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80041a8:	20c4      	movs	r0, #196	@ 0xc4
 80041aa:	f7fc fbe7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7fc fbe4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 80041b4:	20cd      	movs	r0, #205	@ 0xcd
 80041b6:	f7fc fbe1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ba:	2000      	movs	r0, #0
 80041bc:	f7fc fbde 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 80041c0:	20d3      	movs	r0, #211	@ 0xd3
 80041c2:	f7fc fbdb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7fc fbd8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80041cc:	20dc      	movs	r0, #220	@ 0xdc
 80041ce:	f7fc fbd5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fc fbd2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80041d8:	20f3      	movs	r0, #243	@ 0xf3
 80041da:	f7fc fbcf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fc fbcc 	bl	800097c <lcd_wr_xdata>
 80041e4:	23e6      	movs	r3, #230	@ 0xe6
 80041e6:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80041ea:	4bde      	ldr	r3, [pc, #888]	@ (8004564 <lcd_init+0x296c>)
 80041ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80041f2:	4bdc      	ldr	r3, [pc, #880]	@ (8004564 <lcd_init+0x296c>)
 80041f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80041fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80041fe:	b29a      	uxth	r2, r3
 8004200:	4bd9      	ldr	r3, [pc, #868]	@ (8004568 <lcd_init+0x2970>)
 8004202:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004204:	4bd7      	ldr	r3, [pc, #860]	@ (8004564 <lcd_init+0x296c>)
 8004206:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800420a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800420c:	4bd5      	ldr	r3, [pc, #852]	@ (8004564 <lcd_init+0x296c>)
 800420e:	2280      	movs	r2, #128	@ 0x80
 8004210:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004212:	4bd4      	ldr	r3, [pc, #848]	@ (8004564 <lcd_init+0x296c>)
 8004214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004218:	611a      	str	r2, [r3, #16]
}
 800421a:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 800421c:	2011      	movs	r0, #17
 800421e:	f7fc fbad 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004222:	2000      	movs	r0, #0
 8004224:	f7fc fbaa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004228:	2034      	movs	r0, #52	@ 0x34
 800422a:	f7fc fba7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800422e:	2000      	movs	r0, #0
 8004230:	f7fc fba4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004234:	2056      	movs	r0, #86	@ 0x56
 8004236:	f7fc fba1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800423a:	2000      	movs	r0, #0
 800423c:	f7fc fb9e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8004240:	2076      	movs	r0, #118	@ 0x76
 8004242:	f7fc fb9b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004246:	2000      	movs	r0, #0
 8004248:	f7fc fb98 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800424c:	2077      	movs	r0, #119	@ 0x77
 800424e:	f7fc fb95 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004252:	2000      	movs	r0, #0
 8004254:	f7fc fb92 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004258:	2066      	movs	r0, #102	@ 0x66
 800425a:	f7fc fb8f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800425e:	2000      	movs	r0, #0
 8004260:	f7fc fb8c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004264:	2088      	movs	r0, #136	@ 0x88
 8004266:	f7fc fb89 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800426a:	2000      	movs	r0, #0
 800426c:	f7fc fb86 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004270:	2099      	movs	r0, #153	@ 0x99
 8004272:	f7fc fb83 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004276:	2000      	movs	r0, #0
 8004278:	f7fc fb80 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 800427c:	20bb      	movs	r0, #187	@ 0xbb
 800427e:	f7fc fb7d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004282:	2000      	movs	r0, #0
 8004284:	f7fc fb7a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004288:	2099      	movs	r0, #153	@ 0x99
 800428a:	f7fc fb77 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800428e:	2000      	movs	r0, #0
 8004290:	f7fc fb74 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004294:	2066      	movs	r0, #102	@ 0x66
 8004296:	f7fc fb71 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800429a:	2000      	movs	r0, #0
 800429c:	f7fc fb6e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80042a0:	2055      	movs	r0, #85	@ 0x55
 80042a2:	f7fc fb6b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042a6:	2000      	movs	r0, #0
 80042a8:	f7fc fb68 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80042ac:	2055      	movs	r0, #85	@ 0x55
 80042ae:	f7fc fb65 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042b2:	2000      	movs	r0, #0
 80042b4:	f7fc fb62 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80042b8:	2045      	movs	r0, #69	@ 0x45
 80042ba:	f7fc fb5f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042be:	2000      	movs	r0, #0
 80042c0:	f7fc fb5c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 80042c4:	2043      	movs	r0, #67	@ 0x43
 80042c6:	f7fc fb59 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7fc fb56 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80042d0:	2044      	movs	r0, #68	@ 0x44
 80042d2:	f7fc fb53 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7fc fb50 	bl	800097c <lcd_wr_xdata>
 80042dc:	23e7      	movs	r3, #231	@ 0xe7
 80042de:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80042e2:	4ba0      	ldr	r3, [pc, #640]	@ (8004564 <lcd_init+0x296c>)
 80042e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80042ea:	4b9e      	ldr	r3, [pc, #632]	@ (8004564 <lcd_init+0x296c>)
 80042ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80042f2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	4b9b      	ldr	r3, [pc, #620]	@ (8004568 <lcd_init+0x2970>)
 80042fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80042fc:	4b99      	ldr	r3, [pc, #612]	@ (8004564 <lcd_init+0x296c>)
 80042fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004302:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004304:	4b97      	ldr	r3, [pc, #604]	@ (8004564 <lcd_init+0x296c>)
 8004306:	2280      	movs	r2, #128	@ 0x80
 8004308:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800430a:	4b96      	ldr	r3, [pc, #600]	@ (8004564 <lcd_init+0x296c>)
 800430c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004310:	611a      	str	r2, [r3, #16]
}
 8004312:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 8004314:	2032      	movs	r0, #50	@ 0x32
 8004316:	f7fc fb31 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800431a:	2000      	movs	r0, #0
 800431c:	f7fc fb2e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004320:	2055      	movs	r0, #85	@ 0x55
 8004322:	f7fc fb2b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004326:	2000      	movs	r0, #0
 8004328:	f7fc fb28 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 800432c:	2076      	movs	r0, #118	@ 0x76
 800432e:	f7fc fb25 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004332:	2000      	movs	r0, #0
 8004334:	f7fc fb22 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004338:	2066      	movs	r0, #102	@ 0x66
 800433a:	f7fc fb1f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800433e:	2000      	movs	r0, #0
 8004340:	f7fc fb1c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004344:	2067      	movs	r0, #103	@ 0x67
 8004346:	f7fc fb19 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800434a:	2000      	movs	r0, #0
 800434c:	f7fc fb16 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004350:	2067      	movs	r0, #103	@ 0x67
 8004352:	f7fc fb13 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004356:	2000      	movs	r0, #0
 8004358:	f7fc fb10 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 800435c:	2087      	movs	r0, #135	@ 0x87
 800435e:	f7fc fb0d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004362:	2000      	movs	r0, #0
 8004364:	f7fc fb0a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004368:	2099      	movs	r0, #153	@ 0x99
 800436a:	f7fc fb07 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800436e:	2000      	movs	r0, #0
 8004370:	f7fc fb04 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004374:	20bb      	movs	r0, #187	@ 0xbb
 8004376:	f7fc fb01 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800437a:	2000      	movs	r0, #0
 800437c:	f7fc fafe 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004380:	2099      	movs	r0, #153	@ 0x99
 8004382:	f7fc fafb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004386:	2000      	movs	r0, #0
 8004388:	f7fc faf8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800438c:	2077      	movs	r0, #119	@ 0x77
 800438e:	f7fc faf5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004392:	2000      	movs	r0, #0
 8004394:	f7fc faf2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004398:	2044      	movs	r0, #68	@ 0x44
 800439a:	f7fc faef 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800439e:	2000      	movs	r0, #0
 80043a0:	f7fc faec 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80043a4:	2056      	movs	r0, #86	@ 0x56
 80043a6:	f7fc fae9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7fc fae6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80043b0:	2023      	movs	r0, #35	@ 0x23
 80043b2:	f7fc fae3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7fc fae0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 80043bc:	2033      	movs	r0, #51	@ 0x33
 80043be:	f7fc fadd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043c2:	2000      	movs	r0, #0
 80043c4:	f7fc fada 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80043c8:	2045      	movs	r0, #69	@ 0x45
 80043ca:	f7fc fad7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7fc fad4 	bl	800097c <lcd_wr_xdata>
 80043d4:	23e8      	movs	r3, #232	@ 0xe8
 80043d6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80043da:	4b62      	ldr	r3, [pc, #392]	@ (8004564 <lcd_init+0x296c>)
 80043dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80043e2:	4b60      	ldr	r3, [pc, #384]	@ (8004564 <lcd_init+0x296c>)
 80043e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80043ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	4b5d      	ldr	r3, [pc, #372]	@ (8004568 <lcd_init+0x2970>)
 80043f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80043f4:	4b5b      	ldr	r3, [pc, #364]	@ (8004564 <lcd_init+0x296c>)
 80043f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80043fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80043fc:	4b59      	ldr	r3, [pc, #356]	@ (8004564 <lcd_init+0x296c>)
 80043fe:	2280      	movs	r2, #128	@ 0x80
 8004400:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004402:	4b58      	ldr	r3, [pc, #352]	@ (8004564 <lcd_init+0x296c>)
 8004404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004408:	611a      	str	r2, [r3, #16]
}
 800440a:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 800440c:	2000      	movs	r0, #0
 800440e:	f7fc fab5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004412:	2000      	movs	r0, #0
 8004414:	f7fc fab2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004418:	2099      	movs	r0, #153	@ 0x99
 800441a:	f7fc faaf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800441e:	2000      	movs	r0, #0
 8004420:	f7fc faac 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 8004424:	2087      	movs	r0, #135	@ 0x87
 8004426:	f7fc faa9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800442a:	2000      	movs	r0, #0
 800442c:	f7fc faa6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004430:	2088      	movs	r0, #136	@ 0x88
 8004432:	f7fc faa3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004436:	2000      	movs	r0, #0
 8004438:	f7fc faa0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800443c:	2077      	movs	r0, #119	@ 0x77
 800443e:	f7fc fa9d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004442:	2000      	movs	r0, #0
 8004444:	f7fc fa9a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004448:	2066      	movs	r0, #102	@ 0x66
 800444a:	f7fc fa97 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800444e:	2000      	movs	r0, #0
 8004450:	f7fc fa94 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004454:	2088      	movs	r0, #136	@ 0x88
 8004456:	f7fc fa91 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800445a:	2000      	movs	r0, #0
 800445c:	f7fc fa8e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 8004460:	20aa      	movs	r0, #170	@ 0xaa
 8004462:	f7fc fa8b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004466:	2000      	movs	r0, #0
 8004468:	f7fc fa88 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 800446c:	20bb      	movs	r0, #187	@ 0xbb
 800446e:	f7fc fa85 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004472:	2000      	movs	r0, #0
 8004474:	f7fc fa82 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004478:	2099      	movs	r0, #153	@ 0x99
 800447a:	f7fc fa7f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800447e:	2000      	movs	r0, #0
 8004480:	f7fc fa7c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004484:	2066      	movs	r0, #102	@ 0x66
 8004486:	f7fc fa79 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800448a:	2000      	movs	r0, #0
 800448c:	f7fc fa76 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004490:	2055      	movs	r0, #85	@ 0x55
 8004492:	f7fc fa73 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004496:	2000      	movs	r0, #0
 8004498:	f7fc fa70 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 800449c:	2055      	movs	r0, #85	@ 0x55
 800449e:	f7fc fa6d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044a2:	2000      	movs	r0, #0
 80044a4:	f7fc fa6a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80044a8:	2044      	movs	r0, #68	@ 0x44
 80044aa:	f7fc fa67 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7fc fa64 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80044b4:	2044      	movs	r0, #68	@ 0x44
 80044b6:	f7fc fa61 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ba:	2000      	movs	r0, #0
 80044bc:	f7fc fa5e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80044c0:	2055      	movs	r0, #85	@ 0x55
 80044c2:	f7fc fa5b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7fc fa58 	bl	800097c <lcd_wr_xdata>
 80044cc:	23e9      	movs	r3, #233	@ 0xe9
 80044ce:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80044d2:	4b24      	ldr	r3, [pc, #144]	@ (8004564 <lcd_init+0x296c>)
 80044d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044d8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80044da:	4b22      	ldr	r3, [pc, #136]	@ (8004564 <lcd_init+0x296c>)
 80044dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044e0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80044e2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004568 <lcd_init+0x2970>)
 80044ea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80044ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <lcd_init+0x296c>)
 80044ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044f2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80044f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <lcd_init+0x296c>)
 80044f6:	2280      	movs	r2, #128	@ 0x80
 80044f8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80044fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004564 <lcd_init+0x296c>)
 80044fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004500:	611a      	str	r2, [r3, #16]
}
 8004502:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 8004504:	20aa      	movs	r0, #170	@ 0xaa
 8004506:	f7fc fa39 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800450a:	2000      	movs	r0, #0
 800450c:	f7fc fa36 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004510:	2000      	movs	r0, #0
 8004512:	f7fc fa33 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004516:	2000      	movs	r0, #0
 8004518:	f7fc fa30 	bl	800097c <lcd_wr_xdata>
 800451c:	2300      	movs	r3, #0
 800451e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004522:	4b10      	ldr	r3, [pc, #64]	@ (8004564 <lcd_init+0x296c>)
 8004524:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004528:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800452a:	4b0e      	ldr	r3, [pc, #56]	@ (8004564 <lcd_init+0x296c>)
 800452c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004530:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004532:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004536:	b29a      	uxth	r2, r3
 8004538:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <lcd_init+0x2970>)
 800453a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800453c:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <lcd_init+0x296c>)
 800453e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004542:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004544:	4b07      	ldr	r3, [pc, #28]	@ (8004564 <lcd_init+0x296c>)
 8004546:	2280      	movs	r2, #128	@ 0x80
 8004548:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800454a:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <lcd_init+0x296c>)
 800454c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004550:	611a      	str	r2, [r3, #16]
}
 8004552:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 8004554:	20aa      	movs	r0, #170	@ 0xaa
 8004556:	f7fc fa11 	bl	800097c <lcd_wr_xdata>
 800455a:	23cf      	movs	r3, #207	@ 0xcf
 800455c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8004560:	e004      	b.n	800456c <lcd_init+0x2974>
 8004562:	bf00      	nop
 8004564:	40011000 	.word	0x40011000
 8004568:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800456c:	4bbc      	ldr	r3, [pc, #752]	@ (8004860 <lcd_init+0x2c68>)
 800456e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004572:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004574:	4bba      	ldr	r3, [pc, #744]	@ (8004860 <lcd_init+0x2c68>)
 8004576:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800457a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800457c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8004580:	b29a      	uxth	r2, r3
 8004582:	4bb8      	ldr	r3, [pc, #736]	@ (8004864 <lcd_init+0x2c6c>)
 8004584:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004586:	4bb6      	ldr	r3, [pc, #728]	@ (8004860 <lcd_init+0x2c68>)
 8004588:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800458c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800458e:	4bb4      	ldr	r3, [pc, #720]	@ (8004860 <lcd_init+0x2c68>)
 8004590:	2280      	movs	r2, #128	@ 0x80
 8004592:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004594:	4bb2      	ldr	r3, [pc, #712]	@ (8004860 <lcd_init+0x2c68>)
 8004596:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800459a:	611a      	str	r2, [r3, #16]
}
 800459c:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 800459e:	2000      	movs	r0, #0
 80045a0:	f7fc f9ec 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fc f9e9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045aa:	2000      	movs	r0, #0
 80045ac:	f7fc f9e6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7fc f9e3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7fc f9e0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045bc:	2000      	movs	r0, #0
 80045be:	f7fc f9dd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7fc f9da 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045c8:	2000      	movs	r0, #0
 80045ca:	f7fc f9d7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045ce:	2000      	movs	r0, #0
 80045d0:	f7fc f9d4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7fc f9d1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045da:	2000      	movs	r0, #0
 80045dc:	f7fc f9ce 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045e0:	2000      	movs	r0, #0
 80045e2:	f7fc f9cb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045e6:	2000      	movs	r0, #0
 80045e8:	f7fc f9c8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7fc f9c5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045f2:	2000      	movs	r0, #0
 80045f4:	f7fc f9c2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045f8:	2000      	movs	r0, #0
 80045fa:	f7fc f9bf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045fe:	2000      	movs	r0, #0
 8004600:	f7fc f9bc 	bl	800097c <lcd_wr_xdata>
 8004604:	23f0      	movs	r3, #240	@ 0xf0
 8004606:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800460a:	4b95      	ldr	r3, [pc, #596]	@ (8004860 <lcd_init+0x2c68>)
 800460c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004610:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004612:	4b93      	ldr	r3, [pc, #588]	@ (8004860 <lcd_init+0x2c68>)
 8004614:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004618:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800461a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800461e:	b29a      	uxth	r2, r3
 8004620:	4b90      	ldr	r3, [pc, #576]	@ (8004864 <lcd_init+0x2c6c>)
 8004622:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004624:	4b8e      	ldr	r3, [pc, #568]	@ (8004860 <lcd_init+0x2c68>)
 8004626:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800462a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800462c:	4b8c      	ldr	r3, [pc, #560]	@ (8004860 <lcd_init+0x2c68>)
 800462e:	2280      	movs	r2, #128	@ 0x80
 8004630:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004632:	4b8b      	ldr	r3, [pc, #556]	@ (8004860 <lcd_init+0x2c68>)
 8004634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004638:	611a      	str	r2, [r3, #16]
}
 800463a:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 800463c:	2000      	movs	r0, #0
 800463e:	f7fc f99d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8004642:	2050      	movs	r0, #80	@ 0x50
 8004644:	f7fc f99a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004648:	2000      	movs	r0, #0
 800464a:	f7fc f997 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800464e:	2000      	movs	r0, #0
 8004650:	f7fc f994 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004654:	2000      	movs	r0, #0
 8004656:	f7fc f991 	bl	800097c <lcd_wr_xdata>
 800465a:	23f3      	movs	r3, #243	@ 0xf3
 800465c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004660:	4b7f      	ldr	r3, [pc, #508]	@ (8004860 <lcd_init+0x2c68>)
 8004662:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004666:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004668:	4b7d      	ldr	r3, [pc, #500]	@ (8004860 <lcd_init+0x2c68>)
 800466a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800466e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004670:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004674:	b29a      	uxth	r2, r3
 8004676:	4b7b      	ldr	r3, [pc, #492]	@ (8004864 <lcd_init+0x2c6c>)
 8004678:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800467a:	4b79      	ldr	r3, [pc, #484]	@ (8004860 <lcd_init+0x2c68>)
 800467c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004680:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004682:	4b77      	ldr	r3, [pc, #476]	@ (8004860 <lcd_init+0x2c68>)
 8004684:	2280      	movs	r2, #128	@ 0x80
 8004686:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004688:	4b75      	ldr	r3, [pc, #468]	@ (8004860 <lcd_init+0x2c68>)
 800468a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800468e:	611a      	str	r2, [r3, #16]
}
 8004690:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 8004692:	2000      	movs	r0, #0
 8004694:	f7fc f972 	bl	800097c <lcd_wr_xdata>
 8004698:	23f9      	movs	r3, #249	@ 0xf9
 800469a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800469e:	4b70      	ldr	r3, [pc, #448]	@ (8004860 <lcd_init+0x2c68>)
 80046a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046a4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004860 <lcd_init+0x2c68>)
 80046a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046ac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	4b6b      	ldr	r3, [pc, #428]	@ (8004864 <lcd_init+0x2c6c>)
 80046b6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80046b8:	4b69      	ldr	r3, [pc, #420]	@ (8004860 <lcd_init+0x2c68>)
 80046ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046be:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80046c0:	4b67      	ldr	r3, [pc, #412]	@ (8004860 <lcd_init+0x2c68>)
 80046c2:	2280      	movs	r2, #128	@ 0x80
 80046c4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80046c6:	4b66      	ldr	r3, [pc, #408]	@ (8004860 <lcd_init+0x2c68>)
 80046c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046cc:	611a      	str	r2, [r3, #16]
}
 80046ce:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 80046d0:	2006      	movs	r0, #6
 80046d2:	f7fc f953 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80046d6:	2010      	movs	r0, #16
 80046d8:	f7fc f950 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80046dc:	2029      	movs	r0, #41	@ 0x29
 80046de:	f7fc f94d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fc f94a 	bl	800097c <lcd_wr_xdata>
 80046e8:	233a      	movs	r3, #58	@ 0x3a
 80046ea:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004860 <lcd_init+0x2c68>)
 80046f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046f4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004860 <lcd_init+0x2c68>)
 80046f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046fc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004702:	b29a      	uxth	r2, r3
 8004704:	4b57      	ldr	r3, [pc, #348]	@ (8004864 <lcd_init+0x2c6c>)
 8004706:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004708:	4b55      	ldr	r3, [pc, #340]	@ (8004860 <lcd_init+0x2c68>)
 800470a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800470e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004710:	4b53      	ldr	r3, [pc, #332]	@ (8004860 <lcd_init+0x2c68>)
 8004712:	2280      	movs	r2, #128	@ 0x80
 8004714:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004716:	4b52      	ldr	r3, [pc, #328]	@ (8004860 <lcd_init+0x2c68>)
 8004718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800471c:	611a      	str	r2, [r3, #16]
}
 800471e:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 8004720:	2055      	movs	r0, #85	@ 0x55
 8004722:	f7fc f92b 	bl	800097c <lcd_wr_xdata>
 8004726:	2311      	movs	r3, #17
 8004728:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800472c:	4b4c      	ldr	r3, [pc, #304]	@ (8004860 <lcd_init+0x2c68>)
 800472e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004732:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004734:	4b4a      	ldr	r3, [pc, #296]	@ (8004860 <lcd_init+0x2c68>)
 8004736:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800473a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800473c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004740:	b29a      	uxth	r2, r3
 8004742:	4b48      	ldr	r3, [pc, #288]	@ (8004864 <lcd_init+0x2c6c>)
 8004744:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004746:	4b46      	ldr	r3, [pc, #280]	@ (8004860 <lcd_init+0x2c68>)
 8004748:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800474c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800474e:	4b44      	ldr	r3, [pc, #272]	@ (8004860 <lcd_init+0x2c68>)
 8004750:	2280      	movs	r2, #128	@ 0x80
 8004752:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004754:	4b42      	ldr	r3, [pc, #264]	@ (8004860 <lcd_init+0x2c68>)
 8004756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800475a:	611a      	str	r2, [r3, #16]
}
 800475c:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 800475e:	2064      	movs	r0, #100	@ 0x64
 8004760:	f003 fa38 	bl	8007bd4 <HAL_Delay>
 8004764:	2329      	movs	r3, #41	@ 0x29
 8004766:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800476a:	4b3d      	ldr	r3, [pc, #244]	@ (8004860 <lcd_init+0x2c68>)
 800476c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004770:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004772:	4b3b      	ldr	r3, [pc, #236]	@ (8004860 <lcd_init+0x2c68>)
 8004774:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004778:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800477a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800477e:	b29a      	uxth	r2, r3
 8004780:	4b38      	ldr	r3, [pc, #224]	@ (8004864 <lcd_init+0x2c6c>)
 8004782:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004784:	4b36      	ldr	r3, [pc, #216]	@ (8004860 <lcd_init+0x2c68>)
 8004786:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800478a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800478c:	4b34      	ldr	r3, [pc, #208]	@ (8004860 <lcd_init+0x2c68>)
 800478e:	2280      	movs	r2, #128	@ 0x80
 8004790:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004792:	4b33      	ldr	r3, [pc, #204]	@ (8004860 <lcd_init+0x2c68>)
 8004794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004798:	611a      	str	r2, [r3, #16]
}
 800479a:	bf00      	nop
 800479c:	2335      	movs	r3, #53	@ 0x35
 800479e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004860 <lcd_init+0x2c68>)
 80047a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80047aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004860 <lcd_init+0x2c68>)
 80047ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80047b2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004864 <lcd_init+0x2c6c>)
 80047ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80047bc:	4b28      	ldr	r3, [pc, #160]	@ (8004860 <lcd_init+0x2c68>)
 80047be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80047c4:	4b26      	ldr	r3, [pc, #152]	@ (8004860 <lcd_init+0x2c68>)
 80047c6:	2280      	movs	r2, #128	@ 0x80
 80047c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047ca:	4b25      	ldr	r3, [pc, #148]	@ (8004860 <lcd_init+0x2c68>)
 80047cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d0:	611a      	str	r2, [r3, #16]
}
 80047d2:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 80047d4:	2000      	movs	r0, #0
 80047d6:	f7fc f8d1 	bl	800097c <lcd_wr_xdata>
 80047da:	2351      	movs	r3, #81	@ 0x51
 80047dc:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004860 <lcd_init+0x2c68>)
 80047e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80047e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004860 <lcd_init+0x2c68>)
 80047ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80047f0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <lcd_init+0x2c6c>)
 80047f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80047fa:	4b19      	ldr	r3, [pc, #100]	@ (8004860 <lcd_init+0x2c68>)
 80047fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004800:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004802:	4b17      	ldr	r3, [pc, #92]	@ (8004860 <lcd_init+0x2c68>)
 8004804:	2280      	movs	r2, #128	@ 0x80
 8004806:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004808:	4b15      	ldr	r3, [pc, #84]	@ (8004860 <lcd_init+0x2c68>)
 800480a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800480e:	611a      	str	r2, [r3, #16]
}
 8004810:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 8004812:	20ff      	movs	r0, #255	@ 0xff
 8004814:	f7fc f8b2 	bl	800097c <lcd_wr_xdata>
 8004818:	2353      	movs	r3, #83	@ 0x53
 800481a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800481e:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <lcd_init+0x2c68>)
 8004820:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004824:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004826:	4b0e      	ldr	r3, [pc, #56]	@ (8004860 <lcd_init+0x2c68>)
 8004828:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800482c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800482e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004832:	b29a      	uxth	r2, r3
 8004834:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <lcd_init+0x2c6c>)
 8004836:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004838:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <lcd_init+0x2c68>)
 800483a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800483e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004840:	4b07      	ldr	r3, [pc, #28]	@ (8004860 <lcd_init+0x2c68>)
 8004842:	2280      	movs	r2, #128	@ 0x80
 8004844:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <lcd_init+0x2c68>)
 8004848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800484c:	611a      	str	r2, [r3, #16]
}
 800484e:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 8004850:	202c      	movs	r0, #44	@ 0x2c
 8004852:	f7fc f893 	bl	800097c <lcd_wr_xdata>
 8004856:	2355      	movs	r3, #85	@ 0x55
 8004858:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 800485c:	e004      	b.n	8004868 <lcd_init+0x2c70>
 800485e:	bf00      	nop
 8004860:	40011000 	.word	0x40011000
 8004864:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004868:	4b1c      	ldr	r3, [pc, #112]	@ (80048dc <lcd_init+0x2ce4>)
 800486a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800486e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004870:	4b1a      	ldr	r3, [pc, #104]	@ (80048dc <lcd_init+0x2ce4>)
 8004872:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004876:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004878:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800487c:	b29a      	uxth	r2, r3
 800487e:	4b18      	ldr	r3, [pc, #96]	@ (80048e0 <lcd_init+0x2ce8>)
 8004880:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004882:	4b16      	ldr	r3, [pc, #88]	@ (80048dc <lcd_init+0x2ce4>)
 8004884:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004888:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800488a:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <lcd_init+0x2ce4>)
 800488c:	2280      	movs	r2, #128	@ 0x80
 800488e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004890:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <lcd_init+0x2ce4>)
 8004892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004896:	611a      	str	r2, [r3, #16]
}
 8004898:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 800489a:	2082      	movs	r0, #130	@ 0x82
 800489c:	f7fc f86e 	bl	800097c <lcd_wr_xdata>
 80048a0:	232c      	movs	r3, #44	@ 0x2c
 80048a2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048a6:	4b0d      	ldr	r3, [pc, #52]	@ (80048dc <lcd_init+0x2ce4>)
 80048a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048ac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80048ae:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <lcd_init+0x2ce4>)
 80048b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048b4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80048b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	4b08      	ldr	r3, [pc, #32]	@ (80048e0 <lcd_init+0x2ce8>)
 80048be:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <lcd_init+0x2ce4>)
 80048c2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048c6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048c8:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <lcd_init+0x2ce4>)
 80048ca:	2280      	movs	r2, #128	@ 0x80
 80048cc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048ce:	4b03      	ldr	r3, [pc, #12]	@ (80048dc <lcd_init+0x2ce4>)
 80048d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048d4:	611a      	str	r2, [r3, #16]
}
 80048d6:	f002 b8d8 	b.w	8006a8a <lcd_init+0x4e92>
 80048da:	bf00      	nop
 80048dc:	40011000 	.word	0x40011000
 80048e0:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 80048e4:	4bb4      	ldr	r3, [pc, #720]	@ (8004bb8 <lcd_init+0x2fc0>)
 80048e6:	889b      	ldrh	r3, [r3, #4]
 80048e8:	f247 7296 	movw	r2, #30614	@ 0x7796
 80048ec:	4293      	cmp	r3, r2
 80048ee:	f040 82e3 	bne.w	8004eb8 <lcd_init+0x32c0>
 80048f2:	2311      	movs	r3, #17
 80048f4:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048f8:	4bb0      	ldr	r3, [pc, #704]	@ (8004bbc <lcd_init+0x2fc4>)
 80048fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048fe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004900:	4bae      	ldr	r3, [pc, #696]	@ (8004bbc <lcd_init+0x2fc4>)
 8004902:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004906:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004908:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 800490c:	b29a      	uxth	r2, r3
 800490e:	4bac      	ldr	r3, [pc, #688]	@ (8004bc0 <lcd_init+0x2fc8>)
 8004910:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004912:	4baa      	ldr	r3, [pc, #680]	@ (8004bbc <lcd_init+0x2fc4>)
 8004914:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004918:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800491a:	4ba8      	ldr	r3, [pc, #672]	@ (8004bbc <lcd_init+0x2fc4>)
 800491c:	2280      	movs	r2, #128	@ 0x80
 800491e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004920:	4ba6      	ldr	r3, [pc, #664]	@ (8004bbc <lcd_init+0x2fc4>)
 8004922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004926:	611a      	str	r2, [r3, #16]
}
 8004928:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800492a:	2078      	movs	r0, #120	@ 0x78
 800492c:	f003 f952 	bl	8007bd4 <HAL_Delay>
 8004930:	2336      	movs	r3, #54	@ 0x36
 8004932:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004936:	4ba1      	ldr	r3, [pc, #644]	@ (8004bbc <lcd_init+0x2fc4>)
 8004938:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800493c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800493e:	4b9f      	ldr	r3, [pc, #636]	@ (8004bbc <lcd_init+0x2fc4>)
 8004940:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004944:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004946:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 800494a:	b29a      	uxth	r2, r3
 800494c:	4b9c      	ldr	r3, [pc, #624]	@ (8004bc0 <lcd_init+0x2fc8>)
 800494e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004950:	4b9a      	ldr	r3, [pc, #616]	@ (8004bbc <lcd_init+0x2fc4>)
 8004952:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004956:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004958:	4b98      	ldr	r3, [pc, #608]	@ (8004bbc <lcd_init+0x2fc4>)
 800495a:	2280      	movs	r2, #128	@ 0x80
 800495c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800495e:	4b97      	ldr	r3, [pc, #604]	@ (8004bbc <lcd_init+0x2fc4>)
 8004960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004964:	611a      	str	r2, [r3, #16]
}
 8004966:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 8004968:	2048      	movs	r0, #72	@ 0x48
 800496a:	f7fc f807 	bl	800097c <lcd_wr_xdata>
 800496e:	233a      	movs	r3, #58	@ 0x3a
 8004970:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004974:	4b91      	ldr	r3, [pc, #580]	@ (8004bbc <lcd_init+0x2fc4>)
 8004976:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800497a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800497c:	4b8f      	ldr	r3, [pc, #572]	@ (8004bbc <lcd_init+0x2fc4>)
 800497e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004982:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004984:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8004988:	b29a      	uxth	r2, r3
 800498a:	4b8d      	ldr	r3, [pc, #564]	@ (8004bc0 <lcd_init+0x2fc8>)
 800498c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800498e:	4b8b      	ldr	r3, [pc, #556]	@ (8004bbc <lcd_init+0x2fc4>)
 8004990:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004994:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004996:	4b89      	ldr	r3, [pc, #548]	@ (8004bbc <lcd_init+0x2fc4>)
 8004998:	2280      	movs	r2, #128	@ 0x80
 800499a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800499c:	4b87      	ldr	r3, [pc, #540]	@ (8004bbc <lcd_init+0x2fc4>)
 800499e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049a2:	611a      	str	r2, [r3, #16]
}
 80049a4:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 80049a6:	2055      	movs	r0, #85	@ 0x55
 80049a8:	f7fb ffe8 	bl	800097c <lcd_wr_xdata>
 80049ac:	23f0      	movs	r3, #240	@ 0xf0
 80049ae:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049b2:	4b82      	ldr	r3, [pc, #520]	@ (8004bbc <lcd_init+0x2fc4>)
 80049b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80049ba:	4b80      	ldr	r3, [pc, #512]	@ (8004bbc <lcd_init+0x2fc4>)
 80049bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80049c2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	4b7d      	ldr	r3, [pc, #500]	@ (8004bc0 <lcd_init+0x2fc8>)
 80049ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049cc:	4b7b      	ldr	r3, [pc, #492]	@ (8004bbc <lcd_init+0x2fc4>)
 80049ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049d4:	4b79      	ldr	r3, [pc, #484]	@ (8004bbc <lcd_init+0x2fc4>)
 80049d6:	2280      	movs	r2, #128	@ 0x80
 80049d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049da:	4b78      	ldr	r3, [pc, #480]	@ (8004bbc <lcd_init+0x2fc4>)
 80049dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049e0:	611a      	str	r2, [r3, #16]
}
 80049e2:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 80049e4:	20c3      	movs	r0, #195	@ 0xc3
 80049e6:	f7fb ffc9 	bl	800097c <lcd_wr_xdata>
 80049ea:	23f0      	movs	r3, #240	@ 0xf0
 80049ec:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049f0:	4b72      	ldr	r3, [pc, #456]	@ (8004bbc <lcd_init+0x2fc4>)
 80049f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80049f8:	4b70      	ldr	r3, [pc, #448]	@ (8004bbc <lcd_init+0x2fc4>)
 80049fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a00:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	4b6e      	ldr	r3, [pc, #440]	@ (8004bc0 <lcd_init+0x2fc8>)
 8004a08:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a10:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a12:	4b6a      	ldr	r3, [pc, #424]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a14:	2280      	movs	r2, #128	@ 0x80
 8004a16:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a18:	4b68      	ldr	r3, [pc, #416]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a1e:	611a      	str	r2, [r3, #16]
}
 8004a20:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 8004a22:	2096      	movs	r0, #150	@ 0x96
 8004a24:	f7fb ffaa 	bl	800097c <lcd_wr_xdata>
 8004a28:	23b4      	movs	r3, #180	@ 0xb4
 8004a2a:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a2e:	4b63      	ldr	r3, [pc, #396]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a34:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a36:	4b61      	ldr	r3, [pc, #388]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a3c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a3e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	4b5e      	ldr	r3, [pc, #376]	@ (8004bc0 <lcd_init+0x2fc8>)
 8004a46:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a48:	4b5c      	ldr	r3, [pc, #368]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a4a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a4e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a50:	4b5a      	ldr	r3, [pc, #360]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a52:	2280      	movs	r2, #128	@ 0x80
 8004a54:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a56:	4b59      	ldr	r3, [pc, #356]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a5c:	611a      	str	r2, [r3, #16]
}
 8004a5e:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 8004a60:	2001      	movs	r0, #1
 8004a62:	f7fb ff8b 	bl	800097c <lcd_wr_xdata>
 8004a66:	23b6      	movs	r3, #182	@ 0xb6
 8004a68:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a6c:	4b53      	ldr	r3, [pc, #332]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a72:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a74:	4b51      	ldr	r3, [pc, #324]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a7a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a7c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	4b4f      	ldr	r3, [pc, #316]	@ (8004bc0 <lcd_init+0x2fc8>)
 8004a84:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a86:	4b4d      	ldr	r3, [pc, #308]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a8c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a90:	2280      	movs	r2, #128	@ 0x80
 8004a92:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a94:	4b49      	ldr	r3, [pc, #292]	@ (8004bbc <lcd_init+0x2fc4>)
 8004a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a9a:	611a      	str	r2, [r3, #16]
}
 8004a9c:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 8004a9e:	200a      	movs	r0, #10
 8004aa0:	f7fb ff6c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004aa4:	20a2      	movs	r0, #162	@ 0xa2
 8004aa6:	f7fb ff69 	bl	800097c <lcd_wr_xdata>
 8004aaa:	23b7      	movs	r3, #183	@ 0xb7
 8004aac:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ab0:	4b42      	ldr	r3, [pc, #264]	@ (8004bbc <lcd_init+0x2fc4>)
 8004ab2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ab6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ab8:	4b40      	ldr	r3, [pc, #256]	@ (8004bbc <lcd_init+0x2fc4>)
 8004aba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004abe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ac0:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc0 <lcd_init+0x2fc8>)
 8004ac8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004aca:	4b3c      	ldr	r3, [pc, #240]	@ (8004bbc <lcd_init+0x2fc4>)
 8004acc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ad0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8004bbc <lcd_init+0x2fc4>)
 8004ad4:	2280      	movs	r2, #128	@ 0x80
 8004ad6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ad8:	4b38      	ldr	r3, [pc, #224]	@ (8004bbc <lcd_init+0x2fc4>)
 8004ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ade:	611a      	str	r2, [r3, #16]
}
 8004ae0:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 8004ae2:	20c6      	movs	r0, #198	@ 0xc6
 8004ae4:	f7fb ff4a 	bl	800097c <lcd_wr_xdata>
 8004ae8:	23b9      	movs	r3, #185	@ 0xb9
 8004aea:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004aee:	4b33      	ldr	r3, [pc, #204]	@ (8004bbc <lcd_init+0x2fc4>)
 8004af0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004af4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004af6:	4b31      	ldr	r3, [pc, #196]	@ (8004bbc <lcd_init+0x2fc4>)
 8004af8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004afc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004afe:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc0 <lcd_init+0x2fc8>)
 8004b06:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b08:	4b2c      	ldr	r3, [pc, #176]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b0e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b10:	4b2a      	ldr	r3, [pc, #168]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b12:	2280      	movs	r2, #128	@ 0x80
 8004b14:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b16:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b1c:	611a      	str	r2, [r3, #16]
}
 8004b1e:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8004b20:	2002      	movs	r0, #2
 8004b22:	f7fb ff2b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8004b26:	20e0      	movs	r0, #224	@ 0xe0
 8004b28:	f7fb ff28 	bl	800097c <lcd_wr_xdata>
 8004b2c:	23c0      	movs	r3, #192	@ 0xc0
 8004b2e:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b32:	4b22      	ldr	r3, [pc, #136]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b38:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b3a:	4b20      	ldr	r3, [pc, #128]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b40:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b42:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc0 <lcd_init+0x2fc8>)
 8004b4a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b52:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b54:	4b19      	ldr	r3, [pc, #100]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b56:	2280      	movs	r2, #128	@ 0x80
 8004b58:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b5a:	4b18      	ldr	r3, [pc, #96]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b60:	611a      	str	r2, [r3, #16]
}
 8004b62:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 8004b64:	2080      	movs	r0, #128	@ 0x80
 8004b66:	f7fb ff09 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 8004b6a:	2016      	movs	r0, #22
 8004b6c:	f7fb ff06 	bl	800097c <lcd_wr_xdata>
 8004b70:	23c1      	movs	r3, #193	@ 0xc1
 8004b72:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b76:	4b11      	ldr	r3, [pc, #68]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b7c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b84:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b86:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <lcd_init+0x2fc8>)
 8004b8e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b90:	4b0a      	ldr	r3, [pc, #40]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b92:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b96:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b98:	4b08      	ldr	r3, [pc, #32]	@ (8004bbc <lcd_init+0x2fc4>)
 8004b9a:	2280      	movs	r2, #128	@ 0x80
 8004b9c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b9e:	4b07      	ldr	r3, [pc, #28]	@ (8004bbc <lcd_init+0x2fc4>)
 8004ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba4:	611a      	str	r2, [r3, #16]
}
 8004ba6:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 8004ba8:	2019      	movs	r0, #25
 8004baa:	f7fb fee7 	bl	800097c <lcd_wr_xdata>
 8004bae:	23c2      	movs	r3, #194	@ 0xc2
 8004bb0:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
 8004bb4:	e006      	b.n	8004bc4 <lcd_init+0x2fcc>
 8004bb6:	bf00      	nop
 8004bb8:	20002ab8 	.word	0x20002ab8
 8004bbc:	40011000 	.word	0x40011000
 8004bc0:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004bc4:	4bba      	ldr	r3, [pc, #744]	@ (8004eb0 <lcd_init+0x32b8>)
 8004bc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004bcc:	4bb8      	ldr	r3, [pc, #736]	@ (8004eb0 <lcd_init+0x32b8>)
 8004bce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bd2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004bd4:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	4bb6      	ldr	r3, [pc, #728]	@ (8004eb4 <lcd_init+0x32bc>)
 8004bdc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004bde:	4bb4      	ldr	r3, [pc, #720]	@ (8004eb0 <lcd_init+0x32b8>)
 8004be0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004be4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004be6:	4bb2      	ldr	r3, [pc, #712]	@ (8004eb0 <lcd_init+0x32b8>)
 8004be8:	2280      	movs	r2, #128	@ 0x80
 8004bea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004bec:	4bb0      	ldr	r3, [pc, #704]	@ (8004eb0 <lcd_init+0x32b8>)
 8004bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf2:	611a      	str	r2, [r3, #16]
}
 8004bf4:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 8004bf6:	20a7      	movs	r0, #167	@ 0xa7
 8004bf8:	f7fb fec0 	bl	800097c <lcd_wr_xdata>
 8004bfc:	23c5      	movs	r3, #197	@ 0xc5
 8004bfe:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c02:	4bab      	ldr	r3, [pc, #684]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c08:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c0a:	4ba9      	ldr	r3, [pc, #676]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c10:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c12:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	4ba6      	ldr	r3, [pc, #664]	@ (8004eb4 <lcd_init+0x32bc>)
 8004c1a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c1c:	4ba4      	ldr	r3, [pc, #656]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c1e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c22:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c24:	4ba2      	ldr	r3, [pc, #648]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c2a:	4ba1      	ldr	r3, [pc, #644]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c30:	611a      	str	r2, [r3, #16]
}
 8004c32:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 8004c34:	2016      	movs	r0, #22
 8004c36:	f7fb fea1 	bl	800097c <lcd_wr_xdata>
 8004c3a:	23e8      	movs	r3, #232	@ 0xe8
 8004c3c:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c40:	4b9b      	ldr	r3, [pc, #620]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c46:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c48:	4b99      	ldr	r3, [pc, #612]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c4e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c50:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	4b97      	ldr	r3, [pc, #604]	@ (8004eb4 <lcd_init+0x32bc>)
 8004c58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c5a:	4b95      	ldr	r3, [pc, #596]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c62:	4b93      	ldr	r3, [pc, #588]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c64:	2280      	movs	r2, #128	@ 0x80
 8004c66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c68:	4b91      	ldr	r3, [pc, #580]	@ (8004eb0 <lcd_init+0x32b8>)
 8004c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c6e:	611a      	str	r2, [r3, #16]
}
 8004c70:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 8004c72:	2040      	movs	r0, #64	@ 0x40
 8004c74:	f7fb fe82 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 8004c78:	208a      	movs	r0, #138	@ 0x8a
 8004c7a:	f7fb fe7f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f7fb fe7c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c84:	2000      	movs	r0, #0
 8004c86:	f7fb fe79 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004c8a:	2029      	movs	r0, #41	@ 0x29
 8004c8c:	f7fb fe76 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8004c90:	2019      	movs	r0, #25
 8004c92:	f7fb fe73 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 8004c96:	20a5      	movs	r0, #165	@ 0xa5
 8004c98:	f7fb fe70 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004c9c:	2033      	movs	r0, #51	@ 0x33
 8004c9e:	f7fb fe6d 	bl	800097c <lcd_wr_xdata>
 8004ca2:	23e0      	movs	r3, #224	@ 0xe0
 8004ca4:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ca8:	4b81      	ldr	r3, [pc, #516]	@ (8004eb0 <lcd_init+0x32b8>)
 8004caa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004cb0:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb0 <lcd_init+0x32b8>)
 8004cb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004cb8:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb4 <lcd_init+0x32bc>)
 8004cc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cc2:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb0 <lcd_init+0x32b8>)
 8004cc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cca:	4b79      	ldr	r3, [pc, #484]	@ (8004eb0 <lcd_init+0x32b8>)
 8004ccc:	2280      	movs	r2, #128	@ 0x80
 8004cce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004cd0:	4b77      	ldr	r3, [pc, #476]	@ (8004eb0 <lcd_init+0x32b8>)
 8004cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cd6:	611a      	str	r2, [r3, #16]
}
 8004cd8:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 8004cda:	20f0      	movs	r0, #240	@ 0xf0
 8004cdc:	f7fb fe4e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8004ce0:	2007      	movs	r0, #7
 8004ce2:	f7fb fe4b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8004ce6:	200d      	movs	r0, #13
 8004ce8:	f7fb fe48 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8004cec:	2004      	movs	r0, #4
 8004cee:	f7fb fe45 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8004cf2:	2005      	movs	r0, #5
 8004cf4:	f7fb fe42 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004cf8:	2014      	movs	r0, #20
 8004cfa:	f7fb fe3f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004cfe:	2036      	movs	r0, #54	@ 0x36
 8004d00:	f7fb fe3c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8004d04:	2054      	movs	r0, #84	@ 0x54
 8004d06:	f7fb fe39 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004d0a:	204c      	movs	r0, #76	@ 0x4c
 8004d0c:	f7fb fe36 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8004d10:	2038      	movs	r0, #56	@ 0x38
 8004d12:	f7fb fe33 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8004d16:	2013      	movs	r0, #19
 8004d18:	f7fb fe30 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004d1c:	2014      	movs	r0, #20
 8004d1e:	f7fb fe2d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 8004d22:	202e      	movs	r0, #46	@ 0x2e
 8004d24:	f7fb fe2a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004d28:	2034      	movs	r0, #52	@ 0x34
 8004d2a:	f7fb fe27 	bl	800097c <lcd_wr_xdata>
 8004d2e:	23e1      	movs	r3, #225	@ 0xe1
 8004d30:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d34:	4b5e      	ldr	r3, [pc, #376]	@ (8004eb0 <lcd_init+0x32b8>)
 8004d36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d3a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8004eb0 <lcd_init+0x32b8>)
 8004d3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d42:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d44:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8004eb4 <lcd_init+0x32bc>)
 8004d4c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d4e:	4b58      	ldr	r3, [pc, #352]	@ (8004eb0 <lcd_init+0x32b8>)
 8004d50:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d54:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d56:	4b56      	ldr	r3, [pc, #344]	@ (8004eb0 <lcd_init+0x32b8>)
 8004d58:	2280      	movs	r2, #128	@ 0x80
 8004d5a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d5c:	4b54      	ldr	r3, [pc, #336]	@ (8004eb0 <lcd_init+0x32b8>)
 8004d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d62:	611a      	str	r2, [r3, #16]
}
 8004d64:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 8004d66:	20f0      	movs	r0, #240	@ 0xf0
 8004d68:	f7fb fe08 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004d6c:	2010      	movs	r0, #16
 8004d6e:	f7fb fe05 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004d72:	2014      	movs	r0, #20
 8004d74:	f7fb fe02 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8004d78:	200e      	movs	r0, #14
 8004d7a:	f7fb fdff 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8004d7e:	200c      	movs	r0, #12
 8004d80:	f7fb fdfc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8004d84:	2008      	movs	r0, #8
 8004d86:	f7fb fdf9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 8004d8a:	2035      	movs	r0, #53	@ 0x35
 8004d8c:	f7fb fdf6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004d90:	2044      	movs	r0, #68	@ 0x44
 8004d92:	f7fb fdf3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004d96:	204c      	movs	r0, #76	@ 0x4c
 8004d98:	f7fb fdf0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8004d9c:	2026      	movs	r0, #38	@ 0x26
 8004d9e:	f7fb fded 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004da2:	2010      	movs	r0, #16
 8004da4:	f7fb fdea 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8004da8:	2012      	movs	r0, #18
 8004daa:	f7fb fde7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8004dae:	202c      	movs	r0, #44	@ 0x2c
 8004db0:	f7fb fde4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8004db4:	2032      	movs	r0, #50	@ 0x32
 8004db6:	f7fb fde1 	bl	800097c <lcd_wr_xdata>
 8004dba:	23f0      	movs	r3, #240	@ 0xf0
 8004dbc:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb0 <lcd_init+0x32b8>)
 8004dc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dc6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004dc8:	4b39      	ldr	r3, [pc, #228]	@ (8004eb0 <lcd_init+0x32b8>)
 8004dca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004dd0:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	4b37      	ldr	r3, [pc, #220]	@ (8004eb4 <lcd_init+0x32bc>)
 8004dd8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004dda:	4b35      	ldr	r3, [pc, #212]	@ (8004eb0 <lcd_init+0x32b8>)
 8004ddc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004de0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004de2:	4b33      	ldr	r3, [pc, #204]	@ (8004eb0 <lcd_init+0x32b8>)
 8004de4:	2280      	movs	r2, #128	@ 0x80
 8004de6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004de8:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <lcd_init+0x32b8>)
 8004dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dee:	611a      	str	r2, [r3, #16]
}
 8004df0:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 8004df2:	203c      	movs	r0, #60	@ 0x3c
 8004df4:	f7fb fdc2 	bl	800097c <lcd_wr_xdata>
 8004df8:	23f0      	movs	r3, #240	@ 0xf0
 8004dfa:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e04:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e06:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e0c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e0e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	4b27      	ldr	r3, [pc, #156]	@ (8004eb4 <lcd_init+0x32bc>)
 8004e16:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e18:	4b25      	ldr	r3, [pc, #148]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e1a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e1e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e20:	4b23      	ldr	r3, [pc, #140]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e22:	2280      	movs	r2, #128	@ 0x80
 8004e24:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e26:	4b22      	ldr	r3, [pc, #136]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e2c:	611a      	str	r2, [r3, #16]
}
 8004e2e:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 8004e30:	2069      	movs	r0, #105	@ 0x69
 8004e32:	f7fb fda3 	bl	800097c <lcd_wr_xdata>

        HAL_Delay(120);
 8004e36:	2078      	movs	r0, #120	@ 0x78
 8004e38:	f002 fecc 	bl	8007bd4 <HAL_Delay>
 8004e3c:	2321      	movs	r3, #33	@ 0x21
 8004e3e:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e42:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e4a:	4b19      	ldr	r3, [pc, #100]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e52:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	4b16      	ldr	r3, [pc, #88]	@ (8004eb4 <lcd_init+0x32bc>)
 8004e5a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e5c:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e62:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e64:	4b12      	ldr	r3, [pc, #72]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e66:	2280      	movs	r2, #128	@ 0x80
 8004e68:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e6a:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e70:	611a      	str	r2, [r3, #16]
}
 8004e72:	bf00      	nop
 8004e74:	2329      	movs	r3, #41	@ 0x29
 8004e76:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e80:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e82:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e88:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e8a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	4b08      	ldr	r3, [pc, #32]	@ (8004eb4 <lcd_init+0x32bc>)
 8004e92:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e94:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e9a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e9c:	4b04      	ldr	r3, [pc, #16]	@ (8004eb0 <lcd_init+0x32b8>)
 8004e9e:	2280      	movs	r2, #128	@ 0x80
 8004ea0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ea2:	4b03      	ldr	r3, [pc, #12]	@ (8004eb0 <lcd_init+0x32b8>)
 8004ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea8:	611a      	str	r2, [r3, #16]
}
 8004eaa:	f001 bdee 	b.w	8006a8a <lcd_init+0x4e92>
 8004eae:	bf00      	nop
 8004eb0:	40011000 	.word	0x40011000
 8004eb4:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 8004eb8:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <lcd_init+0x32d0>)
 8004eba:	889b      	ldrh	r3, [r3, #4]
 8004ebc:	f245 5210 	movw	r2, #21776	@ 0x5510
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	f040 87b3 	bne.w	8005e2c <lcd_init+0x4234>
 8004ec6:	e001      	b.n	8004ecc <lcd_init+0x32d4>
 8004ec8:	20002ab8 	.word	0x20002ab8
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 8004ecc:	2155      	movs	r1, #85	@ 0x55
 8004ece:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8004ed2:	f7fb fd77 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8004ed6:	21aa      	movs	r1, #170	@ 0xaa
 8004ed8:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8004edc:	f7fb fd72 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8004ee0:	2152      	movs	r1, #82	@ 0x52
 8004ee2:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8004ee6:	f7fb fd6d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8004eea:	2108      	movs	r1, #8
 8004eec:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8004ef0:	f7fb fd68 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8004efa:	f7fb fd63 	bl	80009c4 <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 8004efe:	210d      	movs	r1, #13
 8004f00:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8004f04:	f7fb fd5e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8004f08:	210d      	movs	r1, #13
 8004f0a:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8004f0e:	f7fb fd59 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 8004f12:	210d      	movs	r1, #13
 8004f14:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8004f18:	f7fb fd54 	bl	80009c4 <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 8004f1c:	2134      	movs	r1, #52	@ 0x34
 8004f1e:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8004f22:	f7fb fd4f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 8004f26:	2134      	movs	r1, #52	@ 0x34
 8004f28:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8004f2c:	f7fb fd4a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 8004f30:	2134      	movs	r1, #52	@ 0x34
 8004f32:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8004f36:	f7fb fd45 	bl	80009c4 <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 8004f3a:	210d      	movs	r1, #13
 8004f3c:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8004f40:	f7fb fd40 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 8004f44:	210d      	movs	r1, #13
 8004f46:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8004f4a:	f7fb fd3b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 8004f4e:	210d      	movs	r1, #13
 8004f50:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8004f54:	f7fb fd36 	bl	80009c4 <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 8004f58:	2134      	movs	r1, #52	@ 0x34
 8004f5a:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8004f5e:	f7fb fd31 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 8004f62:	2134      	movs	r1, #52	@ 0x34
 8004f64:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8004f68:	f7fb fd2c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 8004f6c:	2134      	movs	r1, #52	@ 0x34
 8004f6e:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8004f72:	f7fb fd27 	bl	80009c4 <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 8004f76:	2100      	movs	r1, #0
 8004f78:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8004f7c:	f7fb fd22 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 8004f80:	2100      	movs	r1, #0
 8004f82:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8004f86:	f7fb fd1d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8004f90:	f7fb fd18 	bl	80009c4 <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 8004f94:	2124      	movs	r1, #36	@ 0x24
 8004f96:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8004f9a:	f7fb fd13 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 8004f9e:	2124      	movs	r1, #36	@ 0x24
 8004fa0:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8004fa4:	f7fb fd0e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 8004fa8:	2124      	movs	r1, #36	@ 0x24
 8004faa:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8004fae:	f7fb fd09 	bl	80009c4 <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8004fb8:	f7fb fd04 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 8004fbc:	210f      	movs	r1, #15
 8004fbe:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8004fc2:	f7fb fcff 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 8004fc6:	210f      	movs	r1, #15
 8004fc8:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8004fcc:	f7fb fcfa 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 8004fd0:	210f      	movs	r1, #15
 8004fd2:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8004fd6:	f7fb fcf5 	bl	80009c4 <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 8004fda:	2134      	movs	r1, #52	@ 0x34
 8004fdc:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8004fe0:	f7fb fcf0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 8004fe4:	2134      	movs	r1, #52	@ 0x34
 8004fe6:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8004fea:	f7fb fceb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 8004fee:	2134      	movs	r1, #52	@ 0x34
 8004ff0:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8004ff4:	f7fb fce6 	bl	80009c4 <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8004ff8:	2108      	movs	r1, #8
 8004ffa:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8004ffe:	f7fb fce1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 8005002:	2108      	movs	r1, #8
 8005004:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8005008:	f7fb fcdc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 800500c:	2108      	movs	r1, #8
 800500e:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8005012:	f7fb fcd7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 8005016:	2103      	movs	r1, #3
 8005018:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 800501c:	f7fb fcd2 	bl	80009c4 <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 8005020:	2124      	movs	r1, #36	@ 0x24
 8005022:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8005026:	f7fb fccd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 800502a:	2124      	movs	r1, #36	@ 0x24
 800502c:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8005030:	f7fb fcc8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 8005034:	2124      	movs	r1, #36	@ 0x24
 8005036:	f64b 2002 	movw	r0, #47618	@ 0xba02
 800503a:	f7fb fcc3 	bl	80009c4 <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 800503e:	2100      	movs	r1, #0
 8005040:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005044:	f7fb fcbe 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 8005048:	2178      	movs	r1, #120	@ 0x78
 800504a:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 800504e:	f7fb fcb9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005052:	2100      	movs	r1, #0
 8005054:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005058:	f7fb fcb4 	bl	80009c4 <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 800505c:	2100      	movs	r1, #0
 800505e:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8005062:	f7fb fcaf 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 8005066:	2178      	movs	r1, #120	@ 0x78
 8005068:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 800506c:	f7fb fcaa 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 8005070:	2100      	movs	r1, #0
 8005072:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8005076:	f7fb fca5 	bl	80009c4 <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 800507a:	2100      	movs	r1, #0
 800507c:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8005080:	f7fb fca0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 8005084:	2164      	movs	r1, #100	@ 0x64
 8005086:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 800508a:	f7fb fc9b 	bl	80009c4 <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 800508e:	2100      	movs	r1, #0
 8005090:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8005094:	f7fb fc96 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 8005098:	2133      	movs	r1, #51	@ 0x33
 800509a:	f24d 1001 	movw	r0, #53505	@ 0xd101
 800509e:	f7fb fc91 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 80050a2:	2100      	movs	r1, #0
 80050a4:	f24d 1002 	movw	r0, #53506	@ 0xd102
 80050a8:	f7fb fc8c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 80050ac:	2134      	movs	r1, #52	@ 0x34
 80050ae:	f24d 1003 	movw	r0, #53507	@ 0xd103
 80050b2:	f7fb fc87 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 80050b6:	2100      	movs	r1, #0
 80050b8:	f24d 1004 	movw	r0, #53508	@ 0xd104
 80050bc:	f7fb fc82 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 80050c0:	213a      	movs	r1, #58	@ 0x3a
 80050c2:	f24d 1005 	movw	r0, #53509	@ 0xd105
 80050c6:	f7fb fc7d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 80050ca:	2100      	movs	r1, #0
 80050cc:	f24d 1006 	movw	r0, #53510	@ 0xd106
 80050d0:	f7fb fc78 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 80050d4:	214a      	movs	r1, #74	@ 0x4a
 80050d6:	f24d 1007 	movw	r0, #53511	@ 0xd107
 80050da:	f7fb fc73 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 80050de:	2100      	movs	r1, #0
 80050e0:	f24d 1008 	movw	r0, #53512	@ 0xd108
 80050e4:	f7fb fc6e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 80050e8:	215c      	movs	r1, #92	@ 0x5c
 80050ea:	f24d 1009 	movw	r0, #53513	@ 0xd109
 80050ee:	f7fb fc69 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 80050f2:	2100      	movs	r1, #0
 80050f4:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 80050f8:	f7fb fc64 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 80050fc:	2181      	movs	r1, #129	@ 0x81
 80050fe:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005102:	f7fb fc5f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 8005106:	2100      	movs	r1, #0
 8005108:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 800510c:	f7fb fc5a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 8005110:	21a6      	movs	r1, #166	@ 0xa6
 8005112:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8005116:	f7fb fc55 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 800511a:	2100      	movs	r1, #0
 800511c:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8005120:	f7fb fc50 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 8005124:	21e5      	movs	r1, #229	@ 0xe5
 8005126:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 800512a:	f7fb fc4b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 800512e:	2101      	movs	r1, #1
 8005130:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8005134:	f7fb fc46 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 8005138:	2113      	movs	r1, #19
 800513a:	f24d 1011 	movw	r0, #53521	@ 0xd111
 800513e:	f7fb fc41 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 8005142:	2101      	movs	r1, #1
 8005144:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8005148:	f7fb fc3c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 800514c:	2154      	movs	r1, #84	@ 0x54
 800514e:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8005152:	f7fb fc37 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 8005156:	2101      	movs	r1, #1
 8005158:	f24d 1014 	movw	r0, #53524	@ 0xd114
 800515c:	f7fb fc32 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 8005160:	2182      	movs	r1, #130	@ 0x82
 8005162:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8005166:	f7fb fc2d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 800516a:	2101      	movs	r1, #1
 800516c:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8005170:	f7fb fc28 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 8005174:	21ca      	movs	r1, #202	@ 0xca
 8005176:	f24d 1017 	movw	r0, #53527	@ 0xd117
 800517a:	f7fb fc23 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 800517e:	2102      	movs	r1, #2
 8005180:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8005184:	f7fb fc1e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 8005188:	2100      	movs	r1, #0
 800518a:	f24d 1019 	movw	r0, #53529	@ 0xd119
 800518e:	f7fb fc19 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 8005192:	2102      	movs	r1, #2
 8005194:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8005198:	f7fb fc14 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 800519c:	2101      	movs	r1, #1
 800519e:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 80051a2:	f7fb fc0f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 80051a6:	2102      	movs	r1, #2
 80051a8:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 80051ac:	f7fb fc0a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 80051b0:	2134      	movs	r1, #52	@ 0x34
 80051b2:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 80051b6:	f7fb fc05 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 80051ba:	2102      	movs	r1, #2
 80051bc:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 80051c0:	f7fb fc00 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 80051c4:	2167      	movs	r1, #103	@ 0x67
 80051c6:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 80051ca:	f7fb fbfb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 80051ce:	2102      	movs	r1, #2
 80051d0:	f24d 1020 	movw	r0, #53536	@ 0xd120
 80051d4:	f7fb fbf6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 80051d8:	2184      	movs	r1, #132	@ 0x84
 80051da:	f24d 1021 	movw	r0, #53537	@ 0xd121
 80051de:	f7fb fbf1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 80051e2:	2102      	movs	r1, #2
 80051e4:	f24d 1022 	movw	r0, #53538	@ 0xd122
 80051e8:	f7fb fbec 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 80051ec:	21a4      	movs	r1, #164	@ 0xa4
 80051ee:	f24d 1023 	movw	r0, #53539	@ 0xd123
 80051f2:	f7fb fbe7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 80051f6:	2102      	movs	r1, #2
 80051f8:	f24d 1024 	movw	r0, #53540	@ 0xd124
 80051fc:	f7fb fbe2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005200:	21b7      	movs	r1, #183	@ 0xb7
 8005202:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8005206:	f7fb fbdd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 800520a:	2102      	movs	r1, #2
 800520c:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8005210:	f7fb fbd8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 8005214:	21cf      	movs	r1, #207	@ 0xcf
 8005216:	f24d 1027 	movw	r0, #53543	@ 0xd127
 800521a:	f7fb fbd3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 800521e:	2102      	movs	r1, #2
 8005220:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8005224:	f7fb fbce 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 8005228:	21de      	movs	r1, #222	@ 0xde
 800522a:	f24d 1029 	movw	r0, #53545	@ 0xd129
 800522e:	f7fb fbc9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 8005232:	2102      	movs	r1, #2
 8005234:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8005238:	f7fb fbc4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 800523c:	21f2      	movs	r1, #242	@ 0xf2
 800523e:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8005242:	f7fb fbbf 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 8005246:	2102      	movs	r1, #2
 8005248:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 800524c:	f7fb fbba 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 8005250:	21fe      	movs	r1, #254	@ 0xfe
 8005252:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8005256:	f7fb fbb5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 800525a:	2103      	movs	r1, #3
 800525c:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8005260:	f7fb fbb0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 8005264:	2110      	movs	r1, #16
 8005266:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 800526a:	f7fb fbab 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 800526e:	2103      	movs	r1, #3
 8005270:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8005274:	f7fb fba6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 8005278:	2133      	movs	r1, #51	@ 0x33
 800527a:	f24d 1031 	movw	r0, #53553	@ 0xd131
 800527e:	f7fb fba1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 8005282:	2103      	movs	r1, #3
 8005284:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8005288:	f7fb fb9c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 800528c:	216d      	movs	r1, #109	@ 0x6d
 800528e:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8005292:	f7fb fb97 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 8005296:	2100      	movs	r1, #0
 8005298:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 800529c:	f7fb fb92 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 80052a0:	2133      	movs	r1, #51	@ 0x33
 80052a2:	f24d 2001 	movw	r0, #53761	@ 0xd201
 80052a6:	f7fb fb8d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 80052aa:	2100      	movs	r1, #0
 80052ac:	f24d 2002 	movw	r0, #53762	@ 0xd202
 80052b0:	f7fb fb88 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 80052b4:	2134      	movs	r1, #52	@ 0x34
 80052b6:	f24d 2003 	movw	r0, #53763	@ 0xd203
 80052ba:	f7fb fb83 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 80052be:	2100      	movs	r1, #0
 80052c0:	f24d 2004 	movw	r0, #53764	@ 0xd204
 80052c4:	f7fb fb7e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 80052c8:	213a      	movs	r1, #58	@ 0x3a
 80052ca:	f24d 2005 	movw	r0, #53765	@ 0xd205
 80052ce:	f7fb fb79 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 80052d2:	2100      	movs	r1, #0
 80052d4:	f24d 2006 	movw	r0, #53766	@ 0xd206
 80052d8:	f7fb fb74 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 80052dc:	214a      	movs	r1, #74	@ 0x4a
 80052de:	f24d 2007 	movw	r0, #53767	@ 0xd207
 80052e2:	f7fb fb6f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 80052e6:	2100      	movs	r1, #0
 80052e8:	f24d 2008 	movw	r0, #53768	@ 0xd208
 80052ec:	f7fb fb6a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 80052f0:	215c      	movs	r1, #92	@ 0x5c
 80052f2:	f24d 2009 	movw	r0, #53769	@ 0xd209
 80052f6:	f7fb fb65 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 80052fa:	2100      	movs	r1, #0
 80052fc:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005300:	f7fb fb60 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 8005304:	2181      	movs	r1, #129	@ 0x81
 8005306:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 800530a:	f7fb fb5b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 800530e:	2100      	movs	r1, #0
 8005310:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8005314:	f7fb fb56 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 8005318:	21a6      	movs	r1, #166	@ 0xa6
 800531a:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 800531e:	f7fb fb51 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 8005322:	2100      	movs	r1, #0
 8005324:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8005328:	f7fb fb4c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 800532c:	21e5      	movs	r1, #229	@ 0xe5
 800532e:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8005332:	f7fb fb47 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 8005336:	2101      	movs	r1, #1
 8005338:	f24d 2010 	movw	r0, #53776	@ 0xd210
 800533c:	f7fb fb42 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 8005340:	2113      	movs	r1, #19
 8005342:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8005346:	f7fb fb3d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 800534a:	2101      	movs	r1, #1
 800534c:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8005350:	f7fb fb38 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 8005354:	2154      	movs	r1, #84	@ 0x54
 8005356:	f24d 2013 	movw	r0, #53779	@ 0xd213
 800535a:	f7fb fb33 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 800535e:	2101      	movs	r1, #1
 8005360:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8005364:	f7fb fb2e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 8005368:	2182      	movs	r1, #130	@ 0x82
 800536a:	f24d 2015 	movw	r0, #53781	@ 0xd215
 800536e:	f7fb fb29 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 8005372:	2101      	movs	r1, #1
 8005374:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8005378:	f7fb fb24 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 800537c:	21ca      	movs	r1, #202	@ 0xca
 800537e:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8005382:	f7fb fb1f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 8005386:	2102      	movs	r1, #2
 8005388:	f24d 2018 	movw	r0, #53784	@ 0xd218
 800538c:	f7fb fb1a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 8005390:	2100      	movs	r1, #0
 8005392:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8005396:	f7fb fb15 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 800539a:	2102      	movs	r1, #2
 800539c:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 80053a0:	f7fb fb10 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 80053a4:	2101      	movs	r1, #1
 80053a6:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 80053aa:	f7fb fb0b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 80053ae:	2102      	movs	r1, #2
 80053b0:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 80053b4:	f7fb fb06 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 80053b8:	2134      	movs	r1, #52	@ 0x34
 80053ba:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 80053be:	f7fb fb01 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 80053c2:	2102      	movs	r1, #2
 80053c4:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 80053c8:	f7fb fafc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 80053cc:	2167      	movs	r1, #103	@ 0x67
 80053ce:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 80053d2:	f7fb faf7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 80053d6:	2102      	movs	r1, #2
 80053d8:	f24d 2020 	movw	r0, #53792	@ 0xd220
 80053dc:	f7fb faf2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 80053e0:	2184      	movs	r1, #132	@ 0x84
 80053e2:	f24d 2021 	movw	r0, #53793	@ 0xd221
 80053e6:	f7fb faed 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 80053ea:	2102      	movs	r1, #2
 80053ec:	f24d 2022 	movw	r0, #53794	@ 0xd222
 80053f0:	f7fb fae8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 80053f4:	21a4      	movs	r1, #164	@ 0xa4
 80053f6:	f24d 2023 	movw	r0, #53795	@ 0xd223
 80053fa:	f7fb fae3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 80053fe:	2102      	movs	r1, #2
 8005400:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8005404:	f7fb fade 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005408:	21b7      	movs	r1, #183	@ 0xb7
 800540a:	f24d 2025 	movw	r0, #53797	@ 0xd225
 800540e:	f7fb fad9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 8005412:	2102      	movs	r1, #2
 8005414:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8005418:	f7fb fad4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 800541c:	21cf      	movs	r1, #207	@ 0xcf
 800541e:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8005422:	f7fb facf 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 8005426:	2102      	movs	r1, #2
 8005428:	f24d 2028 	movw	r0, #53800	@ 0xd228
 800542c:	f7fb faca 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 8005430:	21de      	movs	r1, #222	@ 0xde
 8005432:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8005436:	f7fb fac5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 800543a:	2102      	movs	r1, #2
 800543c:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8005440:	f7fb fac0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 8005444:	21f2      	movs	r1, #242	@ 0xf2
 8005446:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 800544a:	f7fb fabb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 800544e:	2102      	movs	r1, #2
 8005450:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8005454:	f7fb fab6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 8005458:	21fe      	movs	r1, #254	@ 0xfe
 800545a:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 800545e:	f7fb fab1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 8005462:	2103      	movs	r1, #3
 8005464:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8005468:	f7fb faac 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 800546c:	2110      	movs	r1, #16
 800546e:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8005472:	f7fb faa7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 8005476:	2103      	movs	r1, #3
 8005478:	f24d 2030 	movw	r0, #53808	@ 0xd230
 800547c:	f7fb faa2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 8005480:	2133      	movs	r1, #51	@ 0x33
 8005482:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8005486:	f7fb fa9d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 800548a:	2103      	movs	r1, #3
 800548c:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8005490:	f7fb fa98 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 8005494:	216d      	movs	r1, #109	@ 0x6d
 8005496:	f24d 2033 	movw	r0, #53811	@ 0xd233
 800549a:	f7fb fa93 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 800549e:	2100      	movs	r1, #0
 80054a0:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 80054a4:	f7fb fa8e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 80054a8:	2133      	movs	r1, #51	@ 0x33
 80054aa:	f24d 3001 	movw	r0, #54017	@ 0xd301
 80054ae:	f7fb fa89 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 80054b2:	2100      	movs	r1, #0
 80054b4:	f24d 3002 	movw	r0, #54018	@ 0xd302
 80054b8:	f7fb fa84 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 80054bc:	2134      	movs	r1, #52	@ 0x34
 80054be:	f24d 3003 	movw	r0, #54019	@ 0xd303
 80054c2:	f7fb fa7f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 80054c6:	2100      	movs	r1, #0
 80054c8:	f24d 3004 	movw	r0, #54020	@ 0xd304
 80054cc:	f7fb fa7a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 80054d0:	213a      	movs	r1, #58	@ 0x3a
 80054d2:	f24d 3005 	movw	r0, #54021	@ 0xd305
 80054d6:	f7fb fa75 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 80054da:	2100      	movs	r1, #0
 80054dc:	f24d 3006 	movw	r0, #54022	@ 0xd306
 80054e0:	f7fb fa70 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 80054e4:	214a      	movs	r1, #74	@ 0x4a
 80054e6:	f24d 3007 	movw	r0, #54023	@ 0xd307
 80054ea:	f7fb fa6b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 80054ee:	2100      	movs	r1, #0
 80054f0:	f24d 3008 	movw	r0, #54024	@ 0xd308
 80054f4:	f7fb fa66 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 80054f8:	215c      	movs	r1, #92	@ 0x5c
 80054fa:	f24d 3009 	movw	r0, #54025	@ 0xd309
 80054fe:	f7fb fa61 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 8005502:	2100      	movs	r1, #0
 8005504:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8005508:	f7fb fa5c 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 800550c:	2181      	movs	r1, #129	@ 0x81
 800550e:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8005512:	f7fb fa57 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 8005516:	2100      	movs	r1, #0
 8005518:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 800551c:	f7fb fa52 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 8005520:	21a6      	movs	r1, #166	@ 0xa6
 8005522:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8005526:	f7fb fa4d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 800552a:	2100      	movs	r1, #0
 800552c:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8005530:	f7fb fa48 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 8005534:	21e5      	movs	r1, #229	@ 0xe5
 8005536:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 800553a:	f7fb fa43 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 800553e:	2101      	movs	r1, #1
 8005540:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8005544:	f7fb fa3e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 8005548:	2113      	movs	r1, #19
 800554a:	f24d 3011 	movw	r0, #54033	@ 0xd311
 800554e:	f7fb fa39 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 8005552:	2101      	movs	r1, #1
 8005554:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8005558:	f7fb fa34 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 800555c:	2154      	movs	r1, #84	@ 0x54
 800555e:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8005562:	f7fb fa2f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 8005566:	2101      	movs	r1, #1
 8005568:	f24d 3014 	movw	r0, #54036	@ 0xd314
 800556c:	f7fb fa2a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 8005570:	2182      	movs	r1, #130	@ 0x82
 8005572:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8005576:	f7fb fa25 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 800557a:	2101      	movs	r1, #1
 800557c:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8005580:	f7fb fa20 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 8005584:	21ca      	movs	r1, #202	@ 0xca
 8005586:	f24d 3017 	movw	r0, #54039	@ 0xd317
 800558a:	f7fb fa1b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 800558e:	2102      	movs	r1, #2
 8005590:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8005594:	f7fb fa16 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 8005598:	2100      	movs	r1, #0
 800559a:	f24d 3019 	movw	r0, #54041	@ 0xd319
 800559e:	f7fb fa11 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 80055a2:	2102      	movs	r1, #2
 80055a4:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 80055a8:	f7fb fa0c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 80055ac:	2101      	movs	r1, #1
 80055ae:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 80055b2:	f7fb fa07 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 80055b6:	2102      	movs	r1, #2
 80055b8:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 80055bc:	f7fb fa02 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 80055c0:	2134      	movs	r1, #52	@ 0x34
 80055c2:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 80055c6:	f7fb f9fd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 80055ca:	2102      	movs	r1, #2
 80055cc:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 80055d0:	f7fb f9f8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 80055d4:	2167      	movs	r1, #103	@ 0x67
 80055d6:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 80055da:	f7fb f9f3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 80055de:	2102      	movs	r1, #2
 80055e0:	f24d 3020 	movw	r0, #54048	@ 0xd320
 80055e4:	f7fb f9ee 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 80055e8:	2184      	movs	r1, #132	@ 0x84
 80055ea:	f24d 3021 	movw	r0, #54049	@ 0xd321
 80055ee:	f7fb f9e9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 80055f2:	2102      	movs	r1, #2
 80055f4:	f24d 3022 	movw	r0, #54050	@ 0xd322
 80055f8:	f7fb f9e4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 80055fc:	21a4      	movs	r1, #164	@ 0xa4
 80055fe:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8005602:	f7fb f9df 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 8005606:	2102      	movs	r1, #2
 8005608:	f24d 3024 	movw	r0, #54052	@ 0xd324
 800560c:	f7fb f9da 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 8005610:	21b7      	movs	r1, #183	@ 0xb7
 8005612:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8005616:	f7fb f9d5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 800561a:	2102      	movs	r1, #2
 800561c:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8005620:	f7fb f9d0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 8005624:	21cf      	movs	r1, #207	@ 0xcf
 8005626:	f24d 3027 	movw	r0, #54055	@ 0xd327
 800562a:	f7fb f9cb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 800562e:	2102      	movs	r1, #2
 8005630:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8005634:	f7fb f9c6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 8005638:	21de      	movs	r1, #222	@ 0xde
 800563a:	f24d 3029 	movw	r0, #54057	@ 0xd329
 800563e:	f7fb f9c1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 8005642:	2102      	movs	r1, #2
 8005644:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8005648:	f7fb f9bc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 800564c:	21f2      	movs	r1, #242	@ 0xf2
 800564e:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8005652:	f7fb f9b7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 8005656:	2102      	movs	r1, #2
 8005658:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 800565c:	f7fb f9b2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 8005660:	21fe      	movs	r1, #254	@ 0xfe
 8005662:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8005666:	f7fb f9ad 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 800566a:	2103      	movs	r1, #3
 800566c:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8005670:	f7fb f9a8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 8005674:	2110      	movs	r1, #16
 8005676:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 800567a:	f7fb f9a3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 800567e:	2103      	movs	r1, #3
 8005680:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8005684:	f7fb f99e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 8005688:	2133      	movs	r1, #51	@ 0x33
 800568a:	f24d 3031 	movw	r0, #54065	@ 0xd331
 800568e:	f7fb f999 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 8005692:	2103      	movs	r1, #3
 8005694:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8005698:	f7fb f994 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 800569c:	216d      	movs	r1, #109	@ 0x6d
 800569e:	f24d 3033 	movw	r0, #54067	@ 0xd333
 80056a2:	f7fb f98f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 80056a6:	2100      	movs	r1, #0
 80056a8:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 80056ac:	f7fb f98a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 80056b0:	2133      	movs	r1, #51	@ 0x33
 80056b2:	f24d 4001 	movw	r0, #54273	@ 0xd401
 80056b6:	f7fb f985 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 80056ba:	2100      	movs	r1, #0
 80056bc:	f24d 4002 	movw	r0, #54274	@ 0xd402
 80056c0:	f7fb f980 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 80056c4:	2134      	movs	r1, #52	@ 0x34
 80056c6:	f24d 4003 	movw	r0, #54275	@ 0xd403
 80056ca:	f7fb f97b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 80056ce:	2100      	movs	r1, #0
 80056d0:	f24d 4004 	movw	r0, #54276	@ 0xd404
 80056d4:	f7fb f976 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 80056d8:	213a      	movs	r1, #58	@ 0x3a
 80056da:	f24d 4005 	movw	r0, #54277	@ 0xd405
 80056de:	f7fb f971 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 80056e2:	2100      	movs	r1, #0
 80056e4:	f24d 4006 	movw	r0, #54278	@ 0xd406
 80056e8:	f7fb f96c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 80056ec:	214a      	movs	r1, #74	@ 0x4a
 80056ee:	f24d 4007 	movw	r0, #54279	@ 0xd407
 80056f2:	f7fb f967 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 80056f6:	2100      	movs	r1, #0
 80056f8:	f24d 4008 	movw	r0, #54280	@ 0xd408
 80056fc:	f7fb f962 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8005700:	215c      	movs	r1, #92	@ 0x5c
 8005702:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8005706:	f7fb f95d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 800570a:	2100      	movs	r1, #0
 800570c:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8005710:	f7fb f958 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 8005714:	2181      	movs	r1, #129	@ 0x81
 8005716:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 800571a:	f7fb f953 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 800571e:	2100      	movs	r1, #0
 8005720:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8005724:	f7fb f94e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 8005728:	21a6      	movs	r1, #166	@ 0xa6
 800572a:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 800572e:	f7fb f949 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 8005732:	2100      	movs	r1, #0
 8005734:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8005738:	f7fb f944 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 800573c:	21e5      	movs	r1, #229	@ 0xe5
 800573e:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8005742:	f7fb f93f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 8005746:	2101      	movs	r1, #1
 8005748:	f24d 4010 	movw	r0, #54288	@ 0xd410
 800574c:	f7fb f93a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 8005750:	2113      	movs	r1, #19
 8005752:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8005756:	f7fb f935 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 800575a:	2101      	movs	r1, #1
 800575c:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8005760:	f7fb f930 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 8005764:	2154      	movs	r1, #84	@ 0x54
 8005766:	f24d 4013 	movw	r0, #54291	@ 0xd413
 800576a:	f7fb f92b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 800576e:	2101      	movs	r1, #1
 8005770:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8005774:	f7fb f926 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 8005778:	2182      	movs	r1, #130	@ 0x82
 800577a:	f24d 4015 	movw	r0, #54293	@ 0xd415
 800577e:	f7fb f921 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 8005782:	2101      	movs	r1, #1
 8005784:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8005788:	f7fb f91c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 800578c:	21ca      	movs	r1, #202	@ 0xca
 800578e:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8005792:	f7fb f917 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 8005796:	2102      	movs	r1, #2
 8005798:	f24d 4018 	movw	r0, #54296	@ 0xd418
 800579c:	f7fb f912 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 80057a0:	2100      	movs	r1, #0
 80057a2:	f24d 4019 	movw	r0, #54297	@ 0xd419
 80057a6:	f7fb f90d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 80057aa:	2102      	movs	r1, #2
 80057ac:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 80057b0:	f7fb f908 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 80057b4:	2101      	movs	r1, #1
 80057b6:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 80057ba:	f7fb f903 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 80057be:	2102      	movs	r1, #2
 80057c0:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 80057c4:	f7fb f8fe 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 80057c8:	2134      	movs	r1, #52	@ 0x34
 80057ca:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 80057ce:	f7fb f8f9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 80057d2:	2102      	movs	r1, #2
 80057d4:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 80057d8:	f7fb f8f4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 80057dc:	2167      	movs	r1, #103	@ 0x67
 80057de:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 80057e2:	f7fb f8ef 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 80057e6:	2102      	movs	r1, #2
 80057e8:	f24d 4020 	movw	r0, #54304	@ 0xd420
 80057ec:	f7fb f8ea 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 80057f0:	2184      	movs	r1, #132	@ 0x84
 80057f2:	f24d 4021 	movw	r0, #54305	@ 0xd421
 80057f6:	f7fb f8e5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 80057fa:	2102      	movs	r1, #2
 80057fc:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8005800:	f7fb f8e0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 8005804:	21a4      	movs	r1, #164	@ 0xa4
 8005806:	f24d 4023 	movw	r0, #54307	@ 0xd423
 800580a:	f7fb f8db 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 800580e:	2102      	movs	r1, #2
 8005810:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8005814:	f7fb f8d6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 8005818:	21b7      	movs	r1, #183	@ 0xb7
 800581a:	f24d 4025 	movw	r0, #54309	@ 0xd425
 800581e:	f7fb f8d1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 8005822:	2102      	movs	r1, #2
 8005824:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8005828:	f7fb f8cc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 800582c:	21cf      	movs	r1, #207	@ 0xcf
 800582e:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8005832:	f7fb f8c7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 8005836:	2102      	movs	r1, #2
 8005838:	f24d 4028 	movw	r0, #54312	@ 0xd428
 800583c:	f7fb f8c2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 8005840:	21de      	movs	r1, #222	@ 0xde
 8005842:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8005846:	f7fb f8bd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 800584a:	2102      	movs	r1, #2
 800584c:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8005850:	f7fb f8b8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 8005854:	21f2      	movs	r1, #242	@ 0xf2
 8005856:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 800585a:	f7fb f8b3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 800585e:	2102      	movs	r1, #2
 8005860:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8005864:	f7fb f8ae 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 8005868:	21fe      	movs	r1, #254	@ 0xfe
 800586a:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 800586e:	f7fb f8a9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 8005872:	2103      	movs	r1, #3
 8005874:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8005878:	f7fb f8a4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 800587c:	2110      	movs	r1, #16
 800587e:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8005882:	f7fb f89f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 8005886:	2103      	movs	r1, #3
 8005888:	f24d 4030 	movw	r0, #54320	@ 0xd430
 800588c:	f7fb f89a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 8005890:	2133      	movs	r1, #51	@ 0x33
 8005892:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8005896:	f7fb f895 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 800589a:	2103      	movs	r1, #3
 800589c:	f24d 4032 	movw	r0, #54322	@ 0xd432
 80058a0:	f7fb f890 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 80058a4:	216d      	movs	r1, #109	@ 0x6d
 80058a6:	f24d 4033 	movw	r0, #54323	@ 0xd433
 80058aa:	f7fb f88b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 80058ae:	2100      	movs	r1, #0
 80058b0:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 80058b4:	f7fb f886 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 80058b8:	2133      	movs	r1, #51	@ 0x33
 80058ba:	f24d 5001 	movw	r0, #54529	@ 0xd501
 80058be:	f7fb f881 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 80058c2:	2100      	movs	r1, #0
 80058c4:	f24d 5002 	movw	r0, #54530	@ 0xd502
 80058c8:	f7fb f87c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 80058cc:	2134      	movs	r1, #52	@ 0x34
 80058ce:	f24d 5003 	movw	r0, #54531	@ 0xd503
 80058d2:	f7fb f877 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 80058d6:	2100      	movs	r1, #0
 80058d8:	f24d 5004 	movw	r0, #54532	@ 0xd504
 80058dc:	f7fb f872 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 80058e0:	213a      	movs	r1, #58	@ 0x3a
 80058e2:	f24d 5005 	movw	r0, #54533	@ 0xd505
 80058e6:	f7fb f86d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 80058ea:	2100      	movs	r1, #0
 80058ec:	f24d 5006 	movw	r0, #54534	@ 0xd506
 80058f0:	f7fb f868 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 80058f4:	214a      	movs	r1, #74	@ 0x4a
 80058f6:	f24d 5007 	movw	r0, #54535	@ 0xd507
 80058fa:	f7fb f863 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 80058fe:	2100      	movs	r1, #0
 8005900:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8005904:	f7fb f85e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8005908:	215c      	movs	r1, #92	@ 0x5c
 800590a:	f24d 5009 	movw	r0, #54537	@ 0xd509
 800590e:	f7fb f859 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 8005912:	2100      	movs	r1, #0
 8005914:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8005918:	f7fb f854 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 800591c:	2181      	movs	r1, #129	@ 0x81
 800591e:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8005922:	f7fb f84f 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 8005926:	2100      	movs	r1, #0
 8005928:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 800592c:	f7fb f84a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 8005930:	21a6      	movs	r1, #166	@ 0xa6
 8005932:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8005936:	f7fb f845 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 800593a:	2100      	movs	r1, #0
 800593c:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8005940:	f7fb f840 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 8005944:	21e5      	movs	r1, #229	@ 0xe5
 8005946:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 800594a:	f7fb f83b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 800594e:	2101      	movs	r1, #1
 8005950:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8005954:	f7fb f836 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 8005958:	2113      	movs	r1, #19
 800595a:	f24d 5011 	movw	r0, #54545	@ 0xd511
 800595e:	f7fb f831 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 8005962:	2101      	movs	r1, #1
 8005964:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8005968:	f7fb f82c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 800596c:	2154      	movs	r1, #84	@ 0x54
 800596e:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8005972:	f7fb f827 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 8005976:	2101      	movs	r1, #1
 8005978:	f24d 5014 	movw	r0, #54548	@ 0xd514
 800597c:	f7fb f822 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 8005980:	2182      	movs	r1, #130	@ 0x82
 8005982:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8005986:	f7fb f81d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 800598a:	2101      	movs	r1, #1
 800598c:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8005990:	f7fb f818 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 8005994:	21ca      	movs	r1, #202	@ 0xca
 8005996:	f24d 5017 	movw	r0, #54551	@ 0xd517
 800599a:	f7fb f813 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 800599e:	2102      	movs	r1, #2
 80059a0:	f24d 5018 	movw	r0, #54552	@ 0xd518
 80059a4:	f7fb f80e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 80059a8:	2100      	movs	r1, #0
 80059aa:	f24d 5019 	movw	r0, #54553	@ 0xd519
 80059ae:	f7fb f809 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 80059b2:	2102      	movs	r1, #2
 80059b4:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 80059b8:	f7fb f804 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 80059bc:	2101      	movs	r1, #1
 80059be:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 80059c2:	f7fa ffff 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 80059c6:	2102      	movs	r1, #2
 80059c8:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 80059cc:	f7fa fffa 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 80059d0:	2134      	movs	r1, #52	@ 0x34
 80059d2:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 80059d6:	f7fa fff5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 80059da:	2102      	movs	r1, #2
 80059dc:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 80059e0:	f7fa fff0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 80059e4:	2167      	movs	r1, #103	@ 0x67
 80059e6:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 80059ea:	f7fa ffeb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 80059ee:	2102      	movs	r1, #2
 80059f0:	f24d 5020 	movw	r0, #54560	@ 0xd520
 80059f4:	f7fa ffe6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 80059f8:	2184      	movs	r1, #132	@ 0x84
 80059fa:	f24d 5021 	movw	r0, #54561	@ 0xd521
 80059fe:	f7fa ffe1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 8005a02:	2102      	movs	r1, #2
 8005a04:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8005a08:	f7fa ffdc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 8005a0c:	21a4      	movs	r1, #164	@ 0xa4
 8005a0e:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8005a12:	f7fa ffd7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 8005a16:	2102      	movs	r1, #2
 8005a18:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8005a1c:	f7fa ffd2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 8005a20:	21b7      	movs	r1, #183	@ 0xb7
 8005a22:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8005a26:	f7fa ffcd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 8005a2a:	2102      	movs	r1, #2
 8005a2c:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8005a30:	f7fa ffc8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 8005a34:	21cf      	movs	r1, #207	@ 0xcf
 8005a36:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8005a3a:	f7fa ffc3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 8005a3e:	2102      	movs	r1, #2
 8005a40:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8005a44:	f7fa ffbe 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 8005a48:	21de      	movs	r1, #222	@ 0xde
 8005a4a:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8005a4e:	f7fa ffb9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 8005a52:	2102      	movs	r1, #2
 8005a54:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8005a58:	f7fa ffb4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 8005a5c:	21f2      	movs	r1, #242	@ 0xf2
 8005a5e:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8005a62:	f7fa ffaf 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 8005a66:	2102      	movs	r1, #2
 8005a68:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8005a6c:	f7fa ffaa 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 8005a70:	21fe      	movs	r1, #254	@ 0xfe
 8005a72:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8005a76:	f7fa ffa5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 8005a7a:	2103      	movs	r1, #3
 8005a7c:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8005a80:	f7fa ffa0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 8005a84:	2110      	movs	r1, #16
 8005a86:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8005a8a:	f7fa ff9b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 8005a8e:	2103      	movs	r1, #3
 8005a90:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8005a94:	f7fa ff96 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 8005a98:	2133      	movs	r1, #51	@ 0x33
 8005a9a:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8005a9e:	f7fa ff91 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 8005aa2:	2103      	movs	r1, #3
 8005aa4:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8005aa8:	f7fa ff8c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 8005aac:	216d      	movs	r1, #109	@ 0x6d
 8005aae:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8005ab2:	f7fa ff87 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8005abc:	f7fa ff82 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 8005ac0:	2133      	movs	r1, #51	@ 0x33
 8005ac2:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8005ac6:	f7fa ff7d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 8005aca:	2100      	movs	r1, #0
 8005acc:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8005ad0:	f7fa ff78 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 8005ad4:	2134      	movs	r1, #52	@ 0x34
 8005ad6:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8005ada:	f7fa ff73 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 8005ade:	2100      	movs	r1, #0
 8005ae0:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8005ae4:	f7fa ff6e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 8005ae8:	213a      	movs	r1, #58	@ 0x3a
 8005aea:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8005aee:	f7fa ff69 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 8005af2:	2100      	movs	r1, #0
 8005af4:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8005af8:	f7fa ff64 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 8005afc:	214a      	movs	r1, #74	@ 0x4a
 8005afe:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8005b02:	f7fa ff5f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 8005b06:	2100      	movs	r1, #0
 8005b08:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8005b0c:	f7fa ff5a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8005b10:	215c      	movs	r1, #92	@ 0x5c
 8005b12:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8005b16:	f7fa ff55 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8005b20:	f7fa ff50 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 8005b24:	2181      	movs	r1, #129	@ 0x81
 8005b26:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8005b2a:	f7fa ff4b 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 8005b2e:	2100      	movs	r1, #0
 8005b30:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8005b34:	f7fa ff46 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 8005b38:	21a6      	movs	r1, #166	@ 0xa6
 8005b3a:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8005b3e:	f7fa ff41 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 8005b42:	2100      	movs	r1, #0
 8005b44:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8005b48:	f7fa ff3c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 8005b4c:	21e5      	movs	r1, #229	@ 0xe5
 8005b4e:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8005b52:	f7fa ff37 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 8005b56:	2101      	movs	r1, #1
 8005b58:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8005b5c:	f7fa ff32 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 8005b60:	2113      	movs	r1, #19
 8005b62:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8005b66:	f7fa ff2d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8005b70:	f7fa ff28 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 8005b74:	2154      	movs	r1, #84	@ 0x54
 8005b76:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8005b7a:	f7fa ff23 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 8005b7e:	2101      	movs	r1, #1
 8005b80:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8005b84:	f7fa ff1e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 8005b88:	2182      	movs	r1, #130	@ 0x82
 8005b8a:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8005b8e:	f7fa ff19 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 8005b92:	2101      	movs	r1, #1
 8005b94:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8005b98:	f7fa ff14 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 8005b9c:	21ca      	movs	r1, #202	@ 0xca
 8005b9e:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8005ba2:	f7fa ff0f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8005bac:	f7fa ff0a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8005bb6:	f7fa ff05 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 8005bba:	2102      	movs	r1, #2
 8005bbc:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8005bc0:	f7fa ff00 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8005bca:	f7fa fefb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 8005bce:	2102      	movs	r1, #2
 8005bd0:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8005bd4:	f7fa fef6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8005bd8:	2134      	movs	r1, #52	@ 0x34
 8005bda:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8005bde:	f7fa fef1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 8005be2:	2102      	movs	r1, #2
 8005be4:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8005be8:	f7fa feec 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 8005bec:	2167      	movs	r1, #103	@ 0x67
 8005bee:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8005bf2:	f7fa fee7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8005bfc:	f7fa fee2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8005c00:	2184      	movs	r1, #132	@ 0x84
 8005c02:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8005c06:	f7fa fedd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 8005c0a:	2102      	movs	r1, #2
 8005c0c:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8005c10:	f7fa fed8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 8005c14:	21a4      	movs	r1, #164	@ 0xa4
 8005c16:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8005c1a:	f7fa fed3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 8005c1e:	2102      	movs	r1, #2
 8005c20:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8005c24:	f7fa fece 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8005c28:	21b7      	movs	r1, #183	@ 0xb7
 8005c2a:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8005c2e:	f7fa fec9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 8005c32:	2102      	movs	r1, #2
 8005c34:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8005c38:	f7fa fec4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 8005c3c:	21cf      	movs	r1, #207	@ 0xcf
 8005c3e:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8005c42:	f7fa febf 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 8005c46:	2102      	movs	r1, #2
 8005c48:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8005c4c:	f7fa feba 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 8005c50:	21de      	movs	r1, #222	@ 0xde
 8005c52:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8005c56:	f7fa feb5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8005c60:	f7fa feb0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 8005c64:	21f2      	movs	r1, #242	@ 0xf2
 8005c66:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8005c6a:	f7fa feab 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 8005c6e:	2102      	movs	r1, #2
 8005c70:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8005c74:	f7fa fea6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 8005c78:	21fe      	movs	r1, #254	@ 0xfe
 8005c7a:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8005c7e:	f7fa fea1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 8005c82:	2103      	movs	r1, #3
 8005c84:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8005c88:	f7fa fe9c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 8005c8c:	2110      	movs	r1, #16
 8005c8e:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8005c92:	f7fa fe97 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 8005c96:	2103      	movs	r1, #3
 8005c98:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8005c9c:	f7fa fe92 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 8005ca0:	2133      	movs	r1, #51	@ 0x33
 8005ca2:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8005ca6:	f7fa fe8d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 8005caa:	2103      	movs	r1, #3
 8005cac:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8005cb0:	f7fa fe88 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 8005cb4:	216d      	movs	r1, #109	@ 0x6d
 8005cb6:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8005cba:	f7fa fe83 	bl	80009c4 <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 8005cbe:	2155      	movs	r1, #85	@ 0x55
 8005cc0:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8005cc4:	f7fa fe7e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8005cc8:	21aa      	movs	r1, #170	@ 0xaa
 8005cca:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8005cce:	f7fa fe79 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005cd2:	2152      	movs	r1, #82	@ 0x52
 8005cd4:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8005cd8:	f7fa fe74 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8005cdc:	2108      	movs	r1, #8
 8005cde:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005ce2:	f7fa fe6f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005cec:	f7fa fe6a 	bl	80009c4 <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8005cf0:	21cc      	movs	r1, #204	@ 0xcc
 8005cf2:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005cf6:	f7fa fe65 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8005d00:	f7fa fe60 	bl	80009c4 <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 8005d04:	2105      	movs	r1, #5
 8005d06:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005d0a:	f7fa fe5b 	bl	80009c4 <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 8005d0e:	2170      	movs	r1, #112	@ 0x70
 8005d10:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8005d14:	f7fa fe56 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8005d18:	2170      	movs	r1, #112	@ 0x70
 8005d1a:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8005d1e:	f7fa fe51 	bl	80009c4 <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 8005d22:	2101      	movs	r1, #1
 8005d24:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8005d28:	f7fa fe4c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 8005d2c:	2103      	movs	r1, #3
 8005d2e:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005d32:	f7fa fe47 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 8005d36:	2103      	movs	r1, #3
 8005d38:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8005d3c:	f7fa fe42 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 8005d40:	2103      	movs	r1, #3
 8005d42:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8005d46:	f7fa fe3d 	bl	80009c4 <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005d50:	f7fa fe38 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 8005d54:	2100      	movs	r1, #0
 8005d56:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005d5a:	f7fa fe33 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005d5e:	2100      	movs	r1, #0
 8005d60:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005d64:	f7fa fe2e 	bl	80009c4 <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 8005d68:	21d0      	movs	r1, #208	@ 0xd0
 8005d6a:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8005d6e:	f7fa fe29 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 8005d72:	2102      	movs	r1, #2
 8005d74:	f64c 1001 	movw	r0, #51457	@ 0xc901
 8005d78:	f7fa fe24 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 8005d7c:	2150      	movs	r1, #80	@ 0x50
 8005d7e:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8005d82:	f7fa fe1f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 8005d86:	2150      	movs	r1, #80	@ 0x50
 8005d88:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8005d8c:	f7fa fe1a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 8005d90:	2150      	movs	r1, #80	@ 0x50
 8005d92:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8005d96:	f7fa fe15 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8005da0:	f7fa fe10 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8005da4:	2155      	movs	r1, #85	@ 0x55
 8005da6:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8005daa:	f7fa fe0b 	bl	80009c4 <lcd_write_reg>
 8005dae:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005db2:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005db6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e24 <lcd_init+0x422c>)
 8005db8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005dbc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005dbe:	4b19      	ldr	r3, [pc, #100]	@ (8005e24 <lcd_init+0x422c>)
 8005dc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005dc4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005dc6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	4b16      	ldr	r3, [pc, #88]	@ (8005e28 <lcd_init+0x4230>)
 8005dce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005dd0:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <lcd_init+0x422c>)
 8005dd2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005dd6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005dd8:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <lcd_init+0x422c>)
 8005dda:	2280      	movs	r2, #128	@ 0x80
 8005ddc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005dde:	4b11      	ldr	r3, [pc, #68]	@ (8005e24 <lcd_init+0x422c>)
 8005de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de4:	611a      	str	r2, [r3, #16]
}
 8005de6:	bf00      	nop
 8005de8:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 8005dec:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005df0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <lcd_init+0x422c>)
 8005df2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005df6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005df8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <lcd_init+0x422c>)
 8005dfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005dfe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e00:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <lcd_init+0x4230>)
 8005e08:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005e0a:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <lcd_init+0x422c>)
 8005e0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005e10:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005e12:	4b04      	ldr	r3, [pc, #16]	@ (8005e24 <lcd_init+0x422c>)
 8005e14:	2280      	movs	r2, #128	@ 0x80
 8005e16:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005e18:	4b02      	ldr	r3, [pc, #8]	@ (8005e24 <lcd_init+0x422c>)
 8005e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e1e:	611a      	str	r2, [r3, #16]
}
 8005e20:	f000 be33 	b.w	8006a8a <lcd_init+0x4e92>
 8005e24:	40011000 	.word	0x40011000
 8005e28:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 8005e2c:	4bc3      	ldr	r3, [pc, #780]	@ (800613c <lcd_init+0x4544>)
 8005e2e:	889b      	ldrh	r3, [r3, #4]
 8005e30:	f649 0206 	movw	r2, #38918	@ 0x9806
 8005e34:	4293      	cmp	r3, r2
 8005e36:	f040 8407 	bne.w	8006648 <lcd_init+0x4a50>
 8005e3a:	23ff      	movs	r3, #255	@ 0xff
 8005e3c:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005e40:	4bbf      	ldr	r3, [pc, #764]	@ (8006140 <lcd_init+0x4548>)
 8005e42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e46:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005e48:	4bbd      	ldr	r3, [pc, #756]	@ (8006140 <lcd_init+0x4548>)
 8005e4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e4e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e50:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	4bbb      	ldr	r3, [pc, #748]	@ (8006144 <lcd_init+0x454c>)
 8005e58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005e5a:	4bb9      	ldr	r3, [pc, #740]	@ (8006140 <lcd_init+0x4548>)
 8005e5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005e60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005e62:	4bb7      	ldr	r3, [pc, #732]	@ (8006140 <lcd_init+0x4548>)
 8005e64:	2280      	movs	r2, #128	@ 0x80
 8005e66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005e68:	4bb5      	ldr	r3, [pc, #724]	@ (8006140 <lcd_init+0x4548>)
 8005e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6e:	611a      	str	r2, [r3, #16]
}
 8005e70:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 8005e72:	20ff      	movs	r0, #255	@ 0xff
 8005e74:	f7fa fd82 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 8005e78:	2098      	movs	r0, #152	@ 0x98
 8005e7a:	f7fa fd7f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8005e7e:	2006      	movs	r0, #6
 8005e80:	f7fa fd7c 	bl	800097c <lcd_wr_xdata>
 8005e84:	23bc      	movs	r3, #188	@ 0xbc
 8005e86:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005e8a:	4bad      	ldr	r3, [pc, #692]	@ (8006140 <lcd_init+0x4548>)
 8005e8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e90:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005e92:	4bab      	ldr	r3, [pc, #684]	@ (8006140 <lcd_init+0x4548>)
 8005e94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e98:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e9a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	4ba8      	ldr	r3, [pc, #672]	@ (8006144 <lcd_init+0x454c>)
 8005ea2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005ea4:	4ba6      	ldr	r3, [pc, #664]	@ (8006140 <lcd_init+0x4548>)
 8005ea6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005eaa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005eac:	4ba4      	ldr	r3, [pc, #656]	@ (8006140 <lcd_init+0x4548>)
 8005eae:	2280      	movs	r2, #128	@ 0x80
 8005eb0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005eb2:	4ba3      	ldr	r3, [pc, #652]	@ (8006140 <lcd_init+0x4548>)
 8005eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eb8:	611a      	str	r2, [r3, #16]
}
 8005eba:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	f7fa fd5d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8005ec2:	200f      	movs	r0, #15
 8005ec4:	f7fa fd5a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8005ec8:	2061      	movs	r0, #97	@ 0x61
 8005eca:	f7fa fd57 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005ece:	20ff      	movs	r0, #255	@ 0xff
 8005ed0:	f7fa fd54 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	f7fa fd51 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005eda:	2001      	movs	r0, #1
 8005edc:	f7fa fd4e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8005ee0:	200b      	movs	r0, #11
 8005ee2:	f7fa fd4b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8005ee6:	2010      	movs	r0, #16
 8005ee8:	f7fa fd48 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 8005eec:	2037      	movs	r0, #55	@ 0x37
 8005eee:	f7fa fd45 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 8005ef2:	2063      	movs	r0, #99	@ 0x63
 8005ef4:	f7fa fd42 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005ef8:	20ff      	movs	r0, #255	@ 0xff
 8005efa:	f7fa fd3f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005efe:	20ff      	movs	r0, #255	@ 0xff
 8005f00:	f7fa fd3c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f04:	2001      	movs	r0, #1
 8005f06:	f7fa fd39 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	f7fa fd36 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005f10:	2000      	movs	r0, #0
 8005f12:	f7fa fd33 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005f16:	2000      	movs	r0, #0
 8005f18:	f7fa fd30 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005f1c:	20ff      	movs	r0, #255	@ 0xff
 8005f1e:	f7fa fd2d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8005f22:	2052      	movs	r0, #82	@ 0x52
 8005f24:	f7fa fd2a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f28:	2001      	movs	r0, #1
 8005f2a:	f7fa fd27 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005f2e:	2000      	movs	r0, #0
 8005f30:	f7fa fd24 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8005f34:	2040      	movs	r0, #64	@ 0x40
 8005f36:	f7fa fd21 	bl	800097c <lcd_wr_xdata>
 8005f3a:	23bd      	movs	r3, #189	@ 0xbd
 8005f3c:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005f40:	4b7f      	ldr	r3, [pc, #508]	@ (8006140 <lcd_init+0x4548>)
 8005f42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f46:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005f48:	4b7d      	ldr	r3, [pc, #500]	@ (8006140 <lcd_init+0x4548>)
 8005f4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f4e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005f50:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	4b7b      	ldr	r3, [pc, #492]	@ (8006144 <lcd_init+0x454c>)
 8005f58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005f5a:	4b79      	ldr	r3, [pc, #484]	@ (8006140 <lcd_init+0x4548>)
 8005f5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005f60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005f62:	4b77      	ldr	r3, [pc, #476]	@ (8006140 <lcd_init+0x4548>)
 8005f64:	2280      	movs	r2, #128	@ 0x80
 8005f66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005f68:	4b75      	ldr	r3, [pc, #468]	@ (8006140 <lcd_init+0x4548>)
 8005f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f6e:	611a      	str	r2, [r3, #16]
}
 8005f70:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 8005f72:	2001      	movs	r0, #1
 8005f74:	f7fa fd02 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005f78:	2023      	movs	r0, #35	@ 0x23
 8005f7a:	f7fa fcff 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005f7e:	2045      	movs	r0, #69	@ 0x45
 8005f80:	f7fa fcfc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005f84:	2067      	movs	r0, #103	@ 0x67
 8005f86:	f7fa fcf9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	f7fa fcf6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005f90:	2023      	movs	r0, #35	@ 0x23
 8005f92:	f7fa fcf3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005f96:	2045      	movs	r0, #69	@ 0x45
 8005f98:	f7fa fcf0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005f9c:	2067      	movs	r0, #103	@ 0x67
 8005f9e:	f7fa fced 	bl	800097c <lcd_wr_xdata>
 8005fa2:	23be      	movs	r3, #190	@ 0xbe
 8005fa4:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005fa8:	4b65      	ldr	r3, [pc, #404]	@ (8006140 <lcd_init+0x4548>)
 8005faa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005fb0:	4b63      	ldr	r3, [pc, #396]	@ (8006140 <lcd_init+0x4548>)
 8005fb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005fb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005fb8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	4b61      	ldr	r3, [pc, #388]	@ (8006144 <lcd_init+0x454c>)
 8005fc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8006140 <lcd_init+0x4548>)
 8005fc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005fc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005fca:	4b5d      	ldr	r3, [pc, #372]	@ (8006140 <lcd_init+0x4548>)
 8005fcc:	2280      	movs	r2, #128	@ 0x80
 8005fce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8006140 <lcd_init+0x4548>)
 8005fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fd6:	611a      	str	r2, [r3, #16]
}
 8005fd8:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f7fa fcce 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	f7fa fccb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 8005fe6:	20ab      	movs	r0, #171	@ 0xab
 8005fe8:	f7fa fcc8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 8005fec:	2060      	movs	r0, #96	@ 0x60
 8005fee:	f7fa fcc5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005ff2:	2022      	movs	r0, #34	@ 0x22
 8005ff4:	f7fa fcc2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005ff8:	2022      	movs	r0, #34	@ 0x22
 8005ffa:	f7fa fcbf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005ffe:	2022      	movs	r0, #34	@ 0x22
 8006000:	f7fa fcbc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006004:	2022      	movs	r0, #34	@ 0x22
 8006006:	f7fa fcb9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800600a:	2022      	movs	r0, #34	@ 0x22
 800600c:	f7fa fcb6 	bl	800097c <lcd_wr_xdata>
 8006010:	23c7      	movs	r3, #199	@ 0xc7
 8006012:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006016:	4b4a      	ldr	r3, [pc, #296]	@ (8006140 <lcd_init+0x4548>)
 8006018:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800601c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800601e:	4b48      	ldr	r3, [pc, #288]	@ (8006140 <lcd_init+0x4548>)
 8006020:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006024:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006026:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800602a:	b29a      	uxth	r2, r3
 800602c:	4b45      	ldr	r3, [pc, #276]	@ (8006144 <lcd_init+0x454c>)
 800602e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006030:	4b43      	ldr	r3, [pc, #268]	@ (8006140 <lcd_init+0x4548>)
 8006032:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006036:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006038:	4b41      	ldr	r3, [pc, #260]	@ (8006140 <lcd_init+0x4548>)
 800603a:	2280      	movs	r2, #128	@ 0x80
 800603c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800603e:	4b40      	ldr	r3, [pc, #256]	@ (8006140 <lcd_init+0x4548>)
 8006040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006044:	611a      	str	r2, [r3, #16]
}
 8006046:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 8006048:	2036      	movs	r0, #54	@ 0x36
 800604a:	f7fa fc97 	bl	800097c <lcd_wr_xdata>
 800604e:	23ed      	movs	r3, #237	@ 0xed
 8006050:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006054:	4b3a      	ldr	r3, [pc, #232]	@ (8006140 <lcd_init+0x4548>)
 8006056:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800605a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800605c:	4b38      	ldr	r3, [pc, #224]	@ (8006140 <lcd_init+0x4548>)
 800605e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006062:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006064:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8006068:	b29a      	uxth	r2, r3
 800606a:	4b36      	ldr	r3, [pc, #216]	@ (8006144 <lcd_init+0x454c>)
 800606c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800606e:	4b34      	ldr	r3, [pc, #208]	@ (8006140 <lcd_init+0x4548>)
 8006070:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006074:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006076:	4b32      	ldr	r3, [pc, #200]	@ (8006140 <lcd_init+0x4548>)
 8006078:	2280      	movs	r2, #128	@ 0x80
 800607a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800607c:	4b30      	ldr	r3, [pc, #192]	@ (8006140 <lcd_init+0x4548>)
 800607e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006082:	611a      	str	r2, [r3, #16]
}
 8006084:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 8006086:	207f      	movs	r0, #127	@ 0x7f
 8006088:	f7fa fc78 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 800608c:	200f      	movs	r0, #15
 800608e:	f7fa fc75 	bl	800097c <lcd_wr_xdata>
 8006092:	23c0      	movs	r3, #192	@ 0xc0
 8006094:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006098:	4b29      	ldr	r3, [pc, #164]	@ (8006140 <lcd_init+0x4548>)
 800609a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800609e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060a0:	4b27      	ldr	r3, [pc, #156]	@ (8006140 <lcd_init+0x4548>)
 80060a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060a6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80060a8:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	4b25      	ldr	r3, [pc, #148]	@ (8006144 <lcd_init+0x454c>)
 80060b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80060b2:	4b23      	ldr	r3, [pc, #140]	@ (8006140 <lcd_init+0x4548>)
 80060b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80060b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80060ba:	4b21      	ldr	r3, [pc, #132]	@ (8006140 <lcd_init+0x4548>)
 80060bc:	2280      	movs	r2, #128	@ 0x80
 80060be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80060c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006140 <lcd_init+0x4548>)
 80060c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c6:	611a      	str	r2, [r3, #16]
}
 80060c8:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 80060ca:	200f      	movs	r0, #15
 80060cc:	f7fa fc56 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 80060d0:	200b      	movs	r0, #11
 80060d2:	f7fa fc53 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 80060d6:	200a      	movs	r0, #10
 80060d8:	f7fa fc50 	bl	800097c <lcd_wr_xdata>
 80060dc:	23fc      	movs	r3, #252	@ 0xfc
 80060de:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80060e2:	4b17      	ldr	r3, [pc, #92]	@ (8006140 <lcd_init+0x4548>)
 80060e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060ea:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <lcd_init+0x4548>)
 80060ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80060f2:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	4b12      	ldr	r3, [pc, #72]	@ (8006144 <lcd_init+0x454c>)
 80060fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80060fc:	4b10      	ldr	r3, [pc, #64]	@ (8006140 <lcd_init+0x4548>)
 80060fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006102:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006104:	4b0e      	ldr	r3, [pc, #56]	@ (8006140 <lcd_init+0x4548>)
 8006106:	2280      	movs	r2, #128	@ 0x80
 8006108:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800610a:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <lcd_init+0x4548>)
 800610c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006110:	611a      	str	r2, [r3, #16]
}
 8006112:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 8006114:	2008      	movs	r0, #8
 8006116:	f7fa fc31 	bl	800097c <lcd_wr_xdata>
 800611a:	23df      	movs	r3, #223	@ 0xdf
 800611c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006120:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <lcd_init+0x4548>)
 8006122:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006126:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006128:	4b05      	ldr	r3, [pc, #20]	@ (8006140 <lcd_init+0x4548>)
 800612a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800612e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006130:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8006134:	b29a      	uxth	r2, r3
 8006136:	4b03      	ldr	r3, [pc, #12]	@ (8006144 <lcd_init+0x454c>)
 8006138:	60da      	str	r2, [r3, #12]
 800613a:	e005      	b.n	8006148 <lcd_init+0x4550>
 800613c:	20002ab8 	.word	0x20002ab8
 8006140:	40011000 	.word	0x40011000
 8006144:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006148:	4bc7      	ldr	r3, [pc, #796]	@ (8006468 <lcd_init+0x4870>)
 800614a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800614e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006150:	4bc5      	ldr	r3, [pc, #788]	@ (8006468 <lcd_init+0x4870>)
 8006152:	2280      	movs	r2, #128	@ 0x80
 8006154:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006156:	4bc4      	ldr	r3, [pc, #784]	@ (8006468 <lcd_init+0x4870>)
 8006158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800615c:	611a      	str	r2, [r3, #16]
}
 800615e:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 8006160:	2000      	movs	r0, #0
 8006162:	f7fa fc0b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006166:	2000      	movs	r0, #0
 8006168:	f7fa fc08 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800616c:	2000      	movs	r0, #0
 800616e:	f7fa fc05 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006172:	2000      	movs	r0, #0
 8006174:	f7fa fc02 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006178:	2000      	movs	r0, #0
 800617a:	f7fa fbff 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800617e:	2020      	movs	r0, #32
 8006180:	f7fa fbfc 	bl	800097c <lcd_wr_xdata>
 8006184:	23f3      	movs	r3, #243	@ 0xf3
 8006186:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800618a:	4bb7      	ldr	r3, [pc, #732]	@ (8006468 <lcd_init+0x4870>)
 800618c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006190:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006192:	4bb5      	ldr	r3, [pc, #724]	@ (8006468 <lcd_init+0x4870>)
 8006194:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006198:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800619a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800619e:	b29a      	uxth	r2, r3
 80061a0:	4bb2      	ldr	r3, [pc, #712]	@ (800646c <lcd_init+0x4874>)
 80061a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80061a4:	4bb0      	ldr	r3, [pc, #704]	@ (8006468 <lcd_init+0x4870>)
 80061a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061ac:	4bae      	ldr	r3, [pc, #696]	@ (8006468 <lcd_init+0x4870>)
 80061ae:	2280      	movs	r2, #128	@ 0x80
 80061b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061b2:	4bad      	ldr	r3, [pc, #692]	@ (8006468 <lcd_init+0x4870>)
 80061b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061b8:	611a      	str	r2, [r3, #16]
}
 80061ba:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 80061bc:	2074      	movs	r0, #116	@ 0x74
 80061be:	f7fa fbdd 	bl	800097c <lcd_wr_xdata>
 80061c2:	23b4      	movs	r3, #180	@ 0xb4
 80061c4:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80061c8:	4ba7      	ldr	r3, [pc, #668]	@ (8006468 <lcd_init+0x4870>)
 80061ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061ce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80061d0:	4ba5      	ldr	r3, [pc, #660]	@ (8006468 <lcd_init+0x4870>)
 80061d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061d6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80061d8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80061dc:	b29a      	uxth	r2, r3
 80061de:	4ba3      	ldr	r3, [pc, #652]	@ (800646c <lcd_init+0x4874>)
 80061e0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80061e2:	4ba1      	ldr	r3, [pc, #644]	@ (8006468 <lcd_init+0x4870>)
 80061e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061e8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061ea:	4b9f      	ldr	r3, [pc, #636]	@ (8006468 <lcd_init+0x4870>)
 80061ec:	2280      	movs	r2, #128	@ 0x80
 80061ee:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061f0:	4b9d      	ldr	r3, [pc, #628]	@ (8006468 <lcd_init+0x4870>)
 80061f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061f6:	611a      	str	r2, [r3, #16]
}
 80061f8:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 80061fa:	2000      	movs	r0, #0
 80061fc:	f7fa fbbe 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006200:	2000      	movs	r0, #0
 8006202:	f7fa fbbb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006206:	2000      	movs	r0, #0
 8006208:	f7fa fbb8 	bl	800097c <lcd_wr_xdata>
 800620c:	23f7      	movs	r3, #247	@ 0xf7
 800620e:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006212:	4b95      	ldr	r3, [pc, #596]	@ (8006468 <lcd_init+0x4870>)
 8006214:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006218:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800621a:	4b93      	ldr	r3, [pc, #588]	@ (8006468 <lcd_init+0x4870>)
 800621c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006220:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006222:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 8006226:	b29a      	uxth	r2, r3
 8006228:	4b90      	ldr	r3, [pc, #576]	@ (800646c <lcd_init+0x4874>)
 800622a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800622c:	4b8e      	ldr	r3, [pc, #568]	@ (8006468 <lcd_init+0x4870>)
 800622e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006232:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006234:	4b8c      	ldr	r3, [pc, #560]	@ (8006468 <lcd_init+0x4870>)
 8006236:	2280      	movs	r2, #128	@ 0x80
 8006238:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800623a:	4b8b      	ldr	r3, [pc, #556]	@ (8006468 <lcd_init+0x4870>)
 800623c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006240:	611a      	str	r2, [r3, #16]
}
 8006242:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 8006244:	2082      	movs	r0, #130	@ 0x82
 8006246:	f7fa fb99 	bl	800097c <lcd_wr_xdata>
 800624a:	23b1      	movs	r3, #177	@ 0xb1
 800624c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006250:	4b85      	ldr	r3, [pc, #532]	@ (8006468 <lcd_init+0x4870>)
 8006252:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006256:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006258:	4b83      	ldr	r3, [pc, #524]	@ (8006468 <lcd_init+0x4870>)
 800625a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800625e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006260:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8006264:	b29a      	uxth	r2, r3
 8006266:	4b81      	ldr	r3, [pc, #516]	@ (800646c <lcd_init+0x4874>)
 8006268:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800626a:	4b7f      	ldr	r3, [pc, #508]	@ (8006468 <lcd_init+0x4870>)
 800626c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006270:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006272:	4b7d      	ldr	r3, [pc, #500]	@ (8006468 <lcd_init+0x4870>)
 8006274:	2280      	movs	r2, #128	@ 0x80
 8006276:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006278:	4b7b      	ldr	r3, [pc, #492]	@ (8006468 <lcd_init+0x4870>)
 800627a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800627e:	611a      	str	r2, [r3, #16]
}
 8006280:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 8006282:	2000      	movs	r0, #0
 8006284:	f7fa fb7a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8006288:	2013      	movs	r0, #19
 800628a:	f7fa fb77 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 800628e:	2013      	movs	r0, #19
 8006290:	f7fa fb74 	bl	800097c <lcd_wr_xdata>
 8006294:	23f2      	movs	r3, #242	@ 0xf2
 8006296:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800629a:	4b73      	ldr	r3, [pc, #460]	@ (8006468 <lcd_init+0x4870>)
 800629c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80062a2:	4b71      	ldr	r3, [pc, #452]	@ (8006468 <lcd_init+0x4870>)
 80062a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80062aa:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	4b6e      	ldr	r3, [pc, #440]	@ (800646c <lcd_init+0x4874>)
 80062b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80062b4:	4b6c      	ldr	r3, [pc, #432]	@ (8006468 <lcd_init+0x4870>)
 80062b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80062ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80062bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006468 <lcd_init+0x4870>)
 80062be:	2280      	movs	r2, #128	@ 0x80
 80062c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80062c2:	4b69      	ldr	r3, [pc, #420]	@ (8006468 <lcd_init+0x4870>)
 80062c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062c8:	611a      	str	r2, [r3, #16]
}
 80062ca:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 80062cc:	2080      	movs	r0, #128	@ 0x80
 80062ce:	f7fa fb55 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80062d2:	2004      	movs	r0, #4
 80062d4:	f7fa fb52 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 80062d8:	2040      	movs	r0, #64	@ 0x40
 80062da:	f7fa fb4f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80062de:	2028      	movs	r0, #40	@ 0x28
 80062e0:	f7fa fb4c 	bl	800097c <lcd_wr_xdata>
 80062e4:	23c1      	movs	r3, #193	@ 0xc1
 80062e6:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80062ea:	4b5f      	ldr	r3, [pc, #380]	@ (8006468 <lcd_init+0x4870>)
 80062ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80062f2:	4b5d      	ldr	r3, [pc, #372]	@ (8006468 <lcd_init+0x4870>)
 80062f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80062fa:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80062fe:	b29a      	uxth	r2, r3
 8006300:	4b5a      	ldr	r3, [pc, #360]	@ (800646c <lcd_init+0x4874>)
 8006302:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006304:	4b58      	ldr	r3, [pc, #352]	@ (8006468 <lcd_init+0x4870>)
 8006306:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800630a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800630c:	4b56      	ldr	r3, [pc, #344]	@ (8006468 <lcd_init+0x4870>)
 800630e:	2280      	movs	r2, #128	@ 0x80
 8006310:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006312:	4b55      	ldr	r3, [pc, #340]	@ (8006468 <lcd_init+0x4870>)
 8006314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006318:	611a      	str	r2, [r3, #16]
}
 800631a:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 800631c:	2017      	movs	r0, #23
 800631e:	f7fa fb2d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 8006322:	2088      	movs	r0, #136	@ 0x88
 8006324:	f7fa fb2a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 8006328:	2088      	movs	r0, #136	@ 0x88
 800632a:	f7fa fb27 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800632e:	2020      	movs	r0, #32
 8006330:	f7fa fb24 	bl	800097c <lcd_wr_xdata>
 8006334:	23e0      	movs	r3, #224	@ 0xe0
 8006336:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800633a:	4b4b      	ldr	r3, [pc, #300]	@ (8006468 <lcd_init+0x4870>)
 800633c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006340:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006342:	4b49      	ldr	r3, [pc, #292]	@ (8006468 <lcd_init+0x4870>)
 8006344:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006348:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800634a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800634e:	b29a      	uxth	r2, r3
 8006350:	4b46      	ldr	r3, [pc, #280]	@ (800646c <lcd_init+0x4874>)
 8006352:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006354:	4b44      	ldr	r3, [pc, #272]	@ (8006468 <lcd_init+0x4870>)
 8006356:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800635a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800635c:	4b42      	ldr	r3, [pc, #264]	@ (8006468 <lcd_init+0x4870>)
 800635e:	2280      	movs	r2, #128	@ 0x80
 8006360:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006362:	4b41      	ldr	r3, [pc, #260]	@ (8006468 <lcd_init+0x4870>)
 8006364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006368:	611a      	str	r2, [r3, #16]
}
 800636a:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 800636c:	2000      	movs	r0, #0
 800636e:	f7fa fb05 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 8006372:	200a      	movs	r0, #10
 8006374:	f7fa fb02 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 8006378:	2012      	movs	r0, #18
 800637a:	f7fa faff 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 800637e:	2010      	movs	r0, #16
 8006380:	f7fa fafc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006384:	200e      	movs	r0, #14
 8006386:	f7fa faf9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 800638a:	2020      	movs	r0, #32
 800638c:	f7fa faf6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 8006390:	20cc      	movs	r0, #204	@ 0xcc
 8006392:	f7fa faf3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 8006396:	2007      	movs	r0, #7
 8006398:	f7fa faf0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 800639c:	2006      	movs	r0, #6
 800639e:	f7fa faed 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 80063a2:	200b      	movs	r0, #11
 80063a4:	f7fa faea 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 80063a8:	200e      	movs	r0, #14
 80063aa:	f7fa fae7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 80063ae:	200f      	movs	r0, #15
 80063b0:	f7fa fae4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 80063b4:	200d      	movs	r0, #13
 80063b6:	f7fa fae1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 80063ba:	2015      	movs	r0, #21
 80063bc:	f7fa fade 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 80063c0:	2010      	movs	r0, #16
 80063c2:	f7fa fadb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 80063c6:	2000      	movs	r0, #0
 80063c8:	f7fa fad8 	bl	800097c <lcd_wr_xdata>
 80063cc:	23e1      	movs	r3, #225	@ 0xe1
 80063ce:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063d2:	4b25      	ldr	r3, [pc, #148]	@ (8006468 <lcd_init+0x4870>)
 80063d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063d8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80063da:	4b23      	ldr	r3, [pc, #140]	@ (8006468 <lcd_init+0x4870>)
 80063dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063e0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80063e2:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	4b20      	ldr	r3, [pc, #128]	@ (800646c <lcd_init+0x4874>)
 80063ea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80063ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <lcd_init+0x4870>)
 80063ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80063f2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80063f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006468 <lcd_init+0x4870>)
 80063f6:	2280      	movs	r2, #128	@ 0x80
 80063f8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80063fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006468 <lcd_init+0x4870>)
 80063fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006400:	611a      	str	r2, [r3, #16]
}
 8006402:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 8006404:	2000      	movs	r0, #0
 8006406:	f7fa fab9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 800640a:	200b      	movs	r0, #11
 800640c:	f7fa fab6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 8006410:	2013      	movs	r0, #19
 8006412:	f7fa fab3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 8006416:	200d      	movs	r0, #13
 8006418:	f7fa fab0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 800641c:	200e      	movs	r0, #14
 800641e:	f7fa faad 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 8006422:	201b      	movs	r0, #27
 8006424:	f7fa faaa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 8006428:	2071      	movs	r0, #113	@ 0x71
 800642a:	f7fa faa7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 800642e:	2006      	movs	r0, #6
 8006430:	f7fa faa4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 8006434:	2006      	movs	r0, #6
 8006436:	f7fa faa1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 800643a:	200a      	movs	r0, #10
 800643c:	f7fa fa9e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 8006440:	200f      	movs	r0, #15
 8006442:	f7fa fa9b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 8006446:	200e      	movs	r0, #14
 8006448:	f7fa fa98 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 800644c:	200f      	movs	r0, #15
 800644e:	f7fa fa95 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 8006452:	2015      	movs	r0, #21
 8006454:	f7fa fa92 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 8006458:	200c      	movs	r0, #12
 800645a:	f7fa fa8f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 800645e:	2000      	movs	r0, #0
 8006460:	f7fa fa8c 	bl	800097c <lcd_wr_xdata>
 8006464:	e004      	b.n	8006470 <lcd_init+0x4878>
 8006466:	bf00      	nop
 8006468:	40011000 	.word	0x40011000
 800646c:	40010c00 	.word	0x40010c00
 8006470:	232a      	movs	r3, #42	@ 0x2a
 8006472:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006476:	4b72      	ldr	r3, [pc, #456]	@ (8006640 <lcd_init+0x4a48>)
 8006478:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800647c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800647e:	4b70      	ldr	r3, [pc, #448]	@ (8006640 <lcd_init+0x4a48>)
 8006480:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006484:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006486:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800648a:	b29a      	uxth	r2, r3
 800648c:	4b6d      	ldr	r3, [pc, #436]	@ (8006644 <lcd_init+0x4a4c>)
 800648e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006490:	4b6b      	ldr	r3, [pc, #428]	@ (8006640 <lcd_init+0x4a48>)
 8006492:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006496:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006498:	4b69      	ldr	r3, [pc, #420]	@ (8006640 <lcd_init+0x4a48>)
 800649a:	2280      	movs	r2, #128	@ 0x80
 800649c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800649e:	4b68      	ldr	r3, [pc, #416]	@ (8006640 <lcd_init+0x4a48>)
 80064a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064a4:	611a      	str	r2, [r3, #16]
}
 80064a6:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 80064a8:	2000      	movs	r0, #0
 80064aa:	f7fa fa67 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80064ae:	2000      	movs	r0, #0
 80064b0:	f7fa fa64 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80064b4:	2001      	movs	r0, #1
 80064b6:	f7fa fa61 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 80064ba:	20df      	movs	r0, #223	@ 0xdf
 80064bc:	f7fa fa5e 	bl	800097c <lcd_wr_xdata>
 80064c0:	232b      	movs	r3, #43	@ 0x2b
 80064c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80064c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006640 <lcd_init+0x4a48>)
 80064c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80064ce:	4b5c      	ldr	r3, [pc, #368]	@ (8006640 <lcd_init+0x4a48>)
 80064d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80064d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80064d6:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 80064da:	b29a      	uxth	r2, r3
 80064dc:	4b59      	ldr	r3, [pc, #356]	@ (8006644 <lcd_init+0x4a4c>)
 80064de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064e0:	4b57      	ldr	r3, [pc, #348]	@ (8006640 <lcd_init+0x4a48>)
 80064e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80064e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064e8:	4b55      	ldr	r3, [pc, #340]	@ (8006640 <lcd_init+0x4a48>)
 80064ea:	2280      	movs	r2, #128	@ 0x80
 80064ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064ee:	4b54      	ldr	r3, [pc, #336]	@ (8006640 <lcd_init+0x4a48>)
 80064f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064f4:	611a      	str	r2, [r3, #16]
}
 80064f6:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 80064f8:	2000      	movs	r0, #0
 80064fa:	f7fa fa3f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80064fe:	2000      	movs	r0, #0
 8006500:	f7fa fa3c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8006504:	2003      	movs	r0, #3
 8006506:	f7fa fa39 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 800650a:	201f      	movs	r0, #31
 800650c:	f7fa fa36 	bl	800097c <lcd_wr_xdata>
 8006510:	233a      	movs	r3, #58	@ 0x3a
 8006512:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006516:	4b4a      	ldr	r3, [pc, #296]	@ (8006640 <lcd_init+0x4a48>)
 8006518:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800651c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800651e:	4b48      	ldr	r3, [pc, #288]	@ (8006640 <lcd_init+0x4a48>)
 8006520:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006524:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006526:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800652a:	b29a      	uxth	r2, r3
 800652c:	4b45      	ldr	r3, [pc, #276]	@ (8006644 <lcd_init+0x4a4c>)
 800652e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006530:	4b43      	ldr	r3, [pc, #268]	@ (8006640 <lcd_init+0x4a48>)
 8006532:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006536:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006538:	4b41      	ldr	r3, [pc, #260]	@ (8006640 <lcd_init+0x4a48>)
 800653a:	2280      	movs	r2, #128	@ 0x80
 800653c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800653e:	4b40      	ldr	r3, [pc, #256]	@ (8006640 <lcd_init+0x4a48>)
 8006540:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006544:	611a      	str	r2, [r3, #16]
}
 8006546:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 8006548:	2055      	movs	r0, #85	@ 0x55
 800654a:	f7fa fa17 	bl	800097c <lcd_wr_xdata>
 800654e:	2336      	movs	r3, #54	@ 0x36
 8006550:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006554:	4b3a      	ldr	r3, [pc, #232]	@ (8006640 <lcd_init+0x4a48>)
 8006556:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800655a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800655c:	4b38      	ldr	r3, [pc, #224]	@ (8006640 <lcd_init+0x4a48>)
 800655e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006562:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006564:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8006568:	b29a      	uxth	r2, r3
 800656a:	4b36      	ldr	r3, [pc, #216]	@ (8006644 <lcd_init+0x4a4c>)
 800656c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800656e:	4b34      	ldr	r3, [pc, #208]	@ (8006640 <lcd_init+0x4a48>)
 8006570:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006574:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006576:	4b32      	ldr	r3, [pc, #200]	@ (8006640 <lcd_init+0x4a48>)
 8006578:	2280      	movs	r2, #128	@ 0x80
 800657a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800657c:	4b30      	ldr	r3, [pc, #192]	@ (8006640 <lcd_init+0x4a48>)
 800657e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006582:	611a      	str	r2, [r3, #16]
}
 8006584:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 8006586:	2000      	movs	r0, #0
 8006588:	f7fa f9f8 	bl	800097c <lcd_wr_xdata>
 800658c:	2311      	movs	r3, #17
 800658e:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006592:	4b2b      	ldr	r3, [pc, #172]	@ (8006640 <lcd_init+0x4a48>)
 8006594:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006598:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800659a:	4b29      	ldr	r3, [pc, #164]	@ (8006640 <lcd_init+0x4a48>)
 800659c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065a0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065a2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	4b26      	ldr	r3, [pc, #152]	@ (8006644 <lcd_init+0x4a4c>)
 80065aa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065ac:	4b24      	ldr	r3, [pc, #144]	@ (8006640 <lcd_init+0x4a48>)
 80065ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065b2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065b4:	4b22      	ldr	r3, [pc, #136]	@ (8006640 <lcd_init+0x4a48>)
 80065b6:	2280      	movs	r2, #128	@ 0x80
 80065b8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80065ba:	4b21      	ldr	r3, [pc, #132]	@ (8006640 <lcd_init+0x4a48>)
 80065bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065c0:	611a      	str	r2, [r3, #16]
}
 80065c2:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 80065c4:	2078      	movs	r0, #120	@ 0x78
 80065c6:	f001 fb05 	bl	8007bd4 <HAL_Delay>
 80065ca:	2329      	movs	r3, #41	@ 0x29
 80065cc:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006640 <lcd_init+0x4a48>)
 80065d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065d8:	4b19      	ldr	r3, [pc, #100]	@ (8006640 <lcd_init+0x4a48>)
 80065da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065e0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	4b17      	ldr	r3, [pc, #92]	@ (8006644 <lcd_init+0x4a4c>)
 80065e8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065ea:	4b15      	ldr	r3, [pc, #84]	@ (8006640 <lcd_init+0x4a48>)
 80065ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065f0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065f2:	4b13      	ldr	r3, [pc, #76]	@ (8006640 <lcd_init+0x4a48>)
 80065f4:	2280      	movs	r2, #128	@ 0x80
 80065f6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80065f8:	4b11      	ldr	r3, [pc, #68]	@ (8006640 <lcd_init+0x4a48>)
 80065fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065fe:	611a      	str	r2, [r3, #16]
}
 8006600:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 8006602:	2014      	movs	r0, #20
 8006604:	f001 fae6 	bl	8007bd4 <HAL_Delay>
 8006608:	232c      	movs	r3, #44	@ 0x2c
 800660a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800660e:	4b0c      	ldr	r3, [pc, #48]	@ (8006640 <lcd_init+0x4a48>)
 8006610:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006614:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <lcd_init+0x4a48>)
 8006618:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800661c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800661e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 8006622:	b29a      	uxth	r2, r3
 8006624:	4b07      	ldr	r3, [pc, #28]	@ (8006644 <lcd_init+0x4a4c>)
 8006626:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006628:	4b05      	ldr	r3, [pc, #20]	@ (8006640 <lcd_init+0x4a48>)
 800662a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800662e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006630:	4b03      	ldr	r3, [pc, #12]	@ (8006640 <lcd_init+0x4a48>)
 8006632:	2280      	movs	r2, #128	@ 0x80
 8006634:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006636:	4b02      	ldr	r3, [pc, #8]	@ (8006640 <lcd_init+0x4a48>)
 8006638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800663c:	611a      	str	r2, [r3, #16]
}
 800663e:	e224      	b.n	8006a8a <lcd_init+0x4e92>
 8006640:	40011000 	.word	0x40011000
 8006644:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 8006648:	4bbe      	ldr	r3, [pc, #760]	@ (8006944 <lcd_init+0x4d4c>)
 800664a:	889b      	ldrh	r3, [r3, #4]
 800664c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006650:	4293      	cmp	r3, r2
 8006652:	f040 821a 	bne.w	8006a8a <lcd_init+0x4e92>
 8006656:	23e2      	movs	r3, #226	@ 0xe2
 8006658:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800665c:	4bba      	ldr	r3, [pc, #744]	@ (8006948 <lcd_init+0x4d50>)
 800665e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006662:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006664:	4bb8      	ldr	r3, [pc, #736]	@ (8006948 <lcd_init+0x4d50>)
 8006666:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800666a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800666c:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 8006670:	b29a      	uxth	r2, r3
 8006672:	4bb6      	ldr	r3, [pc, #728]	@ (800694c <lcd_init+0x4d54>)
 8006674:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006676:	4bb4      	ldr	r3, [pc, #720]	@ (8006948 <lcd_init+0x4d50>)
 8006678:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800667c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800667e:	4bb2      	ldr	r3, [pc, #712]	@ (8006948 <lcd_init+0x4d50>)
 8006680:	2280      	movs	r2, #128	@ 0x80
 8006682:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006684:	4bb0      	ldr	r3, [pc, #704]	@ (8006948 <lcd_init+0x4d50>)
 8006686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800668a:	611a      	str	r2, [r3, #16]
}
 800668c:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 800668e:	201d      	movs	r0, #29
 8006690:	f7fa f974 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 8006694:	2002      	movs	r0, #2
 8006696:	f7fa f971 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 800669a:	2004      	movs	r0, #4
 800669c:	f7fa f96e 	bl	800097c <lcd_wr_xdata>
 80066a0:	23e0      	movs	r3, #224	@ 0xe0
 80066a2:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066a6:	4ba8      	ldr	r3, [pc, #672]	@ (8006948 <lcd_init+0x4d50>)
 80066a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066ac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066ae:	4ba6      	ldr	r3, [pc, #664]	@ (8006948 <lcd_init+0x4d50>)
 80066b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066b4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066b6:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	4ba3      	ldr	r3, [pc, #652]	@ (800694c <lcd_init+0x4d54>)
 80066be:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80066c0:	4ba1      	ldr	r3, [pc, #644]	@ (8006948 <lcd_init+0x4d50>)
 80066c2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80066c6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80066c8:	4b9f      	ldr	r3, [pc, #636]	@ (8006948 <lcd_init+0x4d50>)
 80066ca:	2280      	movs	r2, #128	@ 0x80
 80066cc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066ce:	4b9e      	ldr	r3, [pc, #632]	@ (8006948 <lcd_init+0x4d50>)
 80066d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066d4:	611a      	str	r2, [r3, #16]
}
 80066d6:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 80066d8:	2001      	movs	r0, #1
 80066da:	f7fa f94f 	bl	800097c <lcd_wr_xdata>
        HAL_Delay(10);
 80066de:	200a      	movs	r0, #10
 80066e0:	f001 fa78 	bl	8007bd4 <HAL_Delay>
 80066e4:	23e0      	movs	r3, #224	@ 0xe0
 80066e6:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066ea:	4b97      	ldr	r3, [pc, #604]	@ (8006948 <lcd_init+0x4d50>)
 80066ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066f2:	4b95      	ldr	r3, [pc, #596]	@ (8006948 <lcd_init+0x4d50>)
 80066f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066fa:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 80066fe:	b29a      	uxth	r2, r3
 8006700:	4b92      	ldr	r3, [pc, #584]	@ (800694c <lcd_init+0x4d54>)
 8006702:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006704:	4b90      	ldr	r3, [pc, #576]	@ (8006948 <lcd_init+0x4d50>)
 8006706:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800670a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800670c:	4b8e      	ldr	r3, [pc, #568]	@ (8006948 <lcd_init+0x4d50>)
 800670e:	2280      	movs	r2, #128	@ 0x80
 8006710:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006712:	4b8d      	ldr	r3, [pc, #564]	@ (8006948 <lcd_init+0x4d50>)
 8006714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006718:	611a      	str	r2, [r3, #16]
}
 800671a:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 800671c:	2003      	movs	r0, #3
 800671e:	f7fa f92d 	bl	800097c <lcd_wr_xdata>
        HAL_Delay(12);
 8006722:	200c      	movs	r0, #12
 8006724:	f001 fa56 	bl	8007bd4 <HAL_Delay>
 8006728:	2301      	movs	r3, #1
 800672a:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800672e:	4b86      	ldr	r3, [pc, #536]	@ (8006948 <lcd_init+0x4d50>)
 8006730:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006734:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006736:	4b84      	ldr	r3, [pc, #528]	@ (8006948 <lcd_init+0x4d50>)
 8006738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800673c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800673e:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 8006742:	b29a      	uxth	r2, r3
 8006744:	4b81      	ldr	r3, [pc, #516]	@ (800694c <lcd_init+0x4d54>)
 8006746:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006748:	4b7f      	ldr	r3, [pc, #508]	@ (8006948 <lcd_init+0x4d50>)
 800674a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800674e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006750:	4b7d      	ldr	r3, [pc, #500]	@ (8006948 <lcd_init+0x4d50>)
 8006752:	2280      	movs	r2, #128	@ 0x80
 8006754:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006756:	4b7c      	ldr	r3, [pc, #496]	@ (8006948 <lcd_init+0x4d50>)
 8006758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800675c:	611a      	str	r2, [r3, #16]
}
 800675e:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 8006760:	200a      	movs	r0, #10
 8006762:	f001 fa37 	bl	8007bd4 <HAL_Delay>
 8006766:	23e6      	movs	r3, #230	@ 0xe6
 8006768:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800676c:	4b76      	ldr	r3, [pc, #472]	@ (8006948 <lcd_init+0x4d50>)
 800676e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006772:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006774:	4b74      	ldr	r3, [pc, #464]	@ (8006948 <lcd_init+0x4d50>)
 8006776:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800677a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800677c:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 8006780:	b29a      	uxth	r2, r3
 8006782:	4b72      	ldr	r3, [pc, #456]	@ (800694c <lcd_init+0x4d54>)
 8006784:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006786:	4b70      	ldr	r3, [pc, #448]	@ (8006948 <lcd_init+0x4d50>)
 8006788:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800678c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800678e:	4b6e      	ldr	r3, [pc, #440]	@ (8006948 <lcd_init+0x4d50>)
 8006790:	2280      	movs	r2, #128	@ 0x80
 8006792:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006794:	4b6c      	ldr	r3, [pc, #432]	@ (8006948 <lcd_init+0x4d50>)
 8006796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800679a:	611a      	str	r2, [r3, #16]
}
 800679c:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 800679e:	202f      	movs	r0, #47	@ 0x2f
 80067a0:	f7fa f8ec 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80067a4:	20ff      	movs	r0, #255	@ 0xff
 80067a6:	f7fa f8e9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80067aa:	20ff      	movs	r0, #255	@ 0xff
 80067ac:	f7fa f8e6 	bl	800097c <lcd_wr_xdata>
 80067b0:	23b0      	movs	r3, #176	@ 0xb0
 80067b2:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067b6:	4b64      	ldr	r3, [pc, #400]	@ (8006948 <lcd_init+0x4d50>)
 80067b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80067be:	4b62      	ldr	r3, [pc, #392]	@ (8006948 <lcd_init+0x4d50>)
 80067c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80067c6:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	4b5f      	ldr	r3, [pc, #380]	@ (800694c <lcd_init+0x4d54>)
 80067ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80067d0:	4b5d      	ldr	r3, [pc, #372]	@ (8006948 <lcd_init+0x4d50>)
 80067d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006948 <lcd_init+0x4d50>)
 80067da:	2280      	movs	r2, #128	@ 0x80
 80067dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067de:	4b5a      	ldr	r3, [pc, #360]	@ (8006948 <lcd_init+0x4d50>)
 80067e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067e4:	611a      	str	r2, [r3, #16]
}
 80067e6:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 80067e8:	2020      	movs	r0, #32
 80067ea:	f7fa f8c7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 80067ee:	2000      	movs	r0, #0
 80067f0:	f7fa f8c4 	bl	800097c <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 80067f4:	2003      	movs	r0, #3
 80067f6:	f7fa f8c1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 80067fa:	f240 301f 	movw	r0, #799	@ 0x31f
 80067fe:	f7fa f8bd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 8006802:	2001      	movs	r0, #1
 8006804:	f7fa f8ba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8006808:	f240 10df 	movw	r0, #479	@ 0x1df
 800680c:	f7fa f8b6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 8006810:	2000      	movs	r0, #0
 8006812:	f7fa f8b3 	bl	800097c <lcd_wr_xdata>
 8006816:	23b4      	movs	r3, #180	@ 0xb4
 8006818:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800681c:	4b4a      	ldr	r3, [pc, #296]	@ (8006948 <lcd_init+0x4d50>)
 800681e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006822:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006824:	4b48      	ldr	r3, [pc, #288]	@ (8006948 <lcd_init+0x4d50>)
 8006826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800682a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800682c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8006830:	b29a      	uxth	r2, r3
 8006832:	4b46      	ldr	r3, [pc, #280]	@ (800694c <lcd_init+0x4d54>)
 8006834:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006836:	4b44      	ldr	r3, [pc, #272]	@ (8006948 <lcd_init+0x4d50>)
 8006838:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800683c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800683e:	4b42      	ldr	r3, [pc, #264]	@ (8006948 <lcd_init+0x4d50>)
 8006840:	2280      	movs	r2, #128	@ 0x80
 8006842:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006844:	4b40      	ldr	r3, [pc, #256]	@ (8006948 <lcd_init+0x4d50>)
 8006846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800684a:	611a      	str	r2, [r3, #16]
}
 800684c:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 800684e:	2004      	movs	r0, #4
 8006850:	f7fa f894 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 8006854:	f240 401f 	movw	r0, #1055	@ 0x41f
 8006858:	f7fa f890 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 800685c:	2000      	movs	r0, #0
 800685e:	f7fa f88d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 8006862:	202e      	movs	r0, #46	@ 0x2e
 8006864:	f7fa f88a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 8006868:	2000      	movs	r0, #0
 800686a:	f7fa f887 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800686e:	2000      	movs	r0, #0
 8006870:	f7fa f884 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006874:	2000      	movs	r0, #0
 8006876:	f7fa f881 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800687a:	2000      	movs	r0, #0
 800687c:	f7fa f87e 	bl	800097c <lcd_wr_xdata>
 8006880:	23b6      	movs	r3, #182	@ 0xb6
 8006882:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006886:	4b30      	ldr	r3, [pc, #192]	@ (8006948 <lcd_init+0x4d50>)
 8006888:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800688c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800688e:	4b2e      	ldr	r3, [pc, #184]	@ (8006948 <lcd_init+0x4d50>)
 8006890:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006894:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006896:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 800689a:	b29a      	uxth	r2, r3
 800689c:	4b2b      	ldr	r3, [pc, #172]	@ (800694c <lcd_init+0x4d54>)
 800689e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068a0:	4b29      	ldr	r3, [pc, #164]	@ (8006948 <lcd_init+0x4d50>)
 80068a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068a8:	4b27      	ldr	r3, [pc, #156]	@ (8006948 <lcd_init+0x4d50>)
 80068aa:	2280      	movs	r2, #128	@ 0x80
 80068ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068ae:	4b26      	ldr	r3, [pc, #152]	@ (8006948 <lcd_init+0x4d50>)
 80068b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068b4:	611a      	str	r2, [r3, #16]
}
 80068b6:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 80068b8:	2002      	movs	r0, #2
 80068ba:	f7fa f85f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 80068be:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 80068c2:	f7fa f85b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 80068c6:	2000      	movs	r0, #0
 80068c8:	f7fa f858 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 80068cc:	2017      	movs	r0, #23
 80068ce:	f7fa f855 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 80068d2:	2015      	movs	r0, #21
 80068d4:	f7fa f852 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80068d8:	2000      	movs	r0, #0
 80068da:	f7fa f84f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80068de:	2000      	movs	r0, #0
 80068e0:	f7fa f84c 	bl	800097c <lcd_wr_xdata>
 80068e4:	23f0      	movs	r3, #240	@ 0xf0
 80068e6:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068ea:	4b17      	ldr	r3, [pc, #92]	@ (8006948 <lcd_init+0x4d50>)
 80068ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068f2:	4b15      	ldr	r3, [pc, #84]	@ (8006948 <lcd_init+0x4d50>)
 80068f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068fa:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 80068fe:	b29a      	uxth	r2, r3
 8006900:	4b12      	ldr	r3, [pc, #72]	@ (800694c <lcd_init+0x4d54>)
 8006902:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006904:	4b10      	ldr	r3, [pc, #64]	@ (8006948 <lcd_init+0x4d50>)
 8006906:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800690a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800690c:	4b0e      	ldr	r3, [pc, #56]	@ (8006948 <lcd_init+0x4d50>)
 800690e:	2280      	movs	r2, #128	@ 0x80
 8006910:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006912:	4b0d      	ldr	r3, [pc, #52]	@ (8006948 <lcd_init+0x4d50>)
 8006914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006918:	611a      	str	r2, [r3, #16]
}
 800691a:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 800691c:	2003      	movs	r0, #3
 800691e:	f7fa f82d 	bl	800097c <lcd_wr_xdata>
 8006922:	2329      	movs	r3, #41	@ 0x29
 8006924:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006928:	4b07      	ldr	r3, [pc, #28]	@ (8006948 <lcd_init+0x4d50>)
 800692a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800692e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <lcd_init+0x4d50>)
 8006932:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006936:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006938:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 800693c:	b29a      	uxth	r2, r3
 800693e:	4b03      	ldr	r3, [pc, #12]	@ (800694c <lcd_init+0x4d54>)
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	e005      	b.n	8006950 <lcd_init+0x4d58>
 8006944:	20002ab8 	.word	0x20002ab8
 8006948:	40011000 	.word	0x40011000
 800694c:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006950:	4b56      	ldr	r3, [pc, #344]	@ (8006aac <lcd_init+0x4eb4>)
 8006952:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006956:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006958:	4b54      	ldr	r3, [pc, #336]	@ (8006aac <lcd_init+0x4eb4>)
 800695a:	2280      	movs	r2, #128	@ 0x80
 800695c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800695e:	4b53      	ldr	r3, [pc, #332]	@ (8006aac <lcd_init+0x4eb4>)
 8006960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006964:	611a      	str	r2, [r3, #16]
}
 8006966:	bf00      	nop
 8006968:	23d0      	movs	r3, #208	@ 0xd0
 800696a:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800696e:	4b4f      	ldr	r3, [pc, #316]	@ (8006aac <lcd_init+0x4eb4>)
 8006970:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006974:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006976:	4b4d      	ldr	r3, [pc, #308]	@ (8006aac <lcd_init+0x4eb4>)
 8006978:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800697c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800697e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8006982:	b29a      	uxth	r2, r3
 8006984:	4b4a      	ldr	r3, [pc, #296]	@ (8006ab0 <lcd_init+0x4eb8>)
 8006986:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006988:	4b48      	ldr	r3, [pc, #288]	@ (8006aac <lcd_init+0x4eb4>)
 800698a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800698e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006990:	4b46      	ldr	r3, [pc, #280]	@ (8006aac <lcd_init+0x4eb4>)
 8006992:	2280      	movs	r2, #128	@ 0x80
 8006994:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006996:	4b45      	ldr	r3, [pc, #276]	@ (8006aac <lcd_init+0x4eb4>)
 8006998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800699c:	611a      	str	r2, [r3, #16]
}
 800699e:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 80069a0:	2000      	movs	r0, #0
 80069a2:	f7f9 ffeb 	bl	800097c <lcd_wr_xdata>
 80069a6:	23be      	movs	r3, #190	@ 0xbe
 80069a8:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069ac:	4b3f      	ldr	r3, [pc, #252]	@ (8006aac <lcd_init+0x4eb4>)
 80069ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069b4:	4b3d      	ldr	r3, [pc, #244]	@ (8006aac <lcd_init+0x4eb4>)
 80069b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069bc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ab0 <lcd_init+0x4eb8>)
 80069c4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069c6:	4b39      	ldr	r3, [pc, #228]	@ (8006aac <lcd_init+0x4eb4>)
 80069c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069cc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069ce:	4b37      	ldr	r3, [pc, #220]	@ (8006aac <lcd_init+0x4eb4>)
 80069d0:	2280      	movs	r2, #128	@ 0x80
 80069d2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069d4:	4b35      	ldr	r3, [pc, #212]	@ (8006aac <lcd_init+0x4eb4>)
 80069d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069da:	611a      	str	r2, [r3, #16]
}
 80069dc:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 80069de:	2005      	movs	r0, #5
 80069e0:	f7f9 ffcc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 80069e4:	20fe      	movs	r0, #254	@ 0xfe
 80069e6:	f7f9 ffc9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 80069ea:	2001      	movs	r0, #1
 80069ec:	f7f9 ffc6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 80069f0:	2000      	movs	r0, #0
 80069f2:	f7f9 ffc3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 80069f6:	2000      	movs	r0, #0
 80069f8:	f7f9 ffc0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 80069fc:	2000      	movs	r0, #0
 80069fe:	f7f9 ffbd 	bl	800097c <lcd_wr_xdata>
 8006a02:	23b8      	movs	r3, #184	@ 0xb8
 8006a04:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a08:	4b28      	ldr	r3, [pc, #160]	@ (8006aac <lcd_init+0x4eb4>)
 8006a0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a0e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a10:	4b26      	ldr	r3, [pc, #152]	@ (8006aac <lcd_init+0x4eb4>)
 8006a12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a16:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a18:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	4b24      	ldr	r3, [pc, #144]	@ (8006ab0 <lcd_init+0x4eb8>)
 8006a20:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a22:	4b22      	ldr	r3, [pc, #136]	@ (8006aac <lcd_init+0x4eb4>)
 8006a24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a28:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a2a:	4b20      	ldr	r3, [pc, #128]	@ (8006aac <lcd_init+0x4eb4>)
 8006a2c:	2280      	movs	r2, #128	@ 0x80
 8006a2e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a30:	4b1e      	ldr	r3, [pc, #120]	@ (8006aac <lcd_init+0x4eb4>)
 8006a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a36:	611a      	str	r2, [r3, #16]
}
 8006a38:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 8006a3a:	2003      	movs	r0, #3
 8006a3c:	f7f9 ff9e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 8006a40:	2001      	movs	r0, #1
 8006a42:	f7f9 ff9b 	bl	800097c <lcd_wr_xdata>
 8006a46:	23ba      	movs	r3, #186	@ 0xba
 8006a48:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a4c:	4b17      	ldr	r3, [pc, #92]	@ (8006aac <lcd_init+0x4eb4>)
 8006a4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a52:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a54:	4b15      	ldr	r3, [pc, #84]	@ (8006aac <lcd_init+0x4eb4>)
 8006a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a5a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a5c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	4b13      	ldr	r3, [pc, #76]	@ (8006ab0 <lcd_init+0x4eb8>)
 8006a64:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a66:	4b11      	ldr	r3, [pc, #68]	@ (8006aac <lcd_init+0x4eb4>)
 8006a68:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a6c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006aac <lcd_init+0x4eb4>)
 8006a70:	2280      	movs	r2, #128	@ 0x80
 8006a72:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a74:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <lcd_init+0x4eb4>)
 8006a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a7a:	611a      	str	r2, [r3, #16]
}
 8006a7c:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 8006a7e:	2001      	movs	r0, #1
 8006a80:	f7f9 ff7c 	bl	800097c <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 8006a84:	2064      	movs	r0, #100	@ 0x64
 8006a86:	f7fa ff1f 	bl	80018c8 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f7fa ffdc 	bl	8001a48 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 8006a90:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <lcd_init+0x4eb4>)
 8006a92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a96:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 8006a98:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006a9c:	f000 f80a 	bl	8006ab4 <lcd_clear>
}
 8006aa0:	bf00      	nop
 8006aa2:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40011000 	.word	0x40011000
 8006ab0:	40010c00 	.word	0x40010c00

08006ab4 <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 8006ac2:	4b27      	ldr	r3, [pc, #156]	@ (8006b60 <lcd_clear+0xac>)
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 8006ac8:	4b25      	ldr	r3, [pc, #148]	@ (8006b60 <lcd_clear+0xac>)
 8006aca:	885b      	ldrh	r3, [r3, #2]
 8006acc:	461a      	mov	r2, r3
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	fb02 f303 	mul.w	r3, r2, r3
 8006ad4:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	2000      	movs	r0, #0
 8006ada:	f7fa f809 	bl	8000af0 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006ade:	4b20      	ldr	r3, [pc, #128]	@ (8006b60 <lcd_clear+0xac>)
 8006ae0:	891b      	ldrh	r3, [r3, #8]
 8006ae2:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8006b64 <lcd_clear+0xb0>)
 8006ae6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006aea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006aec:	4b1d      	ldr	r3, [pc, #116]	@ (8006b64 <lcd_clear+0xb0>)
 8006aee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006af2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006af4:	89fb      	ldrh	r3, [r7, #14]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b68 <lcd_clear+0xb4>)
 8006afa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006afc:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <lcd_clear+0xb0>)
 8006afe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b02:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b04:	4b17      	ldr	r3, [pc, #92]	@ (8006b64 <lcd_clear+0xb0>)
 8006b06:	2280      	movs	r2, #128	@ 0x80
 8006b08:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b0a:	4b16      	ldr	r3, [pc, #88]	@ (8006b64 <lcd_clear+0xb0>)
 8006b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b10:	611a      	str	r2, [r3, #16]
}
 8006b12:	bf00      	nop
}
 8006b14:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 8006b16:	4b13      	ldr	r3, [pc, #76]	@ (8006b64 <lcd_clear+0xb0>)
 8006b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b1c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b1e:	4b11      	ldr	r3, [pc, #68]	@ (8006b64 <lcd_clear+0xb0>)
 8006b20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b24:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	e00c      	b.n	8006b46 <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 8006b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8006b68 <lcd_clear+0xb4>)
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 8006b32:	4b0c      	ldr	r3, [pc, #48]	@ (8006b64 <lcd_clear+0xb0>)
 8006b34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b38:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <lcd_clear+0xb0>)
 8006b3c:	2280      	movs	r2, #128	@ 0x80
 8006b3e:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	3301      	adds	r3, #1
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d3ee      	bcc.n	8006b2c <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 8006b4e:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <lcd_clear+0xb0>)
 8006b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b54:	611a      	str	r2, [r3, #16]
}
 8006b56:	bf00      	nop
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20002ab8 	.word	0x20002ab8
 8006b64:	40011000 	.word	0x40011000
 8006b68:	40010c00 	.word	0x40010c00

08006b6c <lcd_fill>:
 * @param       (sx,sy),(ex,ey):�����ζԽ�����,�����СΪ:(ex - sx + 1) * (ey - sy + 1)
 * @param       color: Ҫ������ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint32_t color)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4623      	mov	r3, r4
 8006b7c:	80fb      	strh	r3, [r7, #6]
 8006b7e:	4603      	mov	r3, r0
 8006b80:	80bb      	strh	r3, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	807b      	strh	r3, [r7, #2]
 8006b86:	4613      	mov	r3, r2
 8006b88:	803b      	strh	r3, [r7, #0]
    uint16_t i, j;
    uint16_t xlen = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	817b      	strh	r3, [r7, #10]
    xlen = ex - sx + 1;
 8006b8e:	887a      	ldrh	r2, [r7, #2]
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3301      	adds	r3, #1
 8006b98:	817b      	strh	r3, [r7, #10]

    for (i = sy; i <= ey; i++)
 8006b9a:	88bb      	ldrh	r3, [r7, #4]
 8006b9c:	81fb      	strh	r3, [r7, #14]
 8006b9e:	e044      	b.n	8006c2a <lcd_fill+0xbe>
    {
        lcd_set_cursor(sx, i);      /* ���ù��λ�� */
 8006ba0:	89fa      	ldrh	r2, [r7, #14]
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7f9 ffa2 	bl	8000af0 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006bac:	4b23      	ldr	r3, [pc, #140]	@ (8006c3c <lcd_fill+0xd0>)
 8006bae:	891b      	ldrh	r3, [r3, #8]
 8006bb0:	813b      	strh	r3, [r7, #8]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006bb2:	4b23      	ldr	r3, [pc, #140]	@ (8006c40 <lcd_fill+0xd4>)
 8006bb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006bb8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006bba:	4b21      	ldr	r3, [pc, #132]	@ (8006c40 <lcd_fill+0xd4>)
 8006bbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bc0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006bc2:	893b      	ldrh	r3, [r7, #8]
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8006c44 <lcd_fill+0xd8>)
 8006bc8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006bca:	4b1d      	ldr	r3, [pc, #116]	@ (8006c40 <lcd_fill+0xd4>)
 8006bcc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006bd0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c40 <lcd_fill+0xd4>)
 8006bd4:	2280      	movs	r2, #128	@ 0x80
 8006bd6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006bd8:	4b19      	ldr	r3, [pc, #100]	@ (8006c40 <lcd_fill+0xd4>)
 8006bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bde:	611a      	str	r2, [r3, #16]
}
 8006be0:	bf00      	nop
}
 8006be2:	bf00      	nop
        lcd_write_ram_prepare();    /* ��ʼд��GRAM */

        for (j = 0; j < xlen; j++)
 8006be4:	2300      	movs	r3, #0
 8006be6:	81bb      	strh	r3, [r7, #12]
 8006be8:	e018      	b.n	8006c1c <lcd_fill+0xb0>
        {
            lcd_wr_data(color);     /* д������ */
 8006bea:	4b15      	ldr	r3, [pc, #84]	@ (8006c40 <lcd_fill+0xd4>)
 8006bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bf0:	611a      	str	r2, [r3, #16]
 8006bf2:	4b13      	ldr	r3, [pc, #76]	@ (8006c40 <lcd_fill+0xd4>)
 8006bf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bf8:	611a      	str	r2, [r3, #16]
 8006bfa:	4a12      	ldr	r2, [pc, #72]	@ (8006c44 <lcd_fill+0xd8>)
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	60d3      	str	r3, [r2, #12]
 8006c00:	4b0f      	ldr	r3, [pc, #60]	@ (8006c40 <lcd_fill+0xd4>)
 8006c02:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c06:	611a      	str	r2, [r3, #16]
 8006c08:	4b0d      	ldr	r3, [pc, #52]	@ (8006c40 <lcd_fill+0xd4>)
 8006c0a:	2280      	movs	r2, #128	@ 0x80
 8006c0c:	611a      	str	r2, [r3, #16]
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c40 <lcd_fill+0xd4>)
 8006c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c14:	611a      	str	r2, [r3, #16]
        for (j = 0; j < xlen; j++)
 8006c16:	89bb      	ldrh	r3, [r7, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	81bb      	strh	r3, [r7, #12]
 8006c1c:	89ba      	ldrh	r2, [r7, #12]
 8006c1e:	897b      	ldrh	r3, [r7, #10]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d3e2      	bcc.n	8006bea <lcd_fill+0x7e>
    for (i = sy; i <= ey; i++)
 8006c24:	89fb      	ldrh	r3, [r7, #14]
 8006c26:	3301      	adds	r3, #1
 8006c28:	81fb      	strh	r3, [r7, #14]
 8006c2a:	89fa      	ldrh	r2, [r7, #14]
 8006c2c:	883b      	ldrh	r3, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d9b6      	bls.n	8006ba0 <lcd_fill+0x34>
        }
    }
}
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd90      	pop	{r4, r7, pc}
 8006c3c:	20002ab8 	.word	0x20002ab8
 8006c40:	40011000 	.word	0x40011000
 8006c44:	40010c00 	.word	0x40010c00

08006c48 <lcd_color_fill>:
 * @param       (sx,sy),(ex,ey):�����ζԽ�����,�����СΪ:(ex - sx + 1) * (ey - sy + 1)
 * @param       color: Ҫ������ɫ�����׵�ַ
 * @retval      ��
 */
void lcd_color_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t *color)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4623      	mov	r3, r4
 8006c58:	80fb      	strh	r3, [r7, #6]
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	80bb      	strh	r3, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	807b      	strh	r3, [r7, #2]
 8006c62:	4613      	mov	r3, r2
 8006c64:	803b      	strh	r3, [r7, #0]
    uint16_t height, width;
    uint16_t i, j;
    width = ex - sx + 1;            /* �õ����Ŀ�� */
 8006c66:	887a      	ldrh	r2, [r7, #2]
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3301      	adds	r3, #1
 8006c70:	827b      	strh	r3, [r7, #18]
    height = ey - sy + 1;           /* �߶� */
 8006c72:	883a      	ldrh	r2, [r7, #0]
 8006c74:	88bb      	ldrh	r3, [r7, #4]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	823b      	strh	r3, [r7, #16]

    for (i = 0; i < height; i++)
 8006c7e:	2300      	movs	r3, #0
 8006c80:	82fb      	strh	r3, [r7, #22]
 8006c82:	e050      	b.n	8006d26 <lcd_color_fill+0xde>
    {
        lcd_set_cursor(sx, sy + i); /* ���ù��λ�� */
 8006c84:	88ba      	ldrh	r2, [r7, #4]
 8006c86:	8afb      	ldrh	r3, [r7, #22]
 8006c88:	4413      	add	r3, r2
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7f9 ff2d 	bl	8000af0 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006c96:	4b28      	ldr	r3, [pc, #160]	@ (8006d38 <lcd_color_fill+0xf0>)
 8006c98:	891b      	ldrh	r3, [r3, #8]
 8006c9a:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c9c:	4b27      	ldr	r3, [pc, #156]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006c9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ca2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ca4:	4b25      	ldr	r3, [pc, #148]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006ca6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006caa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006cac:	89fb      	ldrh	r3, [r7, #14]
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	4b23      	ldr	r3, [pc, #140]	@ (8006d40 <lcd_color_fill+0xf8>)
 8006cb2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006cb4:	4b21      	ldr	r3, [pc, #132]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006cb6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006cba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006cbe:	2280      	movs	r2, #128	@ 0x80
 8006cc0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cc8:	611a      	str	r2, [r3, #16]
}
 8006cca:	bf00      	nop
}
 8006ccc:	bf00      	nop
        lcd_write_ram_prepare();    /* ��ʼд��GRAM */

        for (j = 0; j < width; j++)
 8006cce:	2300      	movs	r3, #0
 8006cd0:	82bb      	strh	r3, [r7, #20]
 8006cd2:	e021      	b.n	8006d18 <lcd_color_fill+0xd0>
        {
            lcd_wr_data(color[i * width + j]);  /* д������ */
 8006cd4:	4b19      	ldr	r3, [pc, #100]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cda:	611a      	str	r2, [r3, #16]
 8006cdc:	4b17      	ldr	r3, [pc, #92]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006cde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ce2:	611a      	str	r2, [r3, #16]
 8006ce4:	8afb      	ldrh	r3, [r7, #22]
 8006ce6:	8a7a      	ldrh	r2, [r7, #18]
 8006ce8:	fb03 f202 	mul.w	r2, r3, r2
 8006cec:	8abb      	ldrh	r3, [r7, #20]
 8006cee:	4413      	add	r3, r2
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cf4:	4413      	add	r3, r2
 8006cf6:	881a      	ldrh	r2, [r3, #0]
 8006cf8:	4b11      	ldr	r3, [pc, #68]	@ (8006d40 <lcd_color_fill+0xf8>)
 8006cfa:	60da      	str	r2, [r3, #12]
 8006cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006cfe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006d02:	611a      	str	r2, [r3, #16]
 8006d04:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006d06:	2280      	movs	r2, #128	@ 0x80
 8006d08:	611a      	str	r2, [r3, #16]
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d3c <lcd_color_fill+0xf4>)
 8006d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d10:	611a      	str	r2, [r3, #16]
        for (j = 0; j < width; j++)
 8006d12:	8abb      	ldrh	r3, [r7, #20]
 8006d14:	3301      	adds	r3, #1
 8006d16:	82bb      	strh	r3, [r7, #20]
 8006d18:	8aba      	ldrh	r2, [r7, #20]
 8006d1a:	8a7b      	ldrh	r3, [r7, #18]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d3d9      	bcc.n	8006cd4 <lcd_color_fill+0x8c>
    for (i = 0; i < height; i++)
 8006d20:	8afb      	ldrh	r3, [r7, #22]
 8006d22:	3301      	adds	r3, #1
 8006d24:	82fb      	strh	r3, [r7, #22]
 8006d26:	8afa      	ldrh	r2, [r7, #22]
 8006d28:	8a3b      	ldrh	r3, [r7, #16]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d3aa      	bcc.n	8006c84 <lcd_color_fill+0x3c>
        }
    }
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd90      	pop	{r4, r7, pc}
 8006d38:	20002ab8 	.word	0x20002ab8
 8006d3c:	40011000 	.word	0x40011000
 8006d40:	40010c00 	.word	0x40010c00

08006d44 <lcd_color_fill_scale>:

void lcd_color_fill_scale(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t *color, uint8_t scale)
{
 8006d44:	b590      	push	{r4, r7, lr}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	4611      	mov	r1, r2
 8006d50:	461a      	mov	r2, r3
 8006d52:	4623      	mov	r3, r4
 8006d54:	80fb      	strh	r3, [r7, #6]
 8006d56:	4603      	mov	r3, r0
 8006d58:	80bb      	strh	r3, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	807b      	strh	r3, [r7, #2]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	803b      	strh	r3, [r7, #0]
    uint16_t height, width;
    uint16_t i, j;
    width = ex - sx + 1;
 8006d62:	887a      	ldrh	r2, [r7, #2]
 8006d64:	88fb      	ldrh	r3, [r7, #6]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	827b      	strh	r3, [r7, #18]
    height = ey - sy + 1;
 8006d6e:	883a      	ldrh	r2, [r7, #0]
 8006d70:	88bb      	ldrh	r3, [r7, #4]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3301      	adds	r3, #1
 8006d78:	823b      	strh	r3, [r7, #16]

    for (i = 0; i < height * scale; i++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	82fb      	strh	r3, [r7, #22]
 8006d7e:	e05c      	b.n	8006e3a <lcd_color_fill_scale+0xf6>
    {
        lcd_set_cursor(sx, sy + i);
 8006d80:	88ba      	ldrh	r2, [r7, #4]
 8006d82:	8afb      	ldrh	r3, [r7, #22]
 8006d84:	4413      	add	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7f9 feaf 	bl	8000af0 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006d92:	4b30      	ldr	r3, [pc, #192]	@ (8006e54 <lcd_color_fill_scale+0x110>)
 8006d94:	891b      	ldrh	r3, [r3, #8]
 8006d96:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006d98:	4b2f      	ldr	r3, [pc, #188]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006d9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d9e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006da0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006da2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006da6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006da8:	89fb      	ldrh	r3, [r7, #14]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	4b2b      	ldr	r3, [pc, #172]	@ (8006e5c <lcd_color_fill_scale+0x118>)
 8006dae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006db0:	4b29      	ldr	r3, [pc, #164]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006db2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006db6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006db8:	4b27      	ldr	r3, [pc, #156]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006dba:	2280      	movs	r2, #128	@ 0x80
 8006dbc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006dbe:	4b26      	ldr	r3, [pc, #152]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dc4:	611a      	str	r2, [r3, #16]
}
 8006dc6:	bf00      	nop
}
 8006dc8:	bf00      	nop
        lcd_write_ram_prepare();

        for (j = 0; j < width * scale; j++)
 8006dca:	2300      	movs	r3, #0
 8006dcc:	82bb      	strh	r3, [r7, #20]
 8006dce:	e029      	b.n	8006e24 <lcd_color_fill_scale+0xe0>
        {
            lcd_wr_data(color[(i / scale) * width + (j / scale)]);
 8006dd0:	4b21      	ldr	r3, [pc, #132]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006dd6:	611a      	str	r2, [r3, #16]
 8006dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006dda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006dde:	611a      	str	r2, [r3, #16]
 8006de0:	8afa      	ldrh	r2, [r7, #22]
 8006de2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006de6:	fb92 f3f3 	sdiv	r3, r2, r3
 8006dea:	8a7a      	ldrh	r2, [r7, #18]
 8006dec:	fb03 f202 	mul.w	r2, r3, r2
 8006df0:	8ab9      	ldrh	r1, [r7, #20]
 8006df2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006df6:	fb91 f3f3 	sdiv	r3, r1, r3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e00:	4413      	add	r3, r2
 8006e02:	881a      	ldrh	r2, [r3, #0]
 8006e04:	4b15      	ldr	r3, [pc, #84]	@ (8006e5c <lcd_color_fill_scale+0x118>)
 8006e06:	60da      	str	r2, [r3, #12]
 8006e08:	4b13      	ldr	r3, [pc, #76]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006e0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006e0e:	611a      	str	r2, [r3, #16]
 8006e10:	4b11      	ldr	r3, [pc, #68]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006e12:	2280      	movs	r2, #128	@ 0x80
 8006e14:	611a      	str	r2, [r3, #16]
 8006e16:	4b10      	ldr	r3, [pc, #64]	@ (8006e58 <lcd_color_fill_scale+0x114>)
 8006e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e1c:	611a      	str	r2, [r3, #16]
        for (j = 0; j < width * scale; j++)
 8006e1e:	8abb      	ldrh	r3, [r7, #20]
 8006e20:	3301      	adds	r3, #1
 8006e22:	82bb      	strh	r3, [r7, #20]
 8006e24:	8aba      	ldrh	r2, [r7, #20]
 8006e26:	8a7b      	ldrh	r3, [r7, #18]
 8006e28:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8006e2c:	fb01 f303 	mul.w	r3, r1, r3
 8006e30:	429a      	cmp	r2, r3
 8006e32:	dbcd      	blt.n	8006dd0 <lcd_color_fill_scale+0x8c>
    for (i = 0; i < height * scale; i++)
 8006e34:	8afb      	ldrh	r3, [r7, #22]
 8006e36:	3301      	adds	r3, #1
 8006e38:	82fb      	strh	r3, [r7, #22]
 8006e3a:	8afa      	ldrh	r2, [r7, #22]
 8006e3c:	8a3b      	ldrh	r3, [r7, #16]
 8006e3e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	429a      	cmp	r2, r3
 8006e48:	db9a      	blt.n	8006d80 <lcd_color_fill_scale+0x3c>
        }
    }
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd90      	pop	{r4, r7, pc}
 8006e54:	20002ab8 	.word	0x20002ab8
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	40010c00 	.word	0x40010c00

08006e60 <lcd_draw_line>:
 * @param       x2,y2: �յ�����
 * @param       color: �ߵ���ɫ
 * @retval      ��
 */
void lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8006e60:	b590      	push	{r4, r7, lr}
 8006e62:	b08d      	sub	sp, #52	@ 0x34
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4604      	mov	r4, r0
 8006e68:	4608      	mov	r0, r1
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4623      	mov	r3, r4
 8006e70:	80fb      	strh	r3, [r7, #6]
 8006e72:	4603      	mov	r3, r0
 8006e74:	80bb      	strh	r3, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	807b      	strh	r3, [r7, #2]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	803b      	strh	r3, [r7, #0]
    uint16_t t;
    int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	@ 0x24
    int incx, incy, row, col;
    delta_x = x2 - x1;          /* ������������ */
 8006e86:	887a      	ldrh	r2, [r7, #2]
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	623b      	str	r3, [r7, #32]
    delta_y = y2 - y1;
 8006e8e:	883a      	ldrh	r2, [r7, #0]
 8006e90:	88bb      	ldrh	r3, [r7, #4]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	61fb      	str	r3, [r7, #28]
    row = x1;
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	60fb      	str	r3, [r7, #12]
    col = y1;
 8006e9a:	88bb      	ldrh	r3, [r7, #4]
 8006e9c:	60bb      	str	r3, [r7, #8]

    if (delta_x > 0)incx = 1;   /* ���õ������� */
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dd02      	ble.n	8006eaa <lcd_draw_line+0x4a>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	e00b      	b.n	8006ec2 <lcd_draw_line+0x62>
    else if (delta_x == 0)incx = 0; /* ��ֱ�� */
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <lcd_draw_line+0x56>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e005      	b.n	8006ec2 <lcd_draw_line+0x62>
    else
    {
        incx = -1;
 8006eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eba:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	425b      	negs	r3, r3
 8006ec0:	623b      	str	r3, [r7, #32]
    }

    if (delta_y > 0)incy = 1;
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dd02      	ble.n	8006ece <lcd_draw_line+0x6e>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	e00b      	b.n	8006ee6 <lcd_draw_line+0x86>
    else if (delta_y == 0)incy = 0; /* ˮƽ�� */
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <lcd_draw_line+0x7a>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	e005      	b.n	8006ee6 <lcd_draw_line+0x86>
    else
    {
        incy = -1;
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ede:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	425b      	negs	r3, r3
 8006ee4:	61fb      	str	r3, [r7, #28]
    }

    if ( delta_x > delta_y)distance = delta_x;  /* ѡȡ�������������� */
 8006ee6:	6a3a      	ldr	r2, [r7, #32]
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	dd02      	ble.n	8006ef4 <lcd_draw_line+0x94>
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	e001      	b.n	8006ef8 <lcd_draw_line+0x98>
    else distance = delta_y;
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	61bb      	str	r3, [r7, #24]

    for (t = 0; t <= distance + 1; t++ )   /* ������� */
 8006ef8:	2300      	movs	r3, #0
 8006efa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006efc:	e02b      	b.n	8006f56 <lcd_draw_line+0xf6>
    {
        lcd_draw_point(row, col, color); /* ���� */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	b291      	uxth	r1, r2
 8006f06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fa fc90 	bl	8001830 <lcd_draw_point>
        xerr += delta_x ;
 8006f10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	4413      	add	r3, r2
 8006f16:	62bb      	str	r3, [r7, #40]	@ 0x28
        yerr += delta_y ;
 8006f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24

        if (xerr > distance)
 8006f20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	dd07      	ble.n	8006f38 <lcd_draw_line+0xd8>
        {
            xerr -= distance;
 8006f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
            row += incx;
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	4413      	add	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
        }

        if (yerr > distance)
 8006f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	dd07      	ble.n	8006f50 <lcd_draw_line+0xf0>
        {
            yerr -= distance;
 8006f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
            col += incy;
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]
    for (t = 0; t <= distance + 1; t++ )   /* ������� */
 8006f50:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f52:	3301      	adds	r3, #1
 8006f54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006f56:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	ddce      	ble.n	8006efe <lcd_draw_line+0x9e>
        }
    }
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	3734      	adds	r7, #52	@ 0x34
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd90      	pop	{r4, r7, pc}

08006f6a <lcd_draw_rectangle>:
 * @param       x2,y2: �յ�����
 * @param       color: ���ε���ɫ
 * @retval      ��
 */
void lcd_draw_rectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8006f6a:	b590      	push	{r4, r7, lr}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af02      	add	r7, sp, #8
 8006f70:	4604      	mov	r4, r0
 8006f72:	4608      	mov	r0, r1
 8006f74:	4611      	mov	r1, r2
 8006f76:	461a      	mov	r2, r3
 8006f78:	4623      	mov	r3, r4
 8006f7a:	80fb      	strh	r3, [r7, #6]
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	80bb      	strh	r3, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	807b      	strh	r3, [r7, #2]
 8006f84:	4613      	mov	r3, r2
 8006f86:	803b      	strh	r3, [r7, #0]
    lcd_draw_line(x1, y1, x2, y1, color);
 8006f88:	88bc      	ldrh	r4, [r7, #4]
 8006f8a:	887a      	ldrh	r2, [r7, #2]
 8006f8c:	88b9      	ldrh	r1, [r7, #4]
 8006f8e:	88f8      	ldrh	r0, [r7, #6]
 8006f90:	8b3b      	ldrh	r3, [r7, #24]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	4623      	mov	r3, r4
 8006f96:	f7ff ff63 	bl	8006e60 <lcd_draw_line>
    lcd_draw_line(x1, y1, x1, y2, color);
 8006f9a:	883c      	ldrh	r4, [r7, #0]
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	88b9      	ldrh	r1, [r7, #4]
 8006fa0:	88f8      	ldrh	r0, [r7, #6]
 8006fa2:	8b3b      	ldrh	r3, [r7, #24]
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	4623      	mov	r3, r4
 8006fa8:	f7ff ff5a 	bl	8006e60 <lcd_draw_line>
    lcd_draw_line(x1, y2, x2, y2, color);
 8006fac:	883c      	ldrh	r4, [r7, #0]
 8006fae:	887a      	ldrh	r2, [r7, #2]
 8006fb0:	8839      	ldrh	r1, [r7, #0]
 8006fb2:	88f8      	ldrh	r0, [r7, #6]
 8006fb4:	8b3b      	ldrh	r3, [r7, #24]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	4623      	mov	r3, r4
 8006fba:	f7ff ff51 	bl	8006e60 <lcd_draw_line>
    lcd_draw_line(x2, y1, x2, y2, color);
 8006fbe:	883c      	ldrh	r4, [r7, #0]
 8006fc0:	887a      	ldrh	r2, [r7, #2]
 8006fc2:	88b9      	ldrh	r1, [r7, #4]
 8006fc4:	8878      	ldrh	r0, [r7, #2]
 8006fc6:	8b3b      	ldrh	r3, [r7, #24]
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	4623      	mov	r3, r4
 8006fcc:	f7ff ff48 	bl	8006e60 <lcd_draw_line>
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd90      	pop	{r4, r7, pc}

08006fd8 <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	80fb      	strh	r3, [r7, #6]
 8006fea:	4603      	mov	r3, r0
 8006fec:	80bb      	strh	r3, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8006ff6:	88bb      	ldrh	r3, [r7, #4]
 8006ff8:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 8007002:	78bb      	ldrb	r3, [r7, #2]
 8007004:	08db      	lsrs	r3, r3, #3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	78bb      	ldrb	r3, [r7, #2]
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	bf14      	ite	ne
 8007016:	2301      	movne	r3, #1
 8007018:	2300      	moveq	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	4413      	add	r3, r2
 800701e:	b2db      	uxtb	r3, r3
 8007020:	78ba      	ldrb	r2, [r7, #2]
 8007022:	0852      	lsrs	r2, r2, #1
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	3b20      	subs	r3, #32
 8007030:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8007032:	78bb      	ldrb	r3, [r7, #2]
 8007034:	3b0c      	subs	r3, #12
 8007036:	2b14      	cmp	r3, #20
 8007038:	f200 8099 	bhi.w	800716e <lcd_show_char+0x196>
 800703c:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <lcd_show_char+0x6c>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007099 	.word	0x08007099
 8007048:	0800716f 	.word	0x0800716f
 800704c:	0800716f 	.word	0x0800716f
 8007050:	0800716f 	.word	0x0800716f
 8007054:	080070ab 	.word	0x080070ab
 8007058:	0800716f 	.word	0x0800716f
 800705c:	0800716f 	.word	0x0800716f
 8007060:	0800716f 	.word	0x0800716f
 8007064:	0800716f 	.word	0x0800716f
 8007068:	0800716f 	.word	0x0800716f
 800706c:	0800716f 	.word	0x0800716f
 8007070:	0800716f 	.word	0x0800716f
 8007074:	080070b7 	.word	0x080070b7
 8007078:	0800716f 	.word	0x0800716f
 800707c:	0800716f 	.word	0x0800716f
 8007080:	0800716f 	.word	0x0800716f
 8007084:	0800716f 	.word	0x0800716f
 8007088:	0800716f 	.word	0x0800716f
 800708c:	0800716f 	.word	0x0800716f
 8007090:	0800716f 	.word	0x0800716f
 8007094:	080070c9 	.word	0x080070c9
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 8007098:	78fa      	ldrb	r2, [r7, #3]
 800709a:	4613      	mov	r3, r2
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4a36      	ldr	r2, [pc, #216]	@ (800717c <lcd_show_char+0x1a4>)
 80070a4:	4413      	add	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
            break;
 80070a8:	e014      	b.n	80070d4 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	4a34      	ldr	r2, [pc, #208]	@ (8007180 <lcd_show_char+0x1a8>)
 80070b0:	4413      	add	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
            break;
 80070b4:	e00e      	b.n	80070d4 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	4613      	mov	r3, r2
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4a30      	ldr	r2, [pc, #192]	@ (8007184 <lcd_show_char+0x1ac>)
 80070c2:	4413      	add	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
            break;
 80070c6:	e005      	b.n	80070d4 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	019b      	lsls	r3, r3, #6
 80070cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007188 <lcd_show_char+0x1b0>)
 80070ce:	4413      	add	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
            break;
 80070d2:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 80070d4:	2300      	movs	r3, #0
 80070d6:	757b      	strb	r3, [r7, #21]
 80070d8:	e044      	b.n	8007164 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 80070da:	7d7b      	ldrb	r3, [r7, #21]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4413      	add	r3, r2
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 80070e4:	2300      	movs	r3, #0
 80070e6:	75bb      	strb	r3, [r7, #22]
 80070e8:	e034      	b.n	8007154 <lcd_show_char+0x17c>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 80070ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	da06      	bge.n	8007100 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 80070f2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80070f4:	88b9      	ldrh	r1, [r7, #4]
 80070f6:	88fb      	ldrh	r3, [r7, #6]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fa fb99 	bl	8001830 <lcd_draw_point>
 80070fe:	e00a      	b.n	8007116 <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 8007100:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 8007108:	4b20      	ldr	r3, [pc, #128]	@ (800718c <lcd_show_char+0x1b4>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	88b9      	ldrh	r1, [r7, #4]
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	4618      	mov	r0, r3
 8007112:	f7fa fb8d 	bl	8001830 <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
            y++;
 800711c:	88bb      	ldrh	r3, [r7, #4]
 800711e:	3301      	adds	r3, #1
 8007120:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 8007122:	4b1b      	ldr	r3, [pc, #108]	@ (8007190 <lcd_show_char+0x1b8>)
 8007124:	885b      	ldrh	r3, [r3, #2]
 8007126:	88ba      	ldrh	r2, [r7, #4]
 8007128:	429a      	cmp	r2, r3
 800712a:	d222      	bcs.n	8007172 <lcd_show_char+0x19a>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 800712c:	88ba      	ldrh	r2, [r7, #4]
 800712e:	89fb      	ldrh	r3, [r7, #14]
 8007130:	1ad2      	subs	r2, r2, r3
 8007132:	78bb      	ldrb	r3, [r7, #2]
 8007134:	429a      	cmp	r2, r3
 8007136:	d10a      	bne.n	800714e <lcd_show_char+0x176>
            {
                y = y0; /* y���긴λ */
 8007138:	89fb      	ldrh	r3, [r7, #14]
 800713a:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	3301      	adds	r3, #1
 8007140:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 8007142:	4b13      	ldr	r3, [pc, #76]	@ (8007190 <lcd_show_char+0x1b8>)
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	429a      	cmp	r2, r3
 800714a:	d307      	bcc.n	800715c <lcd_show_char+0x184>
 800714c:	e012      	b.n	8007174 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 800714e:	7dbb      	ldrb	r3, [r7, #22]
 8007150:	3301      	adds	r3, #1
 8007152:	75bb      	strb	r3, [r7, #22]
 8007154:	7dbb      	ldrb	r3, [r7, #22]
 8007156:	2b07      	cmp	r3, #7
 8007158:	d9c7      	bls.n	80070ea <lcd_show_char+0x112>
 800715a:	e000      	b.n	800715e <lcd_show_char+0x186>

                break;
 800715c:	bf00      	nop
    for (t = 0; t < csize; t++)
 800715e:	7d7b      	ldrb	r3, [r7, #21]
 8007160:	3301      	adds	r3, #1
 8007162:	757b      	strb	r3, [r7, #21]
 8007164:	7d7a      	ldrb	r2, [r7, #21]
 8007166:	7b7b      	ldrb	r3, [r7, #13]
 8007168:	429a      	cmp	r2, r3
 800716a:	d3b6      	bcc.n	80070da <lcd_show_char+0x102>
 800716c:	e002      	b.n	8007174 <lcd_show_char+0x19c>
            return ;
 800716e:	bf00      	nop
 8007170:	e000      	b.n	8007174 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* �������� */
 8007172:	bf00      	nop
            }
        }
    }
}
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	bd90      	pop	{r4, r7, pc}
 800717a:	bf00      	nop
 800717c:	0800a91c 	.word	0x0800a91c
 8007180:	0800ad90 	.word	0x0800ad90
 8007184:	0800b380 	.word	0x0800b380
 8007188:	0800c0dc 	.word	0x0800c0dc
 800718c:	20000000 	.word	0x20000000
 8007190:	20002ab8 	.word	0x20002ab8

08007194 <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b087      	sub	sp, #28
 8007198:	af02      	add	r7, sp, #8
 800719a:	4604      	mov	r4, r0
 800719c:	4608      	mov	r0, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	4623      	mov	r3, r4
 80071a4:	80fb      	strh	r3, [r7, #6]
 80071a6:	4603      	mov	r3, r0
 80071a8:	80bb      	strh	r3, [r7, #4]
 80071aa:	460b      	mov	r3, r1
 80071ac:	807b      	strh	r3, [r7, #2]
 80071ae:	4613      	mov	r3, r2
 80071b0:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	73fb      	strb	r3, [r7, #15]
    width += x;
 80071b6:	887a      	ldrh	r2, [r7, #2]
 80071b8:	88fb      	ldrh	r3, [r7, #6]
 80071ba:	4413      	add	r3, r2
 80071bc:	807b      	strh	r3, [r7, #2]
    height += y;
 80071be:	883a      	ldrh	r2, [r7, #0]
 80071c0:	88bb      	ldrh	r3, [r7, #4]
 80071c2:	4413      	add	r3, r2
 80071c4:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 80071c6:	e027      	b.n	8007218 <lcd_show_string+0x84>
    {
        if (x >= width)
 80071c8:	88fa      	ldrh	r2, [r7, #6]
 80071ca:	887b      	ldrh	r3, [r7, #2]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d307      	bcc.n	80071e0 <lcd_show_string+0x4c>
        {
            x = x0;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	80fb      	strh	r3, [r7, #6]
            y += size;
 80071d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071d8:	b29a      	uxth	r2, r3
 80071da:	88bb      	ldrh	r3, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* �˳� */
 80071e0:	88ba      	ldrh	r2, [r7, #4]
 80071e2:	883b      	ldrh	r3, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d220      	bcs.n	800722a <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 80071e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	f897 4020 	ldrb.w	r4, [r7, #32]
 80071f0:	88b9      	ldrh	r1, [r7, #4]
 80071f2:	88f8      	ldrh	r0, [r7, #6]
 80071f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	2300      	movs	r3, #0
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	4623      	mov	r3, r4
 80071fe:	f7ff feeb 	bl	8006fd8 <lcd_show_char>
        x += size / 2;
 8007202:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	b2db      	uxtb	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	88fb      	ldrh	r3, [r7, #6]
 800720e:	4413      	add	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
        p++;
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	3301      	adds	r3, #1
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b7e      	cmp	r3, #126	@ 0x7e
 800721e:	d805      	bhi.n	800722c <lcd_show_string+0x98>
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b1f      	cmp	r3, #31
 8007226:	d8cf      	bhi.n	80071c8 <lcd_show_string+0x34>
    }
}
 8007228:	e000      	b.n	800722c <lcd_show_string+0x98>
        if (y >= height)break;  /* �˳� */
 800722a:	bf00      	nop
}
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	bd90      	pop	{r4, r7, pc}

08007234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800723a:	f000 fc69 	bl	8007b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800723e:	f000 f86d 	bl	800731c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007242:	f7f9 faf7 	bl	8000834 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8007246:	f000 fbbf 	bl	80079c8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800724a:	f000 fb49 	bl	80078e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800724e:	f7fa fcd3 	bl	8001bf8 <lcd_init>
  HAL_TIM_Base_Start_IT(&htim3);
 8007252:	4829      	ldr	r0, [pc, #164]	@ (80072f8 <main+0xc4>)
 8007254:	f001 fd78 	bl	8008d48 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1);
 8007258:	2201      	movs	r2, #1
 800725a:	4928      	ldr	r1, [pc, #160]	@ (80072fc <main+0xc8>)
 800725c:	4828      	ldr	r0, [pc, #160]	@ (8007300 <main+0xcc>)
 800725e:	f002 fa30 	bl	80096c2 <HAL_UART_Receive_IT>
  lcd_draw_rectangle(0, 0, 60 * scale - 1, 45 * scale - 1, BLACK);
 8007262:	4b28      	ldr	r3, [pc, #160]	@ (8007304 <main+0xd0>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	0112      	lsls	r2, r2, #4
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29a      	uxth	r2, r3
 8007274:	4b23      	ldr	r3, [pc, #140]	@ (8007304 <main+0xd0>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	4619      	mov	r1, r3
 800727a:	0049      	lsls	r1, r1, #1
 800727c:	440b      	add	r3, r1
 800727e:	4619      	mov	r1, r3
 8007280:	0109      	lsls	r1, r1, #4
 8007282:	1acb      	subs	r3, r1, r3
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29b      	uxth	r3, r3
 800728a:	2100      	movs	r1, #0
 800728c:	9100      	str	r1, [sp, #0]
 800728e:	2100      	movs	r1, #0
 8007290:	2000      	movs	r0, #0
 8007292:	f7ff fe6a 	bl	8006f6a <lcd_draw_rectangle>
  lcd_draw_line(10, 280, 230, 280, BLACK);
 8007296:	2300      	movs	r3, #0
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800729e:	22e6      	movs	r2, #230	@ 0xe6
 80072a0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80072a4:	200a      	movs	r0, #10
 80072a6:	f7ff fddb 	bl	8006e60 <lcd_draw_line>
  lcd_color_fill(10, 290, 25, 305, start_img);
 80072aa:	4b17      	ldr	r3, [pc, #92]	@ (8007308 <main+0xd4>)
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	f240 1331 	movw	r3, #305	@ 0x131
 80072b2:	2219      	movs	r2, #25
 80072b4:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80072b8:	200a      	movs	r0, #10
 80072ba:	f7ff fcc5 	bl	8006c48 <lcd_color_fill>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (frame_ready && !exited) {
 80072be:	4b13      	ldr	r3, [pc, #76]	@ (800730c <main+0xd8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0fb      	beq.n	80072be <main+0x8a>
 80072c6:	4b12      	ldr	r3, [pc, #72]	@ (8007310 <main+0xdc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f7      	bne.n	80072be <main+0x8a>
		  lcd_color_fill_scale(0, 0, DIM_X - 1, DIM_Y - 1, uRx_Data + 1, scale);
 80072ce:	4b11      	ldr	r3, [pc, #68]	@ (8007314 <main+0xe0>)
 80072d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007304 <main+0xd0>)
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	9201      	str	r2, [sp, #4]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	232c      	movs	r3, #44	@ 0x2c
 80072da:	223b      	movs	r2, #59	@ 0x3b
 80072dc:	2100      	movs	r1, #0
 80072de:	2000      	movs	r0, #0
 80072e0:	f7ff fd30 	bl	8006d44 <lcd_color_fill_scale>
		  frame_count++;
 80072e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <main+0xe4>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3301      	adds	r3, #1
 80072ea:	4a0b      	ldr	r2, [pc, #44]	@ (8007318 <main+0xe4>)
 80072ec:	6013      	str	r3, [r2, #0]
		  frame_ready = 0;
 80072ee:	4b07      	ldr	r3, [pc, #28]	@ (800730c <main+0xd8>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
	  if (frame_ready && !exited) {
 80072f4:	e7e3      	b.n	80072be <main+0x8a>
 80072f6:	bf00      	nop
 80072f8:	20002b08 	.word	0x20002b08
 80072fc:	20002adc 	.word	0x20002adc
 8007300:	20002b50 	.word	0x20002b50
 8007304:	20002a3c 	.word	0x20002a3c
 8007308:	0800d89c 	.word	0x0800d89c
 800730c:	20002ac8 	.word	0x20002ac8
 8007310:	20002ad8 	.word	0x20002ad8
 8007314:	20000006 	.word	0x20000006
 8007318:	20002ad4 	.word	0x20002ad4

0800731c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b090      	sub	sp, #64	@ 0x40
 8007320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007322:	f107 0318 	add.w	r3, r7, #24
 8007326:	2228      	movs	r2, #40	@ 0x28
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f002 fe42 	bl	8009fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	605a      	str	r2, [r3, #4]
 8007338:	609a      	str	r2, [r3, #8]
 800733a:	60da      	str	r2, [r3, #12]
 800733c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800733e:	2301      	movs	r3, #1
 8007340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007348:	2300      	movs	r3, #0
 800734a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800734c:	2301      	movs	r3, #1
 800734e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007350:	2302      	movs	r3, #2
 8007352:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007358:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800735a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007360:	f107 0318 	add.w	r3, r7, #24
 8007364:	4618      	mov	r0, r3
 8007366:	f001 f885 	bl	8008474 <HAL_RCC_OscConfig>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007370:	f000 f819 	bl	80073a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007374:	230f      	movs	r3, #15
 8007376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007378:	2302      	movs	r3, #2
 800737a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007380:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800738a:	1d3b      	adds	r3, r7, #4
 800738c:	2102      	movs	r1, #2
 800738e:	4618      	mov	r0, r3
 8007390:	f001 faf2 	bl	8008978 <HAL_RCC_ClockConfig>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800739a:	f000 f804 	bl	80073a6 <Error_Handler>
  }
}
 800739e:	bf00      	nop
 80073a0:	3740      	adds	r7, #64	@ 0x40
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073a6:	b480      	push	{r7}
 80073a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80073aa:	b672      	cpsid	i
}
 80073ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <Error_Handler+0x8>
	...

080073b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80073ba:	4b16      	ldr	r3, [pc, #88]	@ (8007414 <HAL_MspInit+0x60>)
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	4a15      	ldr	r2, [pc, #84]	@ (8007414 <HAL_MspInit+0x60>)
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	6193      	str	r3, [r2, #24]
 80073c6:	4b13      	ldr	r3, [pc, #76]	@ (8007414 <HAL_MspInit+0x60>)
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	60bb      	str	r3, [r7, #8]
 80073d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80073d2:	4b10      	ldr	r3, [pc, #64]	@ (8007414 <HAL_MspInit+0x60>)
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007414 <HAL_MspInit+0x60>)
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	61d3      	str	r3, [r2, #28]
 80073de:	4b0d      	ldr	r3, [pc, #52]	@ (8007414 <HAL_MspInit+0x60>)
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e6:	607b      	str	r3, [r7, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80073ea:	2005      	movs	r0, #5
 80073ec:	f000 fce2 	bl	8007db4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80073f0:	4b09      	ldr	r3, [pc, #36]	@ (8007418 <HAL_MspInit+0x64>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	4a04      	ldr	r2, [pc, #16]	@ (8007418 <HAL_MspInit+0x64>)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800740c:	bf00      	nop
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40021000 	.word	0x40021000
 8007418:	40010000 	.word	0x40010000

0800741c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007420:	bf00      	nop
 8007422:	e7fd      	b.n	8007420 <NMI_Handler+0x4>

08007424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007428:	bf00      	nop
 800742a:	e7fd      	b.n	8007428 <HardFault_Handler+0x4>

0800742c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007430:	bf00      	nop
 8007432:	e7fd      	b.n	8007430 <MemManage_Handler+0x4>

08007434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007438:	bf00      	nop
 800743a:	e7fd      	b.n	8007438 <BusFault_Handler+0x4>

0800743c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007440:	bf00      	nop
 8007442:	e7fd      	b.n	8007440 <UsageFault_Handler+0x4>

08007444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007448:	bf00      	nop
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr

08007450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007454:	bf00      	nop
 8007456:	46bd      	mov	sp, r7
 8007458:	bc80      	pop	{r7}
 800745a:	4770      	bx	lr

0800745c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007460:	bf00      	nop
 8007462:	46bd      	mov	sp, r7
 8007464:	bc80      	pop	{r7}
 8007466:	4770      	bx	lr

08007468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800746c:	f000 fb96 	bl	8007b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007470:	bf00      	nop
 8007472:	bd80      	pop	{r7, pc}

08007474 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007478:	2001      	movs	r0, #1
 800747a:	f000 ffe3 	bl	8008444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800747e:	bf00      	nop
 8007480:	bd80      	pop	{r7, pc}

08007482 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007486:	2020      	movs	r0, #32
 8007488:	f000 ffdc 	bl	8008444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}

08007490 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007494:	4802      	ldr	r0, [pc, #8]	@ (80074a0 <TIM3_IRQHandler+0x10>)
 8007496:	f001 fcb7 	bl	8008e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800749a:	bf00      	nop
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20002b08 	.word	0x20002b08

080074a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80074a8:	4804      	ldr	r0, [pc, #16]	@ (80074bc <USART1_IRQHandler+0x18>)
 80074aa:	f002 f93b 	bl	8009724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1);
 80074ae:	2201      	movs	r2, #1
 80074b0:	4903      	ldr	r1, [pc, #12]	@ (80074c0 <USART1_IRQHandler+0x1c>)
 80074b2:	4802      	ldr	r0, [pc, #8]	@ (80074bc <USART1_IRQHandler+0x18>)
 80074b4:	f002 f905 	bl	80096c2 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 80074b8:	bf00      	nop
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20002b50 	.word	0x20002b50
 80074c0:	20002adc 	.word	0x20002adc

080074c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80074c8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80074cc:	f000 ffba 	bl	8008444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80074d0:	bf00      	nop
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af04      	add	r7, sp, #16
 80074da:	4603      	mov	r3, r0
 80074dc:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(200);
 80074de:	20c8      	movs	r0, #200	@ 0xc8
 80074e0:	f000 fb78 	bl	8007bd4 <HAL_Delay>
	switch (GPIO_Pin) {
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074ea:	d06e      	beq.n	80075ca <HAL_GPIO_EXTI_Callback+0xf6>
 80074ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074f0:	f300 80ca 	bgt.w	8007688 <HAL_GPIO_EXTI_Callback+0x1b4>
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	f000 80be 	beq.w	8007676 <HAL_GPIO_EXTI_Callback+0x1a2>
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	f040 80c4 	bne.w	8007688 <HAL_GPIO_EXTI_Callback+0x1b4>
		case KEY0_Pin:
			lcd_fill(0, 0, 240, 240, WHITE);
 8007500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	23f0      	movs	r3, #240	@ 0xf0
 8007508:	22f0      	movs	r2, #240	@ 0xf0
 800750a:	2100      	movs	r1, #0
 800750c:	2000      	movs	r0, #0
 800750e:	f7ff fb2d 	bl	8006b6c <lcd_fill>
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007516:	4861      	ldr	r0, [pc, #388]	@ (800769c <HAL_GPIO_EXTI_Callback+0x1c8>)
 8007518:	f000 ff64 	bl	80083e4 <HAL_GPIO_ReadPin>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d116      	bne.n	8007550 <HAL_GPIO_EXTI_Callback+0x7c>
				HAL_UART_Transmit(&huart1, "\x16\x16", 2, 0xffff);
 8007522:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007526:	2202      	movs	r2, #2
 8007528:	495d      	ldr	r1, [pc, #372]	@ (80076a0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800752a:	485e      	ldr	r0, [pc, #376]	@ (80076a4 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800752c:	f002 f837 	bl	800959e <HAL_UART_Transmit>
				exited = 1;
 8007530:	4b5d      	ldr	r3, [pc, #372]	@ (80076a8 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
				lcd_show_string(30, 50, 200, 24, 24, "EXIT", BLACK);
 8007536:	2300      	movs	r3, #0
 8007538:	9302      	str	r3, [sp, #8]
 800753a:	4b5c      	ldr	r3, [pc, #368]	@ (80076ac <HAL_GPIO_EXTI_Callback+0x1d8>)
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	2318      	movs	r3, #24
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	2318      	movs	r3, #24
 8007544:	22c8      	movs	r2, #200	@ 0xc8
 8007546:	2132      	movs	r1, #50	@ 0x32
 8007548:	201e      	movs	r0, #30
 800754a:	f7ff fe23 	bl	8007194 <lcd_show_string>
				scale++;
				if (scale >= 4) scale = 1;
				if (rxLength) lcd_color_fill_scale(0, 0, DIM_X - 1, DIM_Y - 1, uRx_Data + 1, scale);
				else lcd_draw_rectangle(0, 0, 60 * scale - 1, 45 * scale - 1, BLACK);
			}
			break;
 800754e:	e09d      	b.n	800768c <HAL_GPIO_EXTI_Callback+0x1b8>
			} else if (!exited) {
 8007550:	4b55      	ldr	r3, [pc, #340]	@ (80076a8 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 8099 	bne.w	800768c <HAL_GPIO_EXTI_Callback+0x1b8>
				scale++;
 800755a:	4b55      	ldr	r3, [pc, #340]	@ (80076b0 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	3301      	adds	r3, #1
 8007560:	b2da      	uxtb	r2, r3
 8007562:	4b53      	ldr	r3, [pc, #332]	@ (80076b0 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8007564:	701a      	strb	r2, [r3, #0]
				if (scale >= 4) scale = 1;
 8007566:	4b52      	ldr	r3, [pc, #328]	@ (80076b0 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b03      	cmp	r3, #3
 800756c:	d902      	bls.n	8007574 <HAL_GPIO_EXTI_Callback+0xa0>
 800756e:	4b50      	ldr	r3, [pc, #320]	@ (80076b0 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8007570:	2201      	movs	r2, #1
 8007572:	701a      	strb	r2, [r3, #0]
				if (rxLength) lcd_color_fill_scale(0, 0, DIM_X - 1, DIM_Y - 1, uRx_Data + 1, scale);
 8007574:	4b4f      	ldr	r3, [pc, #316]	@ (80076b4 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <HAL_GPIO_EXTI_Callback+0xc0>
 800757c:	4b4e      	ldr	r3, [pc, #312]	@ (80076b8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800757e:	4a4c      	ldr	r2, [pc, #304]	@ (80076b0 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	9201      	str	r2, [sp, #4]
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	232c      	movs	r3, #44	@ 0x2c
 8007588:	223b      	movs	r2, #59	@ 0x3b
 800758a:	2100      	movs	r1, #0
 800758c:	2000      	movs	r0, #0
 800758e:	f7ff fbd9 	bl	8006d44 <lcd_color_fill_scale>
			break;
 8007592:	e07b      	b.n	800768c <HAL_GPIO_EXTI_Callback+0x1b8>
				else lcd_draw_rectangle(0, 0, 60 * scale - 1, 45 * scale - 1, BLACK);
 8007594:	4b46      	ldr	r3, [pc, #280]	@ (80076b0 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	0112      	lsls	r2, r2, #4
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	4b42      	ldr	r3, [pc, #264]	@ (80076b0 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	4619      	mov	r1, r3
 80075ac:	0049      	lsls	r1, r1, #1
 80075ae:	440b      	add	r3, r1
 80075b0:	4619      	mov	r1, r3
 80075b2:	0109      	lsls	r1, r1, #4
 80075b4:	1acb      	subs	r3, r1, r3
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2100      	movs	r1, #0
 80075be:	9100      	str	r1, [sp, #0]
 80075c0:	2100      	movs	r1, #0
 80075c2:	2000      	movs	r0, #0
 80075c4:	f7ff fcd1 	bl	8006f6a <lcd_draw_rectangle>
			break;
 80075c8:	e060      	b.n	800768c <HAL_GPIO_EXTI_Callback+0x1b8>
		case KEY1_Pin:
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 80075ca:	2120      	movs	r1, #32
 80075cc:	483b      	ldr	r0, [pc, #236]	@ (80076bc <HAL_GPIO_EXTI_Callback+0x1e8>)
 80075ce:	f000 ff09 	bl	80083e4 <HAL_GPIO_ReadPin>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d11f      	bne.n	8007618 <HAL_GPIO_EXTI_Callback+0x144>
				HAL_UART_Transmit(&huart1, "\x16\x16", 2, 0xffff);
 80075d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075dc:	2202      	movs	r2, #2
 80075de:	4930      	ldr	r1, [pc, #192]	@ (80076a0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80075e0:	4830      	ldr	r0, [pc, #192]	@ (80076a4 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80075e2:	f001 ffdc 	bl	800959e <HAL_UART_Transmit>
				lcd_fill(0, 0, 240, 240, WHITE);
 80075e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	23f0      	movs	r3, #240	@ 0xf0
 80075ee:	22f0      	movs	r2, #240	@ 0xf0
 80075f0:	2100      	movs	r1, #0
 80075f2:	2000      	movs	r0, #0
 80075f4:	f7ff faba 	bl	8006b6c <lcd_fill>
				exited = 1;
 80075f8:	4b2b      	ldr	r3, [pc, #172]	@ (80076a8 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
				lcd_show_string(30, 50, 200, 24, 24, "EXIT", BLACK);
 80075fe:	2300      	movs	r3, #0
 8007600:	9302      	str	r3, [sp, #8]
 8007602:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <HAL_GPIO_EXTI_Callback+0x1d8>)
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	2318      	movs	r3, #24
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	2318      	movs	r3, #24
 800760c:	22c8      	movs	r2, #200	@ 0xc8
 800760e:	2132      	movs	r1, #50	@ 0x32
 8007610:	201e      	movs	r0, #30
 8007612:	f7ff fdbf 	bl	8007194 <lcd_show_string>
					lcd_color_fill(10, 290, 25, 305, start_img);
				} else {
					lcd_color_fill(10, 290, 25, 305, pause_img);
				}
			}
			break;
 8007616:	e03b      	b.n	8007690 <HAL_GPIO_EXTI_Callback+0x1bc>
			} else if (!exited) {
 8007618:	4b23      	ldr	r3, [pc, #140]	@ (80076a8 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d137      	bne.n	8007690 <HAL_GPIO_EXTI_Callback+0x1bc>
				pause = pause ? 0 : 1;
 8007620:	4b27      	ldr	r3, [pc, #156]	@ (80076c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	bf0c      	ite	eq
 8007628:	2301      	moveq	r3, #1
 800762a:	2300      	movne	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	4b23      	ldr	r3, [pc, #140]	@ (80076c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8007632:	701a      	strb	r2, [r3, #0]
				if (!pause) {
 8007634:	4b22      	ldr	r3, [pc, #136]	@ (80076c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d111      	bne.n	8007660 <HAL_GPIO_EXTI_Callback+0x18c>
					HAL_UART_Transmit(&huart1, "\x14\x14", 2, 0xffff);
 800763c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007640:	2202      	movs	r2, #2
 8007642:	4920      	ldr	r1, [pc, #128]	@ (80076c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8007644:	4817      	ldr	r0, [pc, #92]	@ (80076a4 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8007646:	f001 ffaa 	bl	800959e <HAL_UART_Transmit>
					lcd_color_fill(10, 290, 25, 305, start_img);
 800764a:	4b1f      	ldr	r3, [pc, #124]	@ (80076c8 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	f240 1331 	movw	r3, #305	@ 0x131
 8007652:	2219      	movs	r2, #25
 8007654:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8007658:	200a      	movs	r0, #10
 800765a:	f7ff faf5 	bl	8006c48 <lcd_color_fill>
			break;
 800765e:	e017      	b.n	8007690 <HAL_GPIO_EXTI_Callback+0x1bc>
					lcd_color_fill(10, 290, 25, 305, pause_img);
 8007660:	4b1a      	ldr	r3, [pc, #104]	@ (80076cc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	f240 1331 	movw	r3, #305	@ 0x131
 8007668:	2219      	movs	r2, #25
 800766a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800766e:	200a      	movs	r0, #10
 8007670:	f7ff faea 	bl	8006c48 <lcd_color_fill>
			break;
 8007674:	e00c      	b.n	8007690 <HAL_GPIO_EXTI_Callback+0x1bc>
		case WK_UP_Pin:
			lcd_color_fill(0, 200, DIM_X - 1, DIM_Y + 199, uRx_Data + 1);
 8007676:	4b10      	ldr	r3, [pc, #64]	@ (80076b8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	23f4      	movs	r3, #244	@ 0xf4
 800767c:	223b      	movs	r2, #59	@ 0x3b
 800767e:	21c8      	movs	r1, #200	@ 0xc8
 8007680:	2000      	movs	r0, #0
 8007682:	f7ff fae1 	bl	8006c48 <lcd_color_fill>
			break;
 8007686:	e004      	b.n	8007692 <HAL_GPIO_EXTI_Callback+0x1be>
		default: break;
 8007688:	bf00      	nop
 800768a:	e002      	b.n	8007692 <HAL_GPIO_EXTI_Callback+0x1be>
			break;
 800768c:	bf00      	nop
 800768e:	e000      	b.n	8007692 <HAL_GPIO_EXTI_Callback+0x1be>
			break;
 8007690:	bf00      	nop
	}
}
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40010800 	.word	0x40010800
 80076a0:	0800a8ec 	.word	0x0800a8ec
 80076a4:	20002b50 	.word	0x20002b50
 80076a8:	20002ad8 	.word	0x20002ad8
 80076ac:	0800a8f0 	.word	0x0800a8f0
 80076b0:	20002a3c 	.word	0x20002a3c
 80076b4:	20002af0 	.word	0x20002af0
 80076b8:	20000006 	.word	0x20000006
 80076bc:	40011000 	.word	0x40011000
 80076c0:	20002ad0 	.word	0x20002ad0
 80076c4:	0800a8f8 	.word	0x0800a8f8
 80076c8:	0800d89c 	.word	0x0800d89c
 80076cc:	0800da9c 	.word	0x0800da9c

080076d0 <HAL_UART_RxCpltCallback>:

__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a26      	ldr	r2, [pc, #152]	@ (8007778 <HAL_UART_RxCpltCallback+0xa8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d145      	bne.n	800776e <HAL_UART_RxCpltCallback+0x9e>
		if (qLength == 1) {
 80076e2:	4b26      	ldr	r3, [pc, #152]	@ (800777c <HAL_UART_RxCpltCallback+0xac>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d137      	bne.n	800775a <HAL_UART_RxCpltCallback+0x8a>
			uint16_t data = rxBuffer[0] << 8 | rxQueue;
 80076ea:	4b25      	ldr	r3, [pc, #148]	@ (8007780 <HAL_UART_RxCpltCallback+0xb0>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b21a      	sxth	r2, r3
 80076f2:	4b24      	ldr	r3, [pc, #144]	@ (8007784 <HAL_UART_RxCpltCallback+0xb4>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	b21b      	sxth	r3, r3
 80076f8:	4313      	orrs	r3, r2
 80076fa:	b21b      	sxth	r3, r3
 80076fc:	81fb      	strh	r3, [r7, #14]
			if (data == START_FRAME) {
 80076fe:	89fb      	ldrh	r3, [r7, #14]
 8007700:	f241 2234 	movw	r2, #4660	@ 0x1234
 8007704:	4293      	cmp	r3, r2
 8007706:	d10f      	bne.n	8007728 <HAL_UART_RxCpltCallback+0x58>
				HAL_UART_Transmit(&huart1, pause ? "\x15\x15" : "\x14\x14", 2, 0xffff);
 8007708:	4b1f      	ldr	r3, [pc, #124]	@ (8007788 <HAL_UART_RxCpltCallback+0xb8>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_UART_RxCpltCallback+0x44>
 8007710:	491e      	ldr	r1, [pc, #120]	@ (800778c <HAL_UART_RxCpltCallback+0xbc>)
 8007712:	e000      	b.n	8007716 <HAL_UART_RxCpltCallback+0x46>
 8007714:	491e      	ldr	r1, [pc, #120]	@ (8007790 <HAL_UART_RxCpltCallback+0xc0>)
 8007716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800771a:	2202      	movs	r2, #2
 800771c:	481d      	ldr	r0, [pc, #116]	@ (8007794 <HAL_UART_RxCpltCallback+0xc4>)
 800771e:	f001 ff3e 	bl	800959e <HAL_UART_Transmit>
				rxLength = 0;
 8007722:	4b1d      	ldr	r3, [pc, #116]	@ (8007798 <HAL_UART_RxCpltCallback+0xc8>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]
			}

			uRx_Data[rxLength++] = data;
 8007728:	4b1b      	ldr	r3, [pc, #108]	@ (8007798 <HAL_UART_RxCpltCallback+0xc8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	491a      	ldr	r1, [pc, #104]	@ (8007798 <HAL_UART_RxCpltCallback+0xc8>)
 8007730:	600a      	str	r2, [r1, #0]
 8007732:	491a      	ldr	r1, [pc, #104]	@ (800779c <HAL_UART_RxCpltCallback+0xcc>)
 8007734:	89fa      	ldrh	r2, [r7, #14]
 8007736:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			frame_ready = (rxLength >= DIM_X * DIM_Y);
 800773a:	4b17      	ldr	r3, [pc, #92]	@ (8007798 <HAL_UART_RxCpltCallback+0xc8>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f640 228b 	movw	r2, #2699	@ 0xa8b
 8007742:	4293      	cmp	r3, r2
 8007744:	bfcc      	ite	gt
 8007746:	2301      	movgt	r3, #1
 8007748:	2300      	movle	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	4b14      	ldr	r3, [pc, #80]	@ (80077a0 <HAL_UART_RxCpltCallback+0xd0>)
 8007750:	601a      	str	r2, [r3, #0]

			qLength = 0;
 8007752:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <HAL_UART_RxCpltCallback+0xac>)
 8007754:	2200      	movs	r2, #0
 8007756:	701a      	strb	r2, [r3, #0]
		} else {
			rxQueue = rxBuffer[0];
			qLength++;
		}
	}
}
 8007758:	e009      	b.n	800776e <HAL_UART_RxCpltCallback+0x9e>
			rxQueue = rxBuffer[0];
 800775a:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <HAL_UART_RxCpltCallback+0xb0>)
 800775c:	781a      	ldrb	r2, [r3, #0]
 800775e:	4b09      	ldr	r3, [pc, #36]	@ (8007784 <HAL_UART_RxCpltCallback+0xb4>)
 8007760:	701a      	strb	r2, [r3, #0]
			qLength++;
 8007762:	4b06      	ldr	r3, [pc, #24]	@ (800777c <HAL_UART_RxCpltCallback+0xac>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	3301      	adds	r3, #1
 8007768:	b2da      	uxtb	r2, r3
 800776a:	4b04      	ldr	r3, [pc, #16]	@ (800777c <HAL_UART_RxCpltCallback+0xac>)
 800776c:	701a      	strb	r2, [r3, #0]
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	40013800 	.word	0x40013800
 800777c:	20002af5 	.word	0x20002af5
 8007780:	20002adc 	.word	0x20002adc
 8007784:	20002af4 	.word	0x20002af4
 8007788:	20002ad0 	.word	0x20002ad0
 800778c:	0800a8fc 	.word	0x0800a8fc
 8007790:	0800a8f8 	.word	0x0800a8f8
 8007794:	20002b50 	.word	0x20002b50
 8007798:	20002af0 	.word	0x20002af0
 800779c:	20000004 	.word	0x20000004
 80077a0:	20002ac8 	.word	0x20002ac8

080077a4 <HAL_TIM_PeriodElapsedCallback>:

char s[6];
int last_frame = 0;
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af04      	add	r7, sp, #16
 80077aa:	6078      	str	r0, [r7, #4]
	if (!pause && frame_count > last_frame) seconds++;
 80077ac:	4b27      	ldr	r3, [pc, #156]	@ (800784c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <HAL_TIM_PeriodElapsedCallback+0x26>
 80077b4:	4b26      	ldr	r3, [pc, #152]	@ (8007850 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	4b26      	ldr	r3, [pc, #152]	@ (8007854 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	dd04      	ble.n	80077ca <HAL_TIM_PeriodElapsedCallback+0x26>
 80077c0:	4b25      	ldr	r3, [pc, #148]	@ (8007858 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	4a24      	ldr	r2, [pc, #144]	@ (8007858 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80077c8:	6013      	str	r3, [r2, #0]
	sprintf(s, "%02u:%02u", seconds / 60, seconds % 60);
 80077ca:	4b23      	ldr	r3, [pc, #140]	@ (8007858 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a23      	ldr	r2, [pc, #140]	@ (800785c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80077d0:	fb82 1203 	smull	r1, r2, r2, r3
 80077d4:	441a      	add	r2, r3
 80077d6:	1152      	asrs	r2, r2, #5
 80077d8:	17db      	asrs	r3, r3, #31
 80077da:	1ad0      	subs	r0, r2, r3
 80077dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007858 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	4b1e      	ldr	r3, [pc, #120]	@ (800785c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80077e2:	fb83 1302 	smull	r1, r3, r3, r2
 80077e6:	4413      	add	r3, r2
 80077e8:	1159      	asrs	r1, r3, #5
 80077ea:	17d3      	asrs	r3, r2, #31
 80077ec:	1ac9      	subs	r1, r1, r3
 80077ee:	460b      	mov	r3, r1
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	1a5b      	subs	r3, r3, r1
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	1ad1      	subs	r1, r2, r3
 80077f8:	460b      	mov	r3, r1
 80077fa:	4602      	mov	r2, r0
 80077fc:	4918      	ldr	r1, [pc, #96]	@ (8007860 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80077fe:	4819      	ldr	r0, [pc, #100]	@ (8007864 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8007800:	f002 fbb8 	bl	8009f74 <siprintf>

	// draw bar
	lcd_fill(10, 278, 10 + seconds, 282, BLACK);
 8007804:	4b14      	ldr	r3, [pc, #80]	@ (8007858 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	330a      	adds	r3, #10
 800780c:	b29a      	uxth	r2, r3
 800780e:	2300      	movs	r3, #0
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8007816:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800781a:	200a      	movs	r0, #10
 800781c:	f7ff f9a6 	bl	8006b6c <lcd_fill>
	lcd_show_string(100, 290, 200, 16, 16, s, BLACK);
 8007820:	2300      	movs	r3, #0
 8007822:	9302      	str	r3, [sp, #8]
 8007824:	4b0f      	ldr	r3, [pc, #60]	@ (8007864 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	2310      	movs	r3, #16
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	2310      	movs	r3, #16
 800782e:	22c8      	movs	r2, #200	@ 0xc8
 8007830:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8007834:	2064      	movs	r0, #100	@ 0x64
 8007836:	f7ff fcad 	bl	8007194 <lcd_show_string>
	last_frame = frame_count;
 800783a:	4b05      	ldr	r3, [pc, #20]	@ (8007850 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a05      	ldr	r2, [pc, #20]	@ (8007854 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8007840:	6013      	str	r3, [r2, #0]
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20002ad0 	.word	0x20002ad0
 8007850:	20002ad4 	.word	0x20002ad4
 8007854:	20002b00 	.word	0x20002b00
 8007858:	20002acc 	.word	0x20002acc
 800785c:	88888889 	.word	0x88888889
 8007860:	0800a900 	.word	0x0800a900
 8007864:	20002af8 	.word	0x20002af8

08007868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007870:	4a14      	ldr	r2, [pc, #80]	@ (80078c4 <_sbrk+0x5c>)
 8007872:	4b15      	ldr	r3, [pc, #84]	@ (80078c8 <_sbrk+0x60>)
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800787c:	4b13      	ldr	r3, [pc, #76]	@ (80078cc <_sbrk+0x64>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007884:	4b11      	ldr	r3, [pc, #68]	@ (80078cc <_sbrk+0x64>)
 8007886:	4a12      	ldr	r2, [pc, #72]	@ (80078d0 <_sbrk+0x68>)
 8007888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800788a:	4b10      	ldr	r3, [pc, #64]	@ (80078cc <_sbrk+0x64>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4413      	add	r3, r2
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	429a      	cmp	r2, r3
 8007896:	d207      	bcs.n	80078a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007898:	f002 fb94 	bl	8009fc4 <__errno>
 800789c:	4603      	mov	r3, r0
 800789e:	220c      	movs	r2, #12
 80078a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078a6:	e009      	b.n	80078bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80078a8:	4b08      	ldr	r3, [pc, #32]	@ (80078cc <_sbrk+0x64>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80078ae:	4b07      	ldr	r3, [pc, #28]	@ (80078cc <_sbrk+0x64>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4413      	add	r3, r2
 80078b6:	4a05      	ldr	r2, [pc, #20]	@ (80078cc <_sbrk+0x64>)
 80078b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	2000c000 	.word	0x2000c000
 80078c8:	00000400 	.word	0x00000400
 80078cc:	20002b04 	.word	0x20002b04
 80078d0:	20002ce0 	.word	0x20002ce0

080078d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80078d8:	bf00      	nop
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr

080078e0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078e6:	f107 0308 	add.w	r3, r7, #8
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	605a      	str	r2, [r3, #4]
 80078f0:	609a      	str	r2, [r3, #8]
 80078f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078f4:	463b      	mov	r3, r7
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80078fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007974 <MX_TIM3_Init+0x94>)
 80078fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007978 <MX_TIM3_Init+0x98>)
 8007900:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8007902:	4b1c      	ldr	r3, [pc, #112]	@ (8007974 <MX_TIM3_Init+0x94>)
 8007904:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8007908:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800790a:	4b1a      	ldr	r3, [pc, #104]	@ (8007974 <MX_TIM3_Init+0x94>)
 800790c:	2200      	movs	r2, #0
 800790e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9979;
 8007910:	4b18      	ldr	r3, [pc, #96]	@ (8007974 <MX_TIM3_Init+0x94>)
 8007912:	f242 62fb 	movw	r2, #9979	@ 0x26fb
 8007916:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007918:	4b16      	ldr	r3, [pc, #88]	@ (8007974 <MX_TIM3_Init+0x94>)
 800791a:	2200      	movs	r2, #0
 800791c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800791e:	4b15      	ldr	r3, [pc, #84]	@ (8007974 <MX_TIM3_Init+0x94>)
 8007920:	2200      	movs	r2, #0
 8007922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007924:	4813      	ldr	r0, [pc, #76]	@ (8007974 <MX_TIM3_Init+0x94>)
 8007926:	f001 f9bf 	bl	8008ca8 <HAL_TIM_Base_Init>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007930:	f7ff fd39 	bl	80073a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007938:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800793a:	f107 0308 	add.w	r3, r7, #8
 800793e:	4619      	mov	r1, r3
 8007940:	480c      	ldr	r0, [pc, #48]	@ (8007974 <MX_TIM3_Init+0x94>)
 8007942:	f001 fb69 	bl	8009018 <HAL_TIM_ConfigClockSource>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800794c:	f7ff fd2b 	bl	80073a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007950:	2300      	movs	r3, #0
 8007952:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007954:	2300      	movs	r3, #0
 8007956:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007958:	463b      	mov	r3, r7
 800795a:	4619      	mov	r1, r3
 800795c:	4805      	ldr	r0, [pc, #20]	@ (8007974 <MX_TIM3_Init+0x94>)
 800795e:	f001 fd53 	bl	8009408 <HAL_TIMEx_MasterConfigSynchronization>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007968:	f7ff fd1d 	bl	80073a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800796c:	bf00      	nop
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	20002b08 	.word	0x20002b08
 8007978:	40000400 	.word	0x40000400

0800797c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a0d      	ldr	r2, [pc, #52]	@ (80079c0 <HAL_TIM_Base_MspInit+0x44>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d113      	bne.n	80079b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800798e:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <HAL_TIM_Base_MspInit+0x48>)
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	4a0c      	ldr	r2, [pc, #48]	@ (80079c4 <HAL_TIM_Base_MspInit+0x48>)
 8007994:	f043 0302 	orr.w	r3, r3, #2
 8007998:	61d3      	str	r3, [r2, #28]
 800799a:	4b0a      	ldr	r3, [pc, #40]	@ (80079c4 <HAL_TIM_Base_MspInit+0x48>)
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 80079a6:	2201      	movs	r2, #1
 80079a8:	2101      	movs	r1, #1
 80079aa:	201d      	movs	r0, #29
 80079ac:	f000 fa0d 	bl	8007dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80079b0:	201d      	movs	r0, #29
 80079b2:	f000 fa26 	bl	8007e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80079b6:	bf00      	nop
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40000400 	.word	0x40000400
 80079c4:	40021000 	.word	0x40021000

080079c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80079cc:	4b10      	ldr	r3, [pc, #64]	@ (8007a10 <MX_USART1_UART_Init+0x48>)
 80079ce:	4a11      	ldr	r2, [pc, #68]	@ (8007a14 <MX_USART1_UART_Init+0x4c>)
 80079d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80079d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a10 <MX_USART1_UART_Init+0x48>)
 80079d4:	4a10      	ldr	r2, [pc, #64]	@ (8007a18 <MX_USART1_UART_Init+0x50>)
 80079d6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80079d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007a10 <MX_USART1_UART_Init+0x48>)
 80079da:	2200      	movs	r2, #0
 80079dc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80079de:	4b0c      	ldr	r3, [pc, #48]	@ (8007a10 <MX_USART1_UART_Init+0x48>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80079e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007a10 <MX_USART1_UART_Init+0x48>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80079ea:	4b09      	ldr	r3, [pc, #36]	@ (8007a10 <MX_USART1_UART_Init+0x48>)
 80079ec:	220c      	movs	r2, #12
 80079ee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079f0:	4b07      	ldr	r3, [pc, #28]	@ (8007a10 <MX_USART1_UART_Init+0x48>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80079f6:	4b06      	ldr	r3, [pc, #24]	@ (8007a10 <MX_USART1_UART_Init+0x48>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80079fc:	4804      	ldr	r0, [pc, #16]	@ (8007a10 <MX_USART1_UART_Init+0x48>)
 80079fe:	f001 fd81 	bl	8009504 <HAL_UART_Init>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8007a08:	f7ff fccd 	bl	80073a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007a0c:	bf00      	nop
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20002b50 	.word	0x20002b50
 8007a14:	40013800 	.word	0x40013800
 8007a18:	000f4240 	.word	0x000f4240

08007a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a24:	f107 0310 	add.w	r3, r7, #16
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	605a      	str	r2, [r3, #4]
 8007a2e:	609a      	str	r2, [r3, #8]
 8007a30:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a20      	ldr	r2, [pc, #128]	@ (8007ab8 <HAL_UART_MspInit+0x9c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d139      	bne.n	8007ab0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8007abc <HAL_UART_MspInit+0xa0>)
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	4a1e      	ldr	r2, [pc, #120]	@ (8007abc <HAL_UART_MspInit+0xa0>)
 8007a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a46:	6193      	str	r3, [r2, #24]
 8007a48:	4b1c      	ldr	r3, [pc, #112]	@ (8007abc <HAL_UART_MspInit+0xa0>)
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a54:	4b19      	ldr	r3, [pc, #100]	@ (8007abc <HAL_UART_MspInit+0xa0>)
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	4a18      	ldr	r2, [pc, #96]	@ (8007abc <HAL_UART_MspInit+0xa0>)
 8007a5a:	f043 0304 	orr.w	r3, r3, #4
 8007a5e:	6193      	str	r3, [r2, #24]
 8007a60:	4b16      	ldr	r3, [pc, #88]	@ (8007abc <HAL_UART_MspInit+0xa0>)
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	60bb      	str	r3, [r7, #8]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a72:	2302      	movs	r3, #2
 8007a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a76:	2303      	movs	r3, #3
 8007a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a7a:	f107 0310 	add.w	r3, r7, #16
 8007a7e:	4619      	mov	r1, r3
 8007a80:	480f      	ldr	r0, [pc, #60]	@ (8007ac0 <HAL_UART_MspInit+0xa4>)
 8007a82:	f000 fb1b 	bl	80080bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a94:	f107 0310 	add.w	r3, r7, #16
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4809      	ldr	r0, [pc, #36]	@ (8007ac0 <HAL_UART_MspInit+0xa4>)
 8007a9c:	f000 fb0e 	bl	80080bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	2025      	movs	r0, #37	@ 0x25
 8007aa6:	f000 f990 	bl	8007dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007aaa:	2025      	movs	r0, #37	@ 0x25
 8007aac:	f000 f9a9 	bl	8007e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	3720      	adds	r7, #32
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	40013800 	.word	0x40013800
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	40010800 	.word	0x40010800

08007ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007ac4:	480c      	ldr	r0, [pc, #48]	@ (8007af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007ac6:	490d      	ldr	r1, [pc, #52]	@ (8007afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8007b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007acc:	e002      	b.n	8007ad4 <LoopCopyDataInit>

08007ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ad2:	3304      	adds	r3, #4

08007ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ad8:	d3f9      	bcc.n	8007ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ada:	4a0a      	ldr	r2, [pc, #40]	@ (8007b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007adc:	4c0a      	ldr	r4, [pc, #40]	@ (8007b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ae0:	e001      	b.n	8007ae6 <LoopFillZerobss>

08007ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ae4:	3204      	adds	r2, #4

08007ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ae8:	d3fb      	bcc.n	8007ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007aea:	f7ff fef3 	bl	80078d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007aee:	f002 fa6f 	bl	8009fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007af2:	f7ff fb9f 	bl	8007234 <main>
  bx lr
 8007af6:	4770      	bx	lr
  ldr r0, =_sdata
 8007af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007afc:	20002a9c 	.word	0x20002a9c
  ldr r2, =_sidata
 8007b00:	0800dcf0 	.word	0x0800dcf0
  ldr r2, =_sbss
 8007b04:	20002a9c 	.word	0x20002a9c
  ldr r4, =_ebss
 8007b08:	20002ce0 	.word	0x20002ce0

08007b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007b0c:	e7fe      	b.n	8007b0c <ADC1_2_IRQHandler>
	...

08007b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b14:	4b08      	ldr	r3, [pc, #32]	@ (8007b38 <HAL_Init+0x28>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a07      	ldr	r2, [pc, #28]	@ (8007b38 <HAL_Init+0x28>)
 8007b1a:	f043 0310 	orr.w	r3, r3, #16
 8007b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b20:	2003      	movs	r0, #3
 8007b22:	f000 f947 	bl	8007db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b26:	2000      	movs	r0, #0
 8007b28:	f000 f808 	bl	8007b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b2c:	f7ff fc42 	bl	80073b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40022000 	.word	0x40022000

08007b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007b44:	4b12      	ldr	r3, [pc, #72]	@ (8007b90 <HAL_InitTick+0x54>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	4b12      	ldr	r3, [pc, #72]	@ (8007b94 <HAL_InitTick+0x58>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 f95f 	bl	8007e1e <HAL_SYSTICK_Config>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e00e      	b.n	8007b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b0f      	cmp	r3, #15
 8007b6e:	d80a      	bhi.n	8007b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b70:	2200      	movs	r2, #0
 8007b72:	6879      	ldr	r1, [r7, #4]
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b78:	f000 f927 	bl	8007dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b7c:	4a06      	ldr	r2, [pc, #24]	@ (8007b98 <HAL_InitTick+0x5c>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e000      	b.n	8007b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20002a40 	.word	0x20002a40
 8007b94:	20002a48 	.word	0x20002a48
 8007b98:	20002a44 	.word	0x20002a44

08007b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ba0:	4b05      	ldr	r3, [pc, #20]	@ (8007bb8 <HAL_IncTick+0x1c>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4b05      	ldr	r3, [pc, #20]	@ (8007bbc <HAL_IncTick+0x20>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4413      	add	r3, r2
 8007bac:	4a03      	ldr	r2, [pc, #12]	@ (8007bbc <HAL_IncTick+0x20>)
 8007bae:	6013      	str	r3, [r2, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr
 8007bb8:	20002a48 	.word	0x20002a48
 8007bbc:	20002b94 	.word	0x20002b94

08007bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8007bc4:	4b02      	ldr	r3, [pc, #8]	@ (8007bd0 <HAL_GetTick+0x10>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr
 8007bd0:	20002b94 	.word	0x20002b94

08007bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bdc:	f7ff fff0 	bl	8007bc0 <HAL_GetTick>
 8007be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bec:	d005      	beq.n	8007bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007bee:	4b0a      	ldr	r3, [pc, #40]	@ (8007c18 <HAL_Delay+0x44>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bfa:	bf00      	nop
 8007bfc:	f7ff ffe0 	bl	8007bc0 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d8f7      	bhi.n	8007bfc <HAL_Delay+0x28>
  {
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20002a48 	.word	0x20002a48

08007c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c60 <__NVIC_SetPriorityGrouping+0x44>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007c38:	4013      	ands	r3, r2
 8007c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c4e:	4a04      	ldr	r2, [pc, #16]	@ (8007c60 <__NVIC_SetPriorityGrouping+0x44>)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	60d3      	str	r3, [r2, #12]
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	e000ed00 	.word	0xe000ed00

08007c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c68:	4b04      	ldr	r3, [pc, #16]	@ (8007c7c <__NVIC_GetPriorityGrouping+0x18>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	0a1b      	lsrs	r3, r3, #8
 8007c6e:	f003 0307 	and.w	r3, r3, #7
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	e000ed00 	.word	0xe000ed00

08007c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	db0b      	blt.n	8007caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	f003 021f 	and.w	r2, r3, #31
 8007c98:	4906      	ldr	r1, [pc, #24]	@ (8007cb4 <__NVIC_EnableIRQ+0x34>)
 8007c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr
 8007cb4:	e000e100 	.word	0xe000e100

08007cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6039      	str	r1, [r7, #0]
 8007cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	db0a      	blt.n	8007ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	490c      	ldr	r1, [pc, #48]	@ (8007d04 <__NVIC_SetPriority+0x4c>)
 8007cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cd6:	0112      	lsls	r2, r2, #4
 8007cd8:	b2d2      	uxtb	r2, r2
 8007cda:	440b      	add	r3, r1
 8007cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ce0:	e00a      	b.n	8007cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	4908      	ldr	r1, [pc, #32]	@ (8007d08 <__NVIC_SetPriority+0x50>)
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	3b04      	subs	r3, #4
 8007cf0:	0112      	lsls	r2, r2, #4
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	761a      	strb	r2, [r3, #24]
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	e000e100 	.word	0xe000e100
 8007d08:	e000ed00 	.word	0xe000ed00

08007d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b089      	sub	sp, #36	@ 0x24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f1c3 0307 	rsb	r3, r3, #7
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	bf28      	it	cs
 8007d2a:	2304      	movcs	r3, #4
 8007d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	3304      	adds	r3, #4
 8007d32:	2b06      	cmp	r3, #6
 8007d34:	d902      	bls.n	8007d3c <NVIC_EncodePriority+0x30>
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	3b03      	subs	r3, #3
 8007d3a:	e000      	b.n	8007d3e <NVIC_EncodePriority+0x32>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	43da      	mvns	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	401a      	ands	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5e:	43d9      	mvns	r1, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d64:	4313      	orrs	r3, r2
         );
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3724      	adds	r7, #36	@ 0x24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bc80      	pop	{r7}
 8007d6e:	4770      	bx	lr

08007d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d80:	d301      	bcc.n	8007d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d82:	2301      	movs	r3, #1
 8007d84:	e00f      	b.n	8007da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d86:	4a0a      	ldr	r2, [pc, #40]	@ (8007db0 <SysTick_Config+0x40>)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d8e:	210f      	movs	r1, #15
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d94:	f7ff ff90 	bl	8007cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d98:	4b05      	ldr	r3, [pc, #20]	@ (8007db0 <SysTick_Config+0x40>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d9e:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <SysTick_Config+0x40>)
 8007da0:	2207      	movs	r2, #7
 8007da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	e000e010 	.word	0xe000e010

08007db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff ff2d 	bl	8007c1c <__NVIC_SetPriorityGrouping>
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ddc:	f7ff ff42 	bl	8007c64 <__NVIC_GetPriorityGrouping>
 8007de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	6978      	ldr	r0, [r7, #20]
 8007de8:	f7ff ff90 	bl	8007d0c <NVIC_EncodePriority>
 8007dec:	4602      	mov	r2, r0
 8007dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff ff5f 	bl	8007cb8 <__NVIC_SetPriority>
}
 8007dfa:	bf00      	nop
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	4603      	mov	r3, r0
 8007e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7ff ff35 	bl	8007c80 <__NVIC_EnableIRQ>
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff ffa2 	bl	8007d70 <SysTick_Config>
 8007e2c:	4603      	mov	r3, r0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d008      	beq.n	8007e5e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2204      	movs	r2, #4
 8007e50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e020      	b.n	8007ea0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 020e 	bic.w	r2, r2, #14
 8007e6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0201 	bic.w	r2, r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e86:	2101      	movs	r1, #1
 8007e88:	fa01 f202 	lsl.w	r2, r1, r2
 8007e8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr
	...

08007eac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d005      	beq.n	8007ece <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2204      	movs	r2, #4
 8007ec6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
 8007ecc:	e0d6      	b.n	800807c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 020e 	bic.w	r2, r2, #14
 8007edc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 0201 	bic.w	r2, r2, #1
 8007eec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	4b64      	ldr	r3, [pc, #400]	@ (8008088 <HAL_DMA_Abort_IT+0x1dc>)
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d958      	bls.n	8007fac <HAL_DMA_Abort_IT+0x100>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a63      	ldr	r2, [pc, #396]	@ (800808c <HAL_DMA_Abort_IT+0x1e0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d04f      	beq.n	8007fa4 <HAL_DMA_Abort_IT+0xf8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a61      	ldr	r2, [pc, #388]	@ (8008090 <HAL_DMA_Abort_IT+0x1e4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d048      	beq.n	8007fa0 <HAL_DMA_Abort_IT+0xf4>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a60      	ldr	r2, [pc, #384]	@ (8008094 <HAL_DMA_Abort_IT+0x1e8>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d040      	beq.n	8007f9a <HAL_DMA_Abort_IT+0xee>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a5e      	ldr	r2, [pc, #376]	@ (8008098 <HAL_DMA_Abort_IT+0x1ec>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d038      	beq.n	8007f94 <HAL_DMA_Abort_IT+0xe8>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a5d      	ldr	r2, [pc, #372]	@ (800809c <HAL_DMA_Abort_IT+0x1f0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d030      	beq.n	8007f8e <HAL_DMA_Abort_IT+0xe2>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a5b      	ldr	r2, [pc, #364]	@ (80080a0 <HAL_DMA_Abort_IT+0x1f4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d028      	beq.n	8007f88 <HAL_DMA_Abort_IT+0xdc>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a53      	ldr	r2, [pc, #332]	@ (8008088 <HAL_DMA_Abort_IT+0x1dc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d020      	beq.n	8007f82 <HAL_DMA_Abort_IT+0xd6>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a57      	ldr	r2, [pc, #348]	@ (80080a4 <HAL_DMA_Abort_IT+0x1f8>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d019      	beq.n	8007f7e <HAL_DMA_Abort_IT+0xd2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a56      	ldr	r2, [pc, #344]	@ (80080a8 <HAL_DMA_Abort_IT+0x1fc>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d012      	beq.n	8007f7a <HAL_DMA_Abort_IT+0xce>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a54      	ldr	r2, [pc, #336]	@ (80080ac <HAL_DMA_Abort_IT+0x200>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00a      	beq.n	8007f74 <HAL_DMA_Abort_IT+0xc8>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a53      	ldr	r2, [pc, #332]	@ (80080b0 <HAL_DMA_Abort_IT+0x204>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d102      	bne.n	8007f6e <HAL_DMA_Abort_IT+0xc2>
 8007f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f6c:	e01b      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007f6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007f72:	e018      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007f74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f78:	e015      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007f7a:	2310      	movs	r3, #16
 8007f7c:	e013      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e011      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007f82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f86:	e00e      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007f88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007f8c:	e00b      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007f8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007f92:	e008      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f98:	e005      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007f9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f9e:	e002      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	e000      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xfa>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	4a43      	ldr	r2, [pc, #268]	@ (80080b4 <HAL_DMA_Abort_IT+0x208>)
 8007fa8:	6053      	str	r3, [r2, #4]
 8007faa:	e057      	b.n	800805c <HAL_DMA_Abort_IT+0x1b0>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a36      	ldr	r2, [pc, #216]	@ (800808c <HAL_DMA_Abort_IT+0x1e0>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d04f      	beq.n	8008056 <HAL_DMA_Abort_IT+0x1aa>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a35      	ldr	r2, [pc, #212]	@ (8008090 <HAL_DMA_Abort_IT+0x1e4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d048      	beq.n	8008052 <HAL_DMA_Abort_IT+0x1a6>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a33      	ldr	r2, [pc, #204]	@ (8008094 <HAL_DMA_Abort_IT+0x1e8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d040      	beq.n	800804c <HAL_DMA_Abort_IT+0x1a0>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a32      	ldr	r2, [pc, #200]	@ (8008098 <HAL_DMA_Abort_IT+0x1ec>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d038      	beq.n	8008046 <HAL_DMA_Abort_IT+0x19a>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a30      	ldr	r2, [pc, #192]	@ (800809c <HAL_DMA_Abort_IT+0x1f0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d030      	beq.n	8008040 <HAL_DMA_Abort_IT+0x194>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80080a0 <HAL_DMA_Abort_IT+0x1f4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d028      	beq.n	800803a <HAL_DMA_Abort_IT+0x18e>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a26      	ldr	r2, [pc, #152]	@ (8008088 <HAL_DMA_Abort_IT+0x1dc>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d020      	beq.n	8008034 <HAL_DMA_Abort_IT+0x188>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80080a4 <HAL_DMA_Abort_IT+0x1f8>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d019      	beq.n	8008030 <HAL_DMA_Abort_IT+0x184>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a29      	ldr	r2, [pc, #164]	@ (80080a8 <HAL_DMA_Abort_IT+0x1fc>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d012      	beq.n	800802c <HAL_DMA_Abort_IT+0x180>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a28      	ldr	r2, [pc, #160]	@ (80080ac <HAL_DMA_Abort_IT+0x200>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d00a      	beq.n	8008026 <HAL_DMA_Abort_IT+0x17a>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a26      	ldr	r2, [pc, #152]	@ (80080b0 <HAL_DMA_Abort_IT+0x204>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d102      	bne.n	8008020 <HAL_DMA_Abort_IT+0x174>
 800801a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800801e:	e01b      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 8008020:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008024:	e018      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 8008026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800802a:	e015      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 800802c:	2310      	movs	r3, #16
 800802e:	e013      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 8008030:	2301      	movs	r3, #1
 8008032:	e011      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 8008034:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008038:	e00e      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 800803a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800803e:	e00b      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 8008040:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008044:	e008      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 8008046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800804a:	e005      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 800804c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008050:	e002      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 8008052:	2310      	movs	r3, #16
 8008054:	e000      	b.n	8008058 <HAL_DMA_Abort_IT+0x1ac>
 8008056:	2301      	movs	r3, #1
 8008058:	4a17      	ldr	r2, [pc, #92]	@ (80080b8 <HAL_DMA_Abort_IT+0x20c>)
 800805a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	4798      	blx	r3
    } 
  }
  return status;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40020080 	.word	0x40020080
 800808c:	40020008 	.word	0x40020008
 8008090:	4002001c 	.word	0x4002001c
 8008094:	40020030 	.word	0x40020030
 8008098:	40020044 	.word	0x40020044
 800809c:	40020058 	.word	0x40020058
 80080a0:	4002006c 	.word	0x4002006c
 80080a4:	40020408 	.word	0x40020408
 80080a8:	4002041c 	.word	0x4002041c
 80080ac:	40020430 	.word	0x40020430
 80080b0:	40020444 	.word	0x40020444
 80080b4:	40020400 	.word	0x40020400
 80080b8:	40020000 	.word	0x40020000

080080bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080bc:	b480      	push	{r7}
 80080be:	b08b      	sub	sp, #44	@ 0x2c
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80080c6:	2300      	movs	r3, #0
 80080c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80080ca:	2300      	movs	r3, #0
 80080cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080ce:	e179      	b.n	80083c4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80080d0:	2201      	movs	r2, #1
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	fa02 f303 	lsl.w	r3, r2, r3
 80080d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	4013      	ands	r3, r2
 80080e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	f040 8168 	bne.w	80083be <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	4a96      	ldr	r2, [pc, #600]	@ (800834c <HAL_GPIO_Init+0x290>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d05e      	beq.n	80081b6 <HAL_GPIO_Init+0xfa>
 80080f8:	4a94      	ldr	r2, [pc, #592]	@ (800834c <HAL_GPIO_Init+0x290>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d875      	bhi.n	80081ea <HAL_GPIO_Init+0x12e>
 80080fe:	4a94      	ldr	r2, [pc, #592]	@ (8008350 <HAL_GPIO_Init+0x294>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d058      	beq.n	80081b6 <HAL_GPIO_Init+0xfa>
 8008104:	4a92      	ldr	r2, [pc, #584]	@ (8008350 <HAL_GPIO_Init+0x294>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d86f      	bhi.n	80081ea <HAL_GPIO_Init+0x12e>
 800810a:	4a92      	ldr	r2, [pc, #584]	@ (8008354 <HAL_GPIO_Init+0x298>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d052      	beq.n	80081b6 <HAL_GPIO_Init+0xfa>
 8008110:	4a90      	ldr	r2, [pc, #576]	@ (8008354 <HAL_GPIO_Init+0x298>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d869      	bhi.n	80081ea <HAL_GPIO_Init+0x12e>
 8008116:	4a90      	ldr	r2, [pc, #576]	@ (8008358 <HAL_GPIO_Init+0x29c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d04c      	beq.n	80081b6 <HAL_GPIO_Init+0xfa>
 800811c:	4a8e      	ldr	r2, [pc, #568]	@ (8008358 <HAL_GPIO_Init+0x29c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d863      	bhi.n	80081ea <HAL_GPIO_Init+0x12e>
 8008122:	4a8e      	ldr	r2, [pc, #568]	@ (800835c <HAL_GPIO_Init+0x2a0>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d046      	beq.n	80081b6 <HAL_GPIO_Init+0xfa>
 8008128:	4a8c      	ldr	r2, [pc, #560]	@ (800835c <HAL_GPIO_Init+0x2a0>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d85d      	bhi.n	80081ea <HAL_GPIO_Init+0x12e>
 800812e:	2b12      	cmp	r3, #18
 8008130:	d82a      	bhi.n	8008188 <HAL_GPIO_Init+0xcc>
 8008132:	2b12      	cmp	r3, #18
 8008134:	d859      	bhi.n	80081ea <HAL_GPIO_Init+0x12e>
 8008136:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <HAL_GPIO_Init+0x80>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	080081b7 	.word	0x080081b7
 8008140:	08008191 	.word	0x08008191
 8008144:	080081a3 	.word	0x080081a3
 8008148:	080081e5 	.word	0x080081e5
 800814c:	080081eb 	.word	0x080081eb
 8008150:	080081eb 	.word	0x080081eb
 8008154:	080081eb 	.word	0x080081eb
 8008158:	080081eb 	.word	0x080081eb
 800815c:	080081eb 	.word	0x080081eb
 8008160:	080081eb 	.word	0x080081eb
 8008164:	080081eb 	.word	0x080081eb
 8008168:	080081eb 	.word	0x080081eb
 800816c:	080081eb 	.word	0x080081eb
 8008170:	080081eb 	.word	0x080081eb
 8008174:	080081eb 	.word	0x080081eb
 8008178:	080081eb 	.word	0x080081eb
 800817c:	080081eb 	.word	0x080081eb
 8008180:	08008199 	.word	0x08008199
 8008184:	080081ad 	.word	0x080081ad
 8008188:	4a75      	ldr	r2, [pc, #468]	@ (8008360 <HAL_GPIO_Init+0x2a4>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800818e:	e02c      	b.n	80081ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	623b      	str	r3, [r7, #32]
          break;
 8008196:	e029      	b.n	80081ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	3304      	adds	r3, #4
 800819e:	623b      	str	r3, [r7, #32]
          break;
 80081a0:	e024      	b.n	80081ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	3308      	adds	r3, #8
 80081a8:	623b      	str	r3, [r7, #32]
          break;
 80081aa:	e01f      	b.n	80081ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	330c      	adds	r3, #12
 80081b2:	623b      	str	r3, [r7, #32]
          break;
 80081b4:	e01a      	b.n	80081ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80081be:	2304      	movs	r3, #4
 80081c0:	623b      	str	r3, [r7, #32]
          break;
 80081c2:	e013      	b.n	80081ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d105      	bne.n	80081d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80081cc:	2308      	movs	r3, #8
 80081ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	611a      	str	r2, [r3, #16]
          break;
 80081d6:	e009      	b.n	80081ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80081d8:	2308      	movs	r3, #8
 80081da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	615a      	str	r2, [r3, #20]
          break;
 80081e2:	e003      	b.n	80081ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80081e4:	2300      	movs	r3, #0
 80081e6:	623b      	str	r3, [r7, #32]
          break;
 80081e8:	e000      	b.n	80081ec <HAL_GPIO_Init+0x130>
          break;
 80081ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	2bff      	cmp	r3, #255	@ 0xff
 80081f0:	d801      	bhi.n	80081f6 <HAL_GPIO_Init+0x13a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	e001      	b.n	80081fa <HAL_GPIO_Init+0x13e>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3304      	adds	r3, #4
 80081fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	2bff      	cmp	r3, #255	@ 0xff
 8008200:	d802      	bhi.n	8008208 <HAL_GPIO_Init+0x14c>
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	e002      	b.n	800820e <HAL_GPIO_Init+0x152>
 8008208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820a:	3b08      	subs	r3, #8
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	210f      	movs	r1, #15
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	fa01 f303 	lsl.w	r3, r1, r3
 800821c:	43db      	mvns	r3, r3
 800821e:	401a      	ands	r2, r3
 8008220:	6a39      	ldr	r1, [r7, #32]
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	fa01 f303 	lsl.w	r3, r1, r3
 8008228:	431a      	orrs	r2, r3
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80c1 	beq.w	80083be <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800823c:	4b49      	ldr	r3, [pc, #292]	@ (8008364 <HAL_GPIO_Init+0x2a8>)
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	4a48      	ldr	r2, [pc, #288]	@ (8008364 <HAL_GPIO_Init+0x2a8>)
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	6193      	str	r3, [r2, #24]
 8008248:	4b46      	ldr	r3, [pc, #280]	@ (8008364 <HAL_GPIO_Init+0x2a8>)
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	60bb      	str	r3, [r7, #8]
 8008252:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008254:	4a44      	ldr	r2, [pc, #272]	@ (8008368 <HAL_GPIO_Init+0x2ac>)
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	089b      	lsrs	r3, r3, #2
 800825a:	3302      	adds	r3, #2
 800825c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008260:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	220f      	movs	r2, #15
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	43db      	mvns	r3, r3
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4013      	ands	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a3c      	ldr	r2, [pc, #240]	@ (800836c <HAL_GPIO_Init+0x2b0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d01f      	beq.n	80082c0 <HAL_GPIO_Init+0x204>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a3b      	ldr	r2, [pc, #236]	@ (8008370 <HAL_GPIO_Init+0x2b4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d019      	beq.n	80082bc <HAL_GPIO_Init+0x200>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a3a      	ldr	r2, [pc, #232]	@ (8008374 <HAL_GPIO_Init+0x2b8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d013      	beq.n	80082b8 <HAL_GPIO_Init+0x1fc>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a39      	ldr	r2, [pc, #228]	@ (8008378 <HAL_GPIO_Init+0x2bc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00d      	beq.n	80082b4 <HAL_GPIO_Init+0x1f8>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a38      	ldr	r2, [pc, #224]	@ (800837c <HAL_GPIO_Init+0x2c0>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d007      	beq.n	80082b0 <HAL_GPIO_Init+0x1f4>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a37      	ldr	r2, [pc, #220]	@ (8008380 <HAL_GPIO_Init+0x2c4>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d101      	bne.n	80082ac <HAL_GPIO_Init+0x1f0>
 80082a8:	2305      	movs	r3, #5
 80082aa:	e00a      	b.n	80082c2 <HAL_GPIO_Init+0x206>
 80082ac:	2306      	movs	r3, #6
 80082ae:	e008      	b.n	80082c2 <HAL_GPIO_Init+0x206>
 80082b0:	2304      	movs	r3, #4
 80082b2:	e006      	b.n	80082c2 <HAL_GPIO_Init+0x206>
 80082b4:	2303      	movs	r3, #3
 80082b6:	e004      	b.n	80082c2 <HAL_GPIO_Init+0x206>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e002      	b.n	80082c2 <HAL_GPIO_Init+0x206>
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <HAL_GPIO_Init+0x206>
 80082c0:	2300      	movs	r3, #0
 80082c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c4:	f002 0203 	and.w	r2, r2, #3
 80082c8:	0092      	lsls	r2, r2, #2
 80082ca:	4093      	lsls	r3, r2
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80082d2:	4925      	ldr	r1, [pc, #148]	@ (8008368 <HAL_GPIO_Init+0x2ac>)
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	089b      	lsrs	r3, r3, #2
 80082d8:	3302      	adds	r3, #2
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d006      	beq.n	80082fa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80082ec:	4b25      	ldr	r3, [pc, #148]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	4924      	ldr	r1, [pc, #144]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	600b      	str	r3, [r1, #0]
 80082f8:	e006      	b.n	8008308 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80082fa:	4b22      	ldr	r3, [pc, #136]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	43db      	mvns	r3, r3
 8008302:	4920      	ldr	r1, [pc, #128]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 8008304:	4013      	ands	r3, r2
 8008306:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d006      	beq.n	8008322 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008314:	4b1b      	ldr	r3, [pc, #108]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	491a      	ldr	r1, [pc, #104]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	4313      	orrs	r3, r2
 800831e:	604b      	str	r3, [r1, #4]
 8008320:	e006      	b.n	8008330 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008322:	4b18      	ldr	r3, [pc, #96]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	43db      	mvns	r3, r3
 800832a:	4916      	ldr	r1, [pc, #88]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 800832c:	4013      	ands	r3, r2
 800832e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d025      	beq.n	8008388 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800833c:	4b11      	ldr	r3, [pc, #68]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	4910      	ldr	r1, [pc, #64]	@ (8008384 <HAL_GPIO_Init+0x2c8>)
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	4313      	orrs	r3, r2
 8008346:	608b      	str	r3, [r1, #8]
 8008348:	e025      	b.n	8008396 <HAL_GPIO_Init+0x2da>
 800834a:	bf00      	nop
 800834c:	10320000 	.word	0x10320000
 8008350:	10310000 	.word	0x10310000
 8008354:	10220000 	.word	0x10220000
 8008358:	10210000 	.word	0x10210000
 800835c:	10120000 	.word	0x10120000
 8008360:	10110000 	.word	0x10110000
 8008364:	40021000 	.word	0x40021000
 8008368:	40010000 	.word	0x40010000
 800836c:	40010800 	.word	0x40010800
 8008370:	40010c00 	.word	0x40010c00
 8008374:	40011000 	.word	0x40011000
 8008378:	40011400 	.word	0x40011400
 800837c:	40011800 	.word	0x40011800
 8008380:	40011c00 	.word	0x40011c00
 8008384:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008388:	4b15      	ldr	r3, [pc, #84]	@ (80083e0 <HAL_GPIO_Init+0x324>)
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	43db      	mvns	r3, r3
 8008390:	4913      	ldr	r1, [pc, #76]	@ (80083e0 <HAL_GPIO_Init+0x324>)
 8008392:	4013      	ands	r3, r2
 8008394:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d006      	beq.n	80083b0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80083a2:	4b0f      	ldr	r3, [pc, #60]	@ (80083e0 <HAL_GPIO_Init+0x324>)
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	490e      	ldr	r1, [pc, #56]	@ (80083e0 <HAL_GPIO_Init+0x324>)
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	60cb      	str	r3, [r1, #12]
 80083ae:	e006      	b.n	80083be <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80083b0:	4b0b      	ldr	r3, [pc, #44]	@ (80083e0 <HAL_GPIO_Init+0x324>)
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	43db      	mvns	r3, r3
 80083b8:	4909      	ldr	r1, [pc, #36]	@ (80083e0 <HAL_GPIO_Init+0x324>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	3301      	adds	r3, #1
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ca:	fa22 f303 	lsr.w	r3, r2, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f47f ae7e 	bne.w	80080d0 <HAL_GPIO_Init+0x14>
  }
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	372c      	adds	r7, #44	@ 0x2c
 80083da:	46bd      	mov	sp, r7
 80083dc:	bc80      	pop	{r7}
 80083de:	4770      	bx	lr
 80083e0:	40010400 	.word	0x40010400

080083e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	887b      	ldrh	r3, [r7, #2]
 80083f6:	4013      	ands	r3, r2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083fc:	2301      	movs	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
 8008400:	e001      	b.n	8008406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr

08008412 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	807b      	strh	r3, [r7, #2]
 800841e:	4613      	mov	r3, r2
 8008420:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008422:	787b      	ldrb	r3, [r7, #1]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008428:	887a      	ldrh	r2, [r7, #2]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800842e:	e003      	b.n	8008438 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008430:	887b      	ldrh	r3, [r7, #2]
 8008432:	041a      	lsls	r2, r3, #16
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	611a      	str	r2, [r3, #16]
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr
	...

08008444 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800844e:	4b08      	ldr	r3, [pc, #32]	@ (8008470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008450:	695a      	ldr	r2, [r3, #20]
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	4013      	ands	r3, r2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d006      	beq.n	8008468 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800845a:	4a05      	ldr	r2, [pc, #20]	@ (8008470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800845c:	88fb      	ldrh	r3, [r7, #6]
 800845e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff f836 	bl	80074d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	40010400 	.word	0x40010400

08008474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e272      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8087 	beq.w	80085a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008494:	4b92      	ldr	r3, [pc, #584]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f003 030c 	and.w	r3, r3, #12
 800849c:	2b04      	cmp	r3, #4
 800849e:	d00c      	beq.n	80084ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80084a0:	4b8f      	ldr	r3, [pc, #572]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f003 030c 	and.w	r3, r3, #12
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d112      	bne.n	80084d2 <HAL_RCC_OscConfig+0x5e>
 80084ac:	4b8c      	ldr	r3, [pc, #560]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084b8:	d10b      	bne.n	80084d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084ba:	4b89      	ldr	r3, [pc, #548]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d06c      	beq.n	80085a0 <HAL_RCC_OscConfig+0x12c>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d168      	bne.n	80085a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e24c      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084da:	d106      	bne.n	80084ea <HAL_RCC_OscConfig+0x76>
 80084dc:	4b80      	ldr	r3, [pc, #512]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a7f      	ldr	r2, [pc, #508]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80084e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	e02e      	b.n	8008548 <HAL_RCC_OscConfig+0xd4>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10c      	bne.n	800850c <HAL_RCC_OscConfig+0x98>
 80084f2:	4b7b      	ldr	r3, [pc, #492]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a7a      	ldr	r2, [pc, #488]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80084f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	4b78      	ldr	r3, [pc, #480]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a77      	ldr	r2, [pc, #476]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008504:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	e01d      	b.n	8008548 <HAL_RCC_OscConfig+0xd4>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008514:	d10c      	bne.n	8008530 <HAL_RCC_OscConfig+0xbc>
 8008516:	4b72      	ldr	r3, [pc, #456]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a71      	ldr	r2, [pc, #452]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 800851c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	4b6f      	ldr	r3, [pc, #444]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a6e      	ldr	r2, [pc, #440]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	e00b      	b.n	8008548 <HAL_RCC_OscConfig+0xd4>
 8008530:	4b6b      	ldr	r3, [pc, #428]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a6a      	ldr	r2, [pc, #424]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	4b68      	ldr	r3, [pc, #416]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a67      	ldr	r2, [pc, #412]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d013      	beq.n	8008578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008550:	f7ff fb36 	bl	8007bc0 <HAL_GetTick>
 8008554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008558:	f7ff fb32 	bl	8007bc0 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b64      	cmp	r3, #100	@ 0x64
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e200      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800856a:	4b5d      	ldr	r3, [pc, #372]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0f0      	beq.n	8008558 <HAL_RCC_OscConfig+0xe4>
 8008576:	e014      	b.n	80085a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008578:	f7ff fb22 	bl	8007bc0 <HAL_GetTick>
 800857c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800857e:	e008      	b.n	8008592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008580:	f7ff fb1e 	bl	8007bc0 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b64      	cmp	r3, #100	@ 0x64
 800858c:	d901      	bls.n	8008592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e1ec      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008592:	4b53      	ldr	r3, [pc, #332]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f0      	bne.n	8008580 <HAL_RCC_OscConfig+0x10c>
 800859e:	e000      	b.n	80085a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d063      	beq.n	8008676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80085ae:	4b4c      	ldr	r3, [pc, #304]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f003 030c 	and.w	r3, r3, #12
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00b      	beq.n	80085d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80085ba:	4b49      	ldr	r3, [pc, #292]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f003 030c 	and.w	r3, r3, #12
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	d11c      	bne.n	8008600 <HAL_RCC_OscConfig+0x18c>
 80085c6:	4b46      	ldr	r3, [pc, #280]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d116      	bne.n	8008600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085d2:	4b43      	ldr	r3, [pc, #268]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d005      	beq.n	80085ea <HAL_RCC_OscConfig+0x176>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d001      	beq.n	80085ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e1c0      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ea:	4b3d      	ldr	r3, [pc, #244]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	4939      	ldr	r1, [pc, #228]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085fe:	e03a      	b.n	8008676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d020      	beq.n	800864a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008608:	4b36      	ldr	r3, [pc, #216]	@ (80086e4 <HAL_RCC_OscConfig+0x270>)
 800860a:	2201      	movs	r2, #1
 800860c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800860e:	f7ff fad7 	bl	8007bc0 <HAL_GetTick>
 8008612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008614:	e008      	b.n	8008628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008616:	f7ff fad3 	bl	8007bc0 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d901      	bls.n	8008628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e1a1      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008628:	4b2d      	ldr	r3, [pc, #180]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f0      	beq.n	8008616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008634:	4b2a      	ldr	r3, [pc, #168]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	4927      	ldr	r1, [pc, #156]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 8008644:	4313      	orrs	r3, r2
 8008646:	600b      	str	r3, [r1, #0]
 8008648:	e015      	b.n	8008676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800864a:	4b26      	ldr	r3, [pc, #152]	@ (80086e4 <HAL_RCC_OscConfig+0x270>)
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008650:	f7ff fab6 	bl	8007bc0 <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008658:	f7ff fab2 	bl	8007bc0 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e180      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800866a:	4b1d      	ldr	r3, [pc, #116]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f0      	bne.n	8008658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	2b00      	cmp	r3, #0
 8008680:	d03a      	beq.n	80086f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d019      	beq.n	80086be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800868a:	4b17      	ldr	r3, [pc, #92]	@ (80086e8 <HAL_RCC_OscConfig+0x274>)
 800868c:	2201      	movs	r2, #1
 800868e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008690:	f7ff fa96 	bl	8007bc0 <HAL_GetTick>
 8008694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008696:	e008      	b.n	80086aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008698:	f7ff fa92 	bl	8007bc0 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d901      	bls.n	80086aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e160      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086aa:	4b0d      	ldr	r3, [pc, #52]	@ (80086e0 <HAL_RCC_OscConfig+0x26c>)
 80086ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f0      	beq.n	8008698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80086b6:	2001      	movs	r0, #1
 80086b8:	f000 fad8 	bl	8008c6c <RCC_Delay>
 80086bc:	e01c      	b.n	80086f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086be:	4b0a      	ldr	r3, [pc, #40]	@ (80086e8 <HAL_RCC_OscConfig+0x274>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086c4:	f7ff fa7c 	bl	8007bc0 <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086ca:	e00f      	b.n	80086ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086cc:	f7ff fa78 	bl	8007bc0 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d908      	bls.n	80086ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e146      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
 80086de:	bf00      	nop
 80086e0:	40021000 	.word	0x40021000
 80086e4:	42420000 	.word	0x42420000
 80086e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086ec:	4b92      	ldr	r3, [pc, #584]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80086ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e9      	bne.n	80086cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80a6 	beq.w	8008852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008706:	2300      	movs	r3, #0
 8008708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800870a:	4b8b      	ldr	r3, [pc, #556]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10d      	bne.n	8008732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008716:	4b88      	ldr	r3, [pc, #544]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	4a87      	ldr	r2, [pc, #540]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 800871c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008720:	61d3      	str	r3, [r2, #28]
 8008722:	4b85      	ldr	r3, [pc, #532]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800872a:	60bb      	str	r3, [r7, #8]
 800872c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800872e:	2301      	movs	r3, #1
 8008730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008732:	4b82      	ldr	r3, [pc, #520]	@ (800893c <HAL_RCC_OscConfig+0x4c8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800873a:	2b00      	cmp	r3, #0
 800873c:	d118      	bne.n	8008770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800873e:	4b7f      	ldr	r3, [pc, #508]	@ (800893c <HAL_RCC_OscConfig+0x4c8>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a7e      	ldr	r2, [pc, #504]	@ (800893c <HAL_RCC_OscConfig+0x4c8>)
 8008744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800874a:	f7ff fa39 	bl	8007bc0 <HAL_GetTick>
 800874e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008750:	e008      	b.n	8008764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008752:	f7ff fa35 	bl	8007bc0 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b64      	cmp	r3, #100	@ 0x64
 800875e:	d901      	bls.n	8008764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e103      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008764:	4b75      	ldr	r3, [pc, #468]	@ (800893c <HAL_RCC_OscConfig+0x4c8>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0f0      	beq.n	8008752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d106      	bne.n	8008786 <HAL_RCC_OscConfig+0x312>
 8008778:	4b6f      	ldr	r3, [pc, #444]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	4a6e      	ldr	r2, [pc, #440]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 800877e:	f043 0301 	orr.w	r3, r3, #1
 8008782:	6213      	str	r3, [r2, #32]
 8008784:	e02d      	b.n	80087e2 <HAL_RCC_OscConfig+0x36e>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10c      	bne.n	80087a8 <HAL_RCC_OscConfig+0x334>
 800878e:	4b6a      	ldr	r3, [pc, #424]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	4a69      	ldr	r2, [pc, #420]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 8008794:	f023 0301 	bic.w	r3, r3, #1
 8008798:	6213      	str	r3, [r2, #32]
 800879a:	4b67      	ldr	r3, [pc, #412]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	4a66      	ldr	r2, [pc, #408]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80087a0:	f023 0304 	bic.w	r3, r3, #4
 80087a4:	6213      	str	r3, [r2, #32]
 80087a6:	e01c      	b.n	80087e2 <HAL_RCC_OscConfig+0x36e>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	2b05      	cmp	r3, #5
 80087ae:	d10c      	bne.n	80087ca <HAL_RCC_OscConfig+0x356>
 80087b0:	4b61      	ldr	r3, [pc, #388]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	4a60      	ldr	r2, [pc, #384]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80087b6:	f043 0304 	orr.w	r3, r3, #4
 80087ba:	6213      	str	r3, [r2, #32]
 80087bc:	4b5e      	ldr	r3, [pc, #376]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	4a5d      	ldr	r2, [pc, #372]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	6213      	str	r3, [r2, #32]
 80087c8:	e00b      	b.n	80087e2 <HAL_RCC_OscConfig+0x36e>
 80087ca:	4b5b      	ldr	r3, [pc, #364]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	4a5a      	ldr	r2, [pc, #360]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80087d0:	f023 0301 	bic.w	r3, r3, #1
 80087d4:	6213      	str	r3, [r2, #32]
 80087d6:	4b58      	ldr	r3, [pc, #352]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	4a57      	ldr	r2, [pc, #348]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80087dc:	f023 0304 	bic.w	r3, r3, #4
 80087e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d015      	beq.n	8008816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087ea:	f7ff f9e9 	bl	8007bc0 <HAL_GetTick>
 80087ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087f0:	e00a      	b.n	8008808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087f2:	f7ff f9e5 	bl	8007bc0 <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008800:	4293      	cmp	r3, r2
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e0b1      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008808:	4b4b      	ldr	r3, [pc, #300]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0ee      	beq.n	80087f2 <HAL_RCC_OscConfig+0x37e>
 8008814:	e014      	b.n	8008840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008816:	f7ff f9d3 	bl	8007bc0 <HAL_GetTick>
 800881a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800881c:	e00a      	b.n	8008834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800881e:	f7ff f9cf 	bl	8007bc0 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800882c:	4293      	cmp	r3, r2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e09b      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008834:	4b40      	ldr	r3, [pc, #256]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1ee      	bne.n	800881e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d105      	bne.n	8008852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008846:	4b3c      	ldr	r3, [pc, #240]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	4a3b      	ldr	r2, [pc, #236]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 800884c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8087 	beq.w	800896a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800885c:	4b36      	ldr	r3, [pc, #216]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f003 030c 	and.w	r3, r3, #12
 8008864:	2b08      	cmp	r3, #8
 8008866:	d061      	beq.n	800892c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d146      	bne.n	80088fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008870:	4b33      	ldr	r3, [pc, #204]	@ (8008940 <HAL_RCC_OscConfig+0x4cc>)
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008876:	f7ff f9a3 	bl	8007bc0 <HAL_GetTick>
 800887a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800887c:	e008      	b.n	8008890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800887e:	f7ff f99f 	bl	8007bc0 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d901      	bls.n	8008890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e06d      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008890:	4b29      	ldr	r3, [pc, #164]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1f0      	bne.n	800887e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088a4:	d108      	bne.n	80088b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80088a6:	4b24      	ldr	r3, [pc, #144]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	4921      	ldr	r1, [pc, #132]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088b8:	4b1f      	ldr	r3, [pc, #124]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a19      	ldr	r1, [r3, #32]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c8:	430b      	orrs	r3, r1
 80088ca:	491b      	ldr	r1, [pc, #108]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008940 <HAL_RCC_OscConfig+0x4cc>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d6:	f7ff f973 	bl	8007bc0 <HAL_GetTick>
 80088da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80088dc:	e008      	b.n	80088f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088de:	f7ff f96f 	bl	8007bc0 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d901      	bls.n	80088f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e03d      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80088f0:	4b11      	ldr	r3, [pc, #68]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0f0      	beq.n	80088de <HAL_RCC_OscConfig+0x46a>
 80088fc:	e035      	b.n	800896a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088fe:	4b10      	ldr	r3, [pc, #64]	@ (8008940 <HAL_RCC_OscConfig+0x4cc>)
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008904:	f7ff f95c 	bl	8007bc0 <HAL_GetTick>
 8008908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800890c:	f7ff f958 	bl	8007bc0 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b02      	cmp	r3, #2
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e026      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800891e:	4b06      	ldr	r3, [pc, #24]	@ (8008938 <HAL_RCC_OscConfig+0x4c4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f0      	bne.n	800890c <HAL_RCC_OscConfig+0x498>
 800892a:	e01e      	b.n	800896a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d107      	bne.n	8008944 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e019      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
 8008938:	40021000 	.word	0x40021000
 800893c:	40007000 	.word	0x40007000
 8008940:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008944:	4b0b      	ldr	r3, [pc, #44]	@ (8008974 <HAL_RCC_OscConfig+0x500>)
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	429a      	cmp	r2, r3
 8008956:	d106      	bne.n	8008966 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008962:	429a      	cmp	r2, r3
 8008964:	d001      	beq.n	800896a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	40021000 	.word	0x40021000

08008978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e0d0      	b.n	8008b2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800898c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b38 <HAL_RCC_ClockConfig+0x1c0>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d910      	bls.n	80089bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800899a:	4b67      	ldr	r3, [pc, #412]	@ (8008b38 <HAL_RCC_ClockConfig+0x1c0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f023 0207 	bic.w	r2, r3, #7
 80089a2:	4965      	ldr	r1, [pc, #404]	@ (8008b38 <HAL_RCC_ClockConfig+0x1c0>)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089aa:	4b63      	ldr	r3, [pc, #396]	@ (8008b38 <HAL_RCC_ClockConfig+0x1c0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d001      	beq.n	80089bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e0b8      	b.n	8008b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d020      	beq.n	8008a0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089d4:	4b59      	ldr	r3, [pc, #356]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	4a58      	ldr	r2, [pc, #352]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 80089da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80089de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0308 	and.w	r3, r3, #8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d005      	beq.n	80089f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089ec:	4b53      	ldr	r3, [pc, #332]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4a52      	ldr	r2, [pc, #328]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 80089f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80089f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089f8:	4b50      	ldr	r3, [pc, #320]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	494d      	ldr	r1, [pc, #308]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d040      	beq.n	8008a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d107      	bne.n	8008a2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a1e:	4b47      	ldr	r3, [pc, #284]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d115      	bne.n	8008a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e07f      	b.n	8008b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d107      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a36:	4b41      	ldr	r3, [pc, #260]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e073      	b.n	8008b2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a46:	4b3d      	ldr	r3, [pc, #244]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e06b      	b.n	8008b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a56:	4b39      	ldr	r3, [pc, #228]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f023 0203 	bic.w	r2, r3, #3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	4936      	ldr	r1, [pc, #216]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a68:	f7ff f8aa 	bl	8007bc0 <HAL_GetTick>
 8008a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a6e:	e00a      	b.n	8008a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a70:	f7ff f8a6 	bl	8007bc0 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e053      	b.n	8008b2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a86:	4b2d      	ldr	r3, [pc, #180]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f003 020c 	and.w	r2, r3, #12
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d1eb      	bne.n	8008a70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a98:	4b27      	ldr	r3, [pc, #156]	@ (8008b38 <HAL_RCC_ClockConfig+0x1c0>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0307 	and.w	r3, r3, #7
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d210      	bcs.n	8008ac8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aa6:	4b24      	ldr	r3, [pc, #144]	@ (8008b38 <HAL_RCC_ClockConfig+0x1c0>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f023 0207 	bic.w	r2, r3, #7
 8008aae:	4922      	ldr	r1, [pc, #136]	@ (8008b38 <HAL_RCC_ClockConfig+0x1c0>)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ab6:	4b20      	ldr	r3, [pc, #128]	@ (8008b38 <HAL_RCC_ClockConfig+0x1c0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d001      	beq.n	8008ac8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e032      	b.n	8008b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0304 	and.w	r3, r3, #4
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ad4:	4b19      	ldr	r3, [pc, #100]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	4916      	ldr	r1, [pc, #88]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008af2:	4b12      	ldr	r3, [pc, #72]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	490e      	ldr	r1, [pc, #56]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008b06:	f000 f821 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b3c <HAL_RCC_ClockConfig+0x1c4>)
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	091b      	lsrs	r3, r3, #4
 8008b12:	f003 030f 	and.w	r3, r3, #15
 8008b16:	490a      	ldr	r1, [pc, #40]	@ (8008b40 <HAL_RCC_ClockConfig+0x1c8>)
 8008b18:	5ccb      	ldrb	r3, [r1, r3]
 8008b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1e:	4a09      	ldr	r2, [pc, #36]	@ (8008b44 <HAL_RCC_ClockConfig+0x1cc>)
 8008b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008b22:	4b09      	ldr	r3, [pc, #36]	@ (8008b48 <HAL_RCC_ClockConfig+0x1d0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f808 	bl	8007b3c <HAL_InitTick>

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40022000 	.word	0x40022000
 8008b3c:	40021000 	.word	0x40021000
 8008b40:	0800dc9c 	.word	0x0800dc9c
 8008b44:	20002a40 	.word	0x20002a40
 8008b48:	20002a44 	.word	0x20002a44

08008b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b4c:	b490      	push	{r4, r7}
 8008b4e:	b08a      	sub	sp, #40	@ 0x28
 8008b50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008b52:	4b29      	ldr	r3, [pc, #164]	@ (8008bf8 <HAL_RCC_GetSysClockFreq+0xac>)
 8008b54:	1d3c      	adds	r4, r7, #4
 8008b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008b5c:	f240 2301 	movw	r3, #513	@ 0x201
 8008b60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	61fb      	str	r3, [r7, #28]
 8008b66:	2300      	movs	r3, #0
 8008b68:	61bb      	str	r3, [r7, #24]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008b76:	4b21      	ldr	r3, [pc, #132]	@ (8008bfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	f003 030c 	and.w	r3, r3, #12
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d002      	beq.n	8008b8c <HAL_RCC_GetSysClockFreq+0x40>
 8008b86:	2b08      	cmp	r3, #8
 8008b88:	d003      	beq.n	8008b92 <HAL_RCC_GetSysClockFreq+0x46>
 8008b8a:	e02b      	b.n	8008be4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008b8e:	623b      	str	r3, [r7, #32]
      break;
 8008b90:	e02b      	b.n	8008bea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	0c9b      	lsrs	r3, r3, #18
 8008b96:	f003 030f 	and.w	r3, r3, #15
 8008b9a:	3328      	adds	r3, #40	@ 0x28
 8008b9c:	443b      	add	r3, r7
 8008b9e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008ba2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d012      	beq.n	8008bd4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008bae:	4b13      	ldr	r3, [pc, #76]	@ (8008bfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	0c5b      	lsrs	r3, r3, #17
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	3328      	adds	r3, #40	@ 0x28
 8008bba:	443b      	add	r3, r7
 8008bbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008bc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008bc6:	fb03 f202 	mul.w	r2, r3, r2
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bd2:	e004      	b.n	8008bde <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8008c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bd8:	fb02 f303 	mul.w	r3, r2, r3
 8008bdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8008bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be0:	623b      	str	r3, [r7, #32]
      break;
 8008be2:	e002      	b.n	8008bea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008be4:	4b06      	ldr	r3, [pc, #24]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008be6:	623b      	str	r3, [r7, #32]
      break;
 8008be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bea:	6a3b      	ldr	r3, [r7, #32]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3728      	adds	r7, #40	@ 0x28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc90      	pop	{r4, r7}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	0800a90c 	.word	0x0800a90c
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	007a1200 	.word	0x007a1200
 8008c04:	003d0900 	.word	0x003d0900

08008c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c0c:	4b02      	ldr	r3, [pc, #8]	@ (8008c18 <HAL_RCC_GetHCLKFreq+0x10>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr
 8008c18:	20002a40 	.word	0x20002a40

08008c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008c20:	f7ff fff2 	bl	8008c08 <HAL_RCC_GetHCLKFreq>
 8008c24:	4602      	mov	r2, r0
 8008c26:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	f003 0307 	and.w	r3, r3, #7
 8008c30:	4903      	ldr	r1, [pc, #12]	@ (8008c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c32:	5ccb      	ldrb	r3, [r1, r3]
 8008c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	40021000 	.word	0x40021000
 8008c40:	0800dcac 	.word	0x0800dcac

08008c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c48:	f7ff ffde 	bl	8008c08 <HAL_RCC_GetHCLKFreq>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	4b05      	ldr	r3, [pc, #20]	@ (8008c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	0adb      	lsrs	r3, r3, #11
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	4903      	ldr	r1, [pc, #12]	@ (8008c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c5a:	5ccb      	ldrb	r3, [r1, r3]
 8008c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	40021000 	.word	0x40021000
 8008c68:	0800dcac 	.word	0x0800dcac

08008c6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008c74:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca0 <RCC_Delay+0x34>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca4 <RCC_Delay+0x38>)
 8008c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7e:	0a5b      	lsrs	r3, r3, #9
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	fb02 f303 	mul.w	r3, r2, r3
 8008c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008c88:	bf00      	nop
  }
  while (Delay --);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1e5a      	subs	r2, r3, #1
 8008c8e:	60fa      	str	r2, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1f9      	bne.n	8008c88 <RCC_Delay+0x1c>
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bc80      	pop	{r7}
 8008c9e:	4770      	bx	lr
 8008ca0:	20002a40 	.word	0x20002a40
 8008ca4:	10624dd3 	.word	0x10624dd3

08008ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e041      	b.n	8008d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d106      	bne.n	8008cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7fe fe54 	bl	800797c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f000 fa7e 	bl	80091e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d001      	beq.n	8008d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e044      	b.n	8008dea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0201 	orr.w	r2, r2, #1
 8008d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008df4 <HAL_TIM_Base_Start_IT+0xac>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d018      	beq.n	8008db4 <HAL_TIM_Base_Start_IT+0x6c>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a1c      	ldr	r2, [pc, #112]	@ (8008df8 <HAL_TIM_Base_Start_IT+0xb0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d013      	beq.n	8008db4 <HAL_TIM_Base_Start_IT+0x6c>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d94:	d00e      	beq.n	8008db4 <HAL_TIM_Base_Start_IT+0x6c>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a18      	ldr	r2, [pc, #96]	@ (8008dfc <HAL_TIM_Base_Start_IT+0xb4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d009      	beq.n	8008db4 <HAL_TIM_Base_Start_IT+0x6c>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a16      	ldr	r2, [pc, #88]	@ (8008e00 <HAL_TIM_Base_Start_IT+0xb8>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d004      	beq.n	8008db4 <HAL_TIM_Base_Start_IT+0x6c>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a15      	ldr	r2, [pc, #84]	@ (8008e04 <HAL_TIM_Base_Start_IT+0xbc>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d111      	bne.n	8008dd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b06      	cmp	r3, #6
 8008dc4:	d010      	beq.n	8008de8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f042 0201 	orr.w	r2, r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd6:	e007      	b.n	8008de8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0201 	orr.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bc80      	pop	{r7}
 8008df2:	4770      	bx	lr
 8008df4:	40012c00 	.word	0x40012c00
 8008df8:	40013400 	.word	0x40013400
 8008dfc:	40000400 	.word	0x40000400
 8008e00:	40000800 	.word	0x40000800
 8008e04:	40000c00 	.word	0x40000c00

08008e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d122      	bne.n	8008e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d11b      	bne.n	8008e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0202 	mvn.w	r2, #2
 8008e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f9b1 	bl	80091b2 <HAL_TIM_IC_CaptureCallback>
 8008e50:	e005      	b.n	8008e5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f9a4 	bl	80091a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f9b3 	bl	80091c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d122      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d11b      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0204 	mvn.w	r2, #4
 8008e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f987 	bl	80091b2 <HAL_TIM_IC_CaptureCallback>
 8008ea4:	e005      	b.n	8008eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f97a 	bl	80091a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f989 	bl	80091c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f003 0308 	and.w	r3, r3, #8
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	d122      	bne.n	8008f0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f003 0308 	and.w	r3, r3, #8
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d11b      	bne.n	8008f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0208 	mvn.w	r2, #8
 8008edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2204      	movs	r2, #4
 8008ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	f003 0303 	and.w	r3, r3, #3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f95d 	bl	80091b2 <HAL_TIM_IC_CaptureCallback>
 8008ef8:	e005      	b.n	8008f06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f950 	bl	80091a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f95f 	bl	80091c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f003 0310 	and.w	r3, r3, #16
 8008f16:	2b10      	cmp	r3, #16
 8008f18:	d122      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d11b      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0210 	mvn.w	r2, #16
 8008f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2208      	movs	r2, #8
 8008f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f933 	bl	80091b2 <HAL_TIM_IC_CaptureCallback>
 8008f4c:	e005      	b.n	8008f5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f926 	bl	80091a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f935 	bl	80091c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d10e      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d107      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f06f 0201 	mvn.w	r2, #1
 8008f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7fe fc0c 	bl	80077a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f96:	2b80      	cmp	r3, #128	@ 0x80
 8008f98:	d10e      	bne.n	8008fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa4:	2b80      	cmp	r3, #128	@ 0x80
 8008fa6:	d107      	bne.n	8008fb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa9d 	bl	80094f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc2:	2b40      	cmp	r3, #64	@ 0x40
 8008fc4:	d10e      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd0:	2b40      	cmp	r3, #64	@ 0x40
 8008fd2:	d107      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f8f9 	bl	80091d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	f003 0320 	and.w	r3, r3, #32
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	d10e      	bne.n	8009010 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f003 0320 	and.w	r3, r3, #32
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d107      	bne.n	8009010 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f06f 0220 	mvn.w	r2, #32
 8009008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa68 	bl	80094e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <HAL_TIM_ConfigClockSource+0x18>
 800902c:	2302      	movs	r3, #2
 800902e:	e0b3      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x180>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800904e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009056:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009068:	d03e      	beq.n	80090e8 <HAL_TIM_ConfigClockSource+0xd0>
 800906a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800906e:	f200 8087 	bhi.w	8009180 <HAL_TIM_ConfigClockSource+0x168>
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009076:	f000 8085 	beq.w	8009184 <HAL_TIM_ConfigClockSource+0x16c>
 800907a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800907e:	d87f      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x168>
 8009080:	2b70      	cmp	r3, #112	@ 0x70
 8009082:	d01a      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0xa2>
 8009084:	2b70      	cmp	r3, #112	@ 0x70
 8009086:	d87b      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x168>
 8009088:	2b60      	cmp	r3, #96	@ 0x60
 800908a:	d050      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x116>
 800908c:	2b60      	cmp	r3, #96	@ 0x60
 800908e:	d877      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x168>
 8009090:	2b50      	cmp	r3, #80	@ 0x50
 8009092:	d03c      	beq.n	800910e <HAL_TIM_ConfigClockSource+0xf6>
 8009094:	2b50      	cmp	r3, #80	@ 0x50
 8009096:	d873      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x168>
 8009098:	2b40      	cmp	r3, #64	@ 0x40
 800909a:	d058      	beq.n	800914e <HAL_TIM_ConfigClockSource+0x136>
 800909c:	2b40      	cmp	r3, #64	@ 0x40
 800909e:	d86f      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x168>
 80090a0:	2b30      	cmp	r3, #48	@ 0x30
 80090a2:	d064      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x156>
 80090a4:	2b30      	cmp	r3, #48	@ 0x30
 80090a6:	d86b      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x168>
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d060      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x156>
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	d867      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x168>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d05c      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x156>
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d05a      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80090b8:	e062      	b.n	8009180 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6899      	ldr	r1, [r3, #8]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f000 f97e 	bl	80093ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	609a      	str	r2, [r3, #8]
      break;
 80090e6:	e04e      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	6899      	ldr	r1, [r3, #8]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	f000 f967 	bl	80093ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689a      	ldr	r2, [r3, #8]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800910a:	609a      	str	r2, [r3, #8]
      break;
 800910c:	e03b      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	6859      	ldr	r1, [r3, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	461a      	mov	r2, r3
 800911c:	f000 f8de 	bl	80092dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2150      	movs	r1, #80	@ 0x50
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f935 	bl	8009396 <TIM_ITRx_SetConfig>
      break;
 800912c:	e02b      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	6859      	ldr	r1, [r3, #4]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	461a      	mov	r2, r3
 800913c:	f000 f8fc 	bl	8009338 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2160      	movs	r1, #96	@ 0x60
 8009146:	4618      	mov	r0, r3
 8009148:	f000 f925 	bl	8009396 <TIM_ITRx_SetConfig>
      break;
 800914c:	e01b      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	6859      	ldr	r1, [r3, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	461a      	mov	r2, r3
 800915c:	f000 f8be 	bl	80092dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2140      	movs	r1, #64	@ 0x40
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f915 	bl	8009396 <TIM_ITRx_SetConfig>
      break;
 800916c:	e00b      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4619      	mov	r1, r3
 8009178:	4610      	mov	r0, r2
 800917a:	f000 f90c 	bl	8009396 <TIM_ITRx_SetConfig>
        break;
 800917e:	e002      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009180:	bf00      	nop
 8009182:	e000      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009184:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bc80      	pop	{r7}
 80091b0:	4770      	bx	lr

080091b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	bc80      	pop	{r7}
 80091c2:	4770      	bx	lr

080091c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr

080091d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bc80      	pop	{r7}
 80091e6:	4770      	bx	lr

080091e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a33      	ldr	r2, [pc, #204]	@ (80092c8 <TIM_Base_SetConfig+0xe0>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d013      	beq.n	8009228 <TIM_Base_SetConfig+0x40>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a32      	ldr	r2, [pc, #200]	@ (80092cc <TIM_Base_SetConfig+0xe4>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00f      	beq.n	8009228 <TIM_Base_SetConfig+0x40>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800920e:	d00b      	beq.n	8009228 <TIM_Base_SetConfig+0x40>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a2f      	ldr	r2, [pc, #188]	@ (80092d0 <TIM_Base_SetConfig+0xe8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d007      	beq.n	8009228 <TIM_Base_SetConfig+0x40>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a2e      	ldr	r2, [pc, #184]	@ (80092d4 <TIM_Base_SetConfig+0xec>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d003      	beq.n	8009228 <TIM_Base_SetConfig+0x40>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a2d      	ldr	r2, [pc, #180]	@ (80092d8 <TIM_Base_SetConfig+0xf0>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d108      	bne.n	800923a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	4313      	orrs	r3, r2
 8009238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a22      	ldr	r2, [pc, #136]	@ (80092c8 <TIM_Base_SetConfig+0xe0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d013      	beq.n	800926a <TIM_Base_SetConfig+0x82>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a21      	ldr	r2, [pc, #132]	@ (80092cc <TIM_Base_SetConfig+0xe4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00f      	beq.n	800926a <TIM_Base_SetConfig+0x82>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009250:	d00b      	beq.n	800926a <TIM_Base_SetConfig+0x82>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a1e      	ldr	r2, [pc, #120]	@ (80092d0 <TIM_Base_SetConfig+0xe8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d007      	beq.n	800926a <TIM_Base_SetConfig+0x82>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a1d      	ldr	r2, [pc, #116]	@ (80092d4 <TIM_Base_SetConfig+0xec>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d003      	beq.n	800926a <TIM_Base_SetConfig+0x82>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a1c      	ldr	r2, [pc, #112]	@ (80092d8 <TIM_Base_SetConfig+0xf0>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d108      	bne.n	800927c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a09      	ldr	r2, [pc, #36]	@ (80092c8 <TIM_Base_SetConfig+0xe0>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d003      	beq.n	80092b0 <TIM_Base_SetConfig+0xc8>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a08      	ldr	r2, [pc, #32]	@ (80092cc <TIM_Base_SetConfig+0xe4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d103      	bne.n	80092b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	615a      	str	r2, [r3, #20]
}
 80092be:	bf00      	nop
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr
 80092c8:	40012c00 	.word	0x40012c00
 80092cc:	40013400 	.word	0x40013400
 80092d0:	40000400 	.word	0x40000400
 80092d4:	40000800 	.word	0x40000800
 80092d8:	40000c00 	.word	0x40000c00

080092dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	f023 0201 	bic.w	r2, r3, #1
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f023 030a 	bic.w	r3, r3, #10
 8009318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4313      	orrs	r3, r2
 8009320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	621a      	str	r2, [r3, #32]
}
 800932e:	bf00      	nop
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	bc80      	pop	{r7}
 8009336:	4770      	bx	lr

08009338 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6a1b      	ldr	r3, [r3, #32]
 8009348:	f023 0210 	bic.w	r2, r3, #16
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009362:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	031b      	lsls	r3, r3, #12
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	4313      	orrs	r3, r2
 800936c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009374:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	4313      	orrs	r3, r2
 800937e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	621a      	str	r2, [r3, #32]
}
 800938c:	bf00      	nop
 800938e:	371c      	adds	r7, #28
 8009390:	46bd      	mov	sp, r7
 8009392:	bc80      	pop	{r7}
 8009394:	4770      	bx	lr

08009396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	f043 0307 	orr.w	r3, r3, #7
 80093b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	609a      	str	r2, [r3, #8]
}
 80093c0:	bf00      	nop
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr

080093ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b087      	sub	sp, #28
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
 80093d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	021a      	lsls	r2, r3, #8
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	431a      	orrs	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	609a      	str	r2, [r3, #8]
}
 80093fe:	bf00      	nop
 8009400:	371c      	adds	r7, #28
 8009402:	46bd      	mov	sp, r7
 8009404:	bc80      	pop	{r7}
 8009406:	4770      	bx	lr

08009408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800941c:	2302      	movs	r3, #2
 800941e:	e050      	b.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2202      	movs	r2, #2
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	4313      	orrs	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a1b      	ldr	r2, [pc, #108]	@ (80094cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d018      	beq.n	8009496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a19      	ldr	r2, [pc, #100]	@ (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d013      	beq.n	8009496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009476:	d00e      	beq.n	8009496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a15      	ldr	r2, [pc, #84]	@ (80094d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d009      	beq.n	8009496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a14      	ldr	r2, [pc, #80]	@ (80094d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d004      	beq.n	8009496 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a12      	ldr	r2, [pc, #72]	@ (80094dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d10c      	bne.n	80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800949c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bc80      	pop	{r7}
 80094ca:	4770      	bx	lr
 80094cc:	40012c00 	.word	0x40012c00
 80094d0:	40013400 	.word	0x40013400
 80094d4:	40000400 	.word	0x40000400
 80094d8:	40000800 	.word	0x40000800
 80094dc:	40000c00 	.word	0x40000c00

080094e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bc80      	pop	{r7}
 80094f0:	4770      	bx	lr

080094f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094fa:	bf00      	nop
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	bc80      	pop	{r7}
 8009502:	4770      	bx	lr

08009504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e03f      	b.n	8009596 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d106      	bne.n	8009530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7fe fa76 	bl	8007a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2224      	movs	r2, #36	@ 0x24
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fc85 	bl	8009e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	691a      	ldr	r2, [r3, #16]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800955c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	695a      	ldr	r2, [r3, #20]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800956c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68da      	ldr	r2, [r3, #12]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800957c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b08a      	sub	sp, #40	@ 0x28
 80095a2:	af02      	add	r7, sp, #8
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	603b      	str	r3, [r7, #0]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d17c      	bne.n	80096b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <HAL_UART_Transmit+0x2c>
 80095c4:	88fb      	ldrh	r3, [r7, #6]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e075      	b.n	80096ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_UART_Transmit+0x3e>
 80095d8:	2302      	movs	r3, #2
 80095da:	e06e      	b.n	80096ba <HAL_UART_Transmit+0x11c>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2221      	movs	r2, #33	@ 0x21
 80095ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095f2:	f7fe fae5 	bl	8007bc0 <HAL_GetTick>
 80095f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	88fa      	ldrh	r2, [r7, #6]
 80095fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800960c:	d108      	bne.n	8009620 <HAL_UART_Transmit+0x82>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d104      	bne.n	8009620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009616:	2300      	movs	r3, #0
 8009618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	61bb      	str	r3, [r7, #24]
 800961e:	e003      	b.n	8009628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009624:	2300      	movs	r3, #0
 8009626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8009630:	e02a      	b.n	8009688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2200      	movs	r2, #0
 800963a:	2180      	movs	r1, #128	@ 0x80
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 fa38 	bl	8009ab2 <UART_WaitOnFlagUntilTimeout>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e036      	b.n	80096ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	3302      	adds	r3, #2
 8009666:	61bb      	str	r3, [r7, #24]
 8009668:	e007      	b.n	800967a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	781a      	ldrb	r2, [r3, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	3301      	adds	r3, #1
 8009678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800967e:	b29b      	uxth	r3, r3
 8009680:	3b01      	subs	r3, #1
 8009682:	b29a      	uxth	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800968c:	b29b      	uxth	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1cf      	bne.n	8009632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2200      	movs	r2, #0
 800969a:	2140      	movs	r1, #64	@ 0x40
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 fa08 	bl	8009ab2 <UART_WaitOnFlagUntilTimeout>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e006      	b.n	80096ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2220      	movs	r2, #32
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	e000      	b.n	80096ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80096b8:	2302      	movs	r3, #2
  }
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3720      	adds	r7, #32
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	4613      	mov	r3, r2
 80096ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d11d      	bne.n	8009718 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_UART_Receive_IT+0x26>
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e016      	b.n	800971a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <HAL_UART_Receive_IT+0x38>
 80096f6:	2302      	movs	r3, #2
 80096f8:	e00f      	b.n	800971a <HAL_UART_Receive_IT+0x58>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009708:	88fb      	ldrh	r3, [r7, #6]
 800970a:	461a      	mov	r2, r3
 800970c:	68b9      	ldr	r1, [r7, #8]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 fa19 	bl	8009b46 <UART_Start_Receive_IT>
 8009714:	4603      	mov	r3, r0
 8009716:	e000      	b.n	800971a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009718:	2302      	movs	r3, #2
  }
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08a      	sub	sp, #40	@ 0x28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009744:	2300      	movs	r3, #0
 8009746:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009748:	2300      	movs	r3, #0
 800974a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974e:	f003 030f 	and.w	r3, r3, #15
 8009752:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10d      	bne.n	8009776 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b00      	cmp	r3, #0
 8009762:	d008      	beq.n	8009776 <HAL_UART_IRQHandler+0x52>
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fac9 	bl	8009d06 <UART_Receive_IT>
      return;
 8009774:	e17b      	b.n	8009a6e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 80b1 	beq.w	80098e0 <HAL_UART_IRQHandler+0x1bc>
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d105      	bne.n	8009794 <HAL_UART_IRQHandler+0x70>
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 80a6 	beq.w	80098e0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <HAL_UART_IRQHandler+0x90>
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d005      	beq.n	80097b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ac:	f043 0201 	orr.w	r2, r3, #1
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <HAL_UART_IRQHandler+0xb0>
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097cc:	f043 0202 	orr.w	r2, r3, #2
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d6:	f003 0302 	and.w	r3, r3, #2
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <HAL_UART_IRQHandler+0xd0>
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d005      	beq.n	80097f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ec:	f043 0204 	orr.w	r2, r3, #4
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80097f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f6:	f003 0308 	and.w	r3, r3, #8
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00f      	beq.n	800981e <HAL_UART_IRQHandler+0xfa>
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <HAL_UART_IRQHandler+0xee>
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d005      	beq.n	800981e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009816:	f043 0208 	orr.w	r2, r3, #8
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 811e 	beq.w	8009a64 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	d007      	beq.n	8009842 <HAL_UART_IRQHandler+0x11e>
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	f003 0320 	and.w	r3, r3, #32
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fa62 	bl	8009d06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800984c:	2b00      	cmp	r3, #0
 800984e:	bf14      	ite	ne
 8009850:	2301      	movne	r3, #1
 8009852:	2300      	moveq	r3, #0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985c:	f003 0308 	and.w	r3, r3, #8
 8009860:	2b00      	cmp	r3, #0
 8009862:	d102      	bne.n	800986a <HAL_UART_IRQHandler+0x146>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d031      	beq.n	80098ce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f9a4 	bl	8009bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800987a:	2b00      	cmp	r3, #0
 800987c:	d023      	beq.n	80098c6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	695a      	ldr	r2, [r3, #20]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800988c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009892:	2b00      	cmp	r3, #0
 8009894:	d013      	beq.n	80098be <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989a:	4a76      	ldr	r2, [pc, #472]	@ (8009a74 <HAL_UART_IRQHandler+0x350>)
 800989c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fb02 	bl	8007eac <HAL_DMA_Abort_IT>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d016      	beq.n	80098dc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80098b8:	4610      	mov	r0, r2
 80098ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098bc:	e00e      	b.n	80098dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f8e3 	bl	8009a8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c4:	e00a      	b.n	80098dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f8df 	bl	8009a8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098cc:	e006      	b.n	80098dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f8db 	bl	8009a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80098da:	e0c3      	b.n	8009a64 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098dc:	bf00      	nop
    return;
 80098de:	e0c1      	b.n	8009a64 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	f040 80a1 	bne.w	8009a2c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80098ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ec:	f003 0310 	and.w	r3, r3, #16
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 809b 	beq.w	8009a2c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	f003 0310 	and.w	r3, r3, #16
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 8095 	beq.w	8009a2c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	60fb      	str	r3, [r7, #12]
 8009916:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009922:	2b00      	cmp	r3, #0
 8009924:	d04e      	beq.n	80099c4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009930:	8a3b      	ldrh	r3, [r7, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 8098 	beq.w	8009a68 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800993c:	8a3a      	ldrh	r2, [r7, #16]
 800993e:	429a      	cmp	r2, r3
 8009940:	f080 8092 	bcs.w	8009a68 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	8a3a      	ldrh	r2, [r7, #16]
 8009948:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	2b20      	cmp	r3, #32
 8009952:	d02b      	beq.n	80099ac <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009962:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	695a      	ldr	r2, [r3, #20]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f022 0201 	bic.w	r2, r2, #1
 8009972:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	695a      	ldr	r2, [r3, #20]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009982:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2220      	movs	r2, #32
 8009988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 0210 	bic.w	r2, r2, #16
 80099a0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe fa45 	bl	8007e36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f86d 	bl	8009a9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80099c2:	e051      	b.n	8009a68 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d047      	beq.n	8009a6c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80099dc:	8a7b      	ldrh	r3, [r7, #18]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d044      	beq.n	8009a6c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80099f0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	695a      	ldr	r2, [r3, #20]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0201 	bic.w	r2, r2, #1
 8009a00:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f022 0210 	bic.w	r2, r2, #16
 8009a1e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a20:	8a7b      	ldrh	r3, [r7, #18]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f839 	bl	8009a9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009a2a:	e01f      	b.n	8009a6c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d008      	beq.n	8009a48 <HAL_UART_IRQHandler+0x324>
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d003      	beq.n	8009a48 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f8f9 	bl	8009c38 <UART_Transmit_IT>
    return;
 8009a46:	e012      	b.n	8009a6e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00d      	beq.n	8009a6e <HAL_UART_IRQHandler+0x34a>
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d008      	beq.n	8009a6e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f93a 	bl	8009cd6 <UART_EndTransmit_IT>
    return;
 8009a62:	e004      	b.n	8009a6e <HAL_UART_IRQHandler+0x34a>
    return;
 8009a64:	bf00      	nop
 8009a66:	e002      	b.n	8009a6e <HAL_UART_IRQHandler+0x34a>
      return;
 8009a68:	bf00      	nop
 8009a6a:	e000      	b.n	8009a6e <HAL_UART_IRQHandler+0x34a>
      return;
 8009a6c:	bf00      	nop
  }
}
 8009a6e:	3728      	adds	r7, #40	@ 0x28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	08009c11 	.word	0x08009c11

08009a78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bc80      	pop	{r7}
 8009a88:	4770      	bx	lr

08009a8a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a92:	bf00      	nop
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bc80      	pop	{r7}
 8009a9a:	4770      	bx	lr

08009a9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bc80      	pop	{r7}
 8009ab0:	4770      	bx	lr

08009ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	603b      	str	r3, [r7, #0]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ac2:	e02c      	b.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009aca:	d028      	beq.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ad2:	f7fe f875 	bl	8007bc0 <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d21d      	bcs.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68da      	ldr	r2, [r3, #12]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8009af0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	695a      	ldr	r2, [r3, #20]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0201 	bic.w	r2, r2, #1
 8009b00:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e00f      	b.n	8009b3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	4013      	ands	r3, r2
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	bf0c      	ite	eq
 8009b2e:	2301      	moveq	r3, #1
 8009b30:	2300      	movne	r3, #0
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	461a      	mov	r2, r3
 8009b36:	79fb      	ldrb	r3, [r7, #7]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d0c3      	beq.n	8009ac4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b085      	sub	sp, #20
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	4613      	mov	r3, r2
 8009b52:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	88fa      	ldrh	r2, [r7, #6]
 8009b5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	88fa      	ldrh	r2, [r7, #6]
 8009b64:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2222      	movs	r2, #34	@ 0x22
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68da      	ldr	r2, [r3, #12]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b8a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	695a      	ldr	r2, [r3, #20]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0201 	orr.w	r2, r2, #1
 8009b9a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0220 	orr.w	r2, r2, #32
 8009baa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bc80      	pop	{r7}
 8009bb6:	4770      	bx	lr

08009bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8009bce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	695a      	ldr	r2, [r3, #20]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0201 	bic.w	r2, r2, #1
 8009bde:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d107      	bne.n	8009bf8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68da      	ldr	r2, [r3, #12]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f022 0210 	bic.w	r2, r2, #16
 8009bf6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bc80      	pop	{r7}
 8009c0e:	4770      	bx	lr

08009c10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7ff ff2d 	bl	8009a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b21      	cmp	r3, #33	@ 0x21
 8009c4a:	d13e      	bne.n	8009cca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c54:	d114      	bne.n	8009c80 <UART_Transmit_IT+0x48>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d110      	bne.n	8009c80 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a1b      	ldr	r3, [r3, #32]
 8009c78:	1c9a      	adds	r2, r3, #2
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	621a      	str	r2, [r3, #32]
 8009c7e:	e008      	b.n	8009c92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	1c59      	adds	r1, r3, #1
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	6211      	str	r1, [r2, #32]
 8009c8a:	781a      	ldrb	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10f      	bne.n	8009cc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68da      	ldr	r2, [r3, #12]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009cb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68da      	ldr	r2, [r3, #12]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e000      	b.n	8009ccc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009cca:	2302      	movs	r3, #2
  }
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bc80      	pop	{r7}
 8009cd4:	4770      	bx	lr

08009cd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b082      	sub	sp, #8
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68da      	ldr	r2, [r3, #12]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff febe 	bl	8009a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b086      	sub	sp, #24
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b22      	cmp	r3, #34	@ 0x22
 8009d18:	f040 8099 	bne.w	8009e4e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d24:	d117      	bne.n	8009d56 <UART_Receive_IT+0x50>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d113      	bne.n	8009d56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d36:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4e:	1c9a      	adds	r2, r3, #2
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d54:	e026      	b.n	8009da4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d68:	d007      	beq.n	8009d7a <UART_Receive_IT+0x74>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10a      	bne.n	8009d88 <UART_Receive_IT+0x82>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d106      	bne.n	8009d88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	701a      	strb	r2, [r3, #0]
 8009d86:	e008      	b.n	8009d9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	3b01      	subs	r3, #1
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	4619      	mov	r1, r3
 8009db2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d148      	bne.n	8009e4a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68da      	ldr	r2, [r3, #12]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 0220 	bic.w	r2, r2, #32
 8009dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68da      	ldr	r2, [r3, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009dd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	695a      	ldr	r2, [r3, #20]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 0201 	bic.w	r2, r2, #1
 8009de6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2220      	movs	r2, #32
 8009dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d123      	bne.n	8009e40 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0210 	bic.w	r2, r2, #16
 8009e0c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0310 	and.w	r3, r3, #16
 8009e18:	2b10      	cmp	r3, #16
 8009e1a:	d10a      	bne.n	8009e32 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60fb      	str	r3, [r7, #12]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff fe2f 	bl	8009a9c <HAL_UARTEx_RxEventCallback>
 8009e3e:	e002      	b.n	8009e46 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7fd fc45 	bl	80076d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	e002      	b.n	8009e50 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e000      	b.n	8009e50 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009e4e:	2302      	movs	r3, #2
  }
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3718      	adds	r7, #24
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009e92:	f023 030c 	bic.w	r3, r3, #12
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	6812      	ldr	r2, [r2, #0]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a2c      	ldr	r2, [pc, #176]	@ (8009f6c <UART_SetConfig+0x114>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d103      	bne.n	8009ec8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009ec0:	f7fe fec0 	bl	8008c44 <HAL_RCC_GetPCLK2Freq>
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	e002      	b.n	8009ece <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009ec8:	f7fe fea8 	bl	8008c1c <HAL_RCC_GetPCLK1Freq>
 8009ecc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	009a      	lsls	r2, r3, #2
 8009ed8:	441a      	add	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee4:	4a22      	ldr	r2, [pc, #136]	@ (8009f70 <UART_SetConfig+0x118>)
 8009ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eea:	095b      	lsrs	r3, r3, #5
 8009eec:	0119      	lsls	r1, r3, #4
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	009a      	lsls	r2, r3, #2
 8009ef8:	441a      	add	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f04:	4b1a      	ldr	r3, [pc, #104]	@ (8009f70 <UART_SetConfig+0x118>)
 8009f06:	fba3 0302 	umull	r0, r3, r3, r2
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	2064      	movs	r0, #100	@ 0x64
 8009f0e:	fb00 f303 	mul.w	r3, r0, r3
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	011b      	lsls	r3, r3, #4
 8009f16:	3332      	adds	r3, #50	@ 0x32
 8009f18:	4a15      	ldr	r2, [pc, #84]	@ (8009f70 <UART_SetConfig+0x118>)
 8009f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1e:	095b      	lsrs	r3, r3, #5
 8009f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f24:	4419      	add	r1, r3
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009a      	lsls	r2, r3, #2
 8009f30:	441a      	add	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f70 <UART_SetConfig+0x118>)
 8009f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8009f42:	095b      	lsrs	r3, r3, #5
 8009f44:	2064      	movs	r0, #100	@ 0x64
 8009f46:	fb00 f303 	mul.w	r3, r0, r3
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	011b      	lsls	r3, r3, #4
 8009f4e:	3332      	adds	r3, #50	@ 0x32
 8009f50:	4a07      	ldr	r2, [pc, #28]	@ (8009f70 <UART_SetConfig+0x118>)
 8009f52:	fba2 2303 	umull	r2, r3, r2, r3
 8009f56:	095b      	lsrs	r3, r3, #5
 8009f58:	f003 020f 	and.w	r2, r3, #15
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	440a      	add	r2, r1
 8009f62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009f64:	bf00      	nop
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	40013800 	.word	0x40013800
 8009f70:	51eb851f 	.word	0x51eb851f

08009f74 <siprintf>:
 8009f74:	b40e      	push	{r1, r2, r3}
 8009f76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f7a:	b500      	push	{lr}
 8009f7c:	b09c      	sub	sp, #112	@ 0x70
 8009f7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009f80:	9002      	str	r0, [sp, #8]
 8009f82:	9006      	str	r0, [sp, #24]
 8009f84:	9107      	str	r1, [sp, #28]
 8009f86:	9104      	str	r1, [sp, #16]
 8009f88:	4808      	ldr	r0, [pc, #32]	@ (8009fac <siprintf+0x38>)
 8009f8a:	4909      	ldr	r1, [pc, #36]	@ (8009fb0 <siprintf+0x3c>)
 8009f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f90:	9105      	str	r1, [sp, #20]
 8009f92:	6800      	ldr	r0, [r0, #0]
 8009f94:	a902      	add	r1, sp, #8
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	f000 f89c 	bl	800a0d4 <_svfiprintf_r>
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	9b02      	ldr	r3, [sp, #8]
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	b01c      	add	sp, #112	@ 0x70
 8009fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa8:	b003      	add	sp, #12
 8009faa:	4770      	bx	lr
 8009fac:	20002a4c 	.word	0x20002a4c
 8009fb0:	ffff0208 	.word	0xffff0208

08009fb4 <memset>:
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	4402      	add	r2, r0
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d100      	bne.n	8009fbe <memset+0xa>
 8009fbc:	4770      	bx	lr
 8009fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8009fc2:	e7f9      	b.n	8009fb8 <memset+0x4>

08009fc4 <__errno>:
 8009fc4:	4b01      	ldr	r3, [pc, #4]	@ (8009fcc <__errno+0x8>)
 8009fc6:	6818      	ldr	r0, [r3, #0]
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	20002a4c 	.word	0x20002a4c

08009fd0 <__libc_init_array>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	2600      	movs	r6, #0
 8009fd4:	4d0c      	ldr	r5, [pc, #48]	@ (800a008 <__libc_init_array+0x38>)
 8009fd6:	4c0d      	ldr	r4, [pc, #52]	@ (800a00c <__libc_init_array+0x3c>)
 8009fd8:	1b64      	subs	r4, r4, r5
 8009fda:	10a4      	asrs	r4, r4, #2
 8009fdc:	42a6      	cmp	r6, r4
 8009fde:	d109      	bne.n	8009ff4 <__libc_init_array+0x24>
 8009fe0:	f000 fc78 	bl	800a8d4 <_init>
 8009fe4:	2600      	movs	r6, #0
 8009fe6:	4d0a      	ldr	r5, [pc, #40]	@ (800a010 <__libc_init_array+0x40>)
 8009fe8:	4c0a      	ldr	r4, [pc, #40]	@ (800a014 <__libc_init_array+0x44>)
 8009fea:	1b64      	subs	r4, r4, r5
 8009fec:	10a4      	asrs	r4, r4, #2
 8009fee:	42a6      	cmp	r6, r4
 8009ff0:	d105      	bne.n	8009ffe <__libc_init_array+0x2e>
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
 8009ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ff8:	4798      	blx	r3
 8009ffa:	3601      	adds	r6, #1
 8009ffc:	e7ee      	b.n	8009fdc <__libc_init_array+0xc>
 8009ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a002:	4798      	blx	r3
 800a004:	3601      	adds	r6, #1
 800a006:	e7f2      	b.n	8009fee <__libc_init_array+0x1e>
 800a008:	0800dce8 	.word	0x0800dce8
 800a00c:	0800dce8 	.word	0x0800dce8
 800a010:	0800dce8 	.word	0x0800dce8
 800a014:	0800dcec 	.word	0x0800dcec

0800a018 <__retarget_lock_acquire_recursive>:
 800a018:	4770      	bx	lr

0800a01a <__retarget_lock_release_recursive>:
 800a01a:	4770      	bx	lr

0800a01c <__ssputs_r>:
 800a01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a020:	461f      	mov	r7, r3
 800a022:	688e      	ldr	r6, [r1, #8]
 800a024:	4682      	mov	sl, r0
 800a026:	42be      	cmp	r6, r7
 800a028:	460c      	mov	r4, r1
 800a02a:	4690      	mov	r8, r2
 800a02c:	680b      	ldr	r3, [r1, #0]
 800a02e:	d82d      	bhi.n	800a08c <__ssputs_r+0x70>
 800a030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a038:	d026      	beq.n	800a088 <__ssputs_r+0x6c>
 800a03a:	6965      	ldr	r5, [r4, #20]
 800a03c:	6909      	ldr	r1, [r1, #16]
 800a03e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a042:	eba3 0901 	sub.w	r9, r3, r1
 800a046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a04a:	1c7b      	adds	r3, r7, #1
 800a04c:	444b      	add	r3, r9
 800a04e:	106d      	asrs	r5, r5, #1
 800a050:	429d      	cmp	r5, r3
 800a052:	bf38      	it	cc
 800a054:	461d      	movcc	r5, r3
 800a056:	0553      	lsls	r3, r2, #21
 800a058:	d527      	bpl.n	800a0aa <__ssputs_r+0x8e>
 800a05a:	4629      	mov	r1, r5
 800a05c:	f000 f958 	bl	800a310 <_malloc_r>
 800a060:	4606      	mov	r6, r0
 800a062:	b360      	cbz	r0, 800a0be <__ssputs_r+0xa2>
 800a064:	464a      	mov	r2, r9
 800a066:	6921      	ldr	r1, [r4, #16]
 800a068:	f000 fbd6 	bl	800a818 <memcpy>
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a076:	81a3      	strh	r3, [r4, #12]
 800a078:	6126      	str	r6, [r4, #16]
 800a07a:	444e      	add	r6, r9
 800a07c:	6026      	str	r6, [r4, #0]
 800a07e:	463e      	mov	r6, r7
 800a080:	6165      	str	r5, [r4, #20]
 800a082:	eba5 0509 	sub.w	r5, r5, r9
 800a086:	60a5      	str	r5, [r4, #8]
 800a088:	42be      	cmp	r6, r7
 800a08a:	d900      	bls.n	800a08e <__ssputs_r+0x72>
 800a08c:	463e      	mov	r6, r7
 800a08e:	4632      	mov	r2, r6
 800a090:	4641      	mov	r1, r8
 800a092:	6820      	ldr	r0, [r4, #0]
 800a094:	f000 fb88 	bl	800a7a8 <memmove>
 800a098:	2000      	movs	r0, #0
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	1b9b      	subs	r3, r3, r6
 800a09e:	60a3      	str	r3, [r4, #8]
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	4433      	add	r3, r6
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0aa:	462a      	mov	r2, r5
 800a0ac:	f000 fb4e 	bl	800a74c <_realloc_r>
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d1e0      	bne.n	800a078 <__ssputs_r+0x5c>
 800a0b6:	4650      	mov	r0, sl
 800a0b8:	6921      	ldr	r1, [r4, #16]
 800a0ba:	f000 fbbb 	bl	800a834 <_free_r>
 800a0be:	230c      	movs	r3, #12
 800a0c0:	f8ca 3000 	str.w	r3, [sl]
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	e7e9      	b.n	800a0a6 <__ssputs_r+0x8a>
	...

0800a0d4 <_svfiprintf_r>:
 800a0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d8:	4698      	mov	r8, r3
 800a0da:	898b      	ldrh	r3, [r1, #12]
 800a0dc:	4607      	mov	r7, r0
 800a0de:	061b      	lsls	r3, r3, #24
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	4614      	mov	r4, r2
 800a0e4:	b09d      	sub	sp, #116	@ 0x74
 800a0e6:	d510      	bpl.n	800a10a <_svfiprintf_r+0x36>
 800a0e8:	690b      	ldr	r3, [r1, #16]
 800a0ea:	b973      	cbnz	r3, 800a10a <_svfiprintf_r+0x36>
 800a0ec:	2140      	movs	r1, #64	@ 0x40
 800a0ee:	f000 f90f 	bl	800a310 <_malloc_r>
 800a0f2:	6028      	str	r0, [r5, #0]
 800a0f4:	6128      	str	r0, [r5, #16]
 800a0f6:	b930      	cbnz	r0, 800a106 <_svfiprintf_r+0x32>
 800a0f8:	230c      	movs	r3, #12
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a100:	b01d      	add	sp, #116	@ 0x74
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	2340      	movs	r3, #64	@ 0x40
 800a108:	616b      	str	r3, [r5, #20]
 800a10a:	2300      	movs	r3, #0
 800a10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a10e:	2320      	movs	r3, #32
 800a110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a114:	2330      	movs	r3, #48	@ 0x30
 800a116:	f04f 0901 	mov.w	r9, #1
 800a11a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a11e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a2b8 <_svfiprintf_r+0x1e4>
 800a122:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a126:	4623      	mov	r3, r4
 800a128:	469a      	mov	sl, r3
 800a12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a12e:	b10a      	cbz	r2, 800a134 <_svfiprintf_r+0x60>
 800a130:	2a25      	cmp	r2, #37	@ 0x25
 800a132:	d1f9      	bne.n	800a128 <_svfiprintf_r+0x54>
 800a134:	ebba 0b04 	subs.w	fp, sl, r4
 800a138:	d00b      	beq.n	800a152 <_svfiprintf_r+0x7e>
 800a13a:	465b      	mov	r3, fp
 800a13c:	4622      	mov	r2, r4
 800a13e:	4629      	mov	r1, r5
 800a140:	4638      	mov	r0, r7
 800a142:	f7ff ff6b 	bl	800a01c <__ssputs_r>
 800a146:	3001      	adds	r0, #1
 800a148:	f000 80a7 	beq.w	800a29a <_svfiprintf_r+0x1c6>
 800a14c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a14e:	445a      	add	r2, fp
 800a150:	9209      	str	r2, [sp, #36]	@ 0x24
 800a152:	f89a 3000 	ldrb.w	r3, [sl]
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 809f 	beq.w	800a29a <_svfiprintf_r+0x1c6>
 800a15c:	2300      	movs	r3, #0
 800a15e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a166:	f10a 0a01 	add.w	sl, sl, #1
 800a16a:	9304      	str	r3, [sp, #16]
 800a16c:	9307      	str	r3, [sp, #28]
 800a16e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a172:	931a      	str	r3, [sp, #104]	@ 0x68
 800a174:	4654      	mov	r4, sl
 800a176:	2205      	movs	r2, #5
 800a178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a17c:	484e      	ldr	r0, [pc, #312]	@ (800a2b8 <_svfiprintf_r+0x1e4>)
 800a17e:	f000 fb3d 	bl	800a7fc <memchr>
 800a182:	9a04      	ldr	r2, [sp, #16]
 800a184:	b9d8      	cbnz	r0, 800a1be <_svfiprintf_r+0xea>
 800a186:	06d0      	lsls	r0, r2, #27
 800a188:	bf44      	itt	mi
 800a18a:	2320      	movmi	r3, #32
 800a18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a190:	0711      	lsls	r1, r2, #28
 800a192:	bf44      	itt	mi
 800a194:	232b      	movmi	r3, #43	@ 0x2b
 800a196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a19a:	f89a 3000 	ldrb.w	r3, [sl]
 800a19e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1a0:	d015      	beq.n	800a1ce <_svfiprintf_r+0xfa>
 800a1a2:	4654      	mov	r4, sl
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	f04f 0c0a 	mov.w	ip, #10
 800a1aa:	9a07      	ldr	r2, [sp, #28]
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1b2:	3b30      	subs	r3, #48	@ 0x30
 800a1b4:	2b09      	cmp	r3, #9
 800a1b6:	d94b      	bls.n	800a250 <_svfiprintf_r+0x17c>
 800a1b8:	b1b0      	cbz	r0, 800a1e8 <_svfiprintf_r+0x114>
 800a1ba:	9207      	str	r2, [sp, #28]
 800a1bc:	e014      	b.n	800a1e8 <_svfiprintf_r+0x114>
 800a1be:	eba0 0308 	sub.w	r3, r0, r8
 800a1c2:	fa09 f303 	lsl.w	r3, r9, r3
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	46a2      	mov	sl, r4
 800a1ca:	9304      	str	r3, [sp, #16]
 800a1cc:	e7d2      	b.n	800a174 <_svfiprintf_r+0xa0>
 800a1ce:	9b03      	ldr	r3, [sp, #12]
 800a1d0:	1d19      	adds	r1, r3, #4
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	9103      	str	r1, [sp, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bfbb      	ittet	lt
 800a1da:	425b      	neglt	r3, r3
 800a1dc:	f042 0202 	orrlt.w	r2, r2, #2
 800a1e0:	9307      	strge	r3, [sp, #28]
 800a1e2:	9307      	strlt	r3, [sp, #28]
 800a1e4:	bfb8      	it	lt
 800a1e6:	9204      	strlt	r2, [sp, #16]
 800a1e8:	7823      	ldrb	r3, [r4, #0]
 800a1ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1ec:	d10a      	bne.n	800a204 <_svfiprintf_r+0x130>
 800a1ee:	7863      	ldrb	r3, [r4, #1]
 800a1f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1f2:	d132      	bne.n	800a25a <_svfiprintf_r+0x186>
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	3402      	adds	r4, #2
 800a1f8:	1d1a      	adds	r2, r3, #4
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	9203      	str	r2, [sp, #12]
 800a1fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a202:	9305      	str	r3, [sp, #20]
 800a204:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a2bc <_svfiprintf_r+0x1e8>
 800a208:	2203      	movs	r2, #3
 800a20a:	4650      	mov	r0, sl
 800a20c:	7821      	ldrb	r1, [r4, #0]
 800a20e:	f000 faf5 	bl	800a7fc <memchr>
 800a212:	b138      	cbz	r0, 800a224 <_svfiprintf_r+0x150>
 800a214:	2240      	movs	r2, #64	@ 0x40
 800a216:	9b04      	ldr	r3, [sp, #16]
 800a218:	eba0 000a 	sub.w	r0, r0, sl
 800a21c:	4082      	lsls	r2, r0
 800a21e:	4313      	orrs	r3, r2
 800a220:	3401      	adds	r4, #1
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a228:	2206      	movs	r2, #6
 800a22a:	4825      	ldr	r0, [pc, #148]	@ (800a2c0 <_svfiprintf_r+0x1ec>)
 800a22c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a230:	f000 fae4 	bl	800a7fc <memchr>
 800a234:	2800      	cmp	r0, #0
 800a236:	d036      	beq.n	800a2a6 <_svfiprintf_r+0x1d2>
 800a238:	4b22      	ldr	r3, [pc, #136]	@ (800a2c4 <_svfiprintf_r+0x1f0>)
 800a23a:	bb1b      	cbnz	r3, 800a284 <_svfiprintf_r+0x1b0>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	3307      	adds	r3, #7
 800a240:	f023 0307 	bic.w	r3, r3, #7
 800a244:	3308      	adds	r3, #8
 800a246:	9303      	str	r3, [sp, #12]
 800a248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24a:	4433      	add	r3, r6
 800a24c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a24e:	e76a      	b.n	800a126 <_svfiprintf_r+0x52>
 800a250:	460c      	mov	r4, r1
 800a252:	2001      	movs	r0, #1
 800a254:	fb0c 3202 	mla	r2, ip, r2, r3
 800a258:	e7a8      	b.n	800a1ac <_svfiprintf_r+0xd8>
 800a25a:	2300      	movs	r3, #0
 800a25c:	f04f 0c0a 	mov.w	ip, #10
 800a260:	4619      	mov	r1, r3
 800a262:	3401      	adds	r4, #1
 800a264:	9305      	str	r3, [sp, #20]
 800a266:	4620      	mov	r0, r4
 800a268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a26c:	3a30      	subs	r2, #48	@ 0x30
 800a26e:	2a09      	cmp	r2, #9
 800a270:	d903      	bls.n	800a27a <_svfiprintf_r+0x1a6>
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0c6      	beq.n	800a204 <_svfiprintf_r+0x130>
 800a276:	9105      	str	r1, [sp, #20]
 800a278:	e7c4      	b.n	800a204 <_svfiprintf_r+0x130>
 800a27a:	4604      	mov	r4, r0
 800a27c:	2301      	movs	r3, #1
 800a27e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a282:	e7f0      	b.n	800a266 <_svfiprintf_r+0x192>
 800a284:	ab03      	add	r3, sp, #12
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	462a      	mov	r2, r5
 800a28a:	4638      	mov	r0, r7
 800a28c:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c8 <_svfiprintf_r+0x1f4>)
 800a28e:	a904      	add	r1, sp, #16
 800a290:	f3af 8000 	nop.w
 800a294:	1c42      	adds	r2, r0, #1
 800a296:	4606      	mov	r6, r0
 800a298:	d1d6      	bne.n	800a248 <_svfiprintf_r+0x174>
 800a29a:	89ab      	ldrh	r3, [r5, #12]
 800a29c:	065b      	lsls	r3, r3, #25
 800a29e:	f53f af2d 	bmi.w	800a0fc <_svfiprintf_r+0x28>
 800a2a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2a4:	e72c      	b.n	800a100 <_svfiprintf_r+0x2c>
 800a2a6:	ab03      	add	r3, sp, #12
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	462a      	mov	r2, r5
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	4b06      	ldr	r3, [pc, #24]	@ (800a2c8 <_svfiprintf_r+0x1f4>)
 800a2b0:	a904      	add	r1, sp, #16
 800a2b2:	f000 f91f 	bl	800a4f4 <_printf_i>
 800a2b6:	e7ed      	b.n	800a294 <_svfiprintf_r+0x1c0>
 800a2b8:	0800dcb4 	.word	0x0800dcb4
 800a2bc:	0800dcba 	.word	0x0800dcba
 800a2c0:	0800dcbe 	.word	0x0800dcbe
 800a2c4:	00000000 	.word	0x00000000
 800a2c8:	0800a01d 	.word	0x0800a01d

0800a2cc <sbrk_aligned>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	4e0f      	ldr	r6, [pc, #60]	@ (800a30c <sbrk_aligned+0x40>)
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	6831      	ldr	r1, [r6, #0]
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	b911      	cbnz	r1, 800a2de <sbrk_aligned+0x12>
 800a2d8:	f000 fa80 	bl	800a7dc <_sbrk_r>
 800a2dc:	6030      	str	r0, [r6, #0]
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f000 fa7b 	bl	800a7dc <_sbrk_r>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	d103      	bne.n	800a2f2 <sbrk_aligned+0x26>
 800a2ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
 800a2f2:	1cc4      	adds	r4, r0, #3
 800a2f4:	f024 0403 	bic.w	r4, r4, #3
 800a2f8:	42a0      	cmp	r0, r4
 800a2fa:	d0f8      	beq.n	800a2ee <sbrk_aligned+0x22>
 800a2fc:	1a21      	subs	r1, r4, r0
 800a2fe:	4628      	mov	r0, r5
 800a300:	f000 fa6c 	bl	800a7dc <_sbrk_r>
 800a304:	3001      	adds	r0, #1
 800a306:	d1f2      	bne.n	800a2ee <sbrk_aligned+0x22>
 800a308:	e7ef      	b.n	800a2ea <sbrk_aligned+0x1e>
 800a30a:	bf00      	nop
 800a30c:	20002cd4 	.word	0x20002cd4

0800a310 <_malloc_r>:
 800a310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a314:	1ccd      	adds	r5, r1, #3
 800a316:	f025 0503 	bic.w	r5, r5, #3
 800a31a:	3508      	adds	r5, #8
 800a31c:	2d0c      	cmp	r5, #12
 800a31e:	bf38      	it	cc
 800a320:	250c      	movcc	r5, #12
 800a322:	2d00      	cmp	r5, #0
 800a324:	4606      	mov	r6, r0
 800a326:	db01      	blt.n	800a32c <_malloc_r+0x1c>
 800a328:	42a9      	cmp	r1, r5
 800a32a:	d904      	bls.n	800a336 <_malloc_r+0x26>
 800a32c:	230c      	movs	r3, #12
 800a32e:	6033      	str	r3, [r6, #0]
 800a330:	2000      	movs	r0, #0
 800a332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a40c <_malloc_r+0xfc>
 800a33a:	f000 f9fb 	bl	800a734 <__malloc_lock>
 800a33e:	f8d8 3000 	ldr.w	r3, [r8]
 800a342:	461c      	mov	r4, r3
 800a344:	bb44      	cbnz	r4, 800a398 <_malloc_r+0x88>
 800a346:	4629      	mov	r1, r5
 800a348:	4630      	mov	r0, r6
 800a34a:	f7ff ffbf 	bl	800a2cc <sbrk_aligned>
 800a34e:	1c43      	adds	r3, r0, #1
 800a350:	4604      	mov	r4, r0
 800a352:	d158      	bne.n	800a406 <_malloc_r+0xf6>
 800a354:	f8d8 4000 	ldr.w	r4, [r8]
 800a358:	4627      	mov	r7, r4
 800a35a:	2f00      	cmp	r7, #0
 800a35c:	d143      	bne.n	800a3e6 <_malloc_r+0xd6>
 800a35e:	2c00      	cmp	r4, #0
 800a360:	d04b      	beq.n	800a3fa <_malloc_r+0xea>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	4639      	mov	r1, r7
 800a366:	4630      	mov	r0, r6
 800a368:	eb04 0903 	add.w	r9, r4, r3
 800a36c:	f000 fa36 	bl	800a7dc <_sbrk_r>
 800a370:	4581      	cmp	r9, r0
 800a372:	d142      	bne.n	800a3fa <_malloc_r+0xea>
 800a374:	6821      	ldr	r1, [r4, #0]
 800a376:	4630      	mov	r0, r6
 800a378:	1a6d      	subs	r5, r5, r1
 800a37a:	4629      	mov	r1, r5
 800a37c:	f7ff ffa6 	bl	800a2cc <sbrk_aligned>
 800a380:	3001      	adds	r0, #1
 800a382:	d03a      	beq.n	800a3fa <_malloc_r+0xea>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	442b      	add	r3, r5
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	f8d8 3000 	ldr.w	r3, [r8]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	bb62      	cbnz	r2, 800a3ec <_malloc_r+0xdc>
 800a392:	f8c8 7000 	str.w	r7, [r8]
 800a396:	e00f      	b.n	800a3b8 <_malloc_r+0xa8>
 800a398:	6822      	ldr	r2, [r4, #0]
 800a39a:	1b52      	subs	r2, r2, r5
 800a39c:	d420      	bmi.n	800a3e0 <_malloc_r+0xd0>
 800a39e:	2a0b      	cmp	r2, #11
 800a3a0:	d917      	bls.n	800a3d2 <_malloc_r+0xc2>
 800a3a2:	1961      	adds	r1, r4, r5
 800a3a4:	42a3      	cmp	r3, r4
 800a3a6:	6025      	str	r5, [r4, #0]
 800a3a8:	bf18      	it	ne
 800a3aa:	6059      	strne	r1, [r3, #4]
 800a3ac:	6863      	ldr	r3, [r4, #4]
 800a3ae:	bf08      	it	eq
 800a3b0:	f8c8 1000 	streq.w	r1, [r8]
 800a3b4:	5162      	str	r2, [r4, r5]
 800a3b6:	604b      	str	r3, [r1, #4]
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f000 f9c1 	bl	800a740 <__malloc_unlock>
 800a3be:	f104 000b 	add.w	r0, r4, #11
 800a3c2:	1d23      	adds	r3, r4, #4
 800a3c4:	f020 0007 	bic.w	r0, r0, #7
 800a3c8:	1ac2      	subs	r2, r0, r3
 800a3ca:	bf1c      	itt	ne
 800a3cc:	1a1b      	subne	r3, r3, r0
 800a3ce:	50a3      	strne	r3, [r4, r2]
 800a3d0:	e7af      	b.n	800a332 <_malloc_r+0x22>
 800a3d2:	6862      	ldr	r2, [r4, #4]
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	bf0c      	ite	eq
 800a3d8:	f8c8 2000 	streq.w	r2, [r8]
 800a3dc:	605a      	strne	r2, [r3, #4]
 800a3de:	e7eb      	b.n	800a3b8 <_malloc_r+0xa8>
 800a3e0:	4623      	mov	r3, r4
 800a3e2:	6864      	ldr	r4, [r4, #4]
 800a3e4:	e7ae      	b.n	800a344 <_malloc_r+0x34>
 800a3e6:	463c      	mov	r4, r7
 800a3e8:	687f      	ldr	r7, [r7, #4]
 800a3ea:	e7b6      	b.n	800a35a <_malloc_r+0x4a>
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	42a3      	cmp	r3, r4
 800a3f2:	d1fb      	bne.n	800a3ec <_malloc_r+0xdc>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	6053      	str	r3, [r2, #4]
 800a3f8:	e7de      	b.n	800a3b8 <_malloc_r+0xa8>
 800a3fa:	230c      	movs	r3, #12
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	6033      	str	r3, [r6, #0]
 800a400:	f000 f99e 	bl	800a740 <__malloc_unlock>
 800a404:	e794      	b.n	800a330 <_malloc_r+0x20>
 800a406:	6005      	str	r5, [r0, #0]
 800a408:	e7d6      	b.n	800a3b8 <_malloc_r+0xa8>
 800a40a:	bf00      	nop
 800a40c:	20002cd8 	.word	0x20002cd8

0800a410 <_printf_common>:
 800a410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a414:	4616      	mov	r6, r2
 800a416:	4698      	mov	r8, r3
 800a418:	688a      	ldr	r2, [r1, #8]
 800a41a:	690b      	ldr	r3, [r1, #16]
 800a41c:	4607      	mov	r7, r0
 800a41e:	4293      	cmp	r3, r2
 800a420:	bfb8      	it	lt
 800a422:	4613      	movlt	r3, r2
 800a424:	6033      	str	r3, [r6, #0]
 800a426:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a42a:	460c      	mov	r4, r1
 800a42c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a430:	b10a      	cbz	r2, 800a436 <_printf_common+0x26>
 800a432:	3301      	adds	r3, #1
 800a434:	6033      	str	r3, [r6, #0]
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	0699      	lsls	r1, r3, #26
 800a43a:	bf42      	ittt	mi
 800a43c:	6833      	ldrmi	r3, [r6, #0]
 800a43e:	3302      	addmi	r3, #2
 800a440:	6033      	strmi	r3, [r6, #0]
 800a442:	6825      	ldr	r5, [r4, #0]
 800a444:	f015 0506 	ands.w	r5, r5, #6
 800a448:	d106      	bne.n	800a458 <_printf_common+0x48>
 800a44a:	f104 0a19 	add.w	sl, r4, #25
 800a44e:	68e3      	ldr	r3, [r4, #12]
 800a450:	6832      	ldr	r2, [r6, #0]
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	42ab      	cmp	r3, r5
 800a456:	dc2b      	bgt.n	800a4b0 <_printf_common+0xa0>
 800a458:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a45c:	6822      	ldr	r2, [r4, #0]
 800a45e:	3b00      	subs	r3, #0
 800a460:	bf18      	it	ne
 800a462:	2301      	movne	r3, #1
 800a464:	0692      	lsls	r2, r2, #26
 800a466:	d430      	bmi.n	800a4ca <_printf_common+0xba>
 800a468:	4641      	mov	r1, r8
 800a46a:	4638      	mov	r0, r7
 800a46c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a470:	47c8      	blx	r9
 800a472:	3001      	adds	r0, #1
 800a474:	d023      	beq.n	800a4be <_printf_common+0xae>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	6922      	ldr	r2, [r4, #16]
 800a47a:	f003 0306 	and.w	r3, r3, #6
 800a47e:	2b04      	cmp	r3, #4
 800a480:	bf14      	ite	ne
 800a482:	2500      	movne	r5, #0
 800a484:	6833      	ldreq	r3, [r6, #0]
 800a486:	f04f 0600 	mov.w	r6, #0
 800a48a:	bf08      	it	eq
 800a48c:	68e5      	ldreq	r5, [r4, #12]
 800a48e:	f104 041a 	add.w	r4, r4, #26
 800a492:	bf08      	it	eq
 800a494:	1aed      	subeq	r5, r5, r3
 800a496:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a49a:	bf08      	it	eq
 800a49c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	bfc4      	itt	gt
 800a4a4:	1a9b      	subgt	r3, r3, r2
 800a4a6:	18ed      	addgt	r5, r5, r3
 800a4a8:	42b5      	cmp	r5, r6
 800a4aa:	d11a      	bne.n	800a4e2 <_printf_common+0xd2>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e008      	b.n	800a4c2 <_printf_common+0xb2>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	4641      	mov	r1, r8
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	47c8      	blx	r9
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	d103      	bne.n	800a4c6 <_printf_common+0xb6>
 800a4be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c6:	3501      	adds	r5, #1
 800a4c8:	e7c1      	b.n	800a44e <_printf_common+0x3e>
 800a4ca:	2030      	movs	r0, #48	@ 0x30
 800a4cc:	18e1      	adds	r1, r4, r3
 800a4ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4d8:	4422      	add	r2, r4
 800a4da:	3302      	adds	r3, #2
 800a4dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4e0:	e7c2      	b.n	800a468 <_printf_common+0x58>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	4641      	mov	r1, r8
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	47c8      	blx	r9
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d0e6      	beq.n	800a4be <_printf_common+0xae>
 800a4f0:	3601      	adds	r6, #1
 800a4f2:	e7d9      	b.n	800a4a8 <_printf_common+0x98>

0800a4f4 <_printf_i>:
 800a4f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	7e0f      	ldrb	r7, [r1, #24]
 800a4fa:	4691      	mov	r9, r2
 800a4fc:	2f78      	cmp	r7, #120	@ 0x78
 800a4fe:	4680      	mov	r8, r0
 800a500:	460c      	mov	r4, r1
 800a502:	469a      	mov	sl, r3
 800a504:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a506:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a50a:	d807      	bhi.n	800a51c <_printf_i+0x28>
 800a50c:	2f62      	cmp	r7, #98	@ 0x62
 800a50e:	d80a      	bhi.n	800a526 <_printf_i+0x32>
 800a510:	2f00      	cmp	r7, #0
 800a512:	f000 80d3 	beq.w	800a6bc <_printf_i+0x1c8>
 800a516:	2f58      	cmp	r7, #88	@ 0x58
 800a518:	f000 80ba 	beq.w	800a690 <_printf_i+0x19c>
 800a51c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a520:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a524:	e03a      	b.n	800a59c <_printf_i+0xa8>
 800a526:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a52a:	2b15      	cmp	r3, #21
 800a52c:	d8f6      	bhi.n	800a51c <_printf_i+0x28>
 800a52e:	a101      	add	r1, pc, #4	@ (adr r1, 800a534 <_printf_i+0x40>)
 800a530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a534:	0800a58d 	.word	0x0800a58d
 800a538:	0800a5a1 	.word	0x0800a5a1
 800a53c:	0800a51d 	.word	0x0800a51d
 800a540:	0800a51d 	.word	0x0800a51d
 800a544:	0800a51d 	.word	0x0800a51d
 800a548:	0800a51d 	.word	0x0800a51d
 800a54c:	0800a5a1 	.word	0x0800a5a1
 800a550:	0800a51d 	.word	0x0800a51d
 800a554:	0800a51d 	.word	0x0800a51d
 800a558:	0800a51d 	.word	0x0800a51d
 800a55c:	0800a51d 	.word	0x0800a51d
 800a560:	0800a6a3 	.word	0x0800a6a3
 800a564:	0800a5cb 	.word	0x0800a5cb
 800a568:	0800a65d 	.word	0x0800a65d
 800a56c:	0800a51d 	.word	0x0800a51d
 800a570:	0800a51d 	.word	0x0800a51d
 800a574:	0800a6c5 	.word	0x0800a6c5
 800a578:	0800a51d 	.word	0x0800a51d
 800a57c:	0800a5cb 	.word	0x0800a5cb
 800a580:	0800a51d 	.word	0x0800a51d
 800a584:	0800a51d 	.word	0x0800a51d
 800a588:	0800a665 	.word	0x0800a665
 800a58c:	6833      	ldr	r3, [r6, #0]
 800a58e:	1d1a      	adds	r2, r3, #4
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6032      	str	r2, [r6, #0]
 800a594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a598:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a59c:	2301      	movs	r3, #1
 800a59e:	e09e      	b.n	800a6de <_printf_i+0x1ea>
 800a5a0:	6833      	ldr	r3, [r6, #0]
 800a5a2:	6820      	ldr	r0, [r4, #0]
 800a5a4:	1d19      	adds	r1, r3, #4
 800a5a6:	6031      	str	r1, [r6, #0]
 800a5a8:	0606      	lsls	r6, r0, #24
 800a5aa:	d501      	bpl.n	800a5b0 <_printf_i+0xbc>
 800a5ac:	681d      	ldr	r5, [r3, #0]
 800a5ae:	e003      	b.n	800a5b8 <_printf_i+0xc4>
 800a5b0:	0645      	lsls	r5, r0, #25
 800a5b2:	d5fb      	bpl.n	800a5ac <_printf_i+0xb8>
 800a5b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5b8:	2d00      	cmp	r5, #0
 800a5ba:	da03      	bge.n	800a5c4 <_printf_i+0xd0>
 800a5bc:	232d      	movs	r3, #45	@ 0x2d
 800a5be:	426d      	negs	r5, r5
 800a5c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5c4:	230a      	movs	r3, #10
 800a5c6:	4859      	ldr	r0, [pc, #356]	@ (800a72c <_printf_i+0x238>)
 800a5c8:	e011      	b.n	800a5ee <_printf_i+0xfa>
 800a5ca:	6821      	ldr	r1, [r4, #0]
 800a5cc:	6833      	ldr	r3, [r6, #0]
 800a5ce:	0608      	lsls	r0, r1, #24
 800a5d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5d4:	d402      	bmi.n	800a5dc <_printf_i+0xe8>
 800a5d6:	0649      	lsls	r1, r1, #25
 800a5d8:	bf48      	it	mi
 800a5da:	b2ad      	uxthmi	r5, r5
 800a5dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5de:	6033      	str	r3, [r6, #0]
 800a5e0:	bf14      	ite	ne
 800a5e2:	230a      	movne	r3, #10
 800a5e4:	2308      	moveq	r3, #8
 800a5e6:	4851      	ldr	r0, [pc, #324]	@ (800a72c <_printf_i+0x238>)
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5ee:	6866      	ldr	r6, [r4, #4]
 800a5f0:	2e00      	cmp	r6, #0
 800a5f2:	bfa8      	it	ge
 800a5f4:	6821      	ldrge	r1, [r4, #0]
 800a5f6:	60a6      	str	r6, [r4, #8]
 800a5f8:	bfa4      	itt	ge
 800a5fa:	f021 0104 	bicge.w	r1, r1, #4
 800a5fe:	6021      	strge	r1, [r4, #0]
 800a600:	b90d      	cbnz	r5, 800a606 <_printf_i+0x112>
 800a602:	2e00      	cmp	r6, #0
 800a604:	d04b      	beq.n	800a69e <_printf_i+0x1aa>
 800a606:	4616      	mov	r6, r2
 800a608:	fbb5 f1f3 	udiv	r1, r5, r3
 800a60c:	fb03 5711 	mls	r7, r3, r1, r5
 800a610:	5dc7      	ldrb	r7, [r0, r7]
 800a612:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a616:	462f      	mov	r7, r5
 800a618:	42bb      	cmp	r3, r7
 800a61a:	460d      	mov	r5, r1
 800a61c:	d9f4      	bls.n	800a608 <_printf_i+0x114>
 800a61e:	2b08      	cmp	r3, #8
 800a620:	d10b      	bne.n	800a63a <_printf_i+0x146>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	07df      	lsls	r7, r3, #31
 800a626:	d508      	bpl.n	800a63a <_printf_i+0x146>
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	6861      	ldr	r1, [r4, #4]
 800a62c:	4299      	cmp	r1, r3
 800a62e:	bfde      	ittt	le
 800a630:	2330      	movle	r3, #48	@ 0x30
 800a632:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a636:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a63a:	1b92      	subs	r2, r2, r6
 800a63c:	6122      	str	r2, [r4, #16]
 800a63e:	464b      	mov	r3, r9
 800a640:	4621      	mov	r1, r4
 800a642:	4640      	mov	r0, r8
 800a644:	f8cd a000 	str.w	sl, [sp]
 800a648:	aa03      	add	r2, sp, #12
 800a64a:	f7ff fee1 	bl	800a410 <_printf_common>
 800a64e:	3001      	adds	r0, #1
 800a650:	d14a      	bne.n	800a6e8 <_printf_i+0x1f4>
 800a652:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a656:	b004      	add	sp, #16
 800a658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	f043 0320 	orr.w	r3, r3, #32
 800a662:	6023      	str	r3, [r4, #0]
 800a664:	2778      	movs	r7, #120	@ 0x78
 800a666:	4832      	ldr	r0, [pc, #200]	@ (800a730 <_printf_i+0x23c>)
 800a668:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	6831      	ldr	r1, [r6, #0]
 800a670:	061f      	lsls	r7, r3, #24
 800a672:	f851 5b04 	ldr.w	r5, [r1], #4
 800a676:	d402      	bmi.n	800a67e <_printf_i+0x18a>
 800a678:	065f      	lsls	r7, r3, #25
 800a67a:	bf48      	it	mi
 800a67c:	b2ad      	uxthmi	r5, r5
 800a67e:	6031      	str	r1, [r6, #0]
 800a680:	07d9      	lsls	r1, r3, #31
 800a682:	bf44      	itt	mi
 800a684:	f043 0320 	orrmi.w	r3, r3, #32
 800a688:	6023      	strmi	r3, [r4, #0]
 800a68a:	b11d      	cbz	r5, 800a694 <_printf_i+0x1a0>
 800a68c:	2310      	movs	r3, #16
 800a68e:	e7ab      	b.n	800a5e8 <_printf_i+0xf4>
 800a690:	4826      	ldr	r0, [pc, #152]	@ (800a72c <_printf_i+0x238>)
 800a692:	e7e9      	b.n	800a668 <_printf_i+0x174>
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	f023 0320 	bic.w	r3, r3, #32
 800a69a:	6023      	str	r3, [r4, #0]
 800a69c:	e7f6      	b.n	800a68c <_printf_i+0x198>
 800a69e:	4616      	mov	r6, r2
 800a6a0:	e7bd      	b.n	800a61e <_printf_i+0x12a>
 800a6a2:	6833      	ldr	r3, [r6, #0]
 800a6a4:	6825      	ldr	r5, [r4, #0]
 800a6a6:	1d18      	adds	r0, r3, #4
 800a6a8:	6961      	ldr	r1, [r4, #20]
 800a6aa:	6030      	str	r0, [r6, #0]
 800a6ac:	062e      	lsls	r6, r5, #24
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	d501      	bpl.n	800a6b6 <_printf_i+0x1c2>
 800a6b2:	6019      	str	r1, [r3, #0]
 800a6b4:	e002      	b.n	800a6bc <_printf_i+0x1c8>
 800a6b6:	0668      	lsls	r0, r5, #25
 800a6b8:	d5fb      	bpl.n	800a6b2 <_printf_i+0x1be>
 800a6ba:	8019      	strh	r1, [r3, #0]
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4616      	mov	r6, r2
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	e7bc      	b.n	800a63e <_printf_i+0x14a>
 800a6c4:	6833      	ldr	r3, [r6, #0]
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	1d1a      	adds	r2, r3, #4
 800a6ca:	6032      	str	r2, [r6, #0]
 800a6cc:	681e      	ldr	r6, [r3, #0]
 800a6ce:	6862      	ldr	r2, [r4, #4]
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f000 f893 	bl	800a7fc <memchr>
 800a6d6:	b108      	cbz	r0, 800a6dc <_printf_i+0x1e8>
 800a6d8:	1b80      	subs	r0, r0, r6
 800a6da:	6060      	str	r0, [r4, #4]
 800a6dc:	6863      	ldr	r3, [r4, #4]
 800a6de:	6123      	str	r3, [r4, #16]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6e6:	e7aa      	b.n	800a63e <_printf_i+0x14a>
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	6923      	ldr	r3, [r4, #16]
 800a6f0:	47d0      	blx	sl
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	d0ad      	beq.n	800a652 <_printf_i+0x15e>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	079b      	lsls	r3, r3, #30
 800a6fa:	d413      	bmi.n	800a724 <_printf_i+0x230>
 800a6fc:	68e0      	ldr	r0, [r4, #12]
 800a6fe:	9b03      	ldr	r3, [sp, #12]
 800a700:	4298      	cmp	r0, r3
 800a702:	bfb8      	it	lt
 800a704:	4618      	movlt	r0, r3
 800a706:	e7a6      	b.n	800a656 <_printf_i+0x162>
 800a708:	2301      	movs	r3, #1
 800a70a:	4632      	mov	r2, r6
 800a70c:	4649      	mov	r1, r9
 800a70e:	4640      	mov	r0, r8
 800a710:	47d0      	blx	sl
 800a712:	3001      	adds	r0, #1
 800a714:	d09d      	beq.n	800a652 <_printf_i+0x15e>
 800a716:	3501      	adds	r5, #1
 800a718:	68e3      	ldr	r3, [r4, #12]
 800a71a:	9903      	ldr	r1, [sp, #12]
 800a71c:	1a5b      	subs	r3, r3, r1
 800a71e:	42ab      	cmp	r3, r5
 800a720:	dcf2      	bgt.n	800a708 <_printf_i+0x214>
 800a722:	e7eb      	b.n	800a6fc <_printf_i+0x208>
 800a724:	2500      	movs	r5, #0
 800a726:	f104 0619 	add.w	r6, r4, #25
 800a72a:	e7f5      	b.n	800a718 <_printf_i+0x224>
 800a72c:	0800dcc5 	.word	0x0800dcc5
 800a730:	0800dcd6 	.word	0x0800dcd6

0800a734 <__malloc_lock>:
 800a734:	4801      	ldr	r0, [pc, #4]	@ (800a73c <__malloc_lock+0x8>)
 800a736:	f7ff bc6f 	b.w	800a018 <__retarget_lock_acquire_recursive>
 800a73a:	bf00      	nop
 800a73c:	20002cd0 	.word	0x20002cd0

0800a740 <__malloc_unlock>:
 800a740:	4801      	ldr	r0, [pc, #4]	@ (800a748 <__malloc_unlock+0x8>)
 800a742:	f7ff bc6a 	b.w	800a01a <__retarget_lock_release_recursive>
 800a746:	bf00      	nop
 800a748:	20002cd0 	.word	0x20002cd0

0800a74c <_realloc_r>:
 800a74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a750:	4680      	mov	r8, r0
 800a752:	4615      	mov	r5, r2
 800a754:	460c      	mov	r4, r1
 800a756:	b921      	cbnz	r1, 800a762 <_realloc_r+0x16>
 800a758:	4611      	mov	r1, r2
 800a75a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a75e:	f7ff bdd7 	b.w	800a310 <_malloc_r>
 800a762:	b92a      	cbnz	r2, 800a770 <_realloc_r+0x24>
 800a764:	f000 f866 	bl	800a834 <_free_r>
 800a768:	2400      	movs	r4, #0
 800a76a:	4620      	mov	r0, r4
 800a76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a770:	f000 f8a8 	bl	800a8c4 <_malloc_usable_size_r>
 800a774:	4285      	cmp	r5, r0
 800a776:	4606      	mov	r6, r0
 800a778:	d802      	bhi.n	800a780 <_realloc_r+0x34>
 800a77a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a77e:	d8f4      	bhi.n	800a76a <_realloc_r+0x1e>
 800a780:	4629      	mov	r1, r5
 800a782:	4640      	mov	r0, r8
 800a784:	f7ff fdc4 	bl	800a310 <_malloc_r>
 800a788:	4607      	mov	r7, r0
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d0ec      	beq.n	800a768 <_realloc_r+0x1c>
 800a78e:	42b5      	cmp	r5, r6
 800a790:	462a      	mov	r2, r5
 800a792:	4621      	mov	r1, r4
 800a794:	bf28      	it	cs
 800a796:	4632      	movcs	r2, r6
 800a798:	f000 f83e 	bl	800a818 <memcpy>
 800a79c:	4621      	mov	r1, r4
 800a79e:	4640      	mov	r0, r8
 800a7a0:	f000 f848 	bl	800a834 <_free_r>
 800a7a4:	463c      	mov	r4, r7
 800a7a6:	e7e0      	b.n	800a76a <_realloc_r+0x1e>

0800a7a8 <memmove>:
 800a7a8:	4288      	cmp	r0, r1
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	eb01 0402 	add.w	r4, r1, r2
 800a7b0:	d902      	bls.n	800a7b8 <memmove+0x10>
 800a7b2:	4284      	cmp	r4, r0
 800a7b4:	4623      	mov	r3, r4
 800a7b6:	d807      	bhi.n	800a7c8 <memmove+0x20>
 800a7b8:	1e43      	subs	r3, r0, #1
 800a7ba:	42a1      	cmp	r1, r4
 800a7bc:	d008      	beq.n	800a7d0 <memmove+0x28>
 800a7be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7c6:	e7f8      	b.n	800a7ba <memmove+0x12>
 800a7c8:	4601      	mov	r1, r0
 800a7ca:	4402      	add	r2, r0
 800a7cc:	428a      	cmp	r2, r1
 800a7ce:	d100      	bne.n	800a7d2 <memmove+0x2a>
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7da:	e7f7      	b.n	800a7cc <memmove+0x24>

0800a7dc <_sbrk_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	2300      	movs	r3, #0
 800a7e0:	4d05      	ldr	r5, [pc, #20]	@ (800a7f8 <_sbrk_r+0x1c>)
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	602b      	str	r3, [r5, #0]
 800a7e8:	f7fd f83e 	bl	8007868 <_sbrk>
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	d102      	bne.n	800a7f6 <_sbrk_r+0x1a>
 800a7f0:	682b      	ldr	r3, [r5, #0]
 800a7f2:	b103      	cbz	r3, 800a7f6 <_sbrk_r+0x1a>
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	bd38      	pop	{r3, r4, r5, pc}
 800a7f8:	20002cdc 	.word	0x20002cdc

0800a7fc <memchr>:
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	b510      	push	{r4, lr}
 800a800:	b2c9      	uxtb	r1, r1
 800a802:	4402      	add	r2, r0
 800a804:	4293      	cmp	r3, r2
 800a806:	4618      	mov	r0, r3
 800a808:	d101      	bne.n	800a80e <memchr+0x12>
 800a80a:	2000      	movs	r0, #0
 800a80c:	e003      	b.n	800a816 <memchr+0x1a>
 800a80e:	7804      	ldrb	r4, [r0, #0]
 800a810:	3301      	adds	r3, #1
 800a812:	428c      	cmp	r4, r1
 800a814:	d1f6      	bne.n	800a804 <memchr+0x8>
 800a816:	bd10      	pop	{r4, pc}

0800a818 <memcpy>:
 800a818:	440a      	add	r2, r1
 800a81a:	4291      	cmp	r1, r2
 800a81c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a820:	d100      	bne.n	800a824 <memcpy+0xc>
 800a822:	4770      	bx	lr
 800a824:	b510      	push	{r4, lr}
 800a826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a82a:	4291      	cmp	r1, r2
 800a82c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a830:	d1f9      	bne.n	800a826 <memcpy+0xe>
 800a832:	bd10      	pop	{r4, pc}

0800a834 <_free_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4605      	mov	r5, r0
 800a838:	2900      	cmp	r1, #0
 800a83a:	d040      	beq.n	800a8be <_free_r+0x8a>
 800a83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a840:	1f0c      	subs	r4, r1, #4
 800a842:	2b00      	cmp	r3, #0
 800a844:	bfb8      	it	lt
 800a846:	18e4      	addlt	r4, r4, r3
 800a848:	f7ff ff74 	bl	800a734 <__malloc_lock>
 800a84c:	4a1c      	ldr	r2, [pc, #112]	@ (800a8c0 <_free_r+0x8c>)
 800a84e:	6813      	ldr	r3, [r2, #0]
 800a850:	b933      	cbnz	r3, 800a860 <_free_r+0x2c>
 800a852:	6063      	str	r3, [r4, #4]
 800a854:	6014      	str	r4, [r2, #0]
 800a856:	4628      	mov	r0, r5
 800a858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a85c:	f7ff bf70 	b.w	800a740 <__malloc_unlock>
 800a860:	42a3      	cmp	r3, r4
 800a862:	d908      	bls.n	800a876 <_free_r+0x42>
 800a864:	6820      	ldr	r0, [r4, #0]
 800a866:	1821      	adds	r1, r4, r0
 800a868:	428b      	cmp	r3, r1
 800a86a:	bf01      	itttt	eq
 800a86c:	6819      	ldreq	r1, [r3, #0]
 800a86e:	685b      	ldreq	r3, [r3, #4]
 800a870:	1809      	addeq	r1, r1, r0
 800a872:	6021      	streq	r1, [r4, #0]
 800a874:	e7ed      	b.n	800a852 <_free_r+0x1e>
 800a876:	461a      	mov	r2, r3
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	b10b      	cbz	r3, 800a880 <_free_r+0x4c>
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	d9fa      	bls.n	800a876 <_free_r+0x42>
 800a880:	6811      	ldr	r1, [r2, #0]
 800a882:	1850      	adds	r0, r2, r1
 800a884:	42a0      	cmp	r0, r4
 800a886:	d10b      	bne.n	800a8a0 <_free_r+0x6c>
 800a888:	6820      	ldr	r0, [r4, #0]
 800a88a:	4401      	add	r1, r0
 800a88c:	1850      	adds	r0, r2, r1
 800a88e:	4283      	cmp	r3, r0
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	d1e0      	bne.n	800a856 <_free_r+0x22>
 800a894:	6818      	ldr	r0, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	4408      	add	r0, r1
 800a89a:	6010      	str	r0, [r2, #0]
 800a89c:	6053      	str	r3, [r2, #4]
 800a89e:	e7da      	b.n	800a856 <_free_r+0x22>
 800a8a0:	d902      	bls.n	800a8a8 <_free_r+0x74>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	602b      	str	r3, [r5, #0]
 800a8a6:	e7d6      	b.n	800a856 <_free_r+0x22>
 800a8a8:	6820      	ldr	r0, [r4, #0]
 800a8aa:	1821      	adds	r1, r4, r0
 800a8ac:	428b      	cmp	r3, r1
 800a8ae:	bf01      	itttt	eq
 800a8b0:	6819      	ldreq	r1, [r3, #0]
 800a8b2:	685b      	ldreq	r3, [r3, #4]
 800a8b4:	1809      	addeq	r1, r1, r0
 800a8b6:	6021      	streq	r1, [r4, #0]
 800a8b8:	6063      	str	r3, [r4, #4]
 800a8ba:	6054      	str	r4, [r2, #4]
 800a8bc:	e7cb      	b.n	800a856 <_free_r+0x22>
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	20002cd8 	.word	0x20002cd8

0800a8c4 <_malloc_usable_size_r>:
 800a8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8c8:	1f18      	subs	r0, r3, #4
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bfbc      	itt	lt
 800a8ce:	580b      	ldrlt	r3, [r1, r0]
 800a8d0:	18c0      	addlt	r0, r0, r3
 800a8d2:	4770      	bx	lr

0800a8d4 <_init>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	bf00      	nop
 800a8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8da:	bc08      	pop	{r3}
 800a8dc:	469e      	mov	lr, r3
 800a8de:	4770      	bx	lr

0800a8e0 <_fini>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	bf00      	nop
 800a8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8e6:	bc08      	pop	{r3}
 800a8e8:	469e      	mov	lr, r3
 800a8ea:	4770      	bx	lr
