
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce8  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fd0  08008ed0  08008ed0  00009ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bea0  0800bea0  0000d010  2**0
                  CONTENTS
  4 .ARM          00000008  0800bea0  0800bea0  0000cea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bea8  0800bea8  0000d010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bea8  0800bea8  0000cea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800beac  0800beac  0000ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800beb0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000010  0800bec0  0000d010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  0800bec0  0000d49c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083f7  00000000  00000000  0000d039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b86  00000000  00000000  00015430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  00016fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fb  00000000  00000000  00017788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019405  00000000  00000000  00017d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac0d  00000000  00000000  00031188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903d8  00000000  00000000  0003bd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc16d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f3c  00000000  00000000  000cc1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000ce0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	08008eb8 	.word	0x08008eb8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	08008eb8 	.word	0x08008eb8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	@ 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b46      	ldr	r3, [pc, #280]	@ (8000974 <MX_GPIO_Init+0x130>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a45      	ldr	r2, [pc, #276]	@ (8000974 <MX_GPIO_Init+0x130>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b43      	ldr	r3, [pc, #268]	@ (8000974 <MX_GPIO_Init+0x130>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b40      	ldr	r3, [pc, #256]	@ (8000974 <MX_GPIO_Init+0x130>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a3f      	ldr	r2, [pc, #252]	@ (8000974 <MX_GPIO_Init+0x130>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b3d      	ldr	r3, [pc, #244]	@ (8000974 <MX_GPIO_Init+0x130>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b3a      	ldr	r3, [pc, #232]	@ (8000974 <MX_GPIO_Init+0x130>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a39      	ldr	r2, [pc, #228]	@ (8000974 <MX_GPIO_Init+0x130>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b37      	ldr	r3, [pc, #220]	@ (8000974 <MX_GPIO_Init+0x130>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008a6:	4834      	ldr	r0, [pc, #208]	@ (8000978 <MX_GPIO_Init+0x134>)
 80008a8:	f007 f957 	bl	8007b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2104      	movs	r1, #4
 80008b0:	4832      	ldr	r0, [pc, #200]	@ (800097c <MX_GPIO_Init+0x138>)
 80008b2:	f007 f952 	bl	8007b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <MX_GPIO_Init+0x13c>)
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	482b      	ldr	r0, [pc, #172]	@ (8000978 <MX_GPIO_Init+0x134>)
 80008ca:	f006 ff9b 	bl	8007804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008ce:	2320      	movs	r3, #32
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000984 <MX_GPIO_Init+0x140>)
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	4829      	ldr	r0, [pc, #164]	@ (8000988 <MX_GPIO_Init+0x144>)
 80008e2:	f006 ff8f 	bl	8007804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	481e      	ldr	r0, [pc, #120]	@ (8000978 <MX_GPIO_Init+0x134>)
 8000900:	f006 ff80 	bl	8007804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000904:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <MX_GPIO_Init+0x140>)
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	4817      	ldr	r0, [pc, #92]	@ (8000978 <MX_GPIO_Init+0x134>)
 800091a:	f006 ff73 	bl	8007804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800091e:	2304      	movs	r3, #4
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4619      	mov	r1, r3
 8000934:	4811      	ldr	r0, [pc, #68]	@ (800097c <MX_GPIO_Init+0x138>)
 8000936:	f006 ff65 	bl	8007804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2101      	movs	r1, #1
 800093e:	2006      	movs	r0, #6
 8000940:	f006 fde7 	bl	8007512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000944:	2006      	movs	r0, #6
 8000946:	f006 fe00 	bl	800754a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	2101      	movs	r1, #1
 800094e:	2017      	movs	r0, #23
 8000950:	f006 fddf 	bl	8007512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000954:	2017      	movs	r0, #23
 8000956:	f006 fdf8 	bl	800754a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800095a:	2202      	movs	r2, #2
 800095c:	2101      	movs	r1, #1
 800095e:	2028      	movs	r0, #40	@ 0x28
 8000960:	f006 fdd7 	bl	8007512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	@ 0x28
 8000966:	f006 fdf0 	bl	800754a <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800
 800097c:	40011400 	.word	0x40011400
 8000980:	10110000 	.word	0x10110000
 8000984:	10210000 	.word	0x10210000
 8000988:	40011000 	.word	0x40011000

0800098c <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <lcd_wr_xdata+0x40>)
 8000998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800099c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <lcd_wr_xdata+0x40>)
 80009a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <lcd_wr_xdata+0x44>)
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <lcd_wr_xdata+0x40>)
 80009ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009b2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <lcd_wr_xdata+0x40>)
 80009b6:	2280      	movs	r2, #128	@ 0x80
 80009b8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80009ba:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <lcd_wr_xdata+0x40>)
 80009bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c0:	611a      	str	r2, [r3, #16]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	80fb      	strh	r3, [r7, #6]
 80009e0:	4613      	mov	r3, r2
 80009e2:	80bb      	strh	r3, [r7, #4]
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <lcd_write_reg+0x7c>)
 80009ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80009ee:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80009f0:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <lcd_write_reg+0x7c>)
 80009f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009f6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80009f8:	89fb      	ldrh	r3, [r7, #14]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <lcd_write_reg+0x80>)
 80009fe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <lcd_write_reg+0x7c>)
 8000a02:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a06:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <lcd_write_reg+0x7c>)
 8000a0a:	2280      	movs	r2, #128	@ 0x80
 8000a0c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <lcd_write_reg+0x7c>)
 8000a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a14:	611a      	str	r2, [r3, #16]
}
 8000a16:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 8000a18:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <lcd_write_reg+0x7c>)
 8000a1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a1e:	611a      	str	r2, [r3, #16]
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <lcd_write_reg+0x7c>)
 8000a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <lcd_write_reg+0x80>)
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	60d3      	str	r3, [r2, #12]
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <lcd_write_reg+0x7c>)
 8000a30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <lcd_write_reg+0x7c>)
 8000a38:	2280      	movs	r2, #128	@ 0x80
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <lcd_write_reg+0x7c>)
 8000a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a42:	611a      	str	r2, [r3, #16]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40011000 	.word	0x40011000
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    while (i--);
 8000a60:	bf00      	nop
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	1e5a      	subs	r2, r3, #1
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1fa      	bne.n	8000a62 <lcd_opt_delay+0xa>
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000a7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a82:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4818      	ldr	r0, [pc, #96]	@ (8000af8 <lcd_rd_data+0x80>)
 8000a96:	f006 feb5 	bl	8007804 <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <lcd_rd_data+0x84>)
 8000a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aa0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000aa2:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <lcd_rd_data+0x84>)
 8000aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000aa8:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <lcd_rd_data+0x84>)
 8000aac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ab0:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f7ff ffd0 	bl	8000a58 <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <lcd_rd_data+0x80>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <lcd_rd_data+0x84>)
 8000ac2:	2240      	movs	r2, #64	@ 0x40
 8000ac4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <lcd_rd_data+0x84>)
 8000ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000acc:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000ace:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ad2:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <lcd_rd_data+0x80>)
 8000ae6:	f006 fe8d 	bl	8007804 <HAL_GPIO_Init>

    return ram;
 8000aea:	8afb      	ldrh	r3, [r7, #22]
 8000aec:	b29b      	uxth	r3, r3
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010c00 	.word	0x40010c00
 8000afc:	40011000 	.word	0x40011000

08000b00 <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8000b10:	4b44      	ldr	r3, [pc, #272]	@ (8000c24 <lcd_set_cursor+0x124>)
 8000b12:	889b      	ldrh	r3, [r3, #4]
 8000b14:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	f040 8189 	bne.w	8000e30 <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 8000b1e:	4b41      	ldr	r3, [pc, #260]	@ (8000c24 <lcd_set_cursor+0x124>)
 8000b20:	799b      	ldrb	r3, [r3, #6]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 8084 	bne.w	8000c30 <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8000b28:	4b3e      	ldr	r3, [pc, #248]	@ (8000c24 <lcd_set_cursor+0x124>)
 8000b2a:	881a      	ldrh	r2, [r3, #0]
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	3b01      	subs	r3, #1
 8000b34:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8000b36:	4b3b      	ldr	r3, [pc, #236]	@ (8000c24 <lcd_set_cursor+0x124>)
 8000b38:	895b      	ldrh	r3, [r3, #10]
 8000b3a:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b42:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000b44:	4b38      	ldr	r3, [pc, #224]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b4a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000b4c:	89fb      	ldrh	r3, [r7, #14]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b36      	ldr	r3, [pc, #216]	@ (8000c2c <lcd_set_cursor+0x12c>)
 8000b52:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b5a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000b5c:	4b32      	ldr	r3, [pc, #200]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b5e:	2280      	movs	r2, #128	@ 0x80
 8000b60:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000b62:	4b31      	ldr	r3, [pc, #196]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b68:	611a      	str	r2, [r3, #16]
}
 8000b6a:	bf00      	nop
            lcd_wr_data(0);
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c2c <lcd_set_cursor+0x12c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b84:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b8c:	2280      	movs	r2, #128	@ 0x80
 8000b8e:	611a      	str	r2, [r3, #16]
 8000b90:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b96:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000b9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000ba2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <lcd_set_cursor+0x12c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000bb0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc2:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000bc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000bce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <lcd_set_cursor+0x12c>)
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000be0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf2:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000bfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	4a09      	ldr	r2, [pc, #36]	@ (8000c2c <lcd_set_cursor+0x12c>)
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	60d3      	str	r3, [r2, #12]
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000c0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000c16:	2280      	movs	r2, #128	@ 0x80
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <lcd_set_cursor+0x128>)
 8000c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	e081      	b.n	8000d28 <lcd_set_cursor+0x228>
 8000c24:	2000002c 	.word	0x2000002c
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8000c30:	4b7c      	ldr	r3, [pc, #496]	@ (8000e24 <lcd_set_cursor+0x324>)
 8000c32:	895b      	ldrh	r3, [r3, #10]
 8000c34:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000c36:	4b7c      	ldr	r3, [pc, #496]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c3c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c44:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000c46:	8a3b      	ldrh	r3, [r7, #16]
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b78      	ldr	r3, [pc, #480]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000c4c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000c4e:	4b76      	ldr	r3, [pc, #472]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c50:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c54:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000c56:	4b74      	ldr	r3, [pc, #464]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c58:	2280      	movs	r2, #128	@ 0x80
 8000c5a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000c5c:	4b72      	ldr	r3, [pc, #456]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c62:	611a      	str	r2, [r3, #16]
}
 8000c64:	bf00      	nop
            lcd_wr_data(x >> 8);
 8000c66:	4b70      	ldr	r3, [pc, #448]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	4b6e      	ldr	r3, [pc, #440]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	4b69      	ldr	r3, [pc, #420]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c82:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c86:	611a      	str	r2, [r3, #16]
 8000c88:	4b67      	ldr	r3, [pc, #412]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	4b66      	ldr	r3, [pc, #408]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c94:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000c96:	4b64      	ldr	r3, [pc, #400]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000c98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	4b62      	ldr	r3, [pc, #392]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000ca0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ca4:	611a      	str	r2, [r3, #16]
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	4a60      	ldr	r2, [pc, #384]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	60d3      	str	r3, [r2, #12]
 8000cae:	4b5e      	ldr	r3, [pc, #376]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000cb0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cb4:	611a      	str	r2, [r3, #16]
 8000cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cc2:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 8000cc4:	4b58      	ldr	r3, [pc, #352]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000cc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	4b56      	ldr	r3, [pc, #344]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000cce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	4b53      	ldr	r3, [pc, #332]	@ (8000e24 <lcd_set_cursor+0x324>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	121a      	asrs	r2, r3, #8
 8000cdc:	4b53      	ldr	r3, [pc, #332]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	4b51      	ldr	r3, [pc, #324]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000ce2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000cea:	2280      	movs	r2, #128	@ 0x80
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	4b4e      	ldr	r3, [pc, #312]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cf4:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	4b47      	ldr	r3, [pc, #284]	@ (8000e24 <lcd_set_cursor+0x324>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	4a47      	ldr	r2, [pc, #284]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	60d3      	str	r3, [r2, #12]
 8000d12:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d14:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	4b43      	ldr	r3, [pc, #268]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d1c:	2280      	movs	r2, #128	@ 0x80
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	4b41      	ldr	r3, [pc, #260]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d26:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8000d28:	4b3e      	ldr	r3, [pc, #248]	@ (8000e24 <lcd_set_cursor+0x324>)
 8000d2a:	899b      	ldrh	r3, [r3, #12]
 8000d2c:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d34:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000d36:	4b3c      	ldr	r3, [pc, #240]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d3c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000d3e:	8a7b      	ldrh	r3, [r7, #18]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	4b3a      	ldr	r3, [pc, #232]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000d44:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000d46:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d48:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d4c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000d4e:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d50:	2280      	movs	r2, #128	@ 0x80
 8000d52:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000d54:	4b34      	ldr	r3, [pc, #208]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d5a:	611a      	str	r2, [r3, #16]
}
 8000d5c:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000d5e:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d64:	611a      	str	r2, [r3, #16]
 8000d66:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d7a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d82:	2280      	movs	r2, #128	@ 0x80
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8c:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000d98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	88bb      	ldrh	r3, [r7, #4]
 8000da0:	4a22      	ldr	r2, [pc, #136]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	60d3      	str	r3, [r2, #12]
 8000da6:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000da8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dba:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000dbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000dc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <lcd_set_cursor+0x324>)
 8000dce:	885b      	ldrh	r3, [r3, #2]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	121a      	asrs	r2, r3, #8
 8000dd4:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000dda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000de2:	2280      	movs	r2, #128	@ 0x80
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dec:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000df0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000df8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dfc:	611a      	str	r2, [r3, #16]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <lcd_set_cursor+0x324>)
 8000e00:	885b      	ldrh	r3, [r3, #2]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <lcd_set_cursor+0x32c>)
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	60d3      	str	r3, [r2, #12]
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000e0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <lcd_set_cursor+0x328>)
 8000e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e1e:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8000e20:	e176      	b.n	8001110 <lcd_set_cursor+0x610>
 8000e22:	bf00      	nop
 8000e24:	2000002c 	.word	0x2000002c
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 8000e30:	4b6a      	ldr	r3, [pc, #424]	@ (8000fdc <lcd_set_cursor+0x4dc>)
 8000e32:	889b      	ldrh	r3, [r3, #4]
 8000e34:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	f040 80d5 	bne.w	8000fe8 <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 8000e3e:	4b67      	ldr	r3, [pc, #412]	@ (8000fdc <lcd_set_cursor+0x4dc>)
 8000e40:	895b      	ldrh	r3, [r3, #10]
 8000e42:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e44:	4b66      	ldr	r3, [pc, #408]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e4a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000e4c:	4b64      	ldr	r3, [pc, #400]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e52:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000e54:	8b7b      	ldrh	r3, [r7, #26]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b62      	ldr	r3, [pc, #392]	@ (8000fe4 <lcd_set_cursor+0x4e4>)
 8000e5a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000e5c:	4b60      	ldr	r3, [pc, #384]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e62:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000e64:	4b5e      	ldr	r3, [pc, #376]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e66:	2280      	movs	r2, #128	@ 0x80
 8000e68:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e70:	611a      	str	r2, [r3, #16]
}
 8000e72:	bf00      	nop
        lcd_wr_data(x >> 8);
 8000e74:	4b5a      	ldr	r3, [pc, #360]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	4b58      	ldr	r3, [pc, #352]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b56      	ldr	r3, [pc, #344]	@ (8000fe4 <lcd_set_cursor+0x4e4>)
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	4b54      	ldr	r3, [pc, #336]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	4b52      	ldr	r3, [pc, #328]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e98:	2280      	movs	r2, #128	@ 0x80
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	4b50      	ldr	r3, [pc, #320]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ea2:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8000fdc <lcd_set_cursor+0x4dc>)
 8000ea6:	895b      	ldrh	r3, [r3, #10]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000eae:	4b4c      	ldr	r3, [pc, #304]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000eb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000eb4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000eb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ebc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000ebe:	8b3b      	ldrh	r3, [r7, #24]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b48      	ldr	r3, [pc, #288]	@ (8000fe4 <lcd_set_cursor+0x4e4>)
 8000ec4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000ec6:	4b46      	ldr	r3, [pc, #280]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000ec8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ecc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ece:	4b44      	ldr	r3, [pc, #272]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000ed0:	2280      	movs	r2, #128	@ 0x80
 8000ed2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000ed4:	4b42      	ldr	r3, [pc, #264]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eda:	611a      	str	r2, [r3, #16]
}
 8000edc:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 8000ede:	4b40      	ldr	r3, [pc, #256]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000ee8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8000fe4 <lcd_set_cursor+0x4e4>)
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	60d3      	str	r3, [r2, #12]
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000ef8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f00:	2280      	movs	r2, #128	@ 0x80
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f0a:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8000f0c:	4b33      	ldr	r3, [pc, #204]	@ (8000fdc <lcd_set_cursor+0x4dc>)
 8000f0e:	899b      	ldrh	r3, [r3, #12]
 8000f10:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f12:	4b33      	ldr	r3, [pc, #204]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f18:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f1a:	4b31      	ldr	r3, [pc, #196]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f20:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f22:	8afb      	ldrh	r3, [r7, #22]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <lcd_set_cursor+0x4e4>)
 8000f28:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f2c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f30:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f32:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f34:	2280      	movs	r2, #128	@ 0x80
 8000f36:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f38:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3e:	611a      	str	r2, [r3, #16]
}
 8000f40:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000f42:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	88bb      	ldrh	r3, [r7, #4]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <lcd_set_cursor+0x4e4>)
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f70:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <lcd_set_cursor+0x4dc>)
 8000f74:	899b      	ldrh	r3, [r3, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f82:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f8a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f8c:	8abb      	ldrh	r3, [r7, #20]
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <lcd_set_cursor+0x4e4>)
 8000f92:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f9a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa8:	611a      	str	r2, [r3, #16]
}
 8000faa:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000fae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000fb6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	4a09      	ldr	r2, [pc, #36]	@ (8000fe4 <lcd_set_cursor+0x4e4>)
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	60d3      	str	r3, [r2, #12]
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000fc6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000fce:	2280      	movs	r2, #128	@ 0x80
 8000fd0:	611a      	str	r2, [r3, #16]
 8000fd2:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <lcd_set_cursor+0x4e0>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd8:	611a      	str	r2, [r3, #16]
}
 8000fda:	e099      	b.n	8001110 <lcd_set_cursor+0x610>
 8000fdc:	2000002c 	.word	0x2000002c
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 8000fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800111c <lcd_set_cursor+0x61c>)
 8000fea:	895b      	ldrh	r3, [r3, #10]
 8000fec:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000fee:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <lcd_set_cursor+0x620>)
 8000ff0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ff4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8001120 <lcd_set_cursor+0x620>)
 8000ff8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ffc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000ffe:	8bfb      	ldrh	r3, [r7, #30]
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b48      	ldr	r3, [pc, #288]	@ (8001124 <lcd_set_cursor+0x624>)
 8001004:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001006:	4b46      	ldr	r3, [pc, #280]	@ (8001120 <lcd_set_cursor+0x620>)
 8001008:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800100c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800100e:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <lcd_set_cursor+0x620>)
 8001010:	2280      	movs	r2, #128	@ 0x80
 8001012:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001014:	4b42      	ldr	r3, [pc, #264]	@ (8001120 <lcd_set_cursor+0x620>)
 8001016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800101a:	611a      	str	r2, [r3, #16]
}
 800101c:	bf00      	nop
        lcd_wr_data(x >> 8);
 800101e:	4b40      	ldr	r3, [pc, #256]	@ (8001120 <lcd_set_cursor+0x620>)
 8001020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <lcd_set_cursor+0x620>)
 8001028:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b3b      	ldr	r3, [pc, #236]	@ (8001124 <lcd_set_cursor+0x624>)
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	4b39      	ldr	r3, [pc, #228]	@ (8001120 <lcd_set_cursor+0x620>)
 800103a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	4b37      	ldr	r3, [pc, #220]	@ (8001120 <lcd_set_cursor+0x620>)
 8001042:	2280      	movs	r2, #128	@ 0x80
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	4b36      	ldr	r3, [pc, #216]	@ (8001120 <lcd_set_cursor+0x620>)
 8001048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800104c:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 800104e:	4b34      	ldr	r3, [pc, #208]	@ (8001120 <lcd_set_cursor+0x620>)
 8001050:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	4b32      	ldr	r3, [pc, #200]	@ (8001120 <lcd_set_cursor+0x620>)
 8001058:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	4a30      	ldr	r2, [pc, #192]	@ (8001124 <lcd_set_cursor+0x624>)
 8001062:	b2db      	uxtb	r3, r3
 8001064:	60d3      	str	r3, [r2, #12]
 8001066:	4b2e      	ldr	r3, [pc, #184]	@ (8001120 <lcd_set_cursor+0x620>)
 8001068:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <lcd_set_cursor+0x620>)
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <lcd_set_cursor+0x620>)
 8001076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800107a:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800107c:	4b27      	ldr	r3, [pc, #156]	@ (800111c <lcd_set_cursor+0x61c>)
 800107e:	899b      	ldrh	r3, [r3, #12]
 8001080:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001082:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <lcd_set_cursor+0x620>)
 8001084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001088:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800108a:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <lcd_set_cursor+0x620>)
 800108c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001090:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001092:	8bbb      	ldrh	r3, [r7, #28]
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <lcd_set_cursor+0x624>)
 8001098:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <lcd_set_cursor+0x620>)
 800109c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010a0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80010a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <lcd_set_cursor+0x620>)
 80010a4:	2280      	movs	r2, #128	@ 0x80
 80010a6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <lcd_set_cursor+0x620>)
 80010aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ae:	611a      	str	r2, [r3, #16]
}
 80010b0:	bf00      	nop
        lcd_wr_data(y >> 8);
 80010b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <lcd_set_cursor+0x620>)
 80010b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <lcd_set_cursor+0x620>)
 80010bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <lcd_set_cursor+0x624>)
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <lcd_set_cursor+0x620>)
 80010ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <lcd_set_cursor+0x620>)
 80010d6:	2280      	movs	r2, #128	@ 0x80
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <lcd_set_cursor+0x620>)
 80010dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010e0:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <lcd_set_cursor+0x620>)
 80010e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <lcd_set_cursor+0x620>)
 80010ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <lcd_set_cursor+0x624>)
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	60d3      	str	r3, [r2, #12]
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <lcd_set_cursor+0x620>)
 80010fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <lcd_set_cursor+0x620>)
 8001104:	2280      	movs	r2, #128	@ 0x80
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <lcd_set_cursor+0x620>)
 800110a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800110e:	611a      	str	r2, [r3, #16]
}
 8001110:	bf00      	nop
 8001112:	3724      	adds	r7, #36	@ 0x24
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000002c 	.word	0x2000002c
 8001120:	40011000 	.word	0x40011000
 8001124:	40010c00 	.word	0x40010c00

08001128 <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	@ 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t dirreg = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 800113a:	4b5f      	ldr	r3, [pc, #380]	@ (80012b8 <lcd_scan_dir+0x190>)
 800113c:	799b      	ldrb	r3, [r3, #6]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d105      	bne.n	800114e <lcd_scan_dir+0x26>
 8001142:	4b5d      	ldr	r3, [pc, #372]	@ (80012b8 <lcd_scan_dir+0x190>)
 8001144:	889b      	ldrh	r3, [r3, #4]
 8001146:	f641 1263 	movw	r2, #6499	@ 0x1963
 800114a:	4293      	cmp	r3, r2
 800114c:	d109      	bne.n	8001162 <lcd_scan_dir+0x3a>
 800114e:	4b5a      	ldr	r3, [pc, #360]	@ (80012b8 <lcd_scan_dir+0x190>)
 8001150:	799b      	ldrb	r3, [r3, #6]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d134      	bne.n	80011c0 <lcd_scan_dir+0x98>
 8001156:	4b58      	ldr	r3, [pc, #352]	@ (80012b8 <lcd_scan_dir+0x190>)
 8001158:	889b      	ldrh	r3, [r3, #4]
 800115a:	f641 1263 	movw	r2, #6499	@ 0x1963
 800115e:	4293      	cmp	r3, r2
 8001160:	d12e      	bne.n	80011c0 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b07      	cmp	r3, #7
 8001166:	d82b      	bhi.n	80011c0 <lcd_scan_dir+0x98>
 8001168:	a201      	add	r2, pc, #4	@ (adr r2, 8001170 <lcd_scan_dir+0x48>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001191 	.word	0x08001191
 8001174:	08001197 	.word	0x08001197
 8001178:	0800119d 	.word	0x0800119d
 800117c:	080011a3 	.word	0x080011a3
 8001180:	080011a9 	.word	0x080011a9
 8001184:	080011af 	.word	0x080011af
 8001188:	080011b5 	.word	0x080011b5
 800118c:	080011bb 	.word	0x080011bb
        {
            case 0:
                dir = 6;
 8001190:	2306      	movs	r3, #6
 8001192:	71fb      	strb	r3, [r7, #7]
                break;
 8001194:	e014      	b.n	80011c0 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 8001196:	2307      	movs	r3, #7
 8001198:	71fb      	strb	r3, [r7, #7]
                break;
 800119a:	e011      	b.n	80011c0 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	71fb      	strb	r3, [r7, #7]
                break;
 80011a0:	e00e      	b.n	80011c0 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 80011a2:	2305      	movs	r3, #5
 80011a4:	71fb      	strb	r3, [r7, #7]
                break;
 80011a6:	e00b      	b.n	80011c0 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	71fb      	strb	r3, [r7, #7]
                break;
 80011ac:	e008      	b.n	80011c0 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	71fb      	strb	r3, [r7, #7]
                break;
 80011b2:	e005      	b.n	80011c0 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 80011b4:	2303      	movs	r3, #3
 80011b6:	71fb      	strb	r3, [r7, #7]
                break;
 80011b8:	e002      	b.n	80011c0 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	71fb      	strb	r3, [r7, #7]
                break;
 80011be:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	d835      	bhi.n	8001232 <lcd_scan_dir+0x10a>
 80011c6:	a201      	add	r2, pc, #4	@ (adr r2, 80011cc <lcd_scan_dir+0xa4>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	08001233 	.word	0x08001233
 80011d0:	080011ed 	.word	0x080011ed
 80011d4:	080011f7 	.word	0x080011f7
 80011d8:	08001201 	.word	0x08001201
 80011dc:	0800120b 	.word	0x0800120b
 80011e0:	08001215 	.word	0x08001215
 80011e4:	0800121f 	.word	0x0800121f
 80011e8:	08001229 	.word	0x08001229
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80011ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 80011f4:	e01d      	b.n	8001232 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80011f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 80011fe:	e018      	b.n	8001232 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001200:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001202:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001206:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001208:	e013      	b.n	8001232 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800120a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001212:	e00e      	b.n	8001232 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001214:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001216:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800121a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800121c:	e009      	b.n	8001232 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800121e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001220:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001224:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001226:	e004      	b.n	8001232 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001228:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800122a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800122e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001230:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 8001232:	2336      	movs	r3, #54	@ 0x36
 8001234:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (lcddev.id == 0X5510)
 8001236:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <lcd_scan_dir+0x190>)
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	f245 5210 	movw	r2, #21776	@ 0x5510
 800123e:	4293      	cmp	r3, r2
 8001240:	d102      	bne.n	8001248 <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 8001242:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 8001246:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <lcd_scan_dir+0x190>)
 800124a:	889b      	ldrh	r3, [r3, #4]
 800124c:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001250:	4293      	cmp	r3, r2
 8001252:	d00b      	beq.n	800126c <lcd_scan_dir+0x144>
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <lcd_scan_dir+0x190>)
 8001256:	889b      	ldrh	r3, [r3, #4]
 8001258:	f247 7289 	movw	r2, #30601	@ 0x7789
 800125c:	4293      	cmp	r3, r2
 800125e:	d005      	beq.n	800126c <lcd_scan_dir+0x144>
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <lcd_scan_dir+0x190>)
 8001262:	889b      	ldrh	r3, [r3, #4]
 8001264:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001268:	4293      	cmp	r3, r2
 800126a:	d103      	bne.n	8001274 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 800126c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lcd_write_reg(dirreg, regval);
 8001274:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001276:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fbaa 	bl	80009d4 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <lcd_scan_dir+0x190>)
 8001282:	889b      	ldrh	r3, [r3, #4]
 8001284:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001288:	4293      	cmp	r3, r2
 800128a:	d027      	beq.n	80012dc <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 800128c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	2b00      	cmp	r3, #0
 8001294:	d012      	beq.n	80012bc <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <lcd_scan_dir+0x190>)
 8001298:	881a      	ldrh	r2, [r3, #0]
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <lcd_scan_dir+0x190>)
 800129c:	885b      	ldrh	r3, [r3, #2]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d21c      	bcs.n	80012dc <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 80012a2:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <lcd_scan_dir+0x190>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <lcd_scan_dir+0x190>)
 80012aa:	885a      	ldrh	r2, [r3, #2]
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <lcd_scan_dir+0x190>)
 80012ae:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80012b0:	4a01      	ldr	r2, [pc, #4]	@ (80012b8 <lcd_scan_dir+0x190>)
 80012b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80012b4:	8053      	strh	r3, [r2, #2]
 80012b6:	e011      	b.n	80012dc <lcd_scan_dir+0x1b4>
 80012b8:	2000002c 	.word	0x2000002c
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 80012bc:	4b9c      	ldr	r3, [pc, #624]	@ (8001530 <lcd_scan_dir+0x408>)
 80012be:	881a      	ldrh	r2, [r3, #0]
 80012c0:	4b9b      	ldr	r3, [pc, #620]	@ (8001530 <lcd_scan_dir+0x408>)
 80012c2:	885b      	ldrh	r3, [r3, #2]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d909      	bls.n	80012dc <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 80012c8:	4b99      	ldr	r3, [pc, #612]	@ (8001530 <lcd_scan_dir+0x408>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 80012ce:	4b98      	ldr	r3, [pc, #608]	@ (8001530 <lcd_scan_dir+0x408>)
 80012d0:	885a      	ldrh	r2, [r3, #2]
 80012d2:	4b97      	ldr	r3, [pc, #604]	@ (8001530 <lcd_scan_dir+0x408>)
 80012d4:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80012d6:	4a96      	ldr	r2, [pc, #600]	@ (8001530 <lcd_scan_dir+0x408>)
 80012d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80012da:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 80012dc:	4b94      	ldr	r3, [pc, #592]	@ (8001530 <lcd_scan_dir+0x408>)
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	f245 5210 	movw	r2, #21776	@ 0x5510
 80012e4:	4293      	cmp	r3, r2
 80012e6:	f040 81af 	bne.w	8001648 <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 80012ea:	4b91      	ldr	r3, [pc, #580]	@ (8001530 <lcd_scan_dir+0x408>)
 80012ec:	895b      	ldrh	r3, [r3, #10]
 80012ee:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80012f0:	4b90      	ldr	r3, [pc, #576]	@ (8001534 <lcd_scan_dir+0x40c>)
 80012f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80012f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001534 <lcd_scan_dir+0x40c>)
 80012fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001300:	8bbb      	ldrh	r3, [r7, #28]
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b8c      	ldr	r3, [pc, #560]	@ (8001538 <lcd_scan_dir+0x410>)
 8001306:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001308:	4b8a      	ldr	r3, [pc, #552]	@ (8001534 <lcd_scan_dir+0x40c>)
 800130a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800130e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001310:	4b88      	ldr	r3, [pc, #544]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001312:	2280      	movs	r2, #128	@ 0x80
 8001314:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001316:	4b87      	ldr	r3, [pc, #540]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800131c:	611a      	str	r2, [r3, #16]
}
 800131e:	bf00      	nop
        lcd_wr_data(0);
 8001320:	4b84      	ldr	r3, [pc, #528]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	4b82      	ldr	r3, [pc, #520]	@ (8001534 <lcd_scan_dir+0x40c>)
 800132a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	4b81      	ldr	r3, [pc, #516]	@ (8001538 <lcd_scan_dir+0x410>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	4b7f      	ldr	r3, [pc, #508]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001338:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	4b7d      	ldr	r3, [pc, #500]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001340:	2280      	movs	r2, #128	@ 0x80
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	4b7b      	ldr	r3, [pc, #492]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134a:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 800134c:	4b78      	ldr	r3, [pc, #480]	@ (8001530 <lcd_scan_dir+0x408>)
 800134e:	895b      	ldrh	r3, [r3, #10]
 8001350:	3301      	adds	r3, #1
 8001352:	b29b      	uxth	r3, r3
 8001354:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001356:	4b77      	ldr	r3, [pc, #476]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001358:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800135c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800135e:	4b75      	ldr	r3, [pc, #468]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001360:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001364:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001366:	8b7b      	ldrh	r3, [r7, #26]
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b73      	ldr	r3, [pc, #460]	@ (8001538 <lcd_scan_dir+0x410>)
 800136c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800136e:	4b71      	ldr	r3, [pc, #452]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001370:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001374:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001376:	4b6f      	ldr	r3, [pc, #444]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001378:	2280      	movs	r2, #128	@ 0x80
 800137a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800137c:	4b6d      	ldr	r3, [pc, #436]	@ (8001534 <lcd_scan_dir+0x40c>)
 800137e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001382:	611a      	str	r2, [r3, #16]
}
 8001384:	bf00      	nop
        lcd_wr_data(0);
 8001386:	4b6b      	ldr	r3, [pc, #428]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001388:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	4b69      	ldr	r3, [pc, #420]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001390:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	4b68      	ldr	r3, [pc, #416]	@ (8001538 <lcd_scan_dir+0x410>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	4b65      	ldr	r3, [pc, #404]	@ (8001534 <lcd_scan_dir+0x40c>)
 800139e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <lcd_scan_dir+0x40c>)
 80013a6:	2280      	movs	r2, #128	@ 0x80
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	4b62      	ldr	r3, [pc, #392]	@ (8001534 <lcd_scan_dir+0x40c>)
 80013ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b0:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 80013b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001530 <lcd_scan_dir+0x408>)
 80013b4:	895b      	ldrh	r3, [r3, #10]
 80013b6:	3302      	adds	r3, #2
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80013bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001534 <lcd_scan_dir+0x40c>)
 80013be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80013c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001534 <lcd_scan_dir+0x40c>)
 80013c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013ca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80013cc:	8b3b      	ldrh	r3, [r7, #24]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b59      	ldr	r3, [pc, #356]	@ (8001538 <lcd_scan_dir+0x410>)
 80013d2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80013d4:	4b57      	ldr	r3, [pc, #348]	@ (8001534 <lcd_scan_dir+0x40c>)
 80013d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013da:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80013dc:	4b55      	ldr	r3, [pc, #340]	@ (8001534 <lcd_scan_dir+0x40c>)
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80013e2:	4b54      	ldr	r3, [pc, #336]	@ (8001534 <lcd_scan_dir+0x40c>)
 80013e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e8:	611a      	str	r2, [r3, #16]
}
 80013ea:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 80013ec:	4b51      	ldr	r3, [pc, #324]	@ (8001534 <lcd_scan_dir+0x40c>)
 80013ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001534 <lcd_scan_dir+0x40c>)
 80013f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001530 <lcd_scan_dir+0x408>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	3b01      	subs	r3, #1
 8001402:	121a      	asrs	r2, r3, #8
 8001404:	4b4c      	ldr	r3, [pc, #304]	@ (8001538 <lcd_scan_dir+0x410>)
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <lcd_scan_dir+0x40c>)
 800140a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	4b48      	ldr	r3, [pc, #288]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001412:	2280      	movs	r2, #128	@ 0x80
 8001414:	611a      	str	r2, [r3, #16]
 8001416:	4b47      	ldr	r3, [pc, #284]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800141c:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 800141e:	4b44      	ldr	r3, [pc, #272]	@ (8001530 <lcd_scan_dir+0x408>)
 8001420:	895b      	ldrh	r3, [r3, #10]
 8001422:	3303      	adds	r3, #3
 8001424:	b29b      	uxth	r3, r3
 8001426:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001428:	4b42      	ldr	r3, [pc, #264]	@ (8001534 <lcd_scan_dir+0x40c>)
 800142a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800142e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001430:	4b40      	ldr	r3, [pc, #256]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001432:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001436:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001438:	8afb      	ldrh	r3, [r7, #22]
 800143a:	b29a      	uxth	r2, r3
 800143c:	4b3e      	ldr	r3, [pc, #248]	@ (8001538 <lcd_scan_dir+0x410>)
 800143e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001440:	4b3c      	ldr	r3, [pc, #240]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001442:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001446:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001448:	4b3a      	ldr	r3, [pc, #232]	@ (8001534 <lcd_scan_dir+0x40c>)
 800144a:	2280      	movs	r2, #128	@ 0x80
 800144c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800144e:	4b39      	ldr	r3, [pc, #228]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001454:	611a      	str	r2, [r3, #16]
}
 8001456:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8001458:	4b36      	ldr	r3, [pc, #216]	@ (8001534 <lcd_scan_dir+0x40c>)
 800145a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	4b34      	ldr	r3, [pc, #208]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001462:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <lcd_scan_dir+0x408>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	4a32      	ldr	r2, [pc, #200]	@ (8001538 <lcd_scan_dir+0x410>)
 8001470:	b2db      	uxtb	r3, r3
 8001472:	60d3      	str	r3, [r2, #12]
 8001474:	4b2f      	ldr	r3, [pc, #188]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001476:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <lcd_scan_dir+0x40c>)
 800147e:	2280      	movs	r2, #128	@ 0x80
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001488:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800148a:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <lcd_scan_dir+0x408>)
 800148c:	899b      	ldrh	r3, [r3, #12]
 800148e:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001490:	4b28      	ldr	r3, [pc, #160]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001492:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001496:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001498:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <lcd_scan_dir+0x40c>)
 800149a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800149e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80014a0:	8abb      	ldrh	r3, [r7, #20]
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <lcd_scan_dir+0x410>)
 80014a6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80014a8:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <lcd_scan_dir+0x40c>)
 80014aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014ae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <lcd_scan_dir+0x40c>)
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80014b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <lcd_scan_dir+0x40c>)
 80014b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014bc:	611a      	str	r2, [r3, #16]
}
 80014be:	bf00      	nop
        lcd_wr_data(0);
 80014c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <lcd_scan_dir+0x40c>)
 80014c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <lcd_scan_dir+0x40c>)
 80014ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <lcd_scan_dir+0x410>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <lcd_scan_dir+0x40c>)
 80014d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <lcd_scan_dir+0x40c>)
 80014e0:	2280      	movs	r2, #128	@ 0x80
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <lcd_scan_dir+0x40c>)
 80014e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ea:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 80014ec:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <lcd_scan_dir+0x408>)
 80014ee:	899b      	ldrh	r3, [r3, #12]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <lcd_scan_dir+0x40c>)
 80014f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014fc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001500:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001504:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001506:	8a7b      	ldrh	r3, [r7, #18]
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <lcd_scan_dir+0x410>)
 800150c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001510:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001514:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001518:	2280      	movs	r2, #128	@ 0x80
 800151a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <lcd_scan_dir+0x40c>)
 800151e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001522:	611a      	str	r2, [r3, #16]
}
 8001524:	bf00      	nop
        lcd_wr_data(0);
 8001526:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <lcd_scan_dir+0x40c>)
 8001528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	e005      	b.n	800153c <lcd_scan_dir+0x414>
 8001530:	2000002c 	.word	0x2000002c
 8001534:	40011000 	.word	0x40011000
 8001538:	40010c00 	.word	0x40010c00
 800153c:	4b3f      	ldr	r3, [pc, #252]	@ (800163c <lcd_scan_dir+0x514>)
 800153e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <lcd_scan_dir+0x518>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	4b3c      	ldr	r3, [pc, #240]	@ (800163c <lcd_scan_dir+0x514>)
 800154c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	4b3a      	ldr	r3, [pc, #232]	@ (800163c <lcd_scan_dir+0x514>)
 8001554:	2280      	movs	r2, #128	@ 0x80
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	4b38      	ldr	r3, [pc, #224]	@ (800163c <lcd_scan_dir+0x514>)
 800155a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800155e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 8001560:	4b38      	ldr	r3, [pc, #224]	@ (8001644 <lcd_scan_dir+0x51c>)
 8001562:	899b      	ldrh	r3, [r3, #12]
 8001564:	3302      	adds	r3, #2
 8001566:	b29b      	uxth	r3, r3
 8001568:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800156a:	4b34      	ldr	r3, [pc, #208]	@ (800163c <lcd_scan_dir+0x514>)
 800156c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001570:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001572:	4b32      	ldr	r3, [pc, #200]	@ (800163c <lcd_scan_dir+0x514>)
 8001574:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001578:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800157a:	8a3b      	ldrh	r3, [r7, #16]
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <lcd_scan_dir+0x518>)
 8001580:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <lcd_scan_dir+0x514>)
 8001584:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001588:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800158a:	4b2c      	ldr	r3, [pc, #176]	@ (800163c <lcd_scan_dir+0x514>)
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001590:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <lcd_scan_dir+0x514>)
 8001592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001596:	611a      	str	r2, [r3, #16]
}
 8001598:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 800159a:	4b28      	ldr	r3, [pc, #160]	@ (800163c <lcd_scan_dir+0x514>)
 800159c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	4b26      	ldr	r3, [pc, #152]	@ (800163c <lcd_scan_dir+0x514>)
 80015a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <lcd_scan_dir+0x51c>)
 80015ac:	885b      	ldrh	r3, [r3, #2]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	121a      	asrs	r2, r3, #8
 80015b2:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <lcd_scan_dir+0x518>)
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	4b21      	ldr	r3, [pc, #132]	@ (800163c <lcd_scan_dir+0x514>)
 80015b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <lcd_scan_dir+0x514>)
 80015c0:	2280      	movs	r2, #128	@ 0x80
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	4b1d      	ldr	r3, [pc, #116]	@ (800163c <lcd_scan_dir+0x514>)
 80015c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ca:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <lcd_scan_dir+0x51c>)
 80015ce:	899b      	ldrh	r3, [r3, #12]
 80015d0:	3303      	adds	r3, #3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <lcd_scan_dir+0x514>)
 80015d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80015de:	4b17      	ldr	r3, [pc, #92]	@ (800163c <lcd_scan_dir+0x514>)
 80015e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <lcd_scan_dir+0x518>)
 80015ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <lcd_scan_dir+0x514>)
 80015f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <lcd_scan_dir+0x514>)
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <lcd_scan_dir+0x514>)
 80015fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001602:	611a      	str	r2, [r3, #16]
}
 8001604:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <lcd_scan_dir+0x514>)
 8001608:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <lcd_scan_dir+0x514>)
 8001610:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <lcd_scan_dir+0x51c>)
 8001618:	885b      	ldrh	r3, [r3, #2]
 800161a:	3b01      	subs	r3, #1
 800161c:	4a08      	ldr	r2, [pc, #32]	@ (8001640 <lcd_scan_dir+0x518>)
 800161e:	b2db      	uxtb	r3, r3
 8001620:	60d3      	str	r3, [r2, #12]
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <lcd_scan_dir+0x514>)
 8001624:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	4b04      	ldr	r3, [pc, #16]	@ (800163c <lcd_scan_dir+0x514>)
 800162c:	2280      	movs	r2, #128	@ 0x80
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	4b02      	ldr	r3, [pc, #8]	@ (800163c <lcd_scan_dir+0x514>)
 8001632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001636:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 8001638:	e0f8      	b.n	800182c <lcd_scan_dir+0x704>
 800163a:	bf00      	nop
 800163c:	40011000 	.word	0x40011000
 8001640:	40010c00 	.word	0x40010c00
 8001644:	2000002c 	.word	0x2000002c
        lcd_wr_regno(lcddev.setxcmd);
 8001648:	4b7a      	ldr	r3, [pc, #488]	@ (8001834 <lcd_scan_dir+0x70c>)
 800164a:	895b      	ldrh	r3, [r3, #10]
 800164c:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800164e:	4b7a      	ldr	r3, [pc, #488]	@ (8001838 <lcd_scan_dir+0x710>)
 8001650:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001654:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001656:	4b78      	ldr	r3, [pc, #480]	@ (8001838 <lcd_scan_dir+0x710>)
 8001658:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800165c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800165e:	8c3b      	ldrh	r3, [r7, #32]
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b76      	ldr	r3, [pc, #472]	@ (800183c <lcd_scan_dir+0x714>)
 8001664:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001666:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <lcd_scan_dir+0x710>)
 8001668:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800166c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800166e:	4b72      	ldr	r3, [pc, #456]	@ (8001838 <lcd_scan_dir+0x710>)
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001674:	4b70      	ldr	r3, [pc, #448]	@ (8001838 <lcd_scan_dir+0x710>)
 8001676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800167a:	611a      	str	r2, [r3, #16]
}
 800167c:	bf00      	nop
        lcd_wr_data(0);
 800167e:	4b6e      	ldr	r3, [pc, #440]	@ (8001838 <lcd_scan_dir+0x710>)
 8001680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001684:	611a      	str	r2, [r3, #16]
 8001686:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <lcd_scan_dir+0x710>)
 8001688:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	4b6b      	ldr	r3, [pc, #428]	@ (800183c <lcd_scan_dir+0x714>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	4b68      	ldr	r3, [pc, #416]	@ (8001838 <lcd_scan_dir+0x710>)
 8001696:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	4b66      	ldr	r3, [pc, #408]	@ (8001838 <lcd_scan_dir+0x710>)
 800169e:	2280      	movs	r2, #128	@ 0x80
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	4b65      	ldr	r3, [pc, #404]	@ (8001838 <lcd_scan_dir+0x710>)
 80016a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a8:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 80016aa:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <lcd_scan_dir+0x710>)
 80016ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016b0:	611a      	str	r2, [r3, #16]
 80016b2:	4b61      	ldr	r3, [pc, #388]	@ (8001838 <lcd_scan_dir+0x710>)
 80016b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	4b60      	ldr	r3, [pc, #384]	@ (800183c <lcd_scan_dir+0x714>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	4b5d      	ldr	r3, [pc, #372]	@ (8001838 <lcd_scan_dir+0x710>)
 80016c2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001838 <lcd_scan_dir+0x710>)
 80016ca:	2280      	movs	r2, #128	@ 0x80
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001838 <lcd_scan_dir+0x710>)
 80016d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d4:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 80016d6:	4b58      	ldr	r3, [pc, #352]	@ (8001838 <lcd_scan_dir+0x710>)
 80016d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	4b56      	ldr	r3, [pc, #344]	@ (8001838 <lcd_scan_dir+0x710>)
 80016e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016e4:	611a      	str	r2, [r3, #16]
 80016e6:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <lcd_scan_dir+0x70c>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	121a      	asrs	r2, r3, #8
 80016ee:	4b53      	ldr	r3, [pc, #332]	@ (800183c <lcd_scan_dir+0x714>)
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	4b51      	ldr	r3, [pc, #324]	@ (8001838 <lcd_scan_dir+0x710>)
 80016f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016f8:	611a      	str	r2, [r3, #16]
 80016fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001838 <lcd_scan_dir+0x710>)
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	4b4d      	ldr	r3, [pc, #308]	@ (8001838 <lcd_scan_dir+0x710>)
 8001702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001706:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8001708:	4b4b      	ldr	r3, [pc, #300]	@ (8001838 <lcd_scan_dir+0x710>)
 800170a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170e:	611a      	str	r2, [r3, #16]
 8001710:	4b49      	ldr	r3, [pc, #292]	@ (8001838 <lcd_scan_dir+0x710>)
 8001712:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	4b46      	ldr	r3, [pc, #280]	@ (8001834 <lcd_scan_dir+0x70c>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	3b01      	subs	r3, #1
 800171e:	4a47      	ldr	r2, [pc, #284]	@ (800183c <lcd_scan_dir+0x714>)
 8001720:	b2db      	uxtb	r3, r3
 8001722:	60d3      	str	r3, [r2, #12]
 8001724:	4b44      	ldr	r3, [pc, #272]	@ (8001838 <lcd_scan_dir+0x710>)
 8001726:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <lcd_scan_dir+0x710>)
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <lcd_scan_dir+0x710>)
 8001734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001738:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800173a:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <lcd_scan_dir+0x70c>)
 800173c:	899b      	ldrh	r3, [r3, #12]
 800173e:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001740:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <lcd_scan_dir+0x710>)
 8001742:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001746:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001748:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <lcd_scan_dir+0x710>)
 800174a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800174e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b39      	ldr	r3, [pc, #228]	@ (800183c <lcd_scan_dir+0x714>)
 8001756:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001758:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <lcd_scan_dir+0x710>)
 800175a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800175e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001760:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <lcd_scan_dir+0x710>)
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001766:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <lcd_scan_dir+0x710>)
 8001768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176c:	611a      	str	r2, [r3, #16]
}
 800176e:	bf00      	nop
        lcd_wr_data(0);
 8001770:	4b31      	ldr	r3, [pc, #196]	@ (8001838 <lcd_scan_dir+0x710>)
 8001772:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	4b2f      	ldr	r3, [pc, #188]	@ (8001838 <lcd_scan_dir+0x710>)
 800177a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <lcd_scan_dir+0x714>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <lcd_scan_dir+0x710>)
 8001788:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <lcd_scan_dir+0x710>)
 8001790:	2280      	movs	r2, #128	@ 0x80
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <lcd_scan_dir+0x710>)
 8001796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800179a:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 800179c:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <lcd_scan_dir+0x710>)
 800179e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <lcd_scan_dir+0x710>)
 80017a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	4b23      	ldr	r3, [pc, #140]	@ (800183c <lcd_scan_dir+0x714>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <lcd_scan_dir+0x710>)
 80017b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <lcd_scan_dir+0x710>)
 80017bc:	2280      	movs	r2, #128	@ 0x80
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <lcd_scan_dir+0x710>)
 80017c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c6:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <lcd_scan_dir+0x710>)
 80017ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <lcd_scan_dir+0x710>)
 80017d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <lcd_scan_dir+0x70c>)
 80017da:	885b      	ldrh	r3, [r3, #2]
 80017dc:	3b01      	subs	r3, #1
 80017de:	121a      	asrs	r2, r3, #8
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <lcd_scan_dir+0x714>)
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <lcd_scan_dir+0x710>)
 80017e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <lcd_scan_dir+0x710>)
 80017ee:	2280      	movs	r2, #128	@ 0x80
 80017f0:	611a      	str	r2, [r3, #16]
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <lcd_scan_dir+0x710>)
 80017f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f8:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <lcd_scan_dir+0x710>)
 80017fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <lcd_scan_dir+0x710>)
 8001804:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <lcd_scan_dir+0x70c>)
 800180c:	885b      	ldrh	r3, [r3, #2]
 800180e:	3b01      	subs	r3, #1
 8001810:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <lcd_scan_dir+0x714>)
 8001812:	b2db      	uxtb	r3, r3
 8001814:	60d3      	str	r3, [r2, #12]
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <lcd_scan_dir+0x710>)
 8001818:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <lcd_scan_dir+0x710>)
 8001820:	2280      	movs	r2, #128	@ 0x80
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <lcd_scan_dir+0x710>)
 8001826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800182a:	611a      	str	r2, [r3, #16]
}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	@ 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000002c 	.word	0x2000002c
 8001838:	40011000 	.word	0x40011000
 800183c:	40010c00 	.word	0x40010c00

08001840 <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	603a      	str	r2, [r7, #0]
 800184a:	80fb      	strh	r3, [r7, #6]
 800184c:	460b      	mov	r3, r1
 800184e:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 8001850:	88ba      	ldrh	r2, [r7, #4]
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f952 	bl	8000b00 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <lcd_draw_point+0x88>)
 800185e:	891b      	ldrh	r3, [r3, #8]
 8001860:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <lcd_draw_point+0x8c>)
 8001864:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001868:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <lcd_draw_point+0x8c>)
 800186c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001870:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <lcd_draw_point+0x90>)
 8001878:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <lcd_draw_point+0x8c>)
 800187c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001880:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <lcd_draw_point+0x8c>)
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001888:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <lcd_draw_point+0x8c>)
 800188a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188e:	611a      	str	r2, [r3, #16]
}
 8001890:	bf00      	nop
}
 8001892:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <lcd_draw_point+0x8c>)
 8001896:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <lcd_draw_point+0x8c>)
 800189e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <lcd_draw_point+0x90>)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	60d3      	str	r3, [r2, #12]
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <lcd_draw_point+0x8c>)
 80018ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <lcd_draw_point+0x8c>)
 80018b4:	2280      	movs	r2, #128	@ 0x80
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <lcd_draw_point+0x8c>)
 80018ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018be:	611a      	str	r2, [r3, #16]
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000002c 	.word	0x2000002c
 80018cc:	40011000 	.word	0x40011000
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	00000000 	.word	0x00000000

080018d8 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	23be      	movs	r3, #190	@ 0xbe
 80018e4:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80018e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80018e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80018ee:	4b58      	ldr	r3, [pc, #352]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80018f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80018f6:	89fb      	ldrh	r3, [r7, #14]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b56      	ldr	r3, [pc, #344]	@ (8001a54 <lcd_ssd_backlight_set+0x17c>)
 80018fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80018fe:	4b54      	ldr	r3, [pc, #336]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001900:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001904:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001906:	4b52      	ldr	r3, [pc, #328]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001908:	2280      	movs	r2, #128	@ 0x80
 800190a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800190c:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 800190e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001912:	611a      	str	r2, [r3, #16]
}
 8001914:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 8001916:	4b4e      	ldr	r3, [pc, #312]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001918:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001920:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001924:	611a      	str	r2, [r3, #16]
 8001926:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <lcd_ssd_backlight_set+0x17c>)
 8001928:	2205      	movs	r2, #5
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	4b48      	ldr	r3, [pc, #288]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 800192e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	4b46      	ldr	r3, [pc, #280]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001936:	2280      	movs	r2, #128	@ 0x80
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	4b45      	ldr	r3, [pc, #276]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 800193c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001940:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 8001942:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 800194c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe feeb 	bl	8000730 <__aeabi_i2d>
 800195a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001a48 <lcd_ssd_backlight_set+0x170>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f7fe fc6a 	bl	8000238 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4c3a      	ldr	r4, [pc, #232]	@ (8001a54 <lcd_ssd_backlight_set+0x17c>)
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7fe ff49 	bl	8000804 <__aeabi_d2uiz>
 8001972:	4603      	mov	r3, r0
 8001974:	60e3      	str	r3, [r4, #12]
 8001976:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001978:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001980:	2280      	movs	r2, #128	@ 0x80
 8001982:	611a      	str	r2, [r3, #16]
 8001984:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198a:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 800198c:	4b30      	ldr	r3, [pc, #192]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 800198e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001996:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <lcd_ssd_backlight_set+0x17c>)
 800199e:	2201      	movs	r2, #1
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	4b29      	ldr	r3, [pc, #164]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019ac:	2280      	movs	r2, #128	@ 0x80
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b6:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <lcd_ssd_backlight_set+0x17c>)
 80019ca:	22ff      	movs	r2, #255	@ 0xff
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019d8:	2280      	movs	r2, #128	@ 0x80
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e2:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ea:	611a      	str	r2, [r3, #16]
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <lcd_ssd_backlight_set+0x17c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 80019fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001a04:	2280      	movs	r2, #128	@ 0x80
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a0e:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a16:	611a      	str	r2, [r3, #16]
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001a1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <lcd_ssd_backlight_set+0x17c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001a28:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <lcd_ssd_backlight_set+0x178>)
 8001a36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a3a:	611a      	str	r2, [r3, #16]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	f3af 8000 	nop.w
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	40046666 	.word	0x40046666
 8001a50:	40011000 	.word	0x40011000
 8001a54:	40010c00 	.word	0x40010c00

08001a58 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 8001a62:	4a68      	ldr	r2, [pc, #416]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d165      	bne.n	8001b3a <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8001a6e:	4b65      	ldr	r3, [pc, #404]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001a70:	22f0      	movs	r2, #240	@ 0xf0
 8001a72:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8001a74:	4b63      	ldr	r3, [pc, #396]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001a76:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001a7a:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001a7c:	4b61      	ldr	r3, [pc, #388]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001a7e:	889b      	ldrh	r3, [r3, #4]
 8001a80:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d114      	bne.n	8001ab2 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8001a88:	4b5e      	ldr	r3, [pc, #376]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001a8a:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001a8e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001a90:	4b5c      	ldr	r3, [pc, #368]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001a92:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001a96:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001a98:	4b5a      	ldr	r3, [pc, #360]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001a9a:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001a9e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8001aa0:	4b58      	ldr	r3, [pc, #352]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001aa2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001aa6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001aa8:	4b56      	ldr	r3, [pc, #344]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001aaa:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001aae:	805a      	strh	r2, [r3, #2]
 8001ab0:	e020      	b.n	8001af4 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8001ab2:	4b54      	ldr	r3, [pc, #336]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001ab4:	889b      	ldrh	r3, [r3, #4]
 8001ab6:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d111      	bne.n	8001ae2 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001abe:	4b51      	ldr	r3, [pc, #324]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001ac0:	222c      	movs	r2, #44	@ 0x2c
 8001ac2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 8001ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001ac6:	222b      	movs	r2, #43	@ 0x2b
 8001ac8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 8001aca:	4b4e      	ldr	r3, [pc, #312]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001acc:	222a      	movs	r2, #42	@ 0x2a
 8001ace:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001ad2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ad6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 8001ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001ada:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ade:	805a      	strh	r2, [r3, #2]
 8001ae0:	e008      	b.n	8001af4 <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001ae2:	4b48      	ldr	r3, [pc, #288]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001ae4:	222c      	movs	r2, #44	@ 0x2c
 8001ae6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001ae8:	4b46      	ldr	r3, [pc, #280]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001aea:	222a      	movs	r2, #42	@ 0x2a
 8001aec:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001aee:	4b45      	ldr	r3, [pc, #276]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001af0:	222b      	movs	r2, #43	@ 0x2b
 8001af2:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001af4:	4b43      	ldr	r3, [pc, #268]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001af6:	889b      	ldrh	r3, [r3, #4]
 8001af8:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d005      	beq.n	8001b0c <lcd_display_dir+0xb4>
 8001b00:	4b40      	ldr	r3, [pc, #256]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b02:	889b      	ldrh	r3, [r3, #4]
 8001b04:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d107      	bne.n	8001b1c <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b0e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b12:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001b14:	4b3b      	ldr	r3, [pc, #236]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b16:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b1a:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 8001b1c:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b1e:	889b      	ldrh	r3, [r3, #4]
 8001b20:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d165      	bne.n	8001bf4 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001b28:	4b36      	ldr	r3, [pc, #216]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b2a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b2e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001b30:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b32:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b36:	805a      	strh	r2, [r3, #2]
 8001b38:	e05c      	b.n	8001bf4 <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 8001b3a:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b3c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b40:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 8001b42:	4b30      	ldr	r3, [pc, #192]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b44:	22f0      	movs	r2, #240	@ 0xf0
 8001b46:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001b48:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b4a:	889b      	ldrh	r3, [r3, #4]
 8001b4c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d114      	bne.n	8001b7e <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b56:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001b5a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001b5c:	4b29      	ldr	r3, [pc, #164]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b5e:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001b62:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001b64:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b66:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001b6a:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b6e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b72:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001b74:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b76:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b7a:	805a      	strh	r2, [r3, #2]
 8001b7c:	e026      	b.n	8001bcc <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b80:	889b      	ldrh	r3, [r3, #4]
 8001b82:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d005      	beq.n	8001b96 <lcd_display_dir+0x13e>
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b8c:	889b      	ldrh	r3, [r3, #4]
 8001b8e:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d111      	bne.n	8001bba <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b98:	222c      	movs	r2, #44	@ 0x2c
 8001b9a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001b9e:	222a      	movs	r2, #42	@ 0x2a
 8001ba0:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001ba4:	222b      	movs	r2, #43	@ 0x2b
 8001ba6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001baa:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001bae:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001bb2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001bb6:	805a      	strh	r2, [r3, #2]
 8001bb8:	e008      	b.n	8001bcc <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001bbc:	222c      	movs	r2, #44	@ 0x2c
 8001bbe:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001bc2:	222a      	movs	r2, #42	@ 0x2a
 8001bc4:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001bc8:	222b      	movs	r2, #43	@ 0x2b
 8001bca:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001bce:	889b      	ldrh	r3, [r3, #4]
 8001bd0:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d005      	beq.n	8001be4 <lcd_display_dir+0x18c>
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001bda:	889b      	ldrh	r3, [r3, #4]
 8001bdc:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d107      	bne.n	8001bf4 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001be6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001bea:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <lcd_display_dir+0x1ac>)
 8001bee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001bf2:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff fa97 	bl	8001128 <lcd_scan_dir>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000002c 	.word	0x2000002c

08001c08 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b0da      	sub	sp, #360	@ 0x168
 8001c0c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 8001c0e:	4bbe      	ldr	r3, [pc, #760]	@ (8001f08 <lcd_init+0x300>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4abd      	ldr	r2, [pc, #756]	@ (8001f08 <lcd_init+0x300>)
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4bbb      	ldr	r3, [pc, #748]	@ (8001f08 <lcd_init+0x300>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0210 	and.w	r2, r3, #16
 8001c22:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c26:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c34:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 8001c36:	4bb4      	ldr	r3, [pc, #720]	@ (8001f08 <lcd_init+0x300>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	4ab3      	ldr	r2, [pc, #716]	@ (8001f08 <lcd_init+0x300>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6193      	str	r3, [r2, #24]
 8001c42:	4bb1      	ldr	r3, [pc, #708]	@ (8001f08 <lcd_init+0x300>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 0210 	and.w	r2, r3, #16
 8001c4a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c4e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c58:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c5c:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 8001c5e:	4baa      	ldr	r3, [pc, #680]	@ (8001f08 <lcd_init+0x300>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	4aa9      	ldr	r2, [pc, #676]	@ (8001f08 <lcd_init+0x300>)
 8001c64:	f043 0310 	orr.w	r3, r3, #16
 8001c68:	6193      	str	r3, [r2, #24]
 8001c6a:	4ba7      	ldr	r3, [pc, #668]	@ (8001f08 <lcd_init+0x300>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0210 	and.w	r2, r3, #16
 8001c72:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c76:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c80:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001c84:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 8001c86:	4ba0      	ldr	r3, [pc, #640]	@ (8001f08 <lcd_init+0x300>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4a9f      	ldr	r2, [pc, #636]	@ (8001f08 <lcd_init+0x300>)
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	6193      	str	r3, [r2, #24]
 8001c92:	4b9d      	ldr	r3, [pc, #628]	@ (8001f08 <lcd_init+0x300>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0210 	and.w	r2, r3, #16
 8001c9a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c9e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ca8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001cac:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 8001cae:	4b96      	ldr	r3, [pc, #600]	@ (8001f08 <lcd_init+0x300>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	4a95      	ldr	r2, [pc, #596]	@ (8001f08 <lcd_init+0x300>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6193      	str	r3, [r2, #24]
 8001cba:	4b93      	ldr	r3, [pc, #588]	@ (8001f08 <lcd_init+0x300>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0210 	and.w	r2, r3, #16
 8001cc2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cc6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cd0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001cd4:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 8001cd6:	4b8c      	ldr	r3, [pc, #560]	@ (8001f08 <lcd_init+0x300>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	4a8b      	ldr	r2, [pc, #556]	@ (8001f08 <lcd_init+0x300>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6193      	str	r3, [r2, #24]
 8001ce2:	4b89      	ldr	r3, [pc, #548]	@ (8001f08 <lcd_init+0x300>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0208 	and.w	r2, r3, #8
 8001cea:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cee:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cf8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cfc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfe:	4b82      	ldr	r3, [pc, #520]	@ (8001f08 <lcd_init+0x300>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a81      	ldr	r2, [pc, #516]	@ (8001f08 <lcd_init+0x300>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f08 <lcd_init+0x300>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0201 	and.w	r2, r3, #1
 8001d12:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d16:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d20:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d24:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 8001d26:	4b79      	ldr	r3, [pc, #484]	@ (8001f0c <lcd_init+0x304>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001d2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d36:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001d3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001d46:	4a71      	ldr	r2, [pc, #452]	@ (8001f0c <lcd_init+0x304>)
 8001d48:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d4c:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8001d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d52:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 8001d56:	2301      	movs	r3, #1
 8001d58:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 8001d62:	2303      	movs	r3, #3
 8001d64:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 8001d68:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4868      	ldr	r0, [pc, #416]	@ (8001f10 <lcd_init+0x308>)
 8001d70:	f005 fd48 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 8001d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d78:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 8001d82:	2301      	movs	r3, #1
 8001d84:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 8001d88:	2303      	movs	r3, #3
 8001d8a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 8001d8e:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d92:	4619      	mov	r1, r3
 8001d94:	485e      	ldr	r0, [pc, #376]	@ (8001f10 <lcd_init+0x308>)
 8001d96:	f005 fd35 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 8001da0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001da4:	4619      	mov	r1, r3
 8001da6:	485a      	ldr	r0, [pc, #360]	@ (8001f10 <lcd_init+0x308>)
 8001da8:	f005 fd2c 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 8001dac:	2340      	movs	r3, #64	@ 0x40
 8001dae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 8001db2:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001db6:	4619      	mov	r1, r3
 8001db8:	4855      	ldr	r0, [pc, #340]	@ (8001f10 <lcd_init+0x308>)
 8001dba:	f005 fd23 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 8001dbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dc2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 8001dc6:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4850      	ldr	r0, [pc, #320]	@ (8001f10 <lcd_init+0x308>)
 8001dce:	f005 fd19 	bl	8007804 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8001dd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dd6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8001de0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001de4:	4619      	mov	r1, r3
 8001de6:	484b      	ldr	r0, [pc, #300]	@ (8001f14 <lcd_init+0x30c>)
 8001de8:	f005 fd0c 	bl	8007804 <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 8001dec:	4b48      	ldr	r3, [pc, #288]	@ (8001f10 <lcd_init+0x308>)
 8001dee:	2280      	movs	r2, #128	@ 0x80
 8001df0:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 8001df2:	4b47      	ldr	r3, [pc, #284]	@ (8001f10 <lcd_init+0x308>)
 8001df4:	2240      	movs	r2, #64	@ 0x40
 8001df6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8001df8:	4b45      	ldr	r3, [pc, #276]	@ (8001f10 <lcd_init+0x308>)
 8001dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dfe:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8001e00:	4b43      	ldr	r3, [pc, #268]	@ (8001f10 <lcd_init+0x308>)
 8001e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e06:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8001e08:	4b42      	ldr	r3, [pc, #264]	@ (8001f14 <lcd_init+0x30c>)
 8001e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e0e:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8001e10:	4841      	ldr	r0, [pc, #260]	@ (8001f18 <lcd_init+0x310>)
 8001e12:	f7fe fe21 	bl	8000a58 <lcd_opt_delay>
 8001e16:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e1e:	22d3      	movs	r2, #211	@ 0xd3
 8001e20:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001e22:	4b3b      	ldr	r3, [pc, #236]	@ (8001f10 <lcd_init+0x308>)
 8001e24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e28:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001e2a:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <lcd_init+0x308>)
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e30:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001e32:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e36:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	4b35      	ldr	r3, [pc, #212]	@ (8001f14 <lcd_init+0x30c>)
 8001e40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001e42:	4b33      	ldr	r3, [pc, #204]	@ (8001f10 <lcd_init+0x308>)
 8001e44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001e4a:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <lcd_init+0x308>)
 8001e4c:	2280      	movs	r2, #128	@ 0x80
 8001e4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001e50:	4b2f      	ldr	r3, [pc, #188]	@ (8001f10 <lcd_init+0x308>)
 8001e52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e56:	611a      	str	r2, [r3, #16]
}
 8001e58:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 8001e5a:	f7fe fe0d 	bl	8000a78 <lcd_rd_data>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <lcd_init+0x314>)
 8001e64:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 8001e66:	f7fe fe07 	bl	8000a78 <lcd_rd_data>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f1c <lcd_init+0x314>)
 8001e70:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 8001e72:	f7fe fe01 	bl	8000a78 <lcd_rd_data>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b28      	ldr	r3, [pc, #160]	@ (8001f1c <lcd_init+0x314>)
 8001e7c:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8001e7e:	4b27      	ldr	r3, [pc, #156]	@ (8001f1c <lcd_init+0x314>)
 8001e80:	889b      	ldrh	r3, [r3, #4]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b25      	ldr	r3, [pc, #148]	@ (8001f1c <lcd_init+0x314>)
 8001e88:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 8001e8a:	f7fe fdf5 	bl	8000a78 <lcd_rd_data>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <lcd_init+0x314>)
 8001e94:	889b      	ldrh	r3, [r3, #4]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <lcd_init+0x314>)
 8001e9c:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <lcd_init+0x314>)
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	f000 820e 	beq.w	80022c8 <lcd_init+0x6c0>
 8001eac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001eb0:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <lcd_init+0x308>)
 8001eba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ebe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <lcd_init+0x308>)
 8001ec2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ec6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001ec8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ecc:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <lcd_init+0x30c>)
 8001ed6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <lcd_init+0x308>)
 8001eda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ede:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <lcd_init+0x308>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <lcd_init+0x308>)
 8001ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eec:	611a      	str	r2, [r3, #16]
}
 8001eee:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8001ef0:	f7fe fdc2 	bl	8000a78 <lcd_rd_data>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <lcd_init+0x314>)
 8001efa:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 8001efc:	f7fe fdbc 	bl	8000a78 <lcd_rd_data>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	e00c      	b.n	8001f20 <lcd_init+0x318>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40011000 	.word	0x40011000
 8001f14:	40010c00 	.word	0x40010c00
 8001f18:	0001ffff 	.word	0x0001ffff
 8001f1c:	2000002c 	.word	0x2000002c
 8001f20:	4bb1      	ldr	r3, [pc, #708]	@ (80021e8 <lcd_init+0x5e0>)
 8001f22:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 8001f24:	f7fe fda8 	bl	8000a78 <lcd_rd_data>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4bae      	ldr	r3, [pc, #696]	@ (80021e8 <lcd_init+0x5e0>)
 8001f2e:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8001f30:	4bad      	ldr	r3, [pc, #692]	@ (80021e8 <lcd_init+0x5e0>)
 8001f32:	889b      	ldrh	r3, [r3, #4]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4bab      	ldr	r3, [pc, #684]	@ (80021e8 <lcd_init+0x5e0>)
 8001f3a:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 8001f3c:	f7fe fd9c 	bl	8000a78 <lcd_rd_data>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4ba8      	ldr	r3, [pc, #672]	@ (80021e8 <lcd_init+0x5e0>)
 8001f46:	889b      	ldrh	r3, [r3, #4]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4ba6      	ldr	r3, [pc, #664]	@ (80021e8 <lcd_init+0x5e0>)
 8001f4e:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 8001f50:	4ba5      	ldr	r3, [pc, #660]	@ (80021e8 <lcd_init+0x5e0>)
 8001f52:	889b      	ldrh	r3, [r3, #4]
 8001f54:	f248 5252 	movw	r2, #34130	@ 0x8552
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d103      	bne.n	8001f64 <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 8001f5c:	4ba2      	ldr	r3, [pc, #648]	@ (80021e8 <lcd_init+0x5e0>)
 8001f5e:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001f62:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 8001f64:	4ba0      	ldr	r3, [pc, #640]	@ (80021e8 <lcd_init+0x5e0>)
 8001f66:	889b      	ldrh	r3, [r3, #4]
 8001f68:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	f000 81ab 	beq.w	80022c8 <lcd_init+0x6c0>
 8001f72:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f76:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f7a:	22d4      	movs	r2, #212	@ 0xd4
 8001f7c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001f7e:	4b9b      	ldr	r3, [pc, #620]	@ (80021ec <lcd_init+0x5e4>)
 8001f80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001f86:	4b99      	ldr	r3, [pc, #612]	@ (80021ec <lcd_init+0x5e4>)
 8001f88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f8c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001f8e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f92:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b95      	ldr	r3, [pc, #596]	@ (80021f0 <lcd_init+0x5e8>)
 8001f9c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001f9e:	4b93      	ldr	r3, [pc, #588]	@ (80021ec <lcd_init+0x5e4>)
 8001fa0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001fa4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001fa6:	4b91      	ldr	r3, [pc, #580]	@ (80021ec <lcd_init+0x5e4>)
 8001fa8:	2280      	movs	r2, #128	@ 0x80
 8001faa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001fac:	4b8f      	ldr	r3, [pc, #572]	@ (80021ec <lcd_init+0x5e4>)
 8001fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb2:	611a      	str	r2, [r3, #16]
}
 8001fb4:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 8001fb6:	f7fe fd5f 	bl	8000a78 <lcd_rd_data>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b8a      	ldr	r3, [pc, #552]	@ (80021e8 <lcd_init+0x5e0>)
 8001fc0:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 8001fc2:	f7fe fd59 	bl	8000a78 <lcd_rd_data>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b87      	ldr	r3, [pc, #540]	@ (80021e8 <lcd_init+0x5e0>)
 8001fcc:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 8001fce:	f7fe fd53 	bl	8000a78 <lcd_rd_data>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b84      	ldr	r3, [pc, #528]	@ (80021e8 <lcd_init+0x5e0>)
 8001fd8:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8001fda:	4b83      	ldr	r3, [pc, #524]	@ (80021e8 <lcd_init+0x5e0>)
 8001fdc:	889b      	ldrh	r3, [r3, #4]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b81      	ldr	r3, [pc, #516]	@ (80021e8 <lcd_init+0x5e0>)
 8001fe4:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 8001fe6:	f7fe fd47 	bl	8000a78 <lcd_rd_data>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b7e      	ldr	r3, [pc, #504]	@ (80021e8 <lcd_init+0x5e0>)
 8001ff0:	889b      	ldrh	r3, [r3, #4]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80021e8 <lcd_init+0x5e0>)
 8001ff8:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 8001ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80021e8 <lcd_init+0x5e0>)
 8001ffc:	889b      	ldrh	r3, [r3, #4]
 8001ffe:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002002:	4293      	cmp	r3, r2
 8002004:	f000 8160 	beq.w	80022c8 <lcd_init+0x6c0>
 8002008:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800200c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002010:	22d3      	movs	r2, #211	@ 0xd3
 8002012:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002014:	4b75      	ldr	r3, [pc, #468]	@ (80021ec <lcd_init+0x5e4>)
 8002016:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800201a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800201c:	4b73      	ldr	r3, [pc, #460]	@ (80021ec <lcd_init+0x5e4>)
 800201e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002022:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002024:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002028:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29a      	uxth	r2, r3
 8002030:	4b6f      	ldr	r3, [pc, #444]	@ (80021f0 <lcd_init+0x5e8>)
 8002032:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002034:	4b6d      	ldr	r3, [pc, #436]	@ (80021ec <lcd_init+0x5e4>)
 8002036:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800203a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800203c:	4b6b      	ldr	r3, [pc, #428]	@ (80021ec <lcd_init+0x5e4>)
 800203e:	2280      	movs	r2, #128	@ 0x80
 8002040:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002042:	4b6a      	ldr	r3, [pc, #424]	@ (80021ec <lcd_init+0x5e4>)
 8002044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002048:	611a      	str	r2, [r3, #16]
}
 800204a:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 800204c:	f7fe fd14 	bl	8000a78 <lcd_rd_data>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	4b64      	ldr	r3, [pc, #400]	@ (80021e8 <lcd_init+0x5e0>)
 8002056:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002058:	f7fe fd0e 	bl	8000a78 <lcd_rd_data>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	4b61      	ldr	r3, [pc, #388]	@ (80021e8 <lcd_init+0x5e0>)
 8002062:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 8002064:	f7fe fd08 	bl	8000a78 <lcd_rd_data>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	4b5e      	ldr	r3, [pc, #376]	@ (80021e8 <lcd_init+0x5e0>)
 800206e:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8002070:	4b5d      	ldr	r3, [pc, #372]	@ (80021e8 <lcd_init+0x5e0>)
 8002072:	889b      	ldrh	r3, [r3, #4]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b5b      	ldr	r3, [pc, #364]	@ (80021e8 <lcd_init+0x5e0>)
 800207a:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 800207c:	f7fe fcfc 	bl	8000a78 <lcd_rd_data>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4b58      	ldr	r3, [pc, #352]	@ (80021e8 <lcd_init+0x5e0>)
 8002086:	889b      	ldrh	r3, [r3, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b56      	ldr	r3, [pc, #344]	@ (80021e8 <lcd_init+0x5e0>)
 800208e:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 8002090:	4b55      	ldr	r3, [pc, #340]	@ (80021e8 <lcd_init+0x5e0>)
 8002092:	889b      	ldrh	r3, [r3, #4]
 8002094:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002098:	4293      	cmp	r3, r2
 800209a:	f000 8115 	beq.w	80022c8 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 800209e:	2155      	movs	r1, #85	@ 0x55
 80020a0:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80020a4:	f7fe fc96 	bl	80009d4 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 80020a8:	21aa      	movs	r1, #170	@ 0xaa
 80020aa:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80020ae:	f7fe fc91 	bl	80009d4 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 80020b2:	2152      	movs	r1, #82	@ 0x52
 80020b4:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80020b8:	f7fe fc8c 	bl	80009d4 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 80020bc:	2108      	movs	r1, #8
 80020be:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80020c2:	f7fe fc87 	bl	80009d4 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 80020c6:	2101      	movs	r1, #1
 80020c8:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80020cc:	f7fe fc82 	bl	80009d4 <lcd_write_reg>
 80020d0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020d4:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 80020d8:	f44f 4245 	mov.w	r2, #50432	@ 0xc500
 80020dc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80020de:	4b43      	ldr	r3, [pc, #268]	@ (80021ec <lcd_init+0x5e4>)
 80020e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020e4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80020e6:	4b41      	ldr	r3, [pc, #260]	@ (80021ec <lcd_init+0x5e4>)
 80020e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020ec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80020ee:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020f2:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b3d      	ldr	r3, [pc, #244]	@ (80021f0 <lcd_init+0x5e8>)
 80020fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80020fe:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <lcd_init+0x5e4>)
 8002100:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002104:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002106:	4b39      	ldr	r3, [pc, #228]	@ (80021ec <lcd_init+0x5e4>)
 8002108:	2280      	movs	r2, #128	@ 0x80
 800210a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800210c:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <lcd_init+0x5e4>)
 800210e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002112:	611a      	str	r2, [r3, #16]
}
 8002114:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 8002116:	f7fe fcaf 	bl	8000a78 <lcd_rd_data>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	4b32      	ldr	r3, [pc, #200]	@ (80021e8 <lcd_init+0x5e0>)
 8002120:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8002122:	4b31      	ldr	r3, [pc, #196]	@ (80021e8 <lcd_init+0x5e0>)
 8002124:	889b      	ldrh	r3, [r3, #4]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <lcd_init+0x5e0>)
 800212c:	809a      	strh	r2, [r3, #4]
 800212e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002132:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002136:	f24c 5201 	movw	r2, #50433	@ 0xc501
 800213a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <lcd_init+0x5e4>)
 800213e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002142:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002144:	4b29      	ldr	r3, [pc, #164]	@ (80021ec <lcd_init+0x5e4>)
 8002146:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800214a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800214c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002150:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <lcd_init+0x5e8>)
 800215a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <lcd_init+0x5e4>)
 800215e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002162:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002164:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <lcd_init+0x5e4>)
 8002166:	2280      	movs	r2, #128	@ 0x80
 8002168:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <lcd_init+0x5e4>)
 800216c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002170:	611a      	str	r2, [r3, #16]
}
 8002172:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 8002174:	f7fe fc80 	bl	8000a78 <lcd_rd_data>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <lcd_init+0x5e0>)
 800217e:	889b      	ldrh	r3, [r3, #4]
 8002180:	4313      	orrs	r3, r2
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <lcd_init+0x5e0>)
 8002186:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 8002188:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <lcd_init+0x5e0>)
 800218a:	889b      	ldrh	r3, [r3, #4]
 800218c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002190:	4293      	cmp	r3, r2
 8002192:	f000 8099 	beq.w	80022c8 <lcd_init+0x6c0>
 8002196:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800219a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800219e:	22d3      	movs	r2, #211	@ 0xd3
 80021a0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <lcd_init+0x5e4>)
 80021a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <lcd_init+0x5e4>)
 80021ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80021b2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021b6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <lcd_init+0x5e8>)
 80021c0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <lcd_init+0x5e4>)
 80021c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021c8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80021ca:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <lcd_init+0x5e4>)
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <lcd_init+0x5e4>)
 80021d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d6:	611a      	str	r2, [r3, #16]
}
 80021d8:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 80021da:	f7fe fc4d 	bl	8000a78 <lcd_rd_data>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b01      	ldr	r3, [pc, #4]	@ (80021e8 <lcd_init+0x5e0>)
 80021e4:	809a      	strh	r2, [r3, #4]
 80021e6:	e005      	b.n	80021f4 <lcd_init+0x5ec>
 80021e8:	2000002c 	.word	0x2000002c
 80021ec:	40011000 	.word	0x40011000
 80021f0:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 80021f4:	f7fe fc40 	bl	8000a78 <lcd_rd_data>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4bb2      	ldr	r3, [pc, #712]	@ (80024c8 <lcd_init+0x8c0>)
 80021fe:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 8002200:	f7fe fc3a 	bl	8000a78 <lcd_rd_data>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	4baf      	ldr	r3, [pc, #700]	@ (80024c8 <lcd_init+0x8c0>)
 800220a:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 800220c:	4bae      	ldr	r3, [pc, #696]	@ (80024c8 <lcd_init+0x8c0>)
 800220e:	889b      	ldrh	r3, [r3, #4]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	b29a      	uxth	r2, r3
 8002214:	4bac      	ldr	r3, [pc, #688]	@ (80024c8 <lcd_init+0x8c0>)
 8002216:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002218:	f7fe fc2e 	bl	8000a78 <lcd_rd_data>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	4ba9      	ldr	r3, [pc, #676]	@ (80024c8 <lcd_init+0x8c0>)
 8002222:	889b      	ldrh	r3, [r3, #4]
 8002224:	4313      	orrs	r3, r2
 8002226:	b29a      	uxth	r2, r3
 8002228:	4ba7      	ldr	r3, [pc, #668]	@ (80024c8 <lcd_init+0x8c0>)
 800222a:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 800222c:	4ba6      	ldr	r3, [pc, #664]	@ (80024c8 <lcd_init+0x8c0>)
 800222e:	889b      	ldrh	r3, [r3, #4]
 8002230:	f649 0206 	movw	r2, #38918	@ 0x9806
 8002234:	4293      	cmp	r3, r2
 8002236:	d047      	beq.n	80022c8 <lcd_init+0x6c0>
 8002238:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800223c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002240:	22a1      	movs	r2, #161	@ 0xa1
 8002242:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002244:	4ba1      	ldr	r3, [pc, #644]	@ (80024cc <lcd_init+0x8c4>)
 8002246:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800224a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800224c:	4b9f      	ldr	r3, [pc, #636]	@ (80024cc <lcd_init+0x8c4>)
 800224e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002252:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002254:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002258:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b9b      	ldr	r3, [pc, #620]	@ (80024d0 <lcd_init+0x8c8>)
 8002262:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002264:	4b99      	ldr	r3, [pc, #612]	@ (80024cc <lcd_init+0x8c4>)
 8002266:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800226a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800226c:	4b97      	ldr	r3, [pc, #604]	@ (80024cc <lcd_init+0x8c4>)
 800226e:	2280      	movs	r2, #128	@ 0x80
 8002270:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002272:	4b96      	ldr	r3, [pc, #600]	@ (80024cc <lcd_init+0x8c4>)
 8002274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002278:	611a      	str	r2, [r3, #16]
}
 800227a:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 800227c:	f7fe fbfc 	bl	8000a78 <lcd_rd_data>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	4b90      	ldr	r3, [pc, #576]	@ (80024c8 <lcd_init+0x8c0>)
 8002286:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 8002288:	f7fe fbf6 	bl	8000a78 <lcd_rd_data>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	4b8d      	ldr	r3, [pc, #564]	@ (80024c8 <lcd_init+0x8c0>)
 8002292:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8002294:	4b8c      	ldr	r3, [pc, #560]	@ (80024c8 <lcd_init+0x8c0>)
 8002296:	889b      	ldrh	r3, [r3, #4]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b8a      	ldr	r3, [pc, #552]	@ (80024c8 <lcd_init+0x8c0>)
 800229e:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 80022a0:	f7fe fbea 	bl	8000a78 <lcd_rd_data>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b87      	ldr	r3, [pc, #540]	@ (80024c8 <lcd_init+0x8c0>)
 80022aa:	889b      	ldrh	r3, [r3, #4]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b85      	ldr	r3, [pc, #532]	@ (80024c8 <lcd_init+0x8c0>)
 80022b2:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 80022b4:	4b84      	ldr	r3, [pc, #528]	@ (80024c8 <lcd_init+0x8c0>)
 80022b6:	889b      	ldrh	r3, [r3, #4]
 80022b8:	f245 7261 	movw	r2, #22369	@ 0x5761
 80022bc:	4293      	cmp	r3, r2
 80022be:	d103      	bne.n	80022c8 <lcd_init+0x6c0>
 80022c0:	4b81      	ldr	r3, [pc, #516]	@ (80024c8 <lcd_init+0x8c0>)
 80022c2:	f641 1263 	movw	r2, #6499	@ 0x1963
 80022c6:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 80022c8:	4b7f      	ldr	r3, [pc, #508]	@ (80024c8 <lcd_init+0x8c0>)
 80022ca:	889b      	ldrh	r3, [r3, #4]
 80022cc:	f247 7289 	movw	r2, #30601	@ 0x7789
 80022d0:	4293      	cmp	r3, r2
 80022d2:	f040 82f3 	bne.w	80028bc <lcd_init+0xcb4>
 80022d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022de:	2211      	movs	r2, #17
 80022e0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80022e2:	4b7a      	ldr	r3, [pc, #488]	@ (80024cc <lcd_init+0x8c4>)
 80022e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80022ea:	4b78      	ldr	r3, [pc, #480]	@ (80024cc <lcd_init+0x8c4>)
 80022ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80022f2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b74      	ldr	r3, [pc, #464]	@ (80024d0 <lcd_init+0x8c8>)
 8002300:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002302:	4b72      	ldr	r3, [pc, #456]	@ (80024cc <lcd_init+0x8c4>)
 8002304:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002308:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800230a:	4b70      	ldr	r3, [pc, #448]	@ (80024cc <lcd_init+0x8c4>)
 800230c:	2280      	movs	r2, #128	@ 0x80
 800230e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002310:	4b6e      	ldr	r3, [pc, #440]	@ (80024cc <lcd_init+0x8c4>)
 8002312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002316:	611a      	str	r2, [r3, #16]
}
 8002318:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800231a:	2078      	movs	r0, #120	@ 0x78
 800231c:	f004 fffe 	bl	800731c <HAL_Delay>
 8002320:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002324:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002328:	2236      	movs	r2, #54	@ 0x36
 800232a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800232c:	4b67      	ldr	r3, [pc, #412]	@ (80024cc <lcd_init+0x8c4>)
 800232e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002332:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002334:	4b65      	ldr	r3, [pc, #404]	@ (80024cc <lcd_init+0x8c4>)
 8002336:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800233a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800233c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002340:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b61      	ldr	r3, [pc, #388]	@ (80024d0 <lcd_init+0x8c8>)
 800234a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800234c:	4b5f      	ldr	r3, [pc, #380]	@ (80024cc <lcd_init+0x8c4>)
 800234e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002352:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002354:	4b5d      	ldr	r3, [pc, #372]	@ (80024cc <lcd_init+0x8c4>)
 8002356:	2280      	movs	r2, #128	@ 0x80
 8002358:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800235a:	4b5c      	ldr	r3, [pc, #368]	@ (80024cc <lcd_init+0x8c4>)
 800235c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002360:	611a      	str	r2, [r3, #16]
}
 8002362:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 8002364:	2000      	movs	r0, #0
 8002366:	f7fe fb11 	bl	800098c <lcd_wr_xdata>
 800236a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800236e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002372:	223a      	movs	r2, #58	@ 0x3a
 8002374:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002376:	4b55      	ldr	r3, [pc, #340]	@ (80024cc <lcd_init+0x8c4>)
 8002378:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800237c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800237e:	4b53      	ldr	r3, [pc, #332]	@ (80024cc <lcd_init+0x8c4>)
 8002380:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002384:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002386:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800238a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b4f      	ldr	r3, [pc, #316]	@ (80024d0 <lcd_init+0x8c8>)
 8002394:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002396:	4b4d      	ldr	r3, [pc, #308]	@ (80024cc <lcd_init+0x8c4>)
 8002398:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800239c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800239e:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <lcd_init+0x8c4>)
 80023a0:	2280      	movs	r2, #128	@ 0x80
 80023a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023a4:	4b49      	ldr	r3, [pc, #292]	@ (80024cc <lcd_init+0x8c4>)
 80023a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023aa:	611a      	str	r2, [r3, #16]
}
 80023ac:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 80023ae:	2005      	movs	r0, #5
 80023b0:	f7fe faec 	bl	800098c <lcd_wr_xdata>
 80023b4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023b8:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80023bc:	22b2      	movs	r2, #178	@ 0xb2
 80023be:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80023c0:	4b42      	ldr	r3, [pc, #264]	@ (80024cc <lcd_init+0x8c4>)
 80023c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023c6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80023c8:	4b40      	ldr	r3, [pc, #256]	@ (80024cc <lcd_init+0x8c4>)
 80023ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80023d0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023d4:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	4b3c      	ldr	r3, [pc, #240]	@ (80024d0 <lcd_init+0x8c8>)
 80023de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80023e0:	4b3a      	ldr	r3, [pc, #232]	@ (80024cc <lcd_init+0x8c4>)
 80023e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80023e8:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <lcd_init+0x8c4>)
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023ee:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <lcd_init+0x8c4>)
 80023f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023f4:	611a      	str	r2, [r3, #16]
}
 80023f6:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 80023f8:	200c      	movs	r0, #12
 80023fa:	f7fe fac7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 80023fe:	200c      	movs	r0, #12
 8002400:	f7fe fac4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002404:	2000      	movs	r0, #0
 8002406:	f7fe fac1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800240a:	2033      	movs	r0, #51	@ 0x33
 800240c:	f7fe fabe 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002410:	2033      	movs	r0, #51	@ 0x33
 8002412:	f7fe fabb 	bl	800098c <lcd_wr_xdata>
 8002416:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800241a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800241e:	22b7      	movs	r2, #183	@ 0xb7
 8002420:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002422:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <lcd_init+0x8c4>)
 8002424:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002428:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800242a:	4b28      	ldr	r3, [pc, #160]	@ (80024cc <lcd_init+0x8c4>)
 800242c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002430:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002432:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002436:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b29a      	uxth	r2, r3
 800243e:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <lcd_init+0x8c8>)
 8002440:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002442:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <lcd_init+0x8c4>)
 8002444:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002448:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800244a:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <lcd_init+0x8c4>)
 800244c:	2280      	movs	r2, #128	@ 0x80
 800244e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002450:	4b1e      	ldr	r3, [pc, #120]	@ (80024cc <lcd_init+0x8c4>)
 8002452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002456:	611a      	str	r2, [r3, #16]
}
 8002458:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 800245a:	2035      	movs	r0, #53	@ 0x35
 800245c:	f7fe fa96 	bl	800098c <lcd_wr_xdata>
 8002460:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002464:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002468:	22bb      	movs	r2, #187	@ 0xbb
 800246a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800246c:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <lcd_init+0x8c4>)
 800246e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002472:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002474:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <lcd_init+0x8c4>)
 8002476:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800247a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800247c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002480:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29a      	uxth	r2, r3
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <lcd_init+0x8c8>)
 800248a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800248c:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <lcd_init+0x8c4>)
 800248e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002492:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002494:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <lcd_init+0x8c4>)
 8002496:	2280      	movs	r2, #128	@ 0x80
 8002498:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800249a:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <lcd_init+0x8c4>)
 800249c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024a0:	611a      	str	r2, [r3, #16]
}
 80024a2:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 80024a4:	2032      	movs	r0, #50	@ 0x32
 80024a6:	f7fe fa71 	bl	800098c <lcd_wr_xdata>
 80024aa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024b2:	22c0      	movs	r2, #192	@ 0xc0
 80024b4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <lcd_init+0x8c4>)
 80024b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024be:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <lcd_init+0x8c4>)
 80024c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	e005      	b.n	80024d4 <lcd_init+0x8cc>
 80024c8:	2000002c 	.word	0x2000002c
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80024d4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4bbf      	ldr	r3, [pc, #764]	@ (80027e0 <lcd_init+0xbd8>)
 80024e2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80024e4:	4bbf      	ldr	r3, [pc, #764]	@ (80027e4 <lcd_init+0xbdc>)
 80024e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80024ec:	4bbd      	ldr	r3, [pc, #756]	@ (80027e4 <lcd_init+0xbdc>)
 80024ee:	2280      	movs	r2, #128	@ 0x80
 80024f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80024f2:	4bbc      	ldr	r3, [pc, #752]	@ (80027e4 <lcd_init+0xbdc>)
 80024f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f8:	611a      	str	r2, [r3, #16]
}
 80024fa:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 80024fc:	200c      	movs	r0, #12
 80024fe:	f7fe fa45 	bl	800098c <lcd_wr_xdata>
 8002502:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002506:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800250a:	22c2      	movs	r2, #194	@ 0xc2
 800250c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800250e:	4bb5      	ldr	r3, [pc, #724]	@ (80027e4 <lcd_init+0xbdc>)
 8002510:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002514:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002516:	4bb3      	ldr	r3, [pc, #716]	@ (80027e4 <lcd_init+0xbdc>)
 8002518:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800251c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800251e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002522:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29a      	uxth	r2, r3
 800252a:	4bad      	ldr	r3, [pc, #692]	@ (80027e0 <lcd_init+0xbd8>)
 800252c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800252e:	4bad      	ldr	r3, [pc, #692]	@ (80027e4 <lcd_init+0xbdc>)
 8002530:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002534:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002536:	4bab      	ldr	r3, [pc, #684]	@ (80027e4 <lcd_init+0xbdc>)
 8002538:	2280      	movs	r2, #128	@ 0x80
 800253a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800253c:	4ba9      	ldr	r3, [pc, #676]	@ (80027e4 <lcd_init+0xbdc>)
 800253e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002542:	611a      	str	r2, [r3, #16]
}
 8002544:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 8002546:	2001      	movs	r0, #1
 8002548:	f7fe fa20 	bl	800098c <lcd_wr_xdata>
 800254c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002550:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002554:	22c3      	movs	r2, #195	@ 0xc3
 8002556:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002558:	4ba2      	ldr	r3, [pc, #648]	@ (80027e4 <lcd_init+0xbdc>)
 800255a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800255e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002560:	4ba0      	ldr	r3, [pc, #640]	@ (80027e4 <lcd_init+0xbdc>)
 8002562:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002566:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002568:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800256c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29a      	uxth	r2, r3
 8002574:	4b9a      	ldr	r3, [pc, #616]	@ (80027e0 <lcd_init+0xbd8>)
 8002576:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002578:	4b9a      	ldr	r3, [pc, #616]	@ (80027e4 <lcd_init+0xbdc>)
 800257a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800257e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002580:	4b98      	ldr	r3, [pc, #608]	@ (80027e4 <lcd_init+0xbdc>)
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002586:	4b97      	ldr	r3, [pc, #604]	@ (80027e4 <lcd_init+0xbdc>)
 8002588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800258c:	611a      	str	r2, [r3, #16]
}
 800258e:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 8002590:	2010      	movs	r0, #16
 8002592:	f7fe f9fb 	bl	800098c <lcd_wr_xdata>
 8002596:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800259a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800259e:	22c4      	movs	r2, #196	@ 0xc4
 80025a0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80025a2:	4b90      	ldr	r3, [pc, #576]	@ (80027e4 <lcd_init+0xbdc>)
 80025a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80025aa:	4b8e      	ldr	r3, [pc, #568]	@ (80027e4 <lcd_init+0xbdc>)
 80025ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80025b2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025b6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <lcd_init+0xbd8>)
 80025c0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025c2:	4b88      	ldr	r3, [pc, #544]	@ (80027e4 <lcd_init+0xbdc>)
 80025c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025c8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80025ca:	4b86      	ldr	r3, [pc, #536]	@ (80027e4 <lcd_init+0xbdc>)
 80025cc:	2280      	movs	r2, #128	@ 0x80
 80025ce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80025d0:	4b84      	ldr	r3, [pc, #528]	@ (80027e4 <lcd_init+0xbdc>)
 80025d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025d6:	611a      	str	r2, [r3, #16]
}
 80025d8:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 80025da:	2020      	movs	r0, #32
 80025dc:	f7fe f9d6 	bl	800098c <lcd_wr_xdata>
 80025e0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025e8:	22c6      	movs	r2, #198	@ 0xc6
 80025ea:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80025ec:	4b7d      	ldr	r3, [pc, #500]	@ (80027e4 <lcd_init+0xbdc>)
 80025ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80025f4:	4b7b      	ldr	r3, [pc, #492]	@ (80027e4 <lcd_init+0xbdc>)
 80025f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80025fc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002600:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b75      	ldr	r3, [pc, #468]	@ (80027e0 <lcd_init+0xbd8>)
 800260a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800260c:	4b75      	ldr	r3, [pc, #468]	@ (80027e4 <lcd_init+0xbdc>)
 800260e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002612:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002614:	4b73      	ldr	r3, [pc, #460]	@ (80027e4 <lcd_init+0xbdc>)
 8002616:	2280      	movs	r2, #128	@ 0x80
 8002618:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800261a:	4b72      	ldr	r3, [pc, #456]	@ (80027e4 <lcd_init+0xbdc>)
 800261c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002620:	611a      	str	r2, [r3, #16]
}
 8002622:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 8002624:	200f      	movs	r0, #15
 8002626:	f7fe f9b1 	bl	800098c <lcd_wr_xdata>
 800262a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800262e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8002632:	22d0      	movs	r2, #208	@ 0xd0
 8002634:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002636:	4b6b      	ldr	r3, [pc, #428]	@ (80027e4 <lcd_init+0xbdc>)
 8002638:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800263c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800263e:	4b69      	ldr	r3, [pc, #420]	@ (80027e4 <lcd_init+0xbdc>)
 8002640:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002644:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002646:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800264a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29a      	uxth	r2, r3
 8002652:	4b63      	ldr	r3, [pc, #396]	@ (80027e0 <lcd_init+0xbd8>)
 8002654:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002656:	4b63      	ldr	r3, [pc, #396]	@ (80027e4 <lcd_init+0xbdc>)
 8002658:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800265c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800265e:	4b61      	ldr	r3, [pc, #388]	@ (80027e4 <lcd_init+0xbdc>)
 8002660:	2280      	movs	r2, #128	@ 0x80
 8002662:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002664:	4b5f      	ldr	r3, [pc, #380]	@ (80027e4 <lcd_init+0xbdc>)
 8002666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266a:	611a      	str	r2, [r3, #16]
}
 800266c:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 800266e:	20a4      	movs	r0, #164	@ 0xa4
 8002670:	f7fe f98c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 8002674:	20a1      	movs	r0, #161	@ 0xa1
 8002676:	f7fe f989 	bl	800098c <lcd_wr_xdata>
 800267a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800267e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002682:	22e0      	movs	r2, #224	@ 0xe0
 8002684:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002686:	4b57      	ldr	r3, [pc, #348]	@ (80027e4 <lcd_init+0xbdc>)
 8002688:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800268c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800268e:	4b55      	ldr	r3, [pc, #340]	@ (80027e4 <lcd_init+0xbdc>)
 8002690:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002694:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002696:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800269a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	4b4f      	ldr	r3, [pc, #316]	@ (80027e0 <lcd_init+0xbd8>)
 80026a4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80026a6:	4b4f      	ldr	r3, [pc, #316]	@ (80027e4 <lcd_init+0xbdc>)
 80026a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026ac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80026ae:	4b4d      	ldr	r3, [pc, #308]	@ (80027e4 <lcd_init+0xbdc>)
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80026b4:	4b4b      	ldr	r3, [pc, #300]	@ (80027e4 <lcd_init+0xbdc>)
 80026b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ba:	611a      	str	r2, [r3, #16]
}
 80026bc:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 80026be:	20d0      	movs	r0, #208	@ 0xd0
 80026c0:	f7fe f964 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f961 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80026ca:	2002      	movs	r0, #2
 80026cc:	f7fe f95e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80026d0:	2007      	movs	r0, #7
 80026d2:	f7fe f95b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 80026d6:	200a      	movs	r0, #10
 80026d8:	f7fe f958 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80026dc:	2028      	movs	r0, #40	@ 0x28
 80026de:	f7fe f955 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80026e2:	2032      	movs	r0, #50	@ 0x32
 80026e4:	f7fe f952 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 80026e8:	2044      	movs	r0, #68	@ 0x44
 80026ea:	f7fe f94f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 80026ee:	2042      	movs	r0, #66	@ 0x42
 80026f0:	f7fe f94c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 80026f4:	2006      	movs	r0, #6
 80026f6:	f7fe f949 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 80026fa:	200e      	movs	r0, #14
 80026fc:	f7fe f946 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8002700:	2012      	movs	r0, #18
 8002702:	f7fe f943 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8002706:	2014      	movs	r0, #20
 8002708:	f7fe f940 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 800270c:	2017      	movs	r0, #23
 800270e:	f7fe f93d 	bl	800098c <lcd_wr_xdata>
 8002712:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002716:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800271a:	22e1      	movs	r2, #225	@ 0xe1
 800271c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800271e:	4b31      	ldr	r3, [pc, #196]	@ (80027e4 <lcd_init+0xbdc>)
 8002720:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002724:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002726:	4b2f      	ldr	r3, [pc, #188]	@ (80027e4 <lcd_init+0xbdc>)
 8002728:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800272c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800272e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002732:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b29      	ldr	r3, [pc, #164]	@ (80027e0 <lcd_init+0xbd8>)
 800273c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800273e:	4b29      	ldr	r3, [pc, #164]	@ (80027e4 <lcd_init+0xbdc>)
 8002740:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002744:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002746:	4b27      	ldr	r3, [pc, #156]	@ (80027e4 <lcd_init+0xbdc>)
 8002748:	2280      	movs	r2, #128	@ 0x80
 800274a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800274c:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <lcd_init+0xbdc>)
 800274e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002752:	611a      	str	r2, [r3, #16]
}
 8002754:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 8002756:	20d0      	movs	r0, #208	@ 0xd0
 8002758:	f7fe f918 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe f915 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002762:	2002      	movs	r0, #2
 8002764:	f7fe f912 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002768:	2007      	movs	r0, #7
 800276a:	f7fe f90f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 800276e:	200a      	movs	r0, #10
 8002770:	f7fe f90c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002774:	2028      	movs	r0, #40	@ 0x28
 8002776:	f7fe f909 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 800277a:	2031      	movs	r0, #49	@ 0x31
 800277c:	f7fe f906 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002780:	2054      	movs	r0, #84	@ 0x54
 8002782:	f7fe f903 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 8002786:	2047      	movs	r0, #71	@ 0x47
 8002788:	f7fe f900 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 800278c:	200e      	movs	r0, #14
 800278e:	f7fe f8fd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 8002792:	201c      	movs	r0, #28
 8002794:	f7fe f8fa 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002798:	2017      	movs	r0, #23
 800279a:	f7fe f8f7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 800279e:	201b      	movs	r0, #27
 80027a0:	f7fe f8f4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 80027a4:	201e      	movs	r0, #30
 80027a6:	f7fe f8f1 	bl	800098c <lcd_wr_xdata>
 80027aa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027b2:	222a      	movs	r2, #42	@ 0x2a
 80027b4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <lcd_init+0xbdc>)
 80027b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80027be:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <lcd_init+0xbdc>)
 80027c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80027c6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <lcd_init+0xbd8>)
 80027d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80027d6:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <lcd_init+0xbdc>)
 80027d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027dc:	611a      	str	r2, [r3, #16]
 80027de:	e003      	b.n	80027e8 <lcd_init+0xbe0>
 80027e0:	40010c00 	.word	0x40010c00
 80027e4:	40011000 	.word	0x40011000
    LCD_WR(1);
 80027e8:	4b32      	ldr	r3, [pc, #200]	@ (80028b4 <lcd_init+0xcac>)
 80027ea:	2280      	movs	r2, #128	@ 0x80
 80027ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027ee:	4b31      	ldr	r3, [pc, #196]	@ (80028b4 <lcd_init+0xcac>)
 80027f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f4:	611a      	str	r2, [r3, #16]
}
 80027f6:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe f8c7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe f8c4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe f8c1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 800280a:	20ef      	movs	r0, #239	@ 0xef
 800280c:	f7fe f8be 	bl	800098c <lcd_wr_xdata>
 8002810:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002814:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002818:	222b      	movs	r2, #43	@ 0x2b
 800281a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800281c:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <lcd_init+0xcac>)
 800281e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002822:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002824:	4b23      	ldr	r3, [pc, #140]	@ (80028b4 <lcd_init+0xcac>)
 8002826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800282a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800282c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002830:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b1f      	ldr	r3, [pc, #124]	@ (80028b8 <lcd_init+0xcb0>)
 800283a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <lcd_init+0xcac>)
 800283e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002842:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002844:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <lcd_init+0xcac>)
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800284a:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <lcd_init+0xcac>)
 800284c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002850:	611a      	str	r2, [r3, #16]
}
 8002852:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe f899 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe f896 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002860:	2001      	movs	r0, #1
 8002862:	f7fe f893 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002866:	203f      	movs	r0, #63	@ 0x3f
 8002868:	f7fe f890 	bl	800098c <lcd_wr_xdata>
 800286c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002870:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002874:	2229      	movs	r2, #41	@ 0x29
 8002876:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002878:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <lcd_init+0xcac>)
 800287a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800287e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <lcd_init+0xcac>)
 8002882:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002886:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002888:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800288c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29a      	uxth	r2, r3
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <lcd_init+0xcb0>)
 8002896:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <lcd_init+0xcac>)
 800289a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800289e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028a0:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <lcd_init+0xcac>)
 80028a2:	2280      	movs	r2, #128	@ 0x80
 80028a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028a6:	4b03      	ldr	r3, [pc, #12]	@ (80028b4 <lcd_init+0xcac>)
 80028a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ac:	611a      	str	r2, [r3, #16]
}
 80028ae:	f004 b8f4 	b.w	8006a9a <lcd_init+0x4e92>
 80028b2:	bf00      	nop
 80028b4:	40011000 	.word	0x40011000
 80028b8:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 80028bc:	4bb9      	ldr	r3, [pc, #740]	@ (8002ba4 <lcd_init+0xf9c>)
 80028be:	889b      	ldrh	r3, [r3, #4]
 80028c0:	f249 3241 	movw	r2, #37697	@ 0x9341
 80028c4:	4293      	cmp	r3, r2
 80028c6:	f040 83a1 	bne.w	800300c <lcd_init+0x1404>
 80028ca:	23cf      	movs	r3, #207	@ 0xcf
 80028cc:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80028d0:	4bb5      	ldr	r3, [pc, #724]	@ (8002ba8 <lcd_init+0xfa0>)
 80028d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80028d8:	4bb3      	ldr	r3, [pc, #716]	@ (8002ba8 <lcd_init+0xfa0>)
 80028da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80028e0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	4bb1      	ldr	r3, [pc, #708]	@ (8002bac <lcd_init+0xfa4>)
 80028e8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028ea:	4baf      	ldr	r3, [pc, #700]	@ (8002ba8 <lcd_init+0xfa0>)
 80028ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028f0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028f2:	4bad      	ldr	r3, [pc, #692]	@ (8002ba8 <lcd_init+0xfa0>)
 80028f4:	2280      	movs	r2, #128	@ 0x80
 80028f6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028f8:	4bab      	ldr	r3, [pc, #684]	@ (8002ba8 <lcd_init+0xfa0>)
 80028fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028fe:	611a      	str	r2, [r3, #16]
}
 8002900:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe f842 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 8002908:	20c1      	movs	r0, #193	@ 0xc1
 800290a:	f7fe f83f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 800290e:	2030      	movs	r0, #48	@ 0x30
 8002910:	f7fe f83c 	bl	800098c <lcd_wr_xdata>
 8002914:	23ed      	movs	r3, #237	@ 0xed
 8002916:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800291a:	4ba3      	ldr	r3, [pc, #652]	@ (8002ba8 <lcd_init+0xfa0>)
 800291c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002920:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002922:	4ba1      	ldr	r3, [pc, #644]	@ (8002ba8 <lcd_init+0xfa0>)
 8002924:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002928:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800292a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b9e      	ldr	r3, [pc, #632]	@ (8002bac <lcd_init+0xfa4>)
 8002932:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002934:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba8 <lcd_init+0xfa0>)
 8002936:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800293a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800293c:	4b9a      	ldr	r3, [pc, #616]	@ (8002ba8 <lcd_init+0xfa0>)
 800293e:	2280      	movs	r2, #128	@ 0x80
 8002940:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002942:	4b99      	ldr	r3, [pc, #612]	@ (8002ba8 <lcd_init+0xfa0>)
 8002944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002948:	611a      	str	r2, [r3, #16]
}
 800294a:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 800294c:	2064      	movs	r0, #100	@ 0x64
 800294e:	f7fe f81d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8002952:	2003      	movs	r0, #3
 8002954:	f7fe f81a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 8002958:	2012      	movs	r0, #18
 800295a:	f7fe f817 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 800295e:	2081      	movs	r0, #129	@ 0x81
 8002960:	f7fe f814 	bl	800098c <lcd_wr_xdata>
 8002964:	23e8      	movs	r3, #232	@ 0xe8
 8002966:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800296a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba8 <lcd_init+0xfa0>)
 800296c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002970:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002972:	4b8d      	ldr	r3, [pc, #564]	@ (8002ba8 <lcd_init+0xfa0>)
 8002974:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002978:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800297a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800297e:	b29a      	uxth	r2, r3
 8002980:	4b8a      	ldr	r3, [pc, #552]	@ (8002bac <lcd_init+0xfa4>)
 8002982:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002984:	4b88      	ldr	r3, [pc, #544]	@ (8002ba8 <lcd_init+0xfa0>)
 8002986:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800298a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800298c:	4b86      	ldr	r3, [pc, #536]	@ (8002ba8 <lcd_init+0xfa0>)
 800298e:	2280      	movs	r2, #128	@ 0x80
 8002990:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002992:	4b85      	ldr	r3, [pc, #532]	@ (8002ba8 <lcd_init+0xfa0>)
 8002994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002998:	611a      	str	r2, [r3, #16]
}
 800299a:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 800299c:	2085      	movs	r0, #133	@ 0x85
 800299e:	f7fd fff5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80029a2:	2010      	movs	r0, #16
 80029a4:	f7fd fff2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 80029a8:	207a      	movs	r0, #122	@ 0x7a
 80029aa:	f7fd ffef 	bl	800098c <lcd_wr_xdata>
 80029ae:	23cb      	movs	r3, #203	@ 0xcb
 80029b0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029b4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba8 <lcd_init+0xfa0>)
 80029b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029ba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029bc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba8 <lcd_init+0xfa0>)
 80029be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029c2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029c4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	4b78      	ldr	r3, [pc, #480]	@ (8002bac <lcd_init+0xfa4>)
 80029cc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029ce:	4b76      	ldr	r3, [pc, #472]	@ (8002ba8 <lcd_init+0xfa0>)
 80029d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029d4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029d6:	4b74      	ldr	r3, [pc, #464]	@ (8002ba8 <lcd_init+0xfa0>)
 80029d8:	2280      	movs	r2, #128	@ 0x80
 80029da:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029dc:	4b72      	ldr	r3, [pc, #456]	@ (8002ba8 <lcd_init+0xfa0>)
 80029de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e2:	611a      	str	r2, [r3, #16]
}
 80029e4:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 80029e6:	2039      	movs	r0, #57	@ 0x39
 80029e8:	f7fd ffd0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80029ec:	202c      	movs	r0, #44	@ 0x2c
 80029ee:	f7fd ffcd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fd ffca 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 80029f8:	2034      	movs	r0, #52	@ 0x34
 80029fa:	f7fd ffc7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80029fe:	2002      	movs	r0, #2
 8002a00:	f7fd ffc4 	bl	800098c <lcd_wr_xdata>
 8002a04:	23f7      	movs	r3, #247	@ 0xf7
 8002a06:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a10:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a12:	4b65      	ldr	r3, [pc, #404]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a18:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a1a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b62      	ldr	r3, [pc, #392]	@ (8002bac <lcd_init+0xfa4>)
 8002a22:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a24:	4b60      	ldr	r3, [pc, #384]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a26:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a2a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a2e:	2280      	movs	r2, #128	@ 0x80
 8002a30:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a32:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a38:	611a      	str	r2, [r3, #16]
}
 8002a3a:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 8002a3c:	2020      	movs	r0, #32
 8002a3e:	f7fd ffa5 	bl	800098c <lcd_wr_xdata>
 8002a42:	23ea      	movs	r3, #234	@ 0xea
 8002a44:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a48:	4b57      	ldr	r3, [pc, #348]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a4e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a50:	4b55      	ldr	r3, [pc, #340]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a56:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a58:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	4b53      	ldr	r3, [pc, #332]	@ (8002bac <lcd_init+0xfa4>)
 8002a60:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a62:	4b51      	ldr	r3, [pc, #324]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a68:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a6c:	2280      	movs	r2, #128	@ 0x80
 8002a6e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a70:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a76:	611a      	str	r2, [r3, #16]
}
 8002a78:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fd ff86 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fd ff83 	bl	800098c <lcd_wr_xdata>
 8002a86:	23c0      	movs	r3, #192	@ 0xc0
 8002a88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a92:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a94:	4b44      	ldr	r3, [pc, #272]	@ (8002ba8 <lcd_init+0xfa0>)
 8002a96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a9a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	4b42      	ldr	r3, [pc, #264]	@ (8002bac <lcd_init+0xfa4>)
 8002aa4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002aa6:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <lcd_init+0xfa0>)
 8002aa8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002aac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002aae:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba8 <lcd_init+0xfa0>)
 8002ab0:	2280      	movs	r2, #128	@ 0x80
 8002ab2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba8 <lcd_init+0xfa0>)
 8002ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aba:	611a      	str	r2, [r3, #16]
}
 8002abc:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 8002abe:	201b      	movs	r0, #27
 8002ac0:	f7fd ff64 	bl	800098c <lcd_wr_xdata>
 8002ac4:	23c1      	movs	r3, #193	@ 0xc1
 8002ac6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002aca:	4b37      	ldr	r3, [pc, #220]	@ (8002ba8 <lcd_init+0xfa0>)
 8002acc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ad0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ad2:	4b35      	ldr	r3, [pc, #212]	@ (8002ba8 <lcd_init+0xfa0>)
 8002ad4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ada:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b32      	ldr	r3, [pc, #200]	@ (8002bac <lcd_init+0xfa4>)
 8002ae2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ae4:	4b30      	ldr	r3, [pc, #192]	@ (8002ba8 <lcd_init+0xfa0>)
 8002ae6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002aea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002aec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba8 <lcd_init+0xfa0>)
 8002aee:	2280      	movs	r2, #128	@ 0x80
 8002af0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002af2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <lcd_init+0xfa0>)
 8002af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002af8:	611a      	str	r2, [r3, #16]
}
 8002afa:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 8002afc:	2001      	movs	r0, #1
 8002afe:	f7fd ff45 	bl	800098c <lcd_wr_xdata>
 8002b02:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b06:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b0a:	22c5      	movs	r2, #197	@ 0xc5
 8002b0c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b16:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b1e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <lcd_init+0xfa4>)
 8002b2c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b34:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b36:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b38:	2280      	movs	r2, #128	@ 0x80
 8002b3a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b42:	611a      	str	r2, [r3, #16]
}
 8002b44:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 8002b46:	2030      	movs	r0, #48	@ 0x30
 8002b48:	f7fd ff20 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 8002b4c:	2030      	movs	r0, #48	@ 0x30
 8002b4e:	f7fd ff1d 	bl	800098c <lcd_wr_xdata>
 8002b52:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b56:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002b5a:	22c7      	movs	r2, #199	@ 0xc7
 8002b5c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b64:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b6c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b6e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b72:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <lcd_init+0xfa4>)
 8002b7c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b80:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b84:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b86:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b88:	2280      	movs	r2, #128	@ 0x80
 8002b8a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <lcd_init+0xfa0>)
 8002b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b92:	611a      	str	r2, [r3, #16]
}
 8002b94:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 8002b96:	20b7      	movs	r0, #183	@ 0xb7
 8002b98:	f7fd fef8 	bl	800098c <lcd_wr_xdata>
 8002b9c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ba0:	e006      	b.n	8002bb0 <lcd_init+0xfa8>
 8002ba2:	bf00      	nop
 8002ba4:	2000002c 	.word	0x2000002c
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40010c00 	.word	0x40010c00
 8002bb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bb4:	2236      	movs	r2, #54	@ 0x36
 8002bb6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002bb8:	4bc1      	ldr	r3, [pc, #772]	@ (8002ec0 <lcd_init+0x12b8>)
 8002bba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bbe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bc0:	4bbf      	ldr	r3, [pc, #764]	@ (8002ec0 <lcd_init+0x12b8>)
 8002bc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bc6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bc8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4bbb      	ldr	r3, [pc, #748]	@ (8002ec4 <lcd_init+0x12bc>)
 8002bd6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002bd8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ec0 <lcd_init+0x12b8>)
 8002bda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002bde:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002be0:	4bb7      	ldr	r3, [pc, #732]	@ (8002ec0 <lcd_init+0x12b8>)
 8002be2:	2280      	movs	r2, #128	@ 0x80
 8002be4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002be6:	4bb6      	ldr	r3, [pc, #728]	@ (8002ec0 <lcd_init+0x12b8>)
 8002be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bec:	611a      	str	r2, [r3, #16]
}
 8002bee:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8002bf0:	2048      	movs	r0, #72	@ 0x48
 8002bf2:	f7fd fecb 	bl	800098c <lcd_wr_xdata>
 8002bf6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bfa:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002bfe:	223a      	movs	r2, #58	@ 0x3a
 8002c00:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c02:	4baf      	ldr	r3, [pc, #700]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c08:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c0a:	4bad      	ldr	r3, [pc, #692]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c10:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c12:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c16:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	4ba9      	ldr	r3, [pc, #676]	@ (8002ec4 <lcd_init+0x12bc>)
 8002c20:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c22:	4ba7      	ldr	r3, [pc, #668]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c28:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c2a:	4ba5      	ldr	r3, [pc, #660]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c30:	4ba3      	ldr	r3, [pc, #652]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c36:	611a      	str	r2, [r3, #16]
}
 8002c38:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8002c3a:	2055      	movs	r0, #85	@ 0x55
 8002c3c:	f7fd fea6 	bl	800098c <lcd_wr_xdata>
 8002c40:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c48:	22b1      	movs	r2, #177	@ 0xb1
 8002c4a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c4c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c52:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c54:	4b9a      	ldr	r3, [pc, #616]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c5a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c5c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4b96      	ldr	r3, [pc, #600]	@ (8002ec4 <lcd_init+0x12bc>)
 8002c6a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c6c:	4b94      	ldr	r3, [pc, #592]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c6e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c72:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c74:	4b92      	ldr	r3, [pc, #584]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c76:	2280      	movs	r2, #128	@ 0x80
 8002c78:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c7a:	4b91      	ldr	r3, [pc, #580]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c80:	611a      	str	r2, [r3, #16]
}
 8002c82:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fd fe81 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 8002c8a:	201a      	movs	r0, #26
 8002c8c:	f7fd fe7e 	bl	800098c <lcd_wr_xdata>
 8002c90:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c94:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002c98:	22b6      	movs	r2, #182	@ 0xb6
 8002c9a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c9c:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <lcd_init+0x12b8>)
 8002c9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ca2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ca4:	4b86      	ldr	r3, [pc, #536]	@ (8002ec0 <lcd_init+0x12b8>)
 8002ca6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002caa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002cac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002cb0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	4b82      	ldr	r3, [pc, #520]	@ (8002ec4 <lcd_init+0x12bc>)
 8002cba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cbc:	4b80      	ldr	r3, [pc, #512]	@ (8002ec0 <lcd_init+0x12b8>)
 8002cbe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cc2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ec0 <lcd_init+0x12b8>)
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cca:	4b7d      	ldr	r3, [pc, #500]	@ (8002ec0 <lcd_init+0x12b8>)
 8002ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd0:	611a      	str	r2, [r3, #16]
}
 8002cd2:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 8002cd4:	200a      	movs	r0, #10
 8002cd6:	f7fd fe59 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8002cda:	20a2      	movs	r0, #162	@ 0xa2
 8002cdc:	f7fd fe56 	bl	800098c <lcd_wr_xdata>
 8002ce0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ce4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ce8:	22f2      	movs	r2, #242	@ 0xf2
 8002cea:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002cec:	4b74      	ldr	r3, [pc, #464]	@ (8002ec0 <lcd_init+0x12b8>)
 8002cee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cf2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002cf4:	4b72      	ldr	r3, [pc, #456]	@ (8002ec0 <lcd_init+0x12b8>)
 8002cf6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cfa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002cfc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b6e      	ldr	r3, [pc, #440]	@ (8002ec4 <lcd_init+0x12bc>)
 8002d0a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d12:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d14:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d16:	2280      	movs	r2, #128	@ 0x80
 8002d18:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d1a:	4b69      	ldr	r3, [pc, #420]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d20:	611a      	str	r2, [r3, #16]
}
 8002d22:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd fe31 	bl	800098c <lcd_wr_xdata>
 8002d2a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d2e:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002d32:	2226      	movs	r2, #38	@ 0x26
 8002d34:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d36:	4b62      	ldr	r3, [pc, #392]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d3c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d3e:	4b60      	ldr	r3, [pc, #384]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d44:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d46:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d4a:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec4 <lcd_init+0x12bc>)
 8002d54:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d56:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d58:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d5c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d5e:	4b58      	ldr	r3, [pc, #352]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d60:	2280      	movs	r2, #128	@ 0x80
 8002d62:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d64:	4b56      	ldr	r3, [pc, #344]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6a:	611a      	str	r2, [r3, #16]
}
 8002d6c:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f7fd fe0c 	bl	800098c <lcd_wr_xdata>
 8002d74:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d7c:	22e0      	movs	r2, #224	@ 0xe0
 8002d7e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d80:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d86:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d88:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec0 <lcd_init+0x12b8>)
 8002d8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d8e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d90:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	4b49      	ldr	r3, [pc, #292]	@ (8002ec4 <lcd_init+0x12bc>)
 8002d9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002da0:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <lcd_init+0x12b8>)
 8002da2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002da6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002da8:	4b45      	ldr	r3, [pc, #276]	@ (8002ec0 <lcd_init+0x12b8>)
 8002daa:	2280      	movs	r2, #128	@ 0x80
 8002dac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002dae:	4b44      	ldr	r3, [pc, #272]	@ (8002ec0 <lcd_init+0x12b8>)
 8002db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db4:	611a      	str	r2, [r3, #16]
}
 8002db6:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 8002db8:	200f      	movs	r0, #15
 8002dba:	f7fd fde7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8002dbe:	202a      	movs	r0, #42	@ 0x2a
 8002dc0:	f7fd fde4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002dc4:	2028      	movs	r0, #40	@ 0x28
 8002dc6:	f7fd fde1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002dca:	2008      	movs	r0, #8
 8002dcc:	f7fd fdde 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8002dd0:	200e      	movs	r0, #14
 8002dd2:	f7fd fddb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002dd6:	2008      	movs	r0, #8
 8002dd8:	f7fd fdd8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002ddc:	2054      	movs	r0, #84	@ 0x54
 8002dde:	f7fd fdd5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 8002de2:	20a9      	movs	r0, #169	@ 0xa9
 8002de4:	f7fd fdd2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8002de8:	2043      	movs	r0, #67	@ 0x43
 8002dea:	f7fd fdcf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 8002dee:	200a      	movs	r0, #10
 8002df0:	f7fd fdcc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002df4:	200f      	movs	r0, #15
 8002df6:	f7fd fdc9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7fd fdc6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fd fdc3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fd fdc0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fd fdbd 	bl	800098c <lcd_wr_xdata>
 8002e12:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e16:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002e1a:	22e1      	movs	r2, #225	@ 0xe1
 8002e1c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e1e:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <lcd_init+0x12b8>)
 8002e20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e24:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e26:	4b26      	ldr	r3, [pc, #152]	@ (8002ec0 <lcd_init+0x12b8>)
 8002e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e2c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e2e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e32:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	4b22      	ldr	r3, [pc, #136]	@ (8002ec4 <lcd_init+0x12bc>)
 8002e3c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <lcd_init+0x12b8>)
 8002e40:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e44:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <lcd_init+0x12b8>)
 8002e48:	2280      	movs	r2, #128	@ 0x80
 8002e4a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec0 <lcd_init+0x12b8>)
 8002e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e52:	611a      	str	r2, [r3, #16]
}
 8002e54:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7fd fd98 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 8002e5c:	2015      	movs	r0, #21
 8002e5e:	f7fd fd95 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002e62:	2017      	movs	r0, #23
 8002e64:	f7fd fd92 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002e68:	2007      	movs	r0, #7
 8002e6a:	f7fd fd8f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 8002e6e:	2011      	movs	r0, #17
 8002e70:	f7fd fd8c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002e74:	2006      	movs	r0, #6
 8002e76:	f7fd fd89 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 8002e7a:	202b      	movs	r0, #43	@ 0x2b
 8002e7c:	f7fd fd86 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8002e80:	2056      	movs	r0, #86	@ 0x56
 8002e82:	f7fd fd83 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8002e86:	203c      	movs	r0, #60	@ 0x3c
 8002e88:	f7fd fd80 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8002e8c:	2005      	movs	r0, #5
 8002e8e:	f7fd fd7d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002e92:	2010      	movs	r0, #16
 8002e94:	f7fd fd7a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002e98:	200f      	movs	r0, #15
 8002e9a:	f7fd fd77 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002e9e:	203f      	movs	r0, #63	@ 0x3f
 8002ea0:	f7fd fd74 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002ea4:	203f      	movs	r0, #63	@ 0x3f
 8002ea6:	f7fd fd71 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002eaa:	200f      	movs	r0, #15
 8002eac:	f7fd fd6e 	bl	800098c <lcd_wr_xdata>
 8002eb0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002eb4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002eb8:	222b      	movs	r2, #43	@ 0x2b
 8002eba:	801a      	strh	r2, [r3, #0]
 8002ebc:	e004      	b.n	8002ec8 <lcd_init+0x12c0>
 8002ebe:	bf00      	nop
 8002ec0:	40011000 	.word	0x40011000
 8002ec4:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ec8:	4b4e      	ldr	r3, [pc, #312]	@ (8003004 <lcd_init+0x13fc>)
 8002eca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ece:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8003004 <lcd_init+0x13fc>)
 8002ed2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ed6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ed8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002edc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b48      	ldr	r3, [pc, #288]	@ (8003008 <lcd_init+0x1400>)
 8002ee6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ee8:	4b46      	ldr	r3, [pc, #280]	@ (8003004 <lcd_init+0x13fc>)
 8002eea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002eee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ef0:	4b44      	ldr	r3, [pc, #272]	@ (8003004 <lcd_init+0x13fc>)
 8002ef2:	2280      	movs	r2, #128	@ 0x80
 8002ef4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ef6:	4b43      	ldr	r3, [pc, #268]	@ (8003004 <lcd_init+0x13fc>)
 8002ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002efc:	611a      	str	r2, [r3, #16]
}
 8002efe:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fd fd43 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7fd fd40 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	f7fd fd3d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002f12:	203f      	movs	r0, #63	@ 0x3f
 8002f14:	f7fd fd3a 	bl	800098c <lcd_wr_xdata>
 8002f18:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f1c:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002f20:	222a      	movs	r2, #42	@ 0x2a
 8002f22:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f24:	4b37      	ldr	r3, [pc, #220]	@ (8003004 <lcd_init+0x13fc>)
 8002f26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f2a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f2c:	4b35      	ldr	r3, [pc, #212]	@ (8003004 <lcd_init+0x13fc>)
 8002f2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f32:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f34:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f38:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b31      	ldr	r3, [pc, #196]	@ (8003008 <lcd_init+0x1400>)
 8002f42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f44:	4b2f      	ldr	r3, [pc, #188]	@ (8003004 <lcd_init+0x13fc>)
 8002f46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003004 <lcd_init+0x13fc>)
 8002f4e:	2280      	movs	r2, #128	@ 0x80
 8002f50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f52:	4b2c      	ldr	r3, [pc, #176]	@ (8003004 <lcd_init+0x13fc>)
 8002f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f58:	611a      	str	r2, [r3, #16]
}
 8002f5a:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fd fd15 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7fd fd12 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fd0f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8002f6e:	20ef      	movs	r0, #239	@ 0xef
 8002f70:	f7fd fd0c 	bl	800098c <lcd_wr_xdata>
 8002f74:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f7c:	2211      	movs	r2, #17
 8002f7e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f80:	4b20      	ldr	r3, [pc, #128]	@ (8003004 <lcd_init+0x13fc>)
 8002f82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f86:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f88:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <lcd_init+0x13fc>)
 8002f8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f8e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f90:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <lcd_init+0x1400>)
 8002f9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <lcd_init+0x13fc>)
 8002fa2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fa6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fa8:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <lcd_init+0x13fc>)
 8002faa:	2280      	movs	r2, #128	@ 0x80
 8002fac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <lcd_init+0x13fc>)
 8002fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fb4:	611a      	str	r2, [r3, #16]
}
 8002fb6:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 8002fb8:	2078      	movs	r0, #120	@ 0x78
 8002fba:	f004 f9af 	bl	800731c <HAL_Delay>
 8002fbe:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fc2:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8002fc6:	2229      	movs	r2, #41	@ 0x29
 8002fc8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fca:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <lcd_init+0x13fc>)
 8002fcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fd0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <lcd_init+0x13fc>)
 8002fd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fd8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fda:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fde:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	4b08      	ldr	r3, [pc, #32]	@ (8003008 <lcd_init+0x1400>)
 8002fe8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <lcd_init+0x13fc>)
 8002fec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ff0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ff2:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <lcd_init+0x13fc>)
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ff8:	4b02      	ldr	r3, [pc, #8]	@ (8003004 <lcd_init+0x13fc>)
 8002ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ffe:	611a      	str	r2, [r3, #16]
}
 8003000:	f003 bd4b 	b.w	8006a9a <lcd_init+0x4e92>
 8003004:	40011000 	.word	0x40011000
 8003008:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 800300c:	4bbe      	ldr	r3, [pc, #760]	@ (8003308 <lcd_init+0x1700>)
 800300e:	889b      	ldrh	r3, [r3, #4]
 8003010:	f245 3210 	movw	r2, #21264	@ 0x5310
 8003014:	4293      	cmp	r3, r2
 8003016:	f041 846d 	bne.w	80048f4 <lcd_init+0x2cec>
 800301a:	23ed      	movs	r3, #237	@ 0xed
 800301c:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003020:	4bba      	ldr	r3, [pc, #744]	@ (800330c <lcd_init+0x1704>)
 8003022:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003026:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003028:	4bb8      	ldr	r3, [pc, #736]	@ (800330c <lcd_init+0x1704>)
 800302a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800302e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003030:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8003034:	b29a      	uxth	r2, r3
 8003036:	4bb6      	ldr	r3, [pc, #728]	@ (8003310 <lcd_init+0x1708>)
 8003038:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800303a:	4bb4      	ldr	r3, [pc, #720]	@ (800330c <lcd_init+0x1704>)
 800303c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003040:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003042:	4bb2      	ldr	r3, [pc, #712]	@ (800330c <lcd_init+0x1704>)
 8003044:	2280      	movs	r2, #128	@ 0x80
 8003046:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003048:	4bb0      	ldr	r3, [pc, #704]	@ (800330c <lcd_init+0x1704>)
 800304a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800304e:	611a      	str	r2, [r3, #16]
}
 8003050:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 8003052:	2001      	movs	r0, #1
 8003054:	f7fd fc9a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 8003058:	20fe      	movs	r0, #254	@ 0xfe
 800305a:	f7fd fc97 	bl	800098c <lcd_wr_xdata>
 800305e:	23ee      	movs	r3, #238	@ 0xee
 8003060:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003064:	4ba9      	ldr	r3, [pc, #676]	@ (800330c <lcd_init+0x1704>)
 8003066:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800306a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800306c:	4ba7      	ldr	r3, [pc, #668]	@ (800330c <lcd_init+0x1704>)
 800306e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003072:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003074:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8003078:	b29a      	uxth	r2, r3
 800307a:	4ba5      	ldr	r3, [pc, #660]	@ (8003310 <lcd_init+0x1708>)
 800307c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800307e:	4ba3      	ldr	r3, [pc, #652]	@ (800330c <lcd_init+0x1704>)
 8003080:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003084:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003086:	4ba1      	ldr	r3, [pc, #644]	@ (800330c <lcd_init+0x1704>)
 8003088:	2280      	movs	r2, #128	@ 0x80
 800308a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800308c:	4b9f      	ldr	r3, [pc, #636]	@ (800330c <lcd_init+0x1704>)
 800308e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003092:	611a      	str	r2, [r3, #16]
}
 8003094:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 8003096:	20de      	movs	r0, #222	@ 0xde
 8003098:	f7fd fc78 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 800309c:	2021      	movs	r0, #33	@ 0x21
 800309e:	f7fd fc75 	bl	800098c <lcd_wr_xdata>
 80030a2:	23f1      	movs	r3, #241	@ 0xf1
 80030a4:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030a8:	4b98      	ldr	r3, [pc, #608]	@ (800330c <lcd_init+0x1704>)
 80030aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030ae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030b0:	4b96      	ldr	r3, [pc, #600]	@ (800330c <lcd_init+0x1704>)
 80030b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030b6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030b8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80030bc:	b29a      	uxth	r2, r3
 80030be:	4b94      	ldr	r3, [pc, #592]	@ (8003310 <lcd_init+0x1708>)
 80030c0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030c2:	4b92      	ldr	r3, [pc, #584]	@ (800330c <lcd_init+0x1704>)
 80030c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030c8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030ca:	4b90      	ldr	r3, [pc, #576]	@ (800330c <lcd_init+0x1704>)
 80030cc:	2280      	movs	r2, #128	@ 0x80
 80030ce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030d0:	4b8e      	ldr	r3, [pc, #568]	@ (800330c <lcd_init+0x1704>)
 80030d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030d6:	611a      	str	r2, [r3, #16]
}
 80030d8:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 80030da:	2001      	movs	r0, #1
 80030dc:	f7fd fc56 	bl	800098c <lcd_wr_xdata>
 80030e0:	23df      	movs	r3, #223	@ 0xdf
 80030e2:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030e6:	4b89      	ldr	r3, [pc, #548]	@ (800330c <lcd_init+0x1704>)
 80030e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030ee:	4b87      	ldr	r3, [pc, #540]	@ (800330c <lcd_init+0x1704>)
 80030f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030f6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	4b84      	ldr	r3, [pc, #528]	@ (8003310 <lcd_init+0x1708>)
 80030fe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003100:	4b82      	ldr	r3, [pc, #520]	@ (800330c <lcd_init+0x1704>)
 8003102:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003106:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003108:	4b80      	ldr	r3, [pc, #512]	@ (800330c <lcd_init+0x1704>)
 800310a:	2280      	movs	r2, #128	@ 0x80
 800310c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800310e:	4b7f      	ldr	r3, [pc, #508]	@ (800330c <lcd_init+0x1704>)
 8003110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003114:	611a      	str	r2, [r3, #16]
}
 8003116:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003118:	2010      	movs	r0, #16
 800311a:	f7fd fc37 	bl	800098c <lcd_wr_xdata>
 800311e:	23c4      	movs	r3, #196	@ 0xc4
 8003120:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003124:	4b79      	ldr	r3, [pc, #484]	@ (800330c <lcd_init+0x1704>)
 8003126:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800312a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800312c:	4b77      	ldr	r3, [pc, #476]	@ (800330c <lcd_init+0x1704>)
 800312e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003132:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003134:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003138:	b29a      	uxth	r2, r3
 800313a:	4b75      	ldr	r3, [pc, #468]	@ (8003310 <lcd_init+0x1708>)
 800313c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800313e:	4b73      	ldr	r3, [pc, #460]	@ (800330c <lcd_init+0x1704>)
 8003140:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003144:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003146:	4b71      	ldr	r3, [pc, #452]	@ (800330c <lcd_init+0x1704>)
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800314c:	4b6f      	ldr	r3, [pc, #444]	@ (800330c <lcd_init+0x1704>)
 800314e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003152:	611a      	str	r2, [r3, #16]
}
 8003154:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 8003156:	208f      	movs	r0, #143	@ 0x8f
 8003158:	f7fd fc18 	bl	800098c <lcd_wr_xdata>
 800315c:	23c6      	movs	r3, #198	@ 0xc6
 800315e:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003162:	4b6a      	ldr	r3, [pc, #424]	@ (800330c <lcd_init+0x1704>)
 8003164:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003168:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800316a:	4b68      	ldr	r3, [pc, #416]	@ (800330c <lcd_init+0x1704>)
 800316c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003170:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003172:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8003176:	b29a      	uxth	r2, r3
 8003178:	4b65      	ldr	r3, [pc, #404]	@ (8003310 <lcd_init+0x1708>)
 800317a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800317c:	4b63      	ldr	r3, [pc, #396]	@ (800330c <lcd_init+0x1704>)
 800317e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003182:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003184:	4b61      	ldr	r3, [pc, #388]	@ (800330c <lcd_init+0x1704>)
 8003186:	2280      	movs	r2, #128	@ 0x80
 8003188:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800318a:	4b60      	ldr	r3, [pc, #384]	@ (800330c <lcd_init+0x1704>)
 800318c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003190:	611a      	str	r2, [r3, #16]
}
 8003192:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 8003194:	2000      	movs	r0, #0
 8003196:	f7fd fbf9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 800319a:	20e2      	movs	r0, #226	@ 0xe2
 800319c:	f7fd fbf6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80031a0:	20e2      	movs	r0, #226	@ 0xe2
 80031a2:	f7fd fbf3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80031a6:	20e2      	movs	r0, #226	@ 0xe2
 80031a8:	f7fd fbf0 	bl	800098c <lcd_wr_xdata>
 80031ac:	23bf      	movs	r3, #191	@ 0xbf
 80031ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031b2:	4b56      	ldr	r3, [pc, #344]	@ (800330c <lcd_init+0x1704>)
 80031b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031ba:	4b54      	ldr	r3, [pc, #336]	@ (800330c <lcd_init+0x1704>)
 80031bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	4b51      	ldr	r3, [pc, #324]	@ (8003310 <lcd_init+0x1708>)
 80031ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031cc:	4b4f      	ldr	r3, [pc, #316]	@ (800330c <lcd_init+0x1704>)
 80031ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80031d4:	4b4d      	ldr	r3, [pc, #308]	@ (800330c <lcd_init+0x1704>)
 80031d6:	2280      	movs	r2, #128	@ 0x80
 80031d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80031da:	4b4c      	ldr	r3, [pc, #304]	@ (800330c <lcd_init+0x1704>)
 80031dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031e0:	611a      	str	r2, [r3, #16]
}
 80031e2:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 80031e4:	20aa      	movs	r0, #170	@ 0xaa
 80031e6:	f7fd fbd1 	bl	800098c <lcd_wr_xdata>
 80031ea:	23b0      	movs	r3, #176	@ 0xb0
 80031ec:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031f0:	4b46      	ldr	r3, [pc, #280]	@ (800330c <lcd_init+0x1704>)
 80031f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031f8:	4b44      	ldr	r3, [pc, #272]	@ (800330c <lcd_init+0x1704>)
 80031fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003200:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8003204:	b29a      	uxth	r2, r3
 8003206:	4b42      	ldr	r3, [pc, #264]	@ (8003310 <lcd_init+0x1708>)
 8003208:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800320a:	4b40      	ldr	r3, [pc, #256]	@ (800330c <lcd_init+0x1704>)
 800320c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003210:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003212:	4b3e      	ldr	r3, [pc, #248]	@ (800330c <lcd_init+0x1704>)
 8003214:	2280      	movs	r2, #128	@ 0x80
 8003216:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003218:	4b3c      	ldr	r3, [pc, #240]	@ (800330c <lcd_init+0x1704>)
 800321a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321e:	611a      	str	r2, [r3, #16]
}
 8003220:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 8003222:	200d      	movs	r0, #13
 8003224:	f7fd fbb2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003228:	2000      	movs	r0, #0
 800322a:	f7fd fbaf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 800322e:	200d      	movs	r0, #13
 8003230:	f7fd fbac 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003234:	2000      	movs	r0, #0
 8003236:	f7fd fba9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 800323a:	2011      	movs	r0, #17
 800323c:	f7fd fba6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003240:	2000      	movs	r0, #0
 8003242:	f7fd fba3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8003246:	2019      	movs	r0, #25
 8003248:	f7fd fba0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800324c:	2000      	movs	r0, #0
 800324e:	f7fd fb9d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003252:	2021      	movs	r0, #33	@ 0x21
 8003254:	f7fd fb9a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003258:	2000      	movs	r0, #0
 800325a:	f7fd fb97 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 800325e:	202d      	movs	r0, #45	@ 0x2d
 8003260:	f7fd fb94 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003264:	2000      	movs	r0, #0
 8003266:	f7fd fb91 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 800326a:	203d      	movs	r0, #61	@ 0x3d
 800326c:	f7fd fb8e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd fb8b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003276:	205d      	movs	r0, #93	@ 0x5d
 8003278:	f7fd fb88 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800327c:	2000      	movs	r0, #0
 800327e:	f7fd fb85 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003282:	205d      	movs	r0, #93	@ 0x5d
 8003284:	f7fd fb82 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f7fd fb7f 	bl	800098c <lcd_wr_xdata>
 800328e:	23b1      	movs	r3, #177	@ 0xb1
 8003290:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003294:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <lcd_init+0x1704>)
 8003296:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800329a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800329c:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <lcd_init+0x1704>)
 800329e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032a4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	4b19      	ldr	r3, [pc, #100]	@ (8003310 <lcd_init+0x1708>)
 80032ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80032ae:	4b17      	ldr	r3, [pc, #92]	@ (800330c <lcd_init+0x1704>)
 80032b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <lcd_init+0x1704>)
 80032b8:	2280      	movs	r2, #128	@ 0x80
 80032ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80032bc:	4b13      	ldr	r3, [pc, #76]	@ (800330c <lcd_init+0x1704>)
 80032be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c2:	611a      	str	r2, [r3, #16]
}
 80032c4:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 80032c6:	2080      	movs	r0, #128	@ 0x80
 80032c8:	f7fd fb60 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fd fb5d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 80032d2:	208b      	movs	r0, #139	@ 0x8b
 80032d4:	f7fd fb5a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fd fb57 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 80032de:	2096      	movs	r0, #150	@ 0x96
 80032e0:	f7fd fb54 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7fd fb51 	bl	800098c <lcd_wr_xdata>
 80032ea:	23b2      	movs	r3, #178	@ 0xb2
 80032ec:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032f0:	4b06      	ldr	r3, [pc, #24]	@ (800330c <lcd_init+0x1704>)
 80032f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032f8:	4b04      	ldr	r3, [pc, #16]	@ (800330c <lcd_init+0x1704>)
 80032fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003300:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8003304:	b29a      	uxth	r2, r3
 8003306:	e005      	b.n	8003314 <lcd_init+0x170c>
 8003308:	2000002c 	.word	0x2000002c
 800330c:	40011000 	.word	0x40011000
 8003310:	40010c00 	.word	0x40010c00
 8003314:	4bd0      	ldr	r3, [pc, #832]	@ (8003658 <lcd_init+0x1a50>)
 8003316:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003318:	4bd0      	ldr	r3, [pc, #832]	@ (800365c <lcd_init+0x1a54>)
 800331a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800331e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003320:	4bce      	ldr	r3, [pc, #824]	@ (800365c <lcd_init+0x1a54>)
 8003322:	2280      	movs	r2, #128	@ 0x80
 8003324:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003326:	4bcd      	ldr	r3, [pc, #820]	@ (800365c <lcd_init+0x1a54>)
 8003328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800332c:	611a      	str	r2, [r3, #16]
}
 800332e:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fd fb2b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003336:	2000      	movs	r0, #0
 8003338:	f7fd fb28 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800333c:	2002      	movs	r0, #2
 800333e:	f7fd fb25 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003342:	2000      	movs	r0, #0
 8003344:	f7fd fb22 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003348:	2003      	movs	r0, #3
 800334a:	f7fd fb1f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800334e:	2000      	movs	r0, #0
 8003350:	f7fd fb1c 	bl	800098c <lcd_wr_xdata>
 8003354:	23b3      	movs	r3, #179	@ 0xb3
 8003356:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800335a:	4bc0      	ldr	r3, [pc, #768]	@ (800365c <lcd_init+0x1a54>)
 800335c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003360:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003362:	4bbe      	ldr	r3, [pc, #760]	@ (800365c <lcd_init+0x1a54>)
 8003364:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003368:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800336a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 800336e:	b29a      	uxth	r2, r3
 8003370:	4bb9      	ldr	r3, [pc, #740]	@ (8003658 <lcd_init+0x1a50>)
 8003372:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003374:	4bb9      	ldr	r3, [pc, #740]	@ (800365c <lcd_init+0x1a54>)
 8003376:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800337a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800337c:	4bb7      	ldr	r3, [pc, #732]	@ (800365c <lcd_init+0x1a54>)
 800337e:	2280      	movs	r2, #128	@ 0x80
 8003380:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003382:	4bb6      	ldr	r3, [pc, #728]	@ (800365c <lcd_init+0x1a54>)
 8003384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003388:	611a      	str	r2, [r3, #16]
}
 800338a:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 800338c:	2000      	movs	r0, #0
 800338e:	f7fd fafd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003392:	2000      	movs	r0, #0
 8003394:	f7fd fafa 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003398:	2000      	movs	r0, #0
 800339a:	f7fd faf7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800339e:	2000      	movs	r0, #0
 80033a0:	f7fd faf4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7fd faf1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7fd faee 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fd faeb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7fd fae8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033bc:	2000      	movs	r0, #0
 80033be:	f7fd fae5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fd fae2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033c8:	2000      	movs	r0, #0
 80033ca:	f7fd fadf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7fd fadc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7fd fad9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033da:	2000      	movs	r0, #0
 80033dc:	f7fd fad6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7fd fad3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7fd fad0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7fd facd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd faca 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033f8:	2000      	movs	r0, #0
 80033fa:	f7fd fac7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033fe:	2000      	movs	r0, #0
 8003400:	f7fd fac4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003404:	2000      	movs	r0, #0
 8003406:	f7fd fac1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800340a:	2000      	movs	r0, #0
 800340c:	f7fd fabe 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003410:	2000      	movs	r0, #0
 8003412:	f7fd fabb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003416:	2000      	movs	r0, #0
 8003418:	f7fd fab8 	bl	800098c <lcd_wr_xdata>
 800341c:	23b4      	movs	r3, #180	@ 0xb4
 800341e:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003422:	4b8e      	ldr	r3, [pc, #568]	@ (800365c <lcd_init+0x1a54>)
 8003424:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003428:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800342a:	4b8c      	ldr	r3, [pc, #560]	@ (800365c <lcd_init+0x1a54>)
 800342c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003430:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003432:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8003436:	b29a      	uxth	r2, r3
 8003438:	4b87      	ldr	r3, [pc, #540]	@ (8003658 <lcd_init+0x1a50>)
 800343a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800343c:	4b87      	ldr	r3, [pc, #540]	@ (800365c <lcd_init+0x1a54>)
 800343e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003442:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003444:	4b85      	ldr	r3, [pc, #532]	@ (800365c <lcd_init+0x1a54>)
 8003446:	2280      	movs	r2, #128	@ 0x80
 8003448:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800344a:	4b84      	ldr	r3, [pc, #528]	@ (800365c <lcd_init+0x1a54>)
 800344c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003450:	611a      	str	r2, [r3, #16]
}
 8003452:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 8003454:	208b      	movs	r0, #139	@ 0x8b
 8003456:	f7fd fa99 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800345a:	2000      	movs	r0, #0
 800345c:	f7fd fa96 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 8003460:	2096      	movs	r0, #150	@ 0x96
 8003462:	f7fd fa93 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003466:	2000      	movs	r0, #0
 8003468:	f7fd fa90 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 800346c:	20a1      	movs	r0, #161	@ 0xa1
 800346e:	f7fd fa8d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003472:	2000      	movs	r0, #0
 8003474:	f7fd fa8a 	bl	800098c <lcd_wr_xdata>
 8003478:	23b5      	movs	r3, #181	@ 0xb5
 800347a:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800347e:	4b77      	ldr	r3, [pc, #476]	@ (800365c <lcd_init+0x1a54>)
 8003480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003484:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003486:	4b75      	ldr	r3, [pc, #468]	@ (800365c <lcd_init+0x1a54>)
 8003488:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800348c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800348e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8003492:	b29a      	uxth	r2, r3
 8003494:	4b70      	ldr	r3, [pc, #448]	@ (8003658 <lcd_init+0x1a50>)
 8003496:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003498:	4b70      	ldr	r3, [pc, #448]	@ (800365c <lcd_init+0x1a54>)
 800349a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800349e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034a0:	4b6e      	ldr	r3, [pc, #440]	@ (800365c <lcd_init+0x1a54>)
 80034a2:	2280      	movs	r2, #128	@ 0x80
 80034a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80034a6:	4b6d      	ldr	r3, [pc, #436]	@ (800365c <lcd_init+0x1a54>)
 80034a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ac:	611a      	str	r2, [r3, #16]
}
 80034ae:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 80034b0:	2002      	movs	r0, #2
 80034b2:	f7fd fa6b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7fd fa68 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80034bc:	2003      	movs	r0, #3
 80034be:	f7fd fa65 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7fd fa62 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80034c8:	2004      	movs	r0, #4
 80034ca:	f7fd fa5f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7fd fa5c 	bl	800098c <lcd_wr_xdata>
 80034d4:	23b6      	movs	r3, #182	@ 0xb6
 80034d6:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80034da:	4b60      	ldr	r3, [pc, #384]	@ (800365c <lcd_init+0x1a54>)
 80034dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80034e2:	4b5e      	ldr	r3, [pc, #376]	@ (800365c <lcd_init+0x1a54>)
 80034e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80034ea:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	4b59      	ldr	r3, [pc, #356]	@ (8003658 <lcd_init+0x1a50>)
 80034f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034f4:	4b59      	ldr	r3, [pc, #356]	@ (800365c <lcd_init+0x1a54>)
 80034f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034fc:	4b57      	ldr	r3, [pc, #348]	@ (800365c <lcd_init+0x1a54>)
 80034fe:	2280      	movs	r2, #128	@ 0x80
 8003500:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003502:	4b56      	ldr	r3, [pc, #344]	@ (800365c <lcd_init+0x1a54>)
 8003504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003508:	611a      	str	r2, [r3, #16]
}
 800350a:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 800350c:	2000      	movs	r0, #0
 800350e:	f7fd fa3d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003512:	2000      	movs	r0, #0
 8003514:	f7fd fa3a 	bl	800098c <lcd_wr_xdata>
 8003518:	23b7      	movs	r3, #183	@ 0xb7
 800351a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800351e:	4b4f      	ldr	r3, [pc, #316]	@ (800365c <lcd_init+0x1a54>)
 8003520:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003524:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003526:	4b4d      	ldr	r3, [pc, #308]	@ (800365c <lcd_init+0x1a54>)
 8003528:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800352c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800352e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003532:	b29a      	uxth	r2, r3
 8003534:	4b48      	ldr	r3, [pc, #288]	@ (8003658 <lcd_init+0x1a50>)
 8003536:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003538:	4b48      	ldr	r3, [pc, #288]	@ (800365c <lcd_init+0x1a54>)
 800353a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800353e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003540:	4b46      	ldr	r3, [pc, #280]	@ (800365c <lcd_init+0x1a54>)
 8003542:	2280      	movs	r2, #128	@ 0x80
 8003544:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003546:	4b45      	ldr	r3, [pc, #276]	@ (800365c <lcd_init+0x1a54>)
 8003548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800354c:	611a      	str	r2, [r3, #16]
}
 800354e:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 8003550:	2000      	movs	r0, #0
 8003552:	f7fd fa1b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003556:	2000      	movs	r0, #0
 8003558:	f7fd fa18 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 800355c:	203f      	movs	r0, #63	@ 0x3f
 800355e:	f7fd fa15 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fd fa12 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 8003568:	205e      	movs	r0, #94	@ 0x5e
 800356a:	f7fd fa0f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800356e:	2000      	movs	r0, #0
 8003570:	f7fd fa0c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003574:	2064      	movs	r0, #100	@ 0x64
 8003576:	f7fd fa09 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800357a:	2000      	movs	r0, #0
 800357c:	f7fd fa06 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 8003580:	208c      	movs	r0, #140	@ 0x8c
 8003582:	f7fd fa03 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003586:	2000      	movs	r0, #0
 8003588:	f7fd fa00 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 800358c:	20ac      	movs	r0, #172	@ 0xac
 800358e:	f7fd f9fd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003592:	2000      	movs	r0, #0
 8003594:	f7fd f9fa 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003598:	20dc      	movs	r0, #220	@ 0xdc
 800359a:	f7fd f9f7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800359e:	2000      	movs	r0, #0
 80035a0:	f7fd f9f4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 80035a4:	2070      	movs	r0, #112	@ 0x70
 80035a6:	f7fd f9f1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035aa:	2000      	movs	r0, #0
 80035ac:	f7fd f9ee 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 80035b0:	2090      	movs	r0, #144	@ 0x90
 80035b2:	f7fd f9eb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fd f9e8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 80035bc:	20eb      	movs	r0, #235	@ 0xeb
 80035be:	f7fd f9e5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7fd f9e2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80035c8:	20dc      	movs	r0, #220	@ 0xdc
 80035ca:	f7fd f9df 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f7fd f9dc 	bl	800098c <lcd_wr_xdata>
 80035d4:	23b8      	movs	r3, #184	@ 0xb8
 80035d6:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80035da:	4b20      	ldr	r3, [pc, #128]	@ (800365c <lcd_init+0x1a54>)
 80035dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035e2:	4b1e      	ldr	r3, [pc, #120]	@ (800365c <lcd_init+0x1a54>)
 80035e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80035ea:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <lcd_init+0x1a50>)
 80035f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035f4:	4b19      	ldr	r3, [pc, #100]	@ (800365c <lcd_init+0x1a54>)
 80035f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035fc:	4b17      	ldr	r3, [pc, #92]	@ (800365c <lcd_init+0x1a54>)
 80035fe:	2280      	movs	r2, #128	@ 0x80
 8003600:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003602:	4b16      	ldr	r3, [pc, #88]	@ (800365c <lcd_init+0x1a54>)
 8003604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003608:	611a      	str	r2, [r3, #16]
}
 800360a:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 800360c:	2000      	movs	r0, #0
 800360e:	f7fd f9bd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003612:	2000      	movs	r0, #0
 8003614:	f7fd f9ba 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003618:	2000      	movs	r0, #0
 800361a:	f7fd f9b7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800361e:	2000      	movs	r0, #0
 8003620:	f7fd f9b4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003624:	2000      	movs	r0, #0
 8003626:	f7fd f9b1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800362a:	2000      	movs	r0, #0
 800362c:	f7fd f9ae 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003630:	2000      	movs	r0, #0
 8003632:	f7fd f9ab 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003636:	2000      	movs	r0, #0
 8003638:	f7fd f9a8 	bl	800098c <lcd_wr_xdata>
 800363c:	23ba      	movs	r3, #186	@ 0xba
 800363e:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <lcd_init+0x1a54>)
 8003644:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003648:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800364a:	4b04      	ldr	r3, [pc, #16]	@ (800365c <lcd_init+0x1a54>)
 800364c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003650:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003652:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8003656:	e003      	b.n	8003660 <lcd_init+0x1a58>
 8003658:	40010c00 	.word	0x40010c00
 800365c:	40011000 	.word	0x40011000
 8003660:	b29a      	uxth	r2, r3
 8003662:	4bd9      	ldr	r3, [pc, #868]	@ (80039c8 <lcd_init+0x1dc0>)
 8003664:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003666:	4bd9      	ldr	r3, [pc, #868]	@ (80039cc <lcd_init+0x1dc4>)
 8003668:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800366c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800366e:	4bd7      	ldr	r3, [pc, #860]	@ (80039cc <lcd_init+0x1dc4>)
 8003670:	2280      	movs	r2, #128	@ 0x80
 8003672:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003674:	4bd5      	ldr	r3, [pc, #852]	@ (80039cc <lcd_init+0x1dc4>)
 8003676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367a:	611a      	str	r2, [r3, #16]
}
 800367c:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 800367e:	2024      	movs	r0, #36	@ 0x24
 8003680:	f7fd f984 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003684:	2000      	movs	r0, #0
 8003686:	f7fd f981 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800368a:	2000      	movs	r0, #0
 800368c:	f7fd f97e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003690:	2000      	movs	r0, #0
 8003692:	f7fd f97b 	bl	800098c <lcd_wr_xdata>
 8003696:	23c1      	movs	r3, #193	@ 0xc1
 8003698:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800369c:	4bcb      	ldr	r3, [pc, #812]	@ (80039cc <lcd_init+0x1dc4>)
 800369e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80036a4:	4bc9      	ldr	r3, [pc, #804]	@ (80039cc <lcd_init+0x1dc4>)
 80036a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036ac:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	4bc5      	ldr	r3, [pc, #788]	@ (80039c8 <lcd_init+0x1dc0>)
 80036b4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80036b6:	4bc5      	ldr	r3, [pc, #788]	@ (80039cc <lcd_init+0x1dc4>)
 80036b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036bc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036be:	4bc3      	ldr	r3, [pc, #780]	@ (80039cc <lcd_init+0x1dc4>)
 80036c0:	2280      	movs	r2, #128	@ 0x80
 80036c2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036c4:	4bc1      	ldr	r3, [pc, #772]	@ (80039cc <lcd_init+0x1dc4>)
 80036c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ca:	611a      	str	r2, [r3, #16]
}
 80036cc:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 80036ce:	2020      	movs	r0, #32
 80036d0:	f7fd f95c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036d4:	2000      	movs	r0, #0
 80036d6:	f7fd f959 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 80036da:	2054      	movs	r0, #84	@ 0x54
 80036dc:	f7fd f956 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036e0:	2000      	movs	r0, #0
 80036e2:	f7fd f953 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80036e6:	20ff      	movs	r0, #255	@ 0xff
 80036e8:	f7fd f950 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036ec:	2000      	movs	r0, #0
 80036ee:	f7fd f94d 	bl	800098c <lcd_wr_xdata>
 80036f2:	23c2      	movs	r3, #194	@ 0xc2
 80036f4:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80036f8:	4bb4      	ldr	r3, [pc, #720]	@ (80039cc <lcd_init+0x1dc4>)
 80036fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036fe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003700:	4bb2      	ldr	r3, [pc, #712]	@ (80039cc <lcd_init+0x1dc4>)
 8003702:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003706:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003708:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800370c:	b29a      	uxth	r2, r3
 800370e:	4bae      	ldr	r3, [pc, #696]	@ (80039c8 <lcd_init+0x1dc0>)
 8003710:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003712:	4bae      	ldr	r3, [pc, #696]	@ (80039cc <lcd_init+0x1dc4>)
 8003714:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003718:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800371a:	4bac      	ldr	r3, [pc, #688]	@ (80039cc <lcd_init+0x1dc4>)
 800371c:	2280      	movs	r2, #128	@ 0x80
 800371e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003720:	4baa      	ldr	r3, [pc, #680]	@ (80039cc <lcd_init+0x1dc4>)
 8003722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003726:	611a      	str	r2, [r3, #16]
}
 8003728:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 800372a:	200a      	movs	r0, #10
 800372c:	f7fd f92e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003730:	2000      	movs	r0, #0
 8003732:	f7fd f92b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003736:	2004      	movs	r0, #4
 8003738:	f7fd f928 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800373c:	2000      	movs	r0, #0
 800373e:	f7fd f925 	bl	800098c <lcd_wr_xdata>
 8003742:	23c3      	movs	r3, #195	@ 0xc3
 8003744:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003748:	4ba0      	ldr	r3, [pc, #640]	@ (80039cc <lcd_init+0x1dc4>)
 800374a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800374e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003750:	4b9e      	ldr	r3, [pc, #632]	@ (80039cc <lcd_init+0x1dc4>)
 8003752:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003756:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003758:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800375c:	b29a      	uxth	r2, r3
 800375e:	4b9a      	ldr	r3, [pc, #616]	@ (80039c8 <lcd_init+0x1dc0>)
 8003760:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003762:	4b9a      	ldr	r3, [pc, #616]	@ (80039cc <lcd_init+0x1dc4>)
 8003764:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003768:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800376a:	4b98      	ldr	r3, [pc, #608]	@ (80039cc <lcd_init+0x1dc4>)
 800376c:	2280      	movs	r2, #128	@ 0x80
 800376e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003770:	4b96      	ldr	r3, [pc, #600]	@ (80039cc <lcd_init+0x1dc4>)
 8003772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003776:	611a      	str	r2, [r3, #16]
}
 8003778:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 800377a:	203c      	movs	r0, #60	@ 0x3c
 800377c:	f7fd f906 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003780:	2000      	movs	r0, #0
 8003782:	f7fd f903 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 8003786:	203a      	movs	r0, #58	@ 0x3a
 8003788:	f7fd f900 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800378c:	2000      	movs	r0, #0
 800378e:	f7fd f8fd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 8003792:	2039      	movs	r0, #57	@ 0x39
 8003794:	f7fd f8fa 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003798:	2000      	movs	r0, #0
 800379a:	f7fd f8f7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 800379e:	2037      	movs	r0, #55	@ 0x37
 80037a0:	f7fd f8f4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f7fd f8f1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80037aa:	203c      	movs	r0, #60	@ 0x3c
 80037ac:	f7fd f8ee 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037b0:	2000      	movs	r0, #0
 80037b2:	f7fd f8eb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 80037b6:	2036      	movs	r0, #54	@ 0x36
 80037b8:	f7fd f8e8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037bc:	2000      	movs	r0, #0
 80037be:	f7fd f8e5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80037c2:	2032      	movs	r0, #50	@ 0x32
 80037c4:	f7fd f8e2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037c8:	2000      	movs	r0, #0
 80037ca:	f7fd f8df 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 80037ce:	202f      	movs	r0, #47	@ 0x2f
 80037d0:	f7fd f8dc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037d4:	2000      	movs	r0, #0
 80037d6:	f7fd f8d9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80037da:	202c      	movs	r0, #44	@ 0x2c
 80037dc:	f7fd f8d6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7fd f8d3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80037e6:	2029      	movs	r0, #41	@ 0x29
 80037e8:	f7fd f8d0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7fd f8cd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80037f2:	2026      	movs	r0, #38	@ 0x26
 80037f4:	f7fd f8ca 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7fd f8c7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80037fe:	2024      	movs	r0, #36	@ 0x24
 8003800:	f7fd f8c4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003804:	2000      	movs	r0, #0
 8003806:	f7fd f8c1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 800380a:	2024      	movs	r0, #36	@ 0x24
 800380c:	f7fd f8be 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003810:	2000      	movs	r0, #0
 8003812:	f7fd f8bb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8003816:	2023      	movs	r0, #35	@ 0x23
 8003818:	f7fd f8b8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800381c:	2000      	movs	r0, #0
 800381e:	f7fd f8b5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003822:	203c      	movs	r0, #60	@ 0x3c
 8003824:	f7fd f8b2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003828:	2000      	movs	r0, #0
 800382a:	f7fd f8af 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 800382e:	2036      	movs	r0, #54	@ 0x36
 8003830:	f7fd f8ac 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003834:	2000      	movs	r0, #0
 8003836:	f7fd f8a9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 800383a:	2032      	movs	r0, #50	@ 0x32
 800383c:	f7fd f8a6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003840:	2000      	movs	r0, #0
 8003842:	f7fd f8a3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 8003846:	202f      	movs	r0, #47	@ 0x2f
 8003848:	f7fd f8a0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800384c:	2000      	movs	r0, #0
 800384e:	f7fd f89d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8003852:	202c      	movs	r0, #44	@ 0x2c
 8003854:	f7fd f89a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003858:	2000      	movs	r0, #0
 800385a:	f7fd f897 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 800385e:	2029      	movs	r0, #41	@ 0x29
 8003860:	f7fd f894 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003864:	2000      	movs	r0, #0
 8003866:	f7fd f891 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 800386a:	2026      	movs	r0, #38	@ 0x26
 800386c:	f7fd f88e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003870:	2000      	movs	r0, #0
 8003872:	f7fd f88b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003876:	2024      	movs	r0, #36	@ 0x24
 8003878:	f7fd f888 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800387c:	2000      	movs	r0, #0
 800387e:	f7fd f885 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003882:	2024      	movs	r0, #36	@ 0x24
 8003884:	f7fd f882 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003888:	2000      	movs	r0, #0
 800388a:	f7fd f87f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 800388e:	2023      	movs	r0, #35	@ 0x23
 8003890:	f7fd f87c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003894:	2000      	movs	r0, #0
 8003896:	f7fd f879 	bl	800098c <lcd_wr_xdata>
 800389a:	23c4      	movs	r3, #196	@ 0xc4
 800389c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80038a0:	4b4a      	ldr	r3, [pc, #296]	@ (80039cc <lcd_init+0x1dc4>)
 80038a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038a6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80038a8:	4b48      	ldr	r3, [pc, #288]	@ (80039cc <lcd_init+0x1dc4>)
 80038aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038ae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80038b0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	4b44      	ldr	r3, [pc, #272]	@ (80039c8 <lcd_init+0x1dc0>)
 80038b8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80038ba:	4b44      	ldr	r3, [pc, #272]	@ (80039cc <lcd_init+0x1dc4>)
 80038bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038c0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80038c2:	4b42      	ldr	r3, [pc, #264]	@ (80039cc <lcd_init+0x1dc4>)
 80038c4:	2280      	movs	r2, #128	@ 0x80
 80038c6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80038c8:	4b40      	ldr	r3, [pc, #256]	@ (80039cc <lcd_init+0x1dc4>)
 80038ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ce:	611a      	str	r2, [r3, #16]
}
 80038d0:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 80038d2:	2062      	movs	r0, #98	@ 0x62
 80038d4:	f7fd f85a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fd f857 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 80038de:	2005      	movs	r0, #5
 80038e0:	f7fd f854 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7fd f851 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 80038ea:	2084      	movs	r0, #132	@ 0x84
 80038ec:	f7fd f84e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7fd f84b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 80038f6:	20f0      	movs	r0, #240	@ 0xf0
 80038f8:	f7fd f848 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7fd f845 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8003902:	2018      	movs	r0, #24
 8003904:	f7fd f842 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003908:	2000      	movs	r0, #0
 800390a:	f7fd f83f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 800390e:	20a4      	movs	r0, #164	@ 0xa4
 8003910:	f7fd f83c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003914:	2000      	movs	r0, #0
 8003916:	f7fd f839 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 800391a:	2018      	movs	r0, #24
 800391c:	f7fd f836 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003920:	2000      	movs	r0, #0
 8003922:	f7fd f833 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003926:	2050      	movs	r0, #80	@ 0x50
 8003928:	f7fd f830 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800392c:	2000      	movs	r0, #0
 800392e:	f7fd f82d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8003932:	200c      	movs	r0, #12
 8003934:	f7fd f82a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003938:	2000      	movs	r0, #0
 800393a:	f7fd f827 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 800393e:	2017      	movs	r0, #23
 8003940:	f7fd f824 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003944:	2000      	movs	r0, #0
 8003946:	f7fd f821 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 800394a:	2095      	movs	r0, #149	@ 0x95
 800394c:	f7fd f81e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003950:	2000      	movs	r0, #0
 8003952:	f7fd f81b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003956:	20f3      	movs	r0, #243	@ 0xf3
 8003958:	f7fd f818 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800395c:	2000      	movs	r0, #0
 800395e:	f7fd f815 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 8003962:	20e6      	movs	r0, #230	@ 0xe6
 8003964:	f7fd f812 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003968:	2000      	movs	r0, #0
 800396a:	f7fd f80f 	bl	800098c <lcd_wr_xdata>
 800396e:	23c5      	movs	r3, #197	@ 0xc5
 8003970:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003974:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <lcd_init+0x1dc4>)
 8003976:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800397a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800397c:	4b13      	ldr	r3, [pc, #76]	@ (80039cc <lcd_init+0x1dc4>)
 800397e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003982:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003984:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8003988:	b29a      	uxth	r2, r3
 800398a:	4b0f      	ldr	r3, [pc, #60]	@ (80039c8 <lcd_init+0x1dc0>)
 800398c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800398e:	4b0f      	ldr	r3, [pc, #60]	@ (80039cc <lcd_init+0x1dc4>)
 8003990:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003994:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003996:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <lcd_init+0x1dc4>)
 8003998:	2280      	movs	r2, #128	@ 0x80
 800399a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800399c:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <lcd_init+0x1dc4>)
 800399e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a2:	611a      	str	r2, [r3, #16]
}
 80039a4:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 80039a6:	2032      	movs	r0, #50	@ 0x32
 80039a8:	f7fc fff0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7fc ffed 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80039b2:	2044      	movs	r0, #68	@ 0x44
 80039b4:	f7fc ffea 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f7fc ffe7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 80039be:	2065      	movs	r0, #101	@ 0x65
 80039c0:	f7fc ffe4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039c4:	2000      	movs	r0, #0
 80039c6:	e003      	b.n	80039d0 <lcd_init+0x1dc8>
 80039c8:	40010c00 	.word	0x40010c00
 80039cc:	40011000 	.word	0x40011000
 80039d0:	f7fc ffdc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 80039d4:	2076      	movs	r0, #118	@ 0x76
 80039d6:	f7fc ffd9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039da:	2000      	movs	r0, #0
 80039dc:	f7fc ffd6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80039e0:	2088      	movs	r0, #136	@ 0x88
 80039e2:	f7fc ffd3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7fc ffd0 	bl	800098c <lcd_wr_xdata>
 80039ec:	23c6      	movs	r3, #198	@ 0xc6
 80039ee:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039f2:	4bd7      	ldr	r3, [pc, #860]	@ (8003d50 <lcd_init+0x2148>)
 80039f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039fa:	4bd5      	ldr	r3, [pc, #852]	@ (8003d50 <lcd_init+0x2148>)
 80039fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a00:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a02:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	4bd2      	ldr	r3, [pc, #840]	@ (8003d54 <lcd_init+0x214c>)
 8003a0a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a0c:	4bd0      	ldr	r3, [pc, #832]	@ (8003d50 <lcd_init+0x2148>)
 8003a0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a12:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a14:	4bce      	ldr	r3, [pc, #824]	@ (8003d50 <lcd_init+0x2148>)
 8003a16:	2280      	movs	r2, #128	@ 0x80
 8003a18:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a1a:	4bcd      	ldr	r3, [pc, #820]	@ (8003d50 <lcd_init+0x2148>)
 8003a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a20:	611a      	str	r2, [r3, #16]
}
 8003a22:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 8003a24:	2020      	movs	r0, #32
 8003a26:	f7fc ffb1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fc ffae 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003a30:	2017      	movs	r0, #23
 8003a32:	f7fc ffab 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7fc ffa8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	f7fc ffa5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a42:	2000      	movs	r0, #0
 8003a44:	f7fc ffa2 	bl	800098c <lcd_wr_xdata>
 8003a48:	23c7      	movs	r3, #199	@ 0xc7
 8003a4a:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a4e:	4bc0      	ldr	r3, [pc, #768]	@ (8003d50 <lcd_init+0x2148>)
 8003a50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a54:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a56:	4bbe      	ldr	r3, [pc, #760]	@ (8003d50 <lcd_init+0x2148>)
 8003a58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a5c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a5e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	4bbb      	ldr	r3, [pc, #748]	@ (8003d54 <lcd_init+0x214c>)
 8003a66:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a68:	4bb9      	ldr	r3, [pc, #740]	@ (8003d50 <lcd_init+0x2148>)
 8003a6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a6e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a70:	4bb7      	ldr	r3, [pc, #732]	@ (8003d50 <lcd_init+0x2148>)
 8003a72:	2280      	movs	r2, #128	@ 0x80
 8003a74:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a76:	4bb6      	ldr	r3, [pc, #728]	@ (8003d50 <lcd_init+0x2148>)
 8003a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a7c:	611a      	str	r2, [r3, #16]
}
 8003a7e:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 8003a80:	2000      	movs	r0, #0
 8003a82:	f7fc ff83 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a86:	2000      	movs	r0, #0
 8003a88:	f7fc ff80 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f7fc ff7d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a92:	2000      	movs	r0, #0
 8003a94:	f7fc ff7a 	bl	800098c <lcd_wr_xdata>
 8003a98:	23c8      	movs	r3, #200	@ 0xc8
 8003a9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a9e:	4bac      	ldr	r3, [pc, #688]	@ (8003d50 <lcd_init+0x2148>)
 8003aa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aa4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003aa6:	4baa      	ldr	r3, [pc, #680]	@ (8003d50 <lcd_init+0x2148>)
 8003aa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003aae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	4ba7      	ldr	r3, [pc, #668]	@ (8003d54 <lcd_init+0x214c>)
 8003ab6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003ab8:	4ba5      	ldr	r3, [pc, #660]	@ (8003d50 <lcd_init+0x2148>)
 8003aba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003abe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ac0:	4ba3      	ldr	r3, [pc, #652]	@ (8003d50 <lcd_init+0x2148>)
 8003ac2:	2280      	movs	r2, #128	@ 0x80
 8003ac4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ac6:	4ba2      	ldr	r3, [pc, #648]	@ (8003d50 <lcd_init+0x2148>)
 8003ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003acc:	611a      	str	r2, [r3, #16]
}
 8003ace:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7fc ff5b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f7fc ff58 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003adc:	2000      	movs	r0, #0
 8003ade:	f7fc ff55 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7fc ff52 	bl	800098c <lcd_wr_xdata>
 8003ae8:	23c9      	movs	r3, #201	@ 0xc9
 8003aea:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003aee:	4b98      	ldr	r3, [pc, #608]	@ (8003d50 <lcd_init+0x2148>)
 8003af0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003af4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003af6:	4b96      	ldr	r3, [pc, #600]	@ (8003d50 <lcd_init+0x2148>)
 8003af8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003afc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003afe:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	4b93      	ldr	r3, [pc, #588]	@ (8003d54 <lcd_init+0x214c>)
 8003b06:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b08:	4b91      	ldr	r3, [pc, #580]	@ (8003d50 <lcd_init+0x2148>)
 8003b0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b0e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b10:	4b8f      	ldr	r3, [pc, #572]	@ (8003d50 <lcd_init+0x2148>)
 8003b12:	2280      	movs	r2, #128	@ 0x80
 8003b14:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b16:	4b8e      	ldr	r3, [pc, #568]	@ (8003d50 <lcd_init+0x2148>)
 8003b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b1c:	611a      	str	r2, [r3, #16]
}
 8003b1e:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7fc ff33 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b26:	2000      	movs	r0, #0
 8003b28:	f7fc ff30 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7fc ff2d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b32:	2000      	movs	r0, #0
 8003b34:	f7fc ff2a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7fc ff27 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f7fc ff24 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7fc ff21 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7fc ff1e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fc ff1b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7fc ff18 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7fc ff15 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b62:	2000      	movs	r0, #0
 8003b64:	f7fc ff12 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f7fc ff0f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f7fc ff0c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7fc ff09 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f7fc ff06 	bl	800098c <lcd_wr_xdata>
 8003b80:	23e0      	movs	r3, #224	@ 0xe0
 8003b82:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b86:	4b72      	ldr	r3, [pc, #456]	@ (8003d50 <lcd_init+0x2148>)
 8003b88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b8c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b8e:	4b70      	ldr	r3, [pc, #448]	@ (8003d50 <lcd_init+0x2148>)
 8003b90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b94:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b96:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	4b6d      	ldr	r3, [pc, #436]	@ (8003d54 <lcd_init+0x214c>)
 8003b9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003ba0:	4b6b      	ldr	r3, [pc, #428]	@ (8003d50 <lcd_init+0x2148>)
 8003ba2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ba6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ba8:	4b69      	ldr	r3, [pc, #420]	@ (8003d50 <lcd_init+0x2148>)
 8003baa:	2280      	movs	r2, #128	@ 0x80
 8003bac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003bae:	4b68      	ldr	r3, [pc, #416]	@ (8003d50 <lcd_init+0x2148>)
 8003bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bb4:	611a      	str	r2, [r3, #16]
}
 8003bb6:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 8003bb8:	2016      	movs	r0, #22
 8003bba:	f7fc fee7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f7fc fee4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003bc4:	201c      	movs	r0, #28
 8003bc6:	f7fc fee1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f7fc fede 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003bd0:	2021      	movs	r0, #33	@ 0x21
 8003bd2:	f7fc fedb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f7fc fed8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003bdc:	2036      	movs	r0, #54	@ 0x36
 8003bde:	f7fc fed5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003be2:	2000      	movs	r0, #0
 8003be4:	f7fc fed2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8003be8:	2046      	movs	r0, #70	@ 0x46
 8003bea:	f7fc fecf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f7fc fecc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003bf4:	2052      	movs	r0, #82	@ 0x52
 8003bf6:	f7fc fec9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f7fc fec6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003c00:	2064      	movs	r0, #100	@ 0x64
 8003c02:	f7fc fec3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c06:	2000      	movs	r0, #0
 8003c08:	f7fc fec0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003c0c:	207a      	movs	r0, #122	@ 0x7a
 8003c0e:	f7fc febd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c12:	2000      	movs	r0, #0
 8003c14:	f7fc feba 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003c18:	208b      	movs	r0, #139	@ 0x8b
 8003c1a:	f7fc feb7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c1e:	2000      	movs	r0, #0
 8003c20:	f7fc feb4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003c24:	2099      	movs	r0, #153	@ 0x99
 8003c26:	f7fc feb1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	f7fc feae 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003c30:	20a8      	movs	r0, #168	@ 0xa8
 8003c32:	f7fc feab 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c36:	2000      	movs	r0, #0
 8003c38:	f7fc fea8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003c3c:	20b9      	movs	r0, #185	@ 0xb9
 8003c3e:	f7fc fea5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c42:	2000      	movs	r0, #0
 8003c44:	f7fc fea2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003c48:	20c4      	movs	r0, #196	@ 0xc4
 8003c4a:	f7fc fe9f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7fc fe9c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003c54:	20ca      	movs	r0, #202	@ 0xca
 8003c56:	f7fc fe99 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f7fc fe96 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003c60:	20d2      	movs	r0, #210	@ 0xd2
 8003c62:	f7fc fe93 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c66:	2000      	movs	r0, #0
 8003c68:	f7fc fe90 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 8003c6c:	20d9      	movs	r0, #217	@ 0xd9
 8003c6e:	f7fc fe8d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c72:	2000      	movs	r0, #0
 8003c74:	f7fc fe8a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003c78:	20e0      	movs	r0, #224	@ 0xe0
 8003c7a:	f7fc fe87 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f7fc fe84 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003c84:	20f3      	movs	r0, #243	@ 0xf3
 8003c86:	f7fc fe81 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f7fc fe7e 	bl	800098c <lcd_wr_xdata>
 8003c90:	23e1      	movs	r3, #225	@ 0xe1
 8003c92:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c96:	4b2e      	ldr	r3, [pc, #184]	@ (8003d50 <lcd_init+0x2148>)
 8003c98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c9c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d50 <lcd_init+0x2148>)
 8003ca0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ca4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ca6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	4b29      	ldr	r3, [pc, #164]	@ (8003d54 <lcd_init+0x214c>)
 8003cae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003cb0:	4b27      	ldr	r3, [pc, #156]	@ (8003d50 <lcd_init+0x2148>)
 8003cb2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cb6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003cb8:	4b25      	ldr	r3, [pc, #148]	@ (8003d50 <lcd_init+0x2148>)
 8003cba:	2280      	movs	r2, #128	@ 0x80
 8003cbc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	@ (8003d50 <lcd_init+0x2148>)
 8003cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cc4:	611a      	str	r2, [r3, #16]
}
 8003cc6:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8003cc8:	2016      	movs	r0, #22
 8003cca:	f7fc fe5f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f7fc fe5c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003cd4:	201c      	movs	r0, #28
 8003cd6:	f7fc fe59 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f7fc fe56 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8003ce0:	2022      	movs	r0, #34	@ 0x22
 8003ce2:	f7fc fe53 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f7fc fe50 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003cec:	2036      	movs	r0, #54	@ 0x36
 8003cee:	f7fc fe4d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f7fc fe4a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8003cf8:	2045      	movs	r0, #69	@ 0x45
 8003cfa:	f7fc fe47 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f7fc fe44 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003d04:	2052      	movs	r0, #82	@ 0x52
 8003d06:	f7fc fe41 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f7fc fe3e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003d10:	2064      	movs	r0, #100	@ 0x64
 8003d12:	f7fc fe3b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d16:	2000      	movs	r0, #0
 8003d18:	f7fc fe38 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003d1c:	207a      	movs	r0, #122	@ 0x7a
 8003d1e:	f7fc fe35 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d22:	2000      	movs	r0, #0
 8003d24:	f7fc fe32 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003d28:	208b      	movs	r0, #139	@ 0x8b
 8003d2a:	f7fc fe2f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f7fc fe2c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003d34:	2099      	movs	r0, #153	@ 0x99
 8003d36:	f7fc fe29 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f7fc fe26 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003d40:	20a8      	movs	r0, #168	@ 0xa8
 8003d42:	f7fc fe23 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d46:	2000      	movs	r0, #0
 8003d48:	f7fc fe20 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003d4c:	20b9      	movs	r0, #185	@ 0xb9
 8003d4e:	e003      	b.n	8003d58 <lcd_init+0x2150>
 8003d50:	40011000 	.word	0x40011000
 8003d54:	40010c00 	.word	0x40010c00
 8003d58:	f7fc fe18 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f7fc fe15 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003d62:	20c4      	movs	r0, #196	@ 0xc4
 8003d64:	f7fc fe12 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d68:	2000      	movs	r0, #0
 8003d6a:	f7fc fe0f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003d6e:	20ca      	movs	r0, #202	@ 0xca
 8003d70:	f7fc fe0c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d74:	2000      	movs	r0, #0
 8003d76:	f7fc fe09 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003d7a:	20d2      	movs	r0, #210	@ 0xd2
 8003d7c:	f7fc fe06 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d80:	2000      	movs	r0, #0
 8003d82:	f7fc fe03 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 8003d86:	20d8      	movs	r0, #216	@ 0xd8
 8003d88:	f7fc fe00 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	f7fc fdfd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003d92:	20e0      	movs	r0, #224	@ 0xe0
 8003d94:	f7fc fdfa 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f7fc fdf7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003d9e:	20f3      	movs	r0, #243	@ 0xf3
 8003da0:	f7fc fdf4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003da4:	2000      	movs	r0, #0
 8003da6:	f7fc fdf1 	bl	800098c <lcd_wr_xdata>
 8003daa:	23e2      	movs	r3, #226	@ 0xe2
 8003dac:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003db0:	4be3      	ldr	r3, [pc, #908]	@ (8004140 <lcd_init+0x2538>)
 8003db2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003db6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003db8:	4be1      	ldr	r3, [pc, #900]	@ (8004140 <lcd_init+0x2538>)
 8003dba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dbe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003dc0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	4bdf      	ldr	r3, [pc, #892]	@ (8004144 <lcd_init+0x253c>)
 8003dc8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003dca:	4bdd      	ldr	r3, [pc, #884]	@ (8004140 <lcd_init+0x2538>)
 8003dcc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003dd0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003dd2:	4bdb      	ldr	r3, [pc, #876]	@ (8004140 <lcd_init+0x2538>)
 8003dd4:	2280      	movs	r2, #128	@ 0x80
 8003dd6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003dd8:	4bd9      	ldr	r3, [pc, #868]	@ (8004140 <lcd_init+0x2538>)
 8003dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dde:	611a      	str	r2, [r3, #16]
}
 8003de0:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 8003de2:	2005      	movs	r0, #5
 8003de4:	f7fc fdd2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fc fdcf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8003dee:	200b      	movs	r0, #11
 8003df0:	f7fc fdcc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fc fdc9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 8003dfa:	201b      	movs	r0, #27
 8003dfc:	f7fc fdc6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7fc fdc3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8003e06:	2034      	movs	r0, #52	@ 0x34
 8003e08:	f7fc fdc0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f7fc fdbd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003e12:	2044      	movs	r0, #68	@ 0x44
 8003e14:	f7fc fdba 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7fc fdb7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 8003e1e:	204f      	movs	r0, #79	@ 0x4f
 8003e20:	f7fc fdb4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fc fdb1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8003e2a:	2061      	movs	r0, #97	@ 0x61
 8003e2c:	f7fc fdae 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7fc fdab 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 8003e36:	2079      	movs	r0, #121	@ 0x79
 8003e38:	f7fc fda8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f7fc fda5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003e42:	2088      	movs	r0, #136	@ 0x88
 8003e44:	f7fc fda2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f7fc fd9f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003e4e:	2097      	movs	r0, #151	@ 0x97
 8003e50:	f7fc fd9c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e54:	2000      	movs	r0, #0
 8003e56:	f7fc fd99 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003e5a:	20a6      	movs	r0, #166	@ 0xa6
 8003e5c:	f7fc fd96 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7fc fd93 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003e66:	20b7      	movs	r0, #183	@ 0xb7
 8003e68:	f7fc fd90 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7fc fd8d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003e72:	20c2      	movs	r0, #194	@ 0xc2
 8003e74:	f7fc fd8a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f7fc fd87 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003e7e:	20c7      	movs	r0, #199	@ 0xc7
 8003e80:	f7fc fd84 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e84:	2000      	movs	r0, #0
 8003e86:	f7fc fd81 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003e8a:	20d1      	movs	r0, #209	@ 0xd1
 8003e8c:	f7fc fd7e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7fc fd7b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 8003e96:	20d6      	movs	r0, #214	@ 0xd6
 8003e98:	f7fc fd78 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f7fc fd75 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003ea2:	20dd      	movs	r0, #221	@ 0xdd
 8003ea4:	f7fc fd72 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7fc fd6f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003eae:	20f3      	movs	r0, #243	@ 0xf3
 8003eb0:	f7fc fd6c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f7fc fd69 	bl	800098c <lcd_wr_xdata>
 8003eba:	23e3      	movs	r3, #227	@ 0xe3
 8003ebc:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ec0:	4b9f      	ldr	r3, [pc, #636]	@ (8004140 <lcd_init+0x2538>)
 8003ec2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ec6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003ec8:	4b9d      	ldr	r3, [pc, #628]	@ (8004140 <lcd_init+0x2538>)
 8003eca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ece:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ed0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	4b9b      	ldr	r3, [pc, #620]	@ (8004144 <lcd_init+0x253c>)
 8003ed8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003eda:	4b99      	ldr	r3, [pc, #612]	@ (8004140 <lcd_init+0x2538>)
 8003edc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ee0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ee2:	4b97      	ldr	r3, [pc, #604]	@ (8004140 <lcd_init+0x2538>)
 8003ee4:	2280      	movs	r2, #128	@ 0x80
 8003ee6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ee8:	4b95      	ldr	r3, [pc, #596]	@ (8004140 <lcd_init+0x2538>)
 8003eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eee:	611a      	str	r2, [r3, #16]
}
 8003ef0:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 8003ef2:	2005      	movs	r0, #5
 8003ef4:	f7fc fd4a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fc fd47 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 8003efe:	200a      	movs	r0, #10
 8003f00:	f7fc fd44 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7fc fd41 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003f0a:	201c      	movs	r0, #28
 8003f0c:	f7fc fd3e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7fc fd3b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8003f16:	2033      	movs	r0, #51	@ 0x33
 8003f18:	f7fc fd38 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fc fd35 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003f22:	2044      	movs	r0, #68	@ 0x44
 8003f24:	f7fc fd32 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f7fc fd2f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003f2e:	2050      	movs	r0, #80	@ 0x50
 8003f30:	f7fc fd2c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f34:	2000      	movs	r0, #0
 8003f36:	f7fc fd29 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 8003f3a:	2062      	movs	r0, #98	@ 0x62
 8003f3c:	f7fc fd26 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f40:	2000      	movs	r0, #0
 8003f42:	f7fc fd23 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 8003f46:	2078      	movs	r0, #120	@ 0x78
 8003f48:	f7fc fd20 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f7fc fd1d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003f52:	2088      	movs	r0, #136	@ 0x88
 8003f54:	f7fc fd1a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7fc fd17 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003f5e:	2097      	movs	r0, #151	@ 0x97
 8003f60:	f7fc fd14 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f64:	2000      	movs	r0, #0
 8003f66:	f7fc fd11 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003f6a:	20a6      	movs	r0, #166	@ 0xa6
 8003f6c:	f7fc fd0e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f70:	2000      	movs	r0, #0
 8003f72:	f7fc fd0b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003f76:	20b7      	movs	r0, #183	@ 0xb7
 8003f78:	f7fc fd08 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f7fc fd05 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003f82:	20c2      	movs	r0, #194	@ 0xc2
 8003f84:	f7fc fd02 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7fc fcff 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003f8e:	20c7      	movs	r0, #199	@ 0xc7
 8003f90:	f7fc fcfc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f94:	2000      	movs	r0, #0
 8003f96:	f7fc fcf9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003f9a:	20d1      	movs	r0, #209	@ 0xd1
 8003f9c:	f7fc fcf6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f7fc fcf3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 8003fa6:	20d5      	movs	r0, #213	@ 0xd5
 8003fa8:	f7fc fcf0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f7fc fced 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003fb2:	20dd      	movs	r0, #221	@ 0xdd
 8003fb4:	f7fc fcea 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f7fc fce7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003fbe:	20f3      	movs	r0, #243	@ 0xf3
 8003fc0:	f7fc fce4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f7fc fce1 	bl	800098c <lcd_wr_xdata>
 8003fca:	23e4      	movs	r3, #228	@ 0xe4
 8003fcc:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8004140 <lcd_init+0x2538>)
 8003fd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fd6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003fd8:	4b59      	ldr	r3, [pc, #356]	@ (8004140 <lcd_init+0x2538>)
 8003fda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fde:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003fe0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	4b57      	ldr	r3, [pc, #348]	@ (8004144 <lcd_init+0x253c>)
 8003fe8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003fea:	4b55      	ldr	r3, [pc, #340]	@ (8004140 <lcd_init+0x2538>)
 8003fec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ff0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ff2:	4b53      	ldr	r3, [pc, #332]	@ (8004140 <lcd_init+0x2538>)
 8003ff4:	2280      	movs	r2, #128	@ 0x80
 8003ff6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ff8:	4b51      	ldr	r3, [pc, #324]	@ (8004140 <lcd_init+0x2538>)
 8003ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ffe:	611a      	str	r2, [r3, #16]
}
 8004000:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 8004002:	2001      	movs	r0, #1
 8004004:	f7fc fcc2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004008:	2000      	movs	r0, #0
 800400a:	f7fc fcbf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800400e:	2001      	movs	r0, #1
 8004010:	f7fc fcbc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004014:	2000      	movs	r0, #0
 8004016:	f7fc fcb9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800401a:	2002      	movs	r0, #2
 800401c:	f7fc fcb6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004020:	2000      	movs	r0, #0
 8004022:	f7fc fcb3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8004026:	202a      	movs	r0, #42	@ 0x2a
 8004028:	f7fc fcb0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800402c:	2000      	movs	r0, #0
 800402e:	f7fc fcad 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8004032:	203c      	movs	r0, #60	@ 0x3c
 8004034:	f7fc fcaa 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004038:	2000      	movs	r0, #0
 800403a:	f7fc fca7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 800403e:	204b      	movs	r0, #75	@ 0x4b
 8004040:	f7fc fca4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004044:	2000      	movs	r0, #0
 8004046:	f7fc fca1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 800404a:	205d      	movs	r0, #93	@ 0x5d
 800404c:	f7fc fc9e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004050:	2000      	movs	r0, #0
 8004052:	f7fc fc9b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004056:	2074      	movs	r0, #116	@ 0x74
 8004058:	f7fc fc98 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800405c:	2000      	movs	r0, #0
 800405e:	f7fc fc95 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8004062:	2084      	movs	r0, #132	@ 0x84
 8004064:	f7fc fc92 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004068:	2000      	movs	r0, #0
 800406a:	f7fc fc8f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 800406e:	2093      	movs	r0, #147	@ 0x93
 8004070:	f7fc fc8c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004074:	2000      	movs	r0, #0
 8004076:	f7fc fc89 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 800407a:	20a2      	movs	r0, #162	@ 0xa2
 800407c:	f7fc fc86 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004080:	2000      	movs	r0, #0
 8004082:	f7fc fc83 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004086:	20b3      	movs	r0, #179	@ 0xb3
 8004088:	f7fc fc80 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800408c:	2000      	movs	r0, #0
 800408e:	f7fc fc7d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8004092:	20be      	movs	r0, #190	@ 0xbe
 8004094:	f7fc fc7a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004098:	2000      	movs	r0, #0
 800409a:	f7fc fc77 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 800409e:	20c4      	movs	r0, #196	@ 0xc4
 80040a0:	f7fc fc74 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7fc fc71 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 80040aa:	20cd      	movs	r0, #205	@ 0xcd
 80040ac:	f7fc fc6e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f7fc fc6b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 80040b6:	20d3      	movs	r0, #211	@ 0xd3
 80040b8:	f7fc fc68 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040bc:	2000      	movs	r0, #0
 80040be:	f7fc fc65 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80040c2:	20dd      	movs	r0, #221	@ 0xdd
 80040c4:	f7fc fc62 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040c8:	2000      	movs	r0, #0
 80040ca:	f7fc fc5f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80040ce:	20f3      	movs	r0, #243	@ 0xf3
 80040d0:	f7fc fc5c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040d4:	2000      	movs	r0, #0
 80040d6:	f7fc fc59 	bl	800098c <lcd_wr_xdata>
 80040da:	23e5      	movs	r3, #229	@ 0xe5
 80040dc:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80040e0:	4b17      	ldr	r3, [pc, #92]	@ (8004140 <lcd_init+0x2538>)
 80040e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80040e8:	4b15      	ldr	r3, [pc, #84]	@ (8004140 <lcd_init+0x2538>)
 80040ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80040f0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <lcd_init+0x253c>)
 80040f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80040fa:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <lcd_init+0x2538>)
 80040fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004100:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004102:	4b0f      	ldr	r3, [pc, #60]	@ (8004140 <lcd_init+0x2538>)
 8004104:	2280      	movs	r2, #128	@ 0x80
 8004106:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004108:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <lcd_init+0x2538>)
 800410a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800410e:	611a      	str	r2, [r3, #16]
}
 8004110:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 8004112:	2000      	movs	r0, #0
 8004114:	f7fc fc3a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004118:	2000      	movs	r0, #0
 800411a:	f7fc fc37 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800411e:	2000      	movs	r0, #0
 8004120:	f7fc fc34 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004124:	2000      	movs	r0, #0
 8004126:	f7fc fc31 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800412a:	2002      	movs	r0, #2
 800412c:	f7fc fc2e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004130:	2000      	movs	r0, #0
 8004132:	f7fc fc2b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004136:	2029      	movs	r0, #41	@ 0x29
 8004138:	f7fc fc28 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800413c:	2000      	movs	r0, #0
 800413e:	e003      	b.n	8004148 <lcd_init+0x2540>
 8004140:	40011000 	.word	0x40011000
 8004144:	40010c00 	.word	0x40010c00
 8004148:	f7fc fc20 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800414c:	203c      	movs	r0, #60	@ 0x3c
 800414e:	f7fc fc1d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004152:	2000      	movs	r0, #0
 8004154:	f7fc fc1a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8004158:	204b      	movs	r0, #75	@ 0x4b
 800415a:	f7fc fc17 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800415e:	2000      	movs	r0, #0
 8004160:	f7fc fc14 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8004164:	205d      	movs	r0, #93	@ 0x5d
 8004166:	f7fc fc11 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800416a:	2000      	movs	r0, #0
 800416c:	f7fc fc0e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004170:	2074      	movs	r0, #116	@ 0x74
 8004172:	f7fc fc0b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004176:	2000      	movs	r0, #0
 8004178:	f7fc fc08 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 800417c:	2084      	movs	r0, #132	@ 0x84
 800417e:	f7fc fc05 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004182:	2000      	movs	r0, #0
 8004184:	f7fc fc02 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8004188:	2093      	movs	r0, #147	@ 0x93
 800418a:	f7fc fbff 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800418e:	2000      	movs	r0, #0
 8004190:	f7fc fbfc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004194:	20a2      	movs	r0, #162	@ 0xa2
 8004196:	f7fc fbf9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800419a:	2000      	movs	r0, #0
 800419c:	f7fc fbf6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 80041a0:	20b3      	movs	r0, #179	@ 0xb3
 80041a2:	f7fc fbf3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041a6:	2000      	movs	r0, #0
 80041a8:	f7fc fbf0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 80041ac:	20be      	movs	r0, #190	@ 0xbe
 80041ae:	f7fc fbed 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041b2:	2000      	movs	r0, #0
 80041b4:	f7fc fbea 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80041b8:	20c4      	movs	r0, #196	@ 0xc4
 80041ba:	f7fc fbe7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041be:	2000      	movs	r0, #0
 80041c0:	f7fc fbe4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 80041c4:	20cd      	movs	r0, #205	@ 0xcd
 80041c6:	f7fc fbe1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ca:	2000      	movs	r0, #0
 80041cc:	f7fc fbde 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 80041d0:	20d3      	movs	r0, #211	@ 0xd3
 80041d2:	f7fc fbdb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041d6:	2000      	movs	r0, #0
 80041d8:	f7fc fbd8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80041dc:	20dc      	movs	r0, #220	@ 0xdc
 80041de:	f7fc fbd5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041e2:	2000      	movs	r0, #0
 80041e4:	f7fc fbd2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80041e8:	20f3      	movs	r0, #243	@ 0xf3
 80041ea:	f7fc fbcf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ee:	2000      	movs	r0, #0
 80041f0:	f7fc fbcc 	bl	800098c <lcd_wr_xdata>
 80041f4:	23e6      	movs	r3, #230	@ 0xe6
 80041f6:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80041fa:	4bde      	ldr	r3, [pc, #888]	@ (8004574 <lcd_init+0x296c>)
 80041fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004200:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004202:	4bdc      	ldr	r3, [pc, #880]	@ (8004574 <lcd_init+0x296c>)
 8004204:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004208:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800420a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800420e:	b29a      	uxth	r2, r3
 8004210:	4bd9      	ldr	r3, [pc, #868]	@ (8004578 <lcd_init+0x2970>)
 8004212:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004214:	4bd7      	ldr	r3, [pc, #860]	@ (8004574 <lcd_init+0x296c>)
 8004216:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800421a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800421c:	4bd5      	ldr	r3, [pc, #852]	@ (8004574 <lcd_init+0x296c>)
 800421e:	2280      	movs	r2, #128	@ 0x80
 8004220:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004222:	4bd4      	ldr	r3, [pc, #848]	@ (8004574 <lcd_init+0x296c>)
 8004224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004228:	611a      	str	r2, [r3, #16]
}
 800422a:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 800422c:	2011      	movs	r0, #17
 800422e:	f7fc fbad 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004232:	2000      	movs	r0, #0
 8004234:	f7fc fbaa 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004238:	2034      	movs	r0, #52	@ 0x34
 800423a:	f7fc fba7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800423e:	2000      	movs	r0, #0
 8004240:	f7fc fba4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004244:	2056      	movs	r0, #86	@ 0x56
 8004246:	f7fc fba1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800424a:	2000      	movs	r0, #0
 800424c:	f7fc fb9e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8004250:	2076      	movs	r0, #118	@ 0x76
 8004252:	f7fc fb9b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004256:	2000      	movs	r0, #0
 8004258:	f7fc fb98 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800425c:	2077      	movs	r0, #119	@ 0x77
 800425e:	f7fc fb95 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004262:	2000      	movs	r0, #0
 8004264:	f7fc fb92 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004268:	2066      	movs	r0, #102	@ 0x66
 800426a:	f7fc fb8f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800426e:	2000      	movs	r0, #0
 8004270:	f7fc fb8c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004274:	2088      	movs	r0, #136	@ 0x88
 8004276:	f7fc fb89 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800427a:	2000      	movs	r0, #0
 800427c:	f7fc fb86 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004280:	2099      	movs	r0, #153	@ 0x99
 8004282:	f7fc fb83 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004286:	2000      	movs	r0, #0
 8004288:	f7fc fb80 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 800428c:	20bb      	movs	r0, #187	@ 0xbb
 800428e:	f7fc fb7d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004292:	2000      	movs	r0, #0
 8004294:	f7fc fb7a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004298:	2099      	movs	r0, #153	@ 0x99
 800429a:	f7fc fb77 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800429e:	2000      	movs	r0, #0
 80042a0:	f7fc fb74 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80042a4:	2066      	movs	r0, #102	@ 0x66
 80042a6:	f7fc fb71 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042aa:	2000      	movs	r0, #0
 80042ac:	f7fc fb6e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80042b0:	2055      	movs	r0, #85	@ 0x55
 80042b2:	f7fc fb6b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042b6:	2000      	movs	r0, #0
 80042b8:	f7fc fb68 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80042bc:	2055      	movs	r0, #85	@ 0x55
 80042be:	f7fc fb65 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042c2:	2000      	movs	r0, #0
 80042c4:	f7fc fb62 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80042c8:	2045      	movs	r0, #69	@ 0x45
 80042ca:	f7fc fb5f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7fc fb5c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 80042d4:	2043      	movs	r0, #67	@ 0x43
 80042d6:	f7fc fb59 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042da:	2000      	movs	r0, #0
 80042dc:	f7fc fb56 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80042e0:	2044      	movs	r0, #68	@ 0x44
 80042e2:	f7fc fb53 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042e6:	2000      	movs	r0, #0
 80042e8:	f7fc fb50 	bl	800098c <lcd_wr_xdata>
 80042ec:	23e7      	movs	r3, #231	@ 0xe7
 80042ee:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80042f2:	4ba0      	ldr	r3, [pc, #640]	@ (8004574 <lcd_init+0x296c>)
 80042f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80042fa:	4b9e      	ldr	r3, [pc, #632]	@ (8004574 <lcd_init+0x296c>)
 80042fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004300:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004302:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8004306:	b29a      	uxth	r2, r3
 8004308:	4b9b      	ldr	r3, [pc, #620]	@ (8004578 <lcd_init+0x2970>)
 800430a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800430c:	4b99      	ldr	r3, [pc, #612]	@ (8004574 <lcd_init+0x296c>)
 800430e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004312:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004314:	4b97      	ldr	r3, [pc, #604]	@ (8004574 <lcd_init+0x296c>)
 8004316:	2280      	movs	r2, #128	@ 0x80
 8004318:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800431a:	4b96      	ldr	r3, [pc, #600]	@ (8004574 <lcd_init+0x296c>)
 800431c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004320:	611a      	str	r2, [r3, #16]
}
 8004322:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 8004324:	2032      	movs	r0, #50	@ 0x32
 8004326:	f7fc fb31 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800432a:	2000      	movs	r0, #0
 800432c:	f7fc fb2e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004330:	2055      	movs	r0, #85	@ 0x55
 8004332:	f7fc fb2b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004336:	2000      	movs	r0, #0
 8004338:	f7fc fb28 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 800433c:	2076      	movs	r0, #118	@ 0x76
 800433e:	f7fc fb25 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004342:	2000      	movs	r0, #0
 8004344:	f7fc fb22 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004348:	2066      	movs	r0, #102	@ 0x66
 800434a:	f7fc fb1f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800434e:	2000      	movs	r0, #0
 8004350:	f7fc fb1c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004354:	2067      	movs	r0, #103	@ 0x67
 8004356:	f7fc fb19 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800435a:	2000      	movs	r0, #0
 800435c:	f7fc fb16 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004360:	2067      	movs	r0, #103	@ 0x67
 8004362:	f7fc fb13 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004366:	2000      	movs	r0, #0
 8004368:	f7fc fb10 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 800436c:	2087      	movs	r0, #135	@ 0x87
 800436e:	f7fc fb0d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004372:	2000      	movs	r0, #0
 8004374:	f7fc fb0a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004378:	2099      	movs	r0, #153	@ 0x99
 800437a:	f7fc fb07 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800437e:	2000      	movs	r0, #0
 8004380:	f7fc fb04 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004384:	20bb      	movs	r0, #187	@ 0xbb
 8004386:	f7fc fb01 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800438a:	2000      	movs	r0, #0
 800438c:	f7fc fafe 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004390:	2099      	movs	r0, #153	@ 0x99
 8004392:	f7fc fafb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004396:	2000      	movs	r0, #0
 8004398:	f7fc faf8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800439c:	2077      	movs	r0, #119	@ 0x77
 800439e:	f7fc faf5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043a2:	2000      	movs	r0, #0
 80043a4:	f7fc faf2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80043a8:	2044      	movs	r0, #68	@ 0x44
 80043aa:	f7fc faef 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043ae:	2000      	movs	r0, #0
 80043b0:	f7fc faec 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80043b4:	2056      	movs	r0, #86	@ 0x56
 80043b6:	f7fc fae9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043ba:	2000      	movs	r0, #0
 80043bc:	f7fc fae6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80043c0:	2023      	movs	r0, #35	@ 0x23
 80043c2:	f7fc fae3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043c6:	2000      	movs	r0, #0
 80043c8:	f7fc fae0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 80043cc:	2033      	movs	r0, #51	@ 0x33
 80043ce:	f7fc fadd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043d2:	2000      	movs	r0, #0
 80043d4:	f7fc fada 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80043d8:	2045      	movs	r0, #69	@ 0x45
 80043da:	f7fc fad7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043de:	2000      	movs	r0, #0
 80043e0:	f7fc fad4 	bl	800098c <lcd_wr_xdata>
 80043e4:	23e8      	movs	r3, #232	@ 0xe8
 80043e6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80043ea:	4b62      	ldr	r3, [pc, #392]	@ (8004574 <lcd_init+0x296c>)
 80043ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80043f2:	4b60      	ldr	r3, [pc, #384]	@ (8004574 <lcd_init+0x296c>)
 80043f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80043fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043fe:	b29a      	uxth	r2, r3
 8004400:	4b5d      	ldr	r3, [pc, #372]	@ (8004578 <lcd_init+0x2970>)
 8004402:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004404:	4b5b      	ldr	r3, [pc, #364]	@ (8004574 <lcd_init+0x296c>)
 8004406:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800440a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800440c:	4b59      	ldr	r3, [pc, #356]	@ (8004574 <lcd_init+0x296c>)
 800440e:	2280      	movs	r2, #128	@ 0x80
 8004410:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004412:	4b58      	ldr	r3, [pc, #352]	@ (8004574 <lcd_init+0x296c>)
 8004414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004418:	611a      	str	r2, [r3, #16]
}
 800441a:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 800441c:	2000      	movs	r0, #0
 800441e:	f7fc fab5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004422:	2000      	movs	r0, #0
 8004424:	f7fc fab2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004428:	2099      	movs	r0, #153	@ 0x99
 800442a:	f7fc faaf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800442e:	2000      	movs	r0, #0
 8004430:	f7fc faac 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 8004434:	2087      	movs	r0, #135	@ 0x87
 8004436:	f7fc faa9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800443a:	2000      	movs	r0, #0
 800443c:	f7fc faa6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004440:	2088      	movs	r0, #136	@ 0x88
 8004442:	f7fc faa3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004446:	2000      	movs	r0, #0
 8004448:	f7fc faa0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800444c:	2077      	movs	r0, #119	@ 0x77
 800444e:	f7fc fa9d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004452:	2000      	movs	r0, #0
 8004454:	f7fc fa9a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004458:	2066      	movs	r0, #102	@ 0x66
 800445a:	f7fc fa97 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800445e:	2000      	movs	r0, #0
 8004460:	f7fc fa94 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004464:	2088      	movs	r0, #136	@ 0x88
 8004466:	f7fc fa91 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800446a:	2000      	movs	r0, #0
 800446c:	f7fc fa8e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 8004470:	20aa      	movs	r0, #170	@ 0xaa
 8004472:	f7fc fa8b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004476:	2000      	movs	r0, #0
 8004478:	f7fc fa88 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 800447c:	20bb      	movs	r0, #187	@ 0xbb
 800447e:	f7fc fa85 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004482:	2000      	movs	r0, #0
 8004484:	f7fc fa82 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004488:	2099      	movs	r0, #153	@ 0x99
 800448a:	f7fc fa7f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800448e:	2000      	movs	r0, #0
 8004490:	f7fc fa7c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004494:	2066      	movs	r0, #102	@ 0x66
 8004496:	f7fc fa79 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800449a:	2000      	movs	r0, #0
 800449c:	f7fc fa76 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80044a0:	2055      	movs	r0, #85	@ 0x55
 80044a2:	f7fc fa73 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044a6:	2000      	movs	r0, #0
 80044a8:	f7fc fa70 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80044ac:	2055      	movs	r0, #85	@ 0x55
 80044ae:	f7fc fa6d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044b2:	2000      	movs	r0, #0
 80044b4:	f7fc fa6a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80044b8:	2044      	movs	r0, #68	@ 0x44
 80044ba:	f7fc fa67 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044be:	2000      	movs	r0, #0
 80044c0:	f7fc fa64 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80044c4:	2044      	movs	r0, #68	@ 0x44
 80044c6:	f7fc fa61 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ca:	2000      	movs	r0, #0
 80044cc:	f7fc fa5e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80044d0:	2055      	movs	r0, #85	@ 0x55
 80044d2:	f7fc fa5b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7fc fa58 	bl	800098c <lcd_wr_xdata>
 80044dc:	23e9      	movs	r3, #233	@ 0xe9
 80044de:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80044e2:	4b24      	ldr	r3, [pc, #144]	@ (8004574 <lcd_init+0x296c>)
 80044e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80044ea:	4b22      	ldr	r3, [pc, #136]	@ (8004574 <lcd_init+0x296c>)
 80044ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80044f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <lcd_init+0x2970>)
 80044fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80044fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004574 <lcd_init+0x296c>)
 80044fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004502:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004504:	4b1b      	ldr	r3, [pc, #108]	@ (8004574 <lcd_init+0x296c>)
 8004506:	2280      	movs	r2, #128	@ 0x80
 8004508:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800450a:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <lcd_init+0x296c>)
 800450c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004510:	611a      	str	r2, [r3, #16]
}
 8004512:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 8004514:	20aa      	movs	r0, #170	@ 0xaa
 8004516:	f7fc fa39 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800451a:	2000      	movs	r0, #0
 800451c:	f7fc fa36 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004520:	2000      	movs	r0, #0
 8004522:	f7fc fa33 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004526:	2000      	movs	r0, #0
 8004528:	f7fc fa30 	bl	800098c <lcd_wr_xdata>
 800452c:	2300      	movs	r3, #0
 800452e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <lcd_init+0x296c>)
 8004534:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004538:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800453a:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <lcd_init+0x296c>)
 800453c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004540:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004542:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004546:	b29a      	uxth	r2, r3
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <lcd_init+0x2970>)
 800454a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800454c:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <lcd_init+0x296c>)
 800454e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004552:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004554:	4b07      	ldr	r3, [pc, #28]	@ (8004574 <lcd_init+0x296c>)
 8004556:	2280      	movs	r2, #128	@ 0x80
 8004558:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800455a:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <lcd_init+0x296c>)
 800455c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004560:	611a      	str	r2, [r3, #16]
}
 8004562:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 8004564:	20aa      	movs	r0, #170	@ 0xaa
 8004566:	f7fc fa11 	bl	800098c <lcd_wr_xdata>
 800456a:	23cf      	movs	r3, #207	@ 0xcf
 800456c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8004570:	e004      	b.n	800457c <lcd_init+0x2974>
 8004572:	bf00      	nop
 8004574:	40011000 	.word	0x40011000
 8004578:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800457c:	4bbc      	ldr	r3, [pc, #752]	@ (8004870 <lcd_init+0x2c68>)
 800457e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004582:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004584:	4bba      	ldr	r3, [pc, #744]	@ (8004870 <lcd_init+0x2c68>)
 8004586:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800458a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800458c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8004590:	b29a      	uxth	r2, r3
 8004592:	4bb8      	ldr	r3, [pc, #736]	@ (8004874 <lcd_init+0x2c6c>)
 8004594:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004596:	4bb6      	ldr	r3, [pc, #728]	@ (8004870 <lcd_init+0x2c68>)
 8004598:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800459c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800459e:	4bb4      	ldr	r3, [pc, #720]	@ (8004870 <lcd_init+0x2c68>)
 80045a0:	2280      	movs	r2, #128	@ 0x80
 80045a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80045a4:	4bb2      	ldr	r3, [pc, #712]	@ (8004870 <lcd_init+0x2c68>)
 80045a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045aa:	611a      	str	r2, [r3, #16]
}
 80045ac:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 80045ae:	2000      	movs	r0, #0
 80045b0:	f7fc f9ec 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b4:	2000      	movs	r0, #0
 80045b6:	f7fc f9e9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045ba:	2000      	movs	r0, #0
 80045bc:	f7fc f9e6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045c0:	2000      	movs	r0, #0
 80045c2:	f7fc f9e3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045c6:	2000      	movs	r0, #0
 80045c8:	f7fc f9e0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045cc:	2000      	movs	r0, #0
 80045ce:	f7fc f9dd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045d2:	2000      	movs	r0, #0
 80045d4:	f7fc f9da 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045d8:	2000      	movs	r0, #0
 80045da:	f7fc f9d7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045de:	2000      	movs	r0, #0
 80045e0:	f7fc f9d4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045e4:	2000      	movs	r0, #0
 80045e6:	f7fc f9d1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045ea:	2000      	movs	r0, #0
 80045ec:	f7fc f9ce 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045f0:	2000      	movs	r0, #0
 80045f2:	f7fc f9cb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045f6:	2000      	movs	r0, #0
 80045f8:	f7fc f9c8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045fc:	2000      	movs	r0, #0
 80045fe:	f7fc f9c5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004602:	2000      	movs	r0, #0
 8004604:	f7fc f9c2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004608:	2000      	movs	r0, #0
 800460a:	f7fc f9bf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800460e:	2000      	movs	r0, #0
 8004610:	f7fc f9bc 	bl	800098c <lcd_wr_xdata>
 8004614:	23f0      	movs	r3, #240	@ 0xf0
 8004616:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800461a:	4b95      	ldr	r3, [pc, #596]	@ (8004870 <lcd_init+0x2c68>)
 800461c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004620:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004622:	4b93      	ldr	r3, [pc, #588]	@ (8004870 <lcd_init+0x2c68>)
 8004624:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004628:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800462a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800462e:	b29a      	uxth	r2, r3
 8004630:	4b90      	ldr	r3, [pc, #576]	@ (8004874 <lcd_init+0x2c6c>)
 8004632:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004634:	4b8e      	ldr	r3, [pc, #568]	@ (8004870 <lcd_init+0x2c68>)
 8004636:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800463a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800463c:	4b8c      	ldr	r3, [pc, #560]	@ (8004870 <lcd_init+0x2c68>)
 800463e:	2280      	movs	r2, #128	@ 0x80
 8004640:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004642:	4b8b      	ldr	r3, [pc, #556]	@ (8004870 <lcd_init+0x2c68>)
 8004644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004648:	611a      	str	r2, [r3, #16]
}
 800464a:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 800464c:	2000      	movs	r0, #0
 800464e:	f7fc f99d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8004652:	2050      	movs	r0, #80	@ 0x50
 8004654:	f7fc f99a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004658:	2000      	movs	r0, #0
 800465a:	f7fc f997 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800465e:	2000      	movs	r0, #0
 8004660:	f7fc f994 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004664:	2000      	movs	r0, #0
 8004666:	f7fc f991 	bl	800098c <lcd_wr_xdata>
 800466a:	23f3      	movs	r3, #243	@ 0xf3
 800466c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004670:	4b7f      	ldr	r3, [pc, #508]	@ (8004870 <lcd_init+0x2c68>)
 8004672:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004676:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004678:	4b7d      	ldr	r3, [pc, #500]	@ (8004870 <lcd_init+0x2c68>)
 800467a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800467e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004680:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004684:	b29a      	uxth	r2, r3
 8004686:	4b7b      	ldr	r3, [pc, #492]	@ (8004874 <lcd_init+0x2c6c>)
 8004688:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800468a:	4b79      	ldr	r3, [pc, #484]	@ (8004870 <lcd_init+0x2c68>)
 800468c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004690:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004692:	4b77      	ldr	r3, [pc, #476]	@ (8004870 <lcd_init+0x2c68>)
 8004694:	2280      	movs	r2, #128	@ 0x80
 8004696:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004698:	4b75      	ldr	r3, [pc, #468]	@ (8004870 <lcd_init+0x2c68>)
 800469a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800469e:	611a      	str	r2, [r3, #16]
}
 80046a0:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 80046a2:	2000      	movs	r0, #0
 80046a4:	f7fc f972 	bl	800098c <lcd_wr_xdata>
 80046a8:	23f9      	movs	r3, #249	@ 0xf9
 80046aa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046ae:	4b70      	ldr	r3, [pc, #448]	@ (8004870 <lcd_init+0x2c68>)
 80046b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046b4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046b6:	4b6e      	ldr	r3, [pc, #440]	@ (8004870 <lcd_init+0x2c68>)
 80046b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046bc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004874 <lcd_init+0x2c6c>)
 80046c6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80046c8:	4b69      	ldr	r3, [pc, #420]	@ (8004870 <lcd_init+0x2c68>)
 80046ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046ce:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80046d0:	4b67      	ldr	r3, [pc, #412]	@ (8004870 <lcd_init+0x2c68>)
 80046d2:	2280      	movs	r2, #128	@ 0x80
 80046d4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80046d6:	4b66      	ldr	r3, [pc, #408]	@ (8004870 <lcd_init+0x2c68>)
 80046d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046dc:	611a      	str	r2, [r3, #16]
}
 80046de:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 80046e0:	2006      	movs	r0, #6
 80046e2:	f7fc f953 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80046e6:	2010      	movs	r0, #16
 80046e8:	f7fc f950 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80046ec:	2029      	movs	r0, #41	@ 0x29
 80046ee:	f7fc f94d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046f2:	2000      	movs	r0, #0
 80046f4:	f7fc f94a 	bl	800098c <lcd_wr_xdata>
 80046f8:	233a      	movs	r3, #58	@ 0x3a
 80046fa:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004870 <lcd_init+0x2c68>)
 8004700:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004704:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004706:	4b5a      	ldr	r3, [pc, #360]	@ (8004870 <lcd_init+0x2c68>)
 8004708:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800470c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800470e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b57      	ldr	r3, [pc, #348]	@ (8004874 <lcd_init+0x2c6c>)
 8004716:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004718:	4b55      	ldr	r3, [pc, #340]	@ (8004870 <lcd_init+0x2c68>)
 800471a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800471e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004720:	4b53      	ldr	r3, [pc, #332]	@ (8004870 <lcd_init+0x2c68>)
 8004722:	2280      	movs	r2, #128	@ 0x80
 8004724:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004726:	4b52      	ldr	r3, [pc, #328]	@ (8004870 <lcd_init+0x2c68>)
 8004728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800472c:	611a      	str	r2, [r3, #16]
}
 800472e:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 8004730:	2055      	movs	r0, #85	@ 0x55
 8004732:	f7fc f92b 	bl	800098c <lcd_wr_xdata>
 8004736:	2311      	movs	r3, #17
 8004738:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800473c:	4b4c      	ldr	r3, [pc, #304]	@ (8004870 <lcd_init+0x2c68>)
 800473e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004742:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004744:	4b4a      	ldr	r3, [pc, #296]	@ (8004870 <lcd_init+0x2c68>)
 8004746:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800474a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800474c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004750:	b29a      	uxth	r2, r3
 8004752:	4b48      	ldr	r3, [pc, #288]	@ (8004874 <lcd_init+0x2c6c>)
 8004754:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004756:	4b46      	ldr	r3, [pc, #280]	@ (8004870 <lcd_init+0x2c68>)
 8004758:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800475c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800475e:	4b44      	ldr	r3, [pc, #272]	@ (8004870 <lcd_init+0x2c68>)
 8004760:	2280      	movs	r2, #128	@ 0x80
 8004762:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004764:	4b42      	ldr	r3, [pc, #264]	@ (8004870 <lcd_init+0x2c68>)
 8004766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800476a:	611a      	str	r2, [r3, #16]
}
 800476c:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 800476e:	2064      	movs	r0, #100	@ 0x64
 8004770:	f002 fdd4 	bl	800731c <HAL_Delay>
 8004774:	2329      	movs	r3, #41	@ 0x29
 8004776:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800477a:	4b3d      	ldr	r3, [pc, #244]	@ (8004870 <lcd_init+0x2c68>)
 800477c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004780:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004782:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <lcd_init+0x2c68>)
 8004784:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004788:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800478a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800478e:	b29a      	uxth	r2, r3
 8004790:	4b38      	ldr	r3, [pc, #224]	@ (8004874 <lcd_init+0x2c6c>)
 8004792:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004794:	4b36      	ldr	r3, [pc, #216]	@ (8004870 <lcd_init+0x2c68>)
 8004796:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800479a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800479c:	4b34      	ldr	r3, [pc, #208]	@ (8004870 <lcd_init+0x2c68>)
 800479e:	2280      	movs	r2, #128	@ 0x80
 80047a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047a2:	4b33      	ldr	r3, [pc, #204]	@ (8004870 <lcd_init+0x2c68>)
 80047a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047a8:	611a      	str	r2, [r3, #16]
}
 80047aa:	bf00      	nop
 80047ac:	2335      	movs	r3, #53	@ 0x35
 80047ae:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004870 <lcd_init+0x2c68>)
 80047b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80047ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004870 <lcd_init+0x2c68>)
 80047bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80047c2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <lcd_init+0x2c6c>)
 80047ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80047cc:	4b28      	ldr	r3, [pc, #160]	@ (8004870 <lcd_init+0x2c68>)
 80047ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80047d4:	4b26      	ldr	r3, [pc, #152]	@ (8004870 <lcd_init+0x2c68>)
 80047d6:	2280      	movs	r2, #128	@ 0x80
 80047d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047da:	4b25      	ldr	r3, [pc, #148]	@ (8004870 <lcd_init+0x2c68>)
 80047dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047e0:	611a      	str	r2, [r3, #16]
}
 80047e2:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 80047e4:	2000      	movs	r0, #0
 80047e6:	f7fc f8d1 	bl	800098c <lcd_wr_xdata>
 80047ea:	2351      	movs	r3, #81	@ 0x51
 80047ec:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004870 <lcd_init+0x2c68>)
 80047f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80047f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004870 <lcd_init+0x2c68>)
 80047fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004800:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8004804:	b29a      	uxth	r2, r3
 8004806:	4b1b      	ldr	r3, [pc, #108]	@ (8004874 <lcd_init+0x2c6c>)
 8004808:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800480a:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <lcd_init+0x2c68>)
 800480c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004810:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004812:	4b17      	ldr	r3, [pc, #92]	@ (8004870 <lcd_init+0x2c68>)
 8004814:	2280      	movs	r2, #128	@ 0x80
 8004816:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004818:	4b15      	ldr	r3, [pc, #84]	@ (8004870 <lcd_init+0x2c68>)
 800481a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800481e:	611a      	str	r2, [r3, #16]
}
 8004820:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 8004822:	20ff      	movs	r0, #255	@ 0xff
 8004824:	f7fc f8b2 	bl	800098c <lcd_wr_xdata>
 8004828:	2353      	movs	r3, #83	@ 0x53
 800482a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800482e:	4b10      	ldr	r3, [pc, #64]	@ (8004870 <lcd_init+0x2c68>)
 8004830:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004834:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004836:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <lcd_init+0x2c68>)
 8004838:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800483c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800483e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004842:	b29a      	uxth	r2, r3
 8004844:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <lcd_init+0x2c6c>)
 8004846:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004848:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <lcd_init+0x2c68>)
 800484a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800484e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <lcd_init+0x2c68>)
 8004852:	2280      	movs	r2, #128	@ 0x80
 8004854:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <lcd_init+0x2c68>)
 8004858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800485c:	611a      	str	r2, [r3, #16]
}
 800485e:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 8004860:	202c      	movs	r0, #44	@ 0x2c
 8004862:	f7fc f893 	bl	800098c <lcd_wr_xdata>
 8004866:	2355      	movs	r3, #85	@ 0x55
 8004868:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 800486c:	e004      	b.n	8004878 <lcd_init+0x2c70>
 800486e:	bf00      	nop
 8004870:	40011000 	.word	0x40011000
 8004874:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004878:	4b1c      	ldr	r3, [pc, #112]	@ (80048ec <lcd_init+0x2ce4>)
 800487a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800487e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004880:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <lcd_init+0x2ce4>)
 8004882:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004886:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004888:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800488c:	b29a      	uxth	r2, r3
 800488e:	4b18      	ldr	r3, [pc, #96]	@ (80048f0 <lcd_init+0x2ce8>)
 8004890:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004892:	4b16      	ldr	r3, [pc, #88]	@ (80048ec <lcd_init+0x2ce4>)
 8004894:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004898:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800489a:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <lcd_init+0x2ce4>)
 800489c:	2280      	movs	r2, #128	@ 0x80
 800489e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048a0:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <lcd_init+0x2ce4>)
 80048a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a6:	611a      	str	r2, [r3, #16]
}
 80048a8:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 80048aa:	2082      	movs	r0, #130	@ 0x82
 80048ac:	f7fc f86e 	bl	800098c <lcd_wr_xdata>
 80048b0:	232c      	movs	r3, #44	@ 0x2c
 80048b2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048b6:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <lcd_init+0x2ce4>)
 80048b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80048be:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <lcd_init+0x2ce4>)
 80048c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80048c6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <lcd_init+0x2ce8>)
 80048ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80048d0:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <lcd_init+0x2ce4>)
 80048d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048d8:	4b04      	ldr	r3, [pc, #16]	@ (80048ec <lcd_init+0x2ce4>)
 80048da:	2280      	movs	r2, #128	@ 0x80
 80048dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048de:	4b03      	ldr	r3, [pc, #12]	@ (80048ec <lcd_init+0x2ce4>)
 80048e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e4:	611a      	str	r2, [r3, #16]
}
 80048e6:	f002 b8d8 	b.w	8006a9a <lcd_init+0x4e92>
 80048ea:	bf00      	nop
 80048ec:	40011000 	.word	0x40011000
 80048f0:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 80048f4:	4bb4      	ldr	r3, [pc, #720]	@ (8004bc8 <lcd_init+0x2fc0>)
 80048f6:	889b      	ldrh	r3, [r3, #4]
 80048f8:	f247 7296 	movw	r2, #30614	@ 0x7796
 80048fc:	4293      	cmp	r3, r2
 80048fe:	f040 82e3 	bne.w	8004ec8 <lcd_init+0x32c0>
 8004902:	2311      	movs	r3, #17
 8004904:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004908:	4bb0      	ldr	r3, [pc, #704]	@ (8004bcc <lcd_init+0x2fc4>)
 800490a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800490e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004910:	4bae      	ldr	r3, [pc, #696]	@ (8004bcc <lcd_init+0x2fc4>)
 8004912:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004916:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004918:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 800491c:	b29a      	uxth	r2, r3
 800491e:	4bac      	ldr	r3, [pc, #688]	@ (8004bd0 <lcd_init+0x2fc8>)
 8004920:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004922:	4baa      	ldr	r3, [pc, #680]	@ (8004bcc <lcd_init+0x2fc4>)
 8004924:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004928:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800492a:	4ba8      	ldr	r3, [pc, #672]	@ (8004bcc <lcd_init+0x2fc4>)
 800492c:	2280      	movs	r2, #128	@ 0x80
 800492e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004930:	4ba6      	ldr	r3, [pc, #664]	@ (8004bcc <lcd_init+0x2fc4>)
 8004932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004936:	611a      	str	r2, [r3, #16]
}
 8004938:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800493a:	2078      	movs	r0, #120	@ 0x78
 800493c:	f002 fcee 	bl	800731c <HAL_Delay>
 8004940:	2336      	movs	r3, #54	@ 0x36
 8004942:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004946:	4ba1      	ldr	r3, [pc, #644]	@ (8004bcc <lcd_init+0x2fc4>)
 8004948:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800494c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800494e:	4b9f      	ldr	r3, [pc, #636]	@ (8004bcc <lcd_init+0x2fc4>)
 8004950:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004954:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004956:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 800495a:	b29a      	uxth	r2, r3
 800495c:	4b9c      	ldr	r3, [pc, #624]	@ (8004bd0 <lcd_init+0x2fc8>)
 800495e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004960:	4b9a      	ldr	r3, [pc, #616]	@ (8004bcc <lcd_init+0x2fc4>)
 8004962:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004966:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004968:	4b98      	ldr	r3, [pc, #608]	@ (8004bcc <lcd_init+0x2fc4>)
 800496a:	2280      	movs	r2, #128	@ 0x80
 800496c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800496e:	4b97      	ldr	r3, [pc, #604]	@ (8004bcc <lcd_init+0x2fc4>)
 8004970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004974:	611a      	str	r2, [r3, #16]
}
 8004976:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 8004978:	2048      	movs	r0, #72	@ 0x48
 800497a:	f7fc f807 	bl	800098c <lcd_wr_xdata>
 800497e:	233a      	movs	r3, #58	@ 0x3a
 8004980:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004984:	4b91      	ldr	r3, [pc, #580]	@ (8004bcc <lcd_init+0x2fc4>)
 8004986:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800498a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800498c:	4b8f      	ldr	r3, [pc, #572]	@ (8004bcc <lcd_init+0x2fc4>)
 800498e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004992:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004994:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8004998:	b29a      	uxth	r2, r3
 800499a:	4b8d      	ldr	r3, [pc, #564]	@ (8004bd0 <lcd_init+0x2fc8>)
 800499c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800499e:	4b8b      	ldr	r3, [pc, #556]	@ (8004bcc <lcd_init+0x2fc4>)
 80049a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049a6:	4b89      	ldr	r3, [pc, #548]	@ (8004bcc <lcd_init+0x2fc4>)
 80049a8:	2280      	movs	r2, #128	@ 0x80
 80049aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049ac:	4b87      	ldr	r3, [pc, #540]	@ (8004bcc <lcd_init+0x2fc4>)
 80049ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049b2:	611a      	str	r2, [r3, #16]
}
 80049b4:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 80049b6:	2055      	movs	r0, #85	@ 0x55
 80049b8:	f7fb ffe8 	bl	800098c <lcd_wr_xdata>
 80049bc:	23f0      	movs	r3, #240	@ 0xf0
 80049be:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049c2:	4b82      	ldr	r3, [pc, #520]	@ (8004bcc <lcd_init+0x2fc4>)
 80049c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80049ca:	4b80      	ldr	r3, [pc, #512]	@ (8004bcc <lcd_init+0x2fc4>)
 80049cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80049d2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	4b7d      	ldr	r3, [pc, #500]	@ (8004bd0 <lcd_init+0x2fc8>)
 80049da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049dc:	4b7b      	ldr	r3, [pc, #492]	@ (8004bcc <lcd_init+0x2fc4>)
 80049de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049e4:	4b79      	ldr	r3, [pc, #484]	@ (8004bcc <lcd_init+0x2fc4>)
 80049e6:	2280      	movs	r2, #128	@ 0x80
 80049e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049ea:	4b78      	ldr	r3, [pc, #480]	@ (8004bcc <lcd_init+0x2fc4>)
 80049ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049f0:	611a      	str	r2, [r3, #16]
}
 80049f2:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 80049f4:	20c3      	movs	r0, #195	@ 0xc3
 80049f6:	f7fb ffc9 	bl	800098c <lcd_wr_xdata>
 80049fa:	23f0      	movs	r3, #240	@ 0xf0
 80049fc:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a00:	4b72      	ldr	r3, [pc, #456]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a06:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a08:	4b70      	ldr	r3, [pc, #448]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a0e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a10:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	4b6e      	ldr	r3, [pc, #440]	@ (8004bd0 <lcd_init+0x2fc8>)
 8004a18:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a1a:	4b6c      	ldr	r3, [pc, #432]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a20:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a22:	4b6a      	ldr	r3, [pc, #424]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a24:	2280      	movs	r2, #128	@ 0x80
 8004a26:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a28:	4b68      	ldr	r3, [pc, #416]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a2e:	611a      	str	r2, [r3, #16]
}
 8004a30:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 8004a32:	2096      	movs	r0, #150	@ 0x96
 8004a34:	f7fb ffaa 	bl	800098c <lcd_wr_xdata>
 8004a38:	23b4      	movs	r3, #180	@ 0xb4
 8004a3a:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a3e:	4b63      	ldr	r3, [pc, #396]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a44:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a46:	4b61      	ldr	r3, [pc, #388]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a4c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	4b5e      	ldr	r3, [pc, #376]	@ (8004bd0 <lcd_init+0x2fc8>)
 8004a56:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a58:	4b5c      	ldr	r3, [pc, #368]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a5a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a5e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a60:	4b5a      	ldr	r3, [pc, #360]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a62:	2280      	movs	r2, #128	@ 0x80
 8004a64:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a66:	4b59      	ldr	r3, [pc, #356]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a6c:	611a      	str	r2, [r3, #16]
}
 8004a6e:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 8004a70:	2001      	movs	r0, #1
 8004a72:	f7fb ff8b 	bl	800098c <lcd_wr_xdata>
 8004a76:	23b6      	movs	r3, #182	@ 0xb6
 8004a78:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a7c:	4b53      	ldr	r3, [pc, #332]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a82:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a84:	4b51      	ldr	r3, [pc, #324]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a8a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a8c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd0 <lcd_init+0x2fc8>)
 8004a94:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a96:	4b4d      	ldr	r3, [pc, #308]	@ (8004bcc <lcd_init+0x2fc4>)
 8004a98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a9c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004bcc <lcd_init+0x2fc4>)
 8004aa0:	2280      	movs	r2, #128	@ 0x80
 8004aa2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004aa4:	4b49      	ldr	r3, [pc, #292]	@ (8004bcc <lcd_init+0x2fc4>)
 8004aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aaa:	611a      	str	r2, [r3, #16]
}
 8004aac:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 8004aae:	200a      	movs	r0, #10
 8004ab0:	f7fb ff6c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004ab4:	20a2      	movs	r0, #162	@ 0xa2
 8004ab6:	f7fb ff69 	bl	800098c <lcd_wr_xdata>
 8004aba:	23b7      	movs	r3, #183	@ 0xb7
 8004abc:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ac0:	4b42      	ldr	r3, [pc, #264]	@ (8004bcc <lcd_init+0x2fc4>)
 8004ac2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ac6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ac8:	4b40      	ldr	r3, [pc, #256]	@ (8004bcc <lcd_init+0x2fc4>)
 8004aca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ace:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ad0:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd0 <lcd_init+0x2fc8>)
 8004ad8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ada:	4b3c      	ldr	r3, [pc, #240]	@ (8004bcc <lcd_init+0x2fc4>)
 8004adc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ae0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8004bcc <lcd_init+0x2fc4>)
 8004ae4:	2280      	movs	r2, #128	@ 0x80
 8004ae6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ae8:	4b38      	ldr	r3, [pc, #224]	@ (8004bcc <lcd_init+0x2fc4>)
 8004aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aee:	611a      	str	r2, [r3, #16]
}
 8004af0:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 8004af2:	20c6      	movs	r0, #198	@ 0xc6
 8004af4:	f7fb ff4a 	bl	800098c <lcd_wr_xdata>
 8004af8:	23b9      	movs	r3, #185	@ 0xb9
 8004afa:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004afe:	4b33      	ldr	r3, [pc, #204]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b04:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b06:	4b31      	ldr	r3, [pc, #196]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b0c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b0e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd0 <lcd_init+0x2fc8>)
 8004b16:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b18:	4b2c      	ldr	r3, [pc, #176]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b1a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b1e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b20:	4b2a      	ldr	r3, [pc, #168]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b22:	2280      	movs	r2, #128	@ 0x80
 8004b24:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b26:	4b29      	ldr	r3, [pc, #164]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b2c:	611a      	str	r2, [r3, #16]
}
 8004b2e:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8004b30:	2002      	movs	r0, #2
 8004b32:	f7fb ff2b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8004b36:	20e0      	movs	r0, #224	@ 0xe0
 8004b38:	f7fb ff28 	bl	800098c <lcd_wr_xdata>
 8004b3c:	23c0      	movs	r3, #192	@ 0xc0
 8004b3e:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b42:	4b22      	ldr	r3, [pc, #136]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b4a:	4b20      	ldr	r3, [pc, #128]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b52:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd0 <lcd_init+0x2fc8>)
 8004b5a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b62:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b64:	4b19      	ldr	r3, [pc, #100]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b66:	2280      	movs	r2, #128	@ 0x80
 8004b68:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b6a:	4b18      	ldr	r3, [pc, #96]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b70:	611a      	str	r2, [r3, #16]
}
 8004b72:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 8004b74:	2080      	movs	r0, #128	@ 0x80
 8004b76:	f7fb ff09 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 8004b7a:	2016      	movs	r0, #22
 8004b7c:	f7fb ff06 	bl	800098c <lcd_wr_xdata>
 8004b80:	23c1      	movs	r3, #193	@ 0xc1
 8004b82:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b86:	4b11      	ldr	r3, [pc, #68]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b8c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bcc <lcd_init+0x2fc4>)
 8004b90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b94:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b96:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <lcd_init+0x2fc8>)
 8004b9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <lcd_init+0x2fc4>)
 8004ba2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ba6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ba8:	4b08      	ldr	r3, [pc, #32]	@ (8004bcc <lcd_init+0x2fc4>)
 8004baa:	2280      	movs	r2, #128	@ 0x80
 8004bac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004bae:	4b07      	ldr	r3, [pc, #28]	@ (8004bcc <lcd_init+0x2fc4>)
 8004bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb4:	611a      	str	r2, [r3, #16]
}
 8004bb6:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 8004bb8:	2019      	movs	r0, #25
 8004bba:	f7fb fee7 	bl	800098c <lcd_wr_xdata>
 8004bbe:	23c2      	movs	r3, #194	@ 0xc2
 8004bc0:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
 8004bc4:	e006      	b.n	8004bd4 <lcd_init+0x2fcc>
 8004bc6:	bf00      	nop
 8004bc8:	2000002c 	.word	0x2000002c
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004bd4:	4bba      	ldr	r3, [pc, #744]	@ (8004ec0 <lcd_init+0x32b8>)
 8004bd6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bda:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004bdc:	4bb8      	ldr	r3, [pc, #736]	@ (8004ec0 <lcd_init+0x32b8>)
 8004bde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004be2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004be4:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	4bb6      	ldr	r3, [pc, #728]	@ (8004ec4 <lcd_init+0x32bc>)
 8004bec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004bee:	4bb4      	ldr	r3, [pc, #720]	@ (8004ec0 <lcd_init+0x32b8>)
 8004bf0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004bf4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004bf6:	4bb2      	ldr	r3, [pc, #712]	@ (8004ec0 <lcd_init+0x32b8>)
 8004bf8:	2280      	movs	r2, #128	@ 0x80
 8004bfa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004bfc:	4bb0      	ldr	r3, [pc, #704]	@ (8004ec0 <lcd_init+0x32b8>)
 8004bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c02:	611a      	str	r2, [r3, #16]
}
 8004c04:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 8004c06:	20a7      	movs	r0, #167	@ 0xa7
 8004c08:	f7fb fec0 	bl	800098c <lcd_wr_xdata>
 8004c0c:	23c5      	movs	r3, #197	@ 0xc5
 8004c0e:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c12:	4bab      	ldr	r3, [pc, #684]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c18:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c1a:	4ba9      	ldr	r3, [pc, #676]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c20:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c22:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	4ba6      	ldr	r3, [pc, #664]	@ (8004ec4 <lcd_init+0x32bc>)
 8004c2a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c2c:	4ba4      	ldr	r3, [pc, #656]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c32:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c34:	4ba2      	ldr	r3, [pc, #648]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c36:	2280      	movs	r2, #128	@ 0x80
 8004c38:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c3a:	4ba1      	ldr	r3, [pc, #644]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c40:	611a      	str	r2, [r3, #16]
}
 8004c42:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 8004c44:	2016      	movs	r0, #22
 8004c46:	f7fb fea1 	bl	800098c <lcd_wr_xdata>
 8004c4a:	23e8      	movs	r3, #232	@ 0xe8
 8004c4c:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c50:	4b9b      	ldr	r3, [pc, #620]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c56:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c58:	4b99      	ldr	r3, [pc, #612]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c60:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	4b97      	ldr	r3, [pc, #604]	@ (8004ec4 <lcd_init+0x32bc>)
 8004c68:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c6a:	4b95      	ldr	r3, [pc, #596]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c70:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c72:	4b93      	ldr	r3, [pc, #588]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c74:	2280      	movs	r2, #128	@ 0x80
 8004c76:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c78:	4b91      	ldr	r3, [pc, #580]	@ (8004ec0 <lcd_init+0x32b8>)
 8004c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c7e:	611a      	str	r2, [r3, #16]
}
 8004c80:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 8004c82:	2040      	movs	r0, #64	@ 0x40
 8004c84:	f7fb fe82 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 8004c88:	208a      	movs	r0, #138	@ 0x8a
 8004c8a:	f7fb fe7f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f7fb fe7c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7fb fe79 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004c9a:	2029      	movs	r0, #41	@ 0x29
 8004c9c:	f7fb fe76 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8004ca0:	2019      	movs	r0, #25
 8004ca2:	f7fb fe73 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 8004ca6:	20a5      	movs	r0, #165	@ 0xa5
 8004ca8:	f7fb fe70 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004cac:	2033      	movs	r0, #51	@ 0x33
 8004cae:	f7fb fe6d 	bl	800098c <lcd_wr_xdata>
 8004cb2:	23e0      	movs	r3, #224	@ 0xe0
 8004cb4:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004cb8:	4b81      	ldr	r3, [pc, #516]	@ (8004ec0 <lcd_init+0x32b8>)
 8004cba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cbe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004cc0:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec0 <lcd_init+0x32b8>)
 8004cc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cc6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004cc8:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	4b7d      	ldr	r3, [pc, #500]	@ (8004ec4 <lcd_init+0x32bc>)
 8004cd0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec0 <lcd_init+0x32b8>)
 8004cd4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cd8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cda:	4b79      	ldr	r3, [pc, #484]	@ (8004ec0 <lcd_init+0x32b8>)
 8004cdc:	2280      	movs	r2, #128	@ 0x80
 8004cde:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ce0:	4b77      	ldr	r3, [pc, #476]	@ (8004ec0 <lcd_init+0x32b8>)
 8004ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ce6:	611a      	str	r2, [r3, #16]
}
 8004ce8:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 8004cea:	20f0      	movs	r0, #240	@ 0xf0
 8004cec:	f7fb fe4e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8004cf0:	2007      	movs	r0, #7
 8004cf2:	f7fb fe4b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8004cf6:	200d      	movs	r0, #13
 8004cf8:	f7fb fe48 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8004cfc:	2004      	movs	r0, #4
 8004cfe:	f7fb fe45 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8004d02:	2005      	movs	r0, #5
 8004d04:	f7fb fe42 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004d08:	2014      	movs	r0, #20
 8004d0a:	f7fb fe3f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004d0e:	2036      	movs	r0, #54	@ 0x36
 8004d10:	f7fb fe3c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8004d14:	2054      	movs	r0, #84	@ 0x54
 8004d16:	f7fb fe39 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004d1a:	204c      	movs	r0, #76	@ 0x4c
 8004d1c:	f7fb fe36 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8004d20:	2038      	movs	r0, #56	@ 0x38
 8004d22:	f7fb fe33 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8004d26:	2013      	movs	r0, #19
 8004d28:	f7fb fe30 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004d2c:	2014      	movs	r0, #20
 8004d2e:	f7fb fe2d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 8004d32:	202e      	movs	r0, #46	@ 0x2e
 8004d34:	f7fb fe2a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004d38:	2034      	movs	r0, #52	@ 0x34
 8004d3a:	f7fb fe27 	bl	800098c <lcd_wr_xdata>
 8004d3e:	23e1      	movs	r3, #225	@ 0xe1
 8004d40:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d44:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec0 <lcd_init+0x32b8>)
 8004d46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d4a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d4c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ec0 <lcd_init+0x32b8>)
 8004d4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d52:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d54:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ec4 <lcd_init+0x32bc>)
 8004d5c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d5e:	4b58      	ldr	r3, [pc, #352]	@ (8004ec0 <lcd_init+0x32b8>)
 8004d60:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d64:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d66:	4b56      	ldr	r3, [pc, #344]	@ (8004ec0 <lcd_init+0x32b8>)
 8004d68:	2280      	movs	r2, #128	@ 0x80
 8004d6a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d6c:	4b54      	ldr	r3, [pc, #336]	@ (8004ec0 <lcd_init+0x32b8>)
 8004d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d72:	611a      	str	r2, [r3, #16]
}
 8004d74:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 8004d76:	20f0      	movs	r0, #240	@ 0xf0
 8004d78:	f7fb fe08 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004d7c:	2010      	movs	r0, #16
 8004d7e:	f7fb fe05 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004d82:	2014      	movs	r0, #20
 8004d84:	f7fb fe02 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8004d88:	200e      	movs	r0, #14
 8004d8a:	f7fb fdff 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8004d8e:	200c      	movs	r0, #12
 8004d90:	f7fb fdfc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8004d94:	2008      	movs	r0, #8
 8004d96:	f7fb fdf9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 8004d9a:	2035      	movs	r0, #53	@ 0x35
 8004d9c:	f7fb fdf6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004da0:	2044      	movs	r0, #68	@ 0x44
 8004da2:	f7fb fdf3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004da6:	204c      	movs	r0, #76	@ 0x4c
 8004da8:	f7fb fdf0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8004dac:	2026      	movs	r0, #38	@ 0x26
 8004dae:	f7fb fded 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004db2:	2010      	movs	r0, #16
 8004db4:	f7fb fdea 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8004db8:	2012      	movs	r0, #18
 8004dba:	f7fb fde7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8004dbe:	202c      	movs	r0, #44	@ 0x2c
 8004dc0:	f7fb fde4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8004dc4:	2032      	movs	r0, #50	@ 0x32
 8004dc6:	f7fb fde1 	bl	800098c <lcd_wr_xdata>
 8004dca:	23f0      	movs	r3, #240	@ 0xf0
 8004dcc:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec0 <lcd_init+0x32b8>)
 8004dd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dd6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004dd8:	4b39      	ldr	r3, [pc, #228]	@ (8004ec0 <lcd_init+0x32b8>)
 8004dda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dde:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004de0:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	4b37      	ldr	r3, [pc, #220]	@ (8004ec4 <lcd_init+0x32bc>)
 8004de8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004dea:	4b35      	ldr	r3, [pc, #212]	@ (8004ec0 <lcd_init+0x32b8>)
 8004dec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004df0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004df2:	4b33      	ldr	r3, [pc, #204]	@ (8004ec0 <lcd_init+0x32b8>)
 8004df4:	2280      	movs	r2, #128	@ 0x80
 8004df6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004df8:	4b31      	ldr	r3, [pc, #196]	@ (8004ec0 <lcd_init+0x32b8>)
 8004dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dfe:	611a      	str	r2, [r3, #16]
}
 8004e00:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 8004e02:	203c      	movs	r0, #60	@ 0x3c
 8004e04:	f7fb fdc2 	bl	800098c <lcd_wr_xdata>
 8004e08:	23f0      	movs	r3, #240	@ 0xf0
 8004e0a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e16:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e1e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	4b27      	ldr	r3, [pc, #156]	@ (8004ec4 <lcd_init+0x32bc>)
 8004e26:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e28:	4b25      	ldr	r3, [pc, #148]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e2a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e2e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e30:	4b23      	ldr	r3, [pc, #140]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e32:	2280      	movs	r2, #128	@ 0x80
 8004e34:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e36:	4b22      	ldr	r3, [pc, #136]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e3c:	611a      	str	r2, [r3, #16]
}
 8004e3e:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 8004e40:	2069      	movs	r0, #105	@ 0x69
 8004e42:	f7fb fda3 	bl	800098c <lcd_wr_xdata>

        HAL_Delay(120);
 8004e46:	2078      	movs	r0, #120	@ 0x78
 8004e48:	f002 fa68 	bl	800731c <HAL_Delay>
 8004e4c:	2321      	movs	r3, #33	@ 0x21
 8004e4e:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e52:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e58:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e5a:	4b19      	ldr	r3, [pc, #100]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e60:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e62:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	4b16      	ldr	r3, [pc, #88]	@ (8004ec4 <lcd_init+0x32bc>)
 8004e6a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e6c:	4b14      	ldr	r3, [pc, #80]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e6e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e72:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e74:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e76:	2280      	movs	r2, #128	@ 0x80
 8004e78:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e7a:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e80:	611a      	str	r2, [r3, #16]
}
 8004e82:	bf00      	nop
 8004e84:	2329      	movs	r3, #41	@ 0x29
 8004e86:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e90:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <lcd_init+0x32b8>)
 8004e94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e98:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e9a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <lcd_init+0x32bc>)
 8004ea2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ea4:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <lcd_init+0x32b8>)
 8004ea6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004eaa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004eac:	4b04      	ldr	r3, [pc, #16]	@ (8004ec0 <lcd_init+0x32b8>)
 8004eae:	2280      	movs	r2, #128	@ 0x80
 8004eb0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004eb2:	4b03      	ldr	r3, [pc, #12]	@ (8004ec0 <lcd_init+0x32b8>)
 8004eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eb8:	611a      	str	r2, [r3, #16]
}
 8004eba:	f001 bdee 	b.w	8006a9a <lcd_init+0x4e92>
 8004ebe:	bf00      	nop
 8004ec0:	40011000 	.word	0x40011000
 8004ec4:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <lcd_init+0x32d0>)
 8004eca:	889b      	ldrh	r3, [r3, #4]
 8004ecc:	f245 5210 	movw	r2, #21776	@ 0x5510
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	f040 87b3 	bne.w	8005e3c <lcd_init+0x4234>
 8004ed6:	e001      	b.n	8004edc <lcd_init+0x32d4>
 8004ed8:	2000002c 	.word	0x2000002c
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 8004edc:	2155      	movs	r1, #85	@ 0x55
 8004ede:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8004ee2:	f7fb fd77 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8004ee6:	21aa      	movs	r1, #170	@ 0xaa
 8004ee8:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8004eec:	f7fb fd72 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8004ef0:	2152      	movs	r1, #82	@ 0x52
 8004ef2:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8004ef6:	f7fb fd6d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8004efa:	2108      	movs	r1, #8
 8004efc:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8004f00:	f7fb fd68 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 8004f04:	2101      	movs	r1, #1
 8004f06:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8004f0a:	f7fb fd63 	bl	80009d4 <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 8004f0e:	210d      	movs	r1, #13
 8004f10:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8004f14:	f7fb fd5e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8004f18:	210d      	movs	r1, #13
 8004f1a:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8004f1e:	f7fb fd59 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 8004f22:	210d      	movs	r1, #13
 8004f24:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8004f28:	f7fb fd54 	bl	80009d4 <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 8004f2c:	2134      	movs	r1, #52	@ 0x34
 8004f2e:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8004f32:	f7fb fd4f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 8004f36:	2134      	movs	r1, #52	@ 0x34
 8004f38:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8004f3c:	f7fb fd4a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 8004f40:	2134      	movs	r1, #52	@ 0x34
 8004f42:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8004f46:	f7fb fd45 	bl	80009d4 <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 8004f4a:	210d      	movs	r1, #13
 8004f4c:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8004f50:	f7fb fd40 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 8004f54:	210d      	movs	r1, #13
 8004f56:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8004f5a:	f7fb fd3b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 8004f5e:	210d      	movs	r1, #13
 8004f60:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8004f64:	f7fb fd36 	bl	80009d4 <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 8004f68:	2134      	movs	r1, #52	@ 0x34
 8004f6a:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8004f6e:	f7fb fd31 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 8004f72:	2134      	movs	r1, #52	@ 0x34
 8004f74:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8004f78:	f7fb fd2c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 8004f7c:	2134      	movs	r1, #52	@ 0x34
 8004f7e:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8004f82:	f7fb fd27 	bl	80009d4 <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 8004f86:	2100      	movs	r1, #0
 8004f88:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8004f8c:	f7fb fd22 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 8004f90:	2100      	movs	r1, #0
 8004f92:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8004f96:	f7fb fd1d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8004fa0:	f7fb fd18 	bl	80009d4 <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 8004fa4:	2124      	movs	r1, #36	@ 0x24
 8004fa6:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8004faa:	f7fb fd13 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 8004fae:	2124      	movs	r1, #36	@ 0x24
 8004fb0:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8004fb4:	f7fb fd0e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 8004fb8:	2124      	movs	r1, #36	@ 0x24
 8004fba:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8004fbe:	f7fb fd09 	bl	80009d4 <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8004fc8:	f7fb fd04 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 8004fcc:	210f      	movs	r1, #15
 8004fce:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8004fd2:	f7fb fcff 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 8004fd6:	210f      	movs	r1, #15
 8004fd8:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8004fdc:	f7fb fcfa 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 8004fe0:	210f      	movs	r1, #15
 8004fe2:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8004fe6:	f7fb fcf5 	bl	80009d4 <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 8004fea:	2134      	movs	r1, #52	@ 0x34
 8004fec:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8004ff0:	f7fb fcf0 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 8004ff4:	2134      	movs	r1, #52	@ 0x34
 8004ff6:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8004ffa:	f7fb fceb 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 8004ffe:	2134      	movs	r1, #52	@ 0x34
 8005000:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8005004:	f7fb fce6 	bl	80009d4 <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8005008:	2108      	movs	r1, #8
 800500a:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 800500e:	f7fb fce1 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 8005012:	2108      	movs	r1, #8
 8005014:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8005018:	f7fb fcdc 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 800501c:	2108      	movs	r1, #8
 800501e:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8005022:	f7fb fcd7 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 8005026:	2103      	movs	r1, #3
 8005028:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 800502c:	f7fb fcd2 	bl	80009d4 <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 8005030:	2124      	movs	r1, #36	@ 0x24
 8005032:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8005036:	f7fb fccd 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 800503a:	2124      	movs	r1, #36	@ 0x24
 800503c:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8005040:	f7fb fcc8 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 8005044:	2124      	movs	r1, #36	@ 0x24
 8005046:	f64b 2002 	movw	r0, #47618	@ 0xba02
 800504a:	f7fb fcc3 	bl	80009d4 <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 800504e:	2100      	movs	r1, #0
 8005050:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005054:	f7fb fcbe 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 8005058:	2178      	movs	r1, #120	@ 0x78
 800505a:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 800505e:	f7fb fcb9 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005062:	2100      	movs	r1, #0
 8005064:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005068:	f7fb fcb4 	bl	80009d4 <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 800506c:	2100      	movs	r1, #0
 800506e:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8005072:	f7fb fcaf 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 8005076:	2178      	movs	r1, #120	@ 0x78
 8005078:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 800507c:	f7fb fcaa 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 8005080:	2100      	movs	r1, #0
 8005082:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8005086:	f7fb fca5 	bl	80009d4 <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 800508a:	2100      	movs	r1, #0
 800508c:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8005090:	f7fb fca0 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 8005094:	2164      	movs	r1, #100	@ 0x64
 8005096:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 800509a:	f7fb fc9b 	bl	80009d4 <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 800509e:	2100      	movs	r1, #0
 80050a0:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 80050a4:	f7fb fc96 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 80050a8:	2133      	movs	r1, #51	@ 0x33
 80050aa:	f24d 1001 	movw	r0, #53505	@ 0xd101
 80050ae:	f7fb fc91 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 80050b2:	2100      	movs	r1, #0
 80050b4:	f24d 1002 	movw	r0, #53506	@ 0xd102
 80050b8:	f7fb fc8c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 80050bc:	2134      	movs	r1, #52	@ 0x34
 80050be:	f24d 1003 	movw	r0, #53507	@ 0xd103
 80050c2:	f7fb fc87 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 80050c6:	2100      	movs	r1, #0
 80050c8:	f24d 1004 	movw	r0, #53508	@ 0xd104
 80050cc:	f7fb fc82 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 80050d0:	213a      	movs	r1, #58	@ 0x3a
 80050d2:	f24d 1005 	movw	r0, #53509	@ 0xd105
 80050d6:	f7fb fc7d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 80050da:	2100      	movs	r1, #0
 80050dc:	f24d 1006 	movw	r0, #53510	@ 0xd106
 80050e0:	f7fb fc78 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 80050e4:	214a      	movs	r1, #74	@ 0x4a
 80050e6:	f24d 1007 	movw	r0, #53511	@ 0xd107
 80050ea:	f7fb fc73 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 80050ee:	2100      	movs	r1, #0
 80050f0:	f24d 1008 	movw	r0, #53512	@ 0xd108
 80050f4:	f7fb fc6e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 80050f8:	215c      	movs	r1, #92	@ 0x5c
 80050fa:	f24d 1009 	movw	r0, #53513	@ 0xd109
 80050fe:	f7fb fc69 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 8005102:	2100      	movs	r1, #0
 8005104:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005108:	f7fb fc64 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 800510c:	2181      	movs	r1, #129	@ 0x81
 800510e:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005112:	f7fb fc5f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 8005116:	2100      	movs	r1, #0
 8005118:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 800511c:	f7fb fc5a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 8005120:	21a6      	movs	r1, #166	@ 0xa6
 8005122:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8005126:	f7fb fc55 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 800512a:	2100      	movs	r1, #0
 800512c:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8005130:	f7fb fc50 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 8005134:	21e5      	movs	r1, #229	@ 0xe5
 8005136:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 800513a:	f7fb fc4b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 800513e:	2101      	movs	r1, #1
 8005140:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8005144:	f7fb fc46 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 8005148:	2113      	movs	r1, #19
 800514a:	f24d 1011 	movw	r0, #53521	@ 0xd111
 800514e:	f7fb fc41 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 8005152:	2101      	movs	r1, #1
 8005154:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8005158:	f7fb fc3c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 800515c:	2154      	movs	r1, #84	@ 0x54
 800515e:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8005162:	f7fb fc37 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 8005166:	2101      	movs	r1, #1
 8005168:	f24d 1014 	movw	r0, #53524	@ 0xd114
 800516c:	f7fb fc32 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 8005170:	2182      	movs	r1, #130	@ 0x82
 8005172:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8005176:	f7fb fc2d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 800517a:	2101      	movs	r1, #1
 800517c:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8005180:	f7fb fc28 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 8005184:	21ca      	movs	r1, #202	@ 0xca
 8005186:	f24d 1017 	movw	r0, #53527	@ 0xd117
 800518a:	f7fb fc23 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 800518e:	2102      	movs	r1, #2
 8005190:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8005194:	f7fb fc1e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 8005198:	2100      	movs	r1, #0
 800519a:	f24d 1019 	movw	r0, #53529	@ 0xd119
 800519e:	f7fb fc19 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 80051a2:	2102      	movs	r1, #2
 80051a4:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 80051a8:	f7fb fc14 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 80051ac:	2101      	movs	r1, #1
 80051ae:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 80051b2:	f7fb fc0f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 80051b6:	2102      	movs	r1, #2
 80051b8:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 80051bc:	f7fb fc0a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 80051c0:	2134      	movs	r1, #52	@ 0x34
 80051c2:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 80051c6:	f7fb fc05 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 80051ca:	2102      	movs	r1, #2
 80051cc:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 80051d0:	f7fb fc00 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 80051d4:	2167      	movs	r1, #103	@ 0x67
 80051d6:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 80051da:	f7fb fbfb 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 80051de:	2102      	movs	r1, #2
 80051e0:	f24d 1020 	movw	r0, #53536	@ 0xd120
 80051e4:	f7fb fbf6 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 80051e8:	2184      	movs	r1, #132	@ 0x84
 80051ea:	f24d 1021 	movw	r0, #53537	@ 0xd121
 80051ee:	f7fb fbf1 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 80051f2:	2102      	movs	r1, #2
 80051f4:	f24d 1022 	movw	r0, #53538	@ 0xd122
 80051f8:	f7fb fbec 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 80051fc:	21a4      	movs	r1, #164	@ 0xa4
 80051fe:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8005202:	f7fb fbe7 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 8005206:	2102      	movs	r1, #2
 8005208:	f24d 1024 	movw	r0, #53540	@ 0xd124
 800520c:	f7fb fbe2 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005210:	21b7      	movs	r1, #183	@ 0xb7
 8005212:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8005216:	f7fb fbdd 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 800521a:	2102      	movs	r1, #2
 800521c:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8005220:	f7fb fbd8 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 8005224:	21cf      	movs	r1, #207	@ 0xcf
 8005226:	f24d 1027 	movw	r0, #53543	@ 0xd127
 800522a:	f7fb fbd3 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 800522e:	2102      	movs	r1, #2
 8005230:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8005234:	f7fb fbce 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 8005238:	21de      	movs	r1, #222	@ 0xde
 800523a:	f24d 1029 	movw	r0, #53545	@ 0xd129
 800523e:	f7fb fbc9 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 8005242:	2102      	movs	r1, #2
 8005244:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8005248:	f7fb fbc4 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 800524c:	21f2      	movs	r1, #242	@ 0xf2
 800524e:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8005252:	f7fb fbbf 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 8005256:	2102      	movs	r1, #2
 8005258:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 800525c:	f7fb fbba 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 8005260:	21fe      	movs	r1, #254	@ 0xfe
 8005262:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8005266:	f7fb fbb5 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 800526a:	2103      	movs	r1, #3
 800526c:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8005270:	f7fb fbb0 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 8005274:	2110      	movs	r1, #16
 8005276:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 800527a:	f7fb fbab 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 800527e:	2103      	movs	r1, #3
 8005280:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8005284:	f7fb fba6 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 8005288:	2133      	movs	r1, #51	@ 0x33
 800528a:	f24d 1031 	movw	r0, #53553	@ 0xd131
 800528e:	f7fb fba1 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 8005292:	2103      	movs	r1, #3
 8005294:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8005298:	f7fb fb9c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 800529c:	216d      	movs	r1, #109	@ 0x6d
 800529e:	f24d 1033 	movw	r0, #53555	@ 0xd133
 80052a2:	f7fb fb97 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 80052a6:	2100      	movs	r1, #0
 80052a8:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 80052ac:	f7fb fb92 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 80052b0:	2133      	movs	r1, #51	@ 0x33
 80052b2:	f24d 2001 	movw	r0, #53761	@ 0xd201
 80052b6:	f7fb fb8d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 80052ba:	2100      	movs	r1, #0
 80052bc:	f24d 2002 	movw	r0, #53762	@ 0xd202
 80052c0:	f7fb fb88 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 80052c4:	2134      	movs	r1, #52	@ 0x34
 80052c6:	f24d 2003 	movw	r0, #53763	@ 0xd203
 80052ca:	f7fb fb83 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 80052ce:	2100      	movs	r1, #0
 80052d0:	f24d 2004 	movw	r0, #53764	@ 0xd204
 80052d4:	f7fb fb7e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 80052d8:	213a      	movs	r1, #58	@ 0x3a
 80052da:	f24d 2005 	movw	r0, #53765	@ 0xd205
 80052de:	f7fb fb79 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 80052e2:	2100      	movs	r1, #0
 80052e4:	f24d 2006 	movw	r0, #53766	@ 0xd206
 80052e8:	f7fb fb74 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 80052ec:	214a      	movs	r1, #74	@ 0x4a
 80052ee:	f24d 2007 	movw	r0, #53767	@ 0xd207
 80052f2:	f7fb fb6f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 80052f6:	2100      	movs	r1, #0
 80052f8:	f24d 2008 	movw	r0, #53768	@ 0xd208
 80052fc:	f7fb fb6a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 8005300:	215c      	movs	r1, #92	@ 0x5c
 8005302:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8005306:	f7fb fb65 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 800530a:	2100      	movs	r1, #0
 800530c:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005310:	f7fb fb60 	bl	80009d4 <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 8005314:	2181      	movs	r1, #129	@ 0x81
 8005316:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 800531a:	f7fb fb5b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 800531e:	2100      	movs	r1, #0
 8005320:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8005324:	f7fb fb56 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 8005328:	21a6      	movs	r1, #166	@ 0xa6
 800532a:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 800532e:	f7fb fb51 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 8005332:	2100      	movs	r1, #0
 8005334:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8005338:	f7fb fb4c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 800533c:	21e5      	movs	r1, #229	@ 0xe5
 800533e:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8005342:	f7fb fb47 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 8005346:	2101      	movs	r1, #1
 8005348:	f24d 2010 	movw	r0, #53776	@ 0xd210
 800534c:	f7fb fb42 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 8005350:	2113      	movs	r1, #19
 8005352:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8005356:	f7fb fb3d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 800535a:	2101      	movs	r1, #1
 800535c:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8005360:	f7fb fb38 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 8005364:	2154      	movs	r1, #84	@ 0x54
 8005366:	f24d 2013 	movw	r0, #53779	@ 0xd213
 800536a:	f7fb fb33 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 800536e:	2101      	movs	r1, #1
 8005370:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8005374:	f7fb fb2e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 8005378:	2182      	movs	r1, #130	@ 0x82
 800537a:	f24d 2015 	movw	r0, #53781	@ 0xd215
 800537e:	f7fb fb29 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 8005382:	2101      	movs	r1, #1
 8005384:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8005388:	f7fb fb24 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 800538c:	21ca      	movs	r1, #202	@ 0xca
 800538e:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8005392:	f7fb fb1f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 8005396:	2102      	movs	r1, #2
 8005398:	f24d 2018 	movw	r0, #53784	@ 0xd218
 800539c:	f7fb fb1a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 80053a0:	2100      	movs	r1, #0
 80053a2:	f24d 2019 	movw	r0, #53785	@ 0xd219
 80053a6:	f7fb fb15 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 80053aa:	2102      	movs	r1, #2
 80053ac:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 80053b0:	f7fb fb10 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 80053b4:	2101      	movs	r1, #1
 80053b6:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 80053ba:	f7fb fb0b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 80053be:	2102      	movs	r1, #2
 80053c0:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 80053c4:	f7fb fb06 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 80053c8:	2134      	movs	r1, #52	@ 0x34
 80053ca:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 80053ce:	f7fb fb01 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 80053d2:	2102      	movs	r1, #2
 80053d4:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 80053d8:	f7fb fafc 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 80053dc:	2167      	movs	r1, #103	@ 0x67
 80053de:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 80053e2:	f7fb faf7 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 80053e6:	2102      	movs	r1, #2
 80053e8:	f24d 2020 	movw	r0, #53792	@ 0xd220
 80053ec:	f7fb faf2 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 80053f0:	2184      	movs	r1, #132	@ 0x84
 80053f2:	f24d 2021 	movw	r0, #53793	@ 0xd221
 80053f6:	f7fb faed 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 80053fa:	2102      	movs	r1, #2
 80053fc:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8005400:	f7fb fae8 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 8005404:	21a4      	movs	r1, #164	@ 0xa4
 8005406:	f24d 2023 	movw	r0, #53795	@ 0xd223
 800540a:	f7fb fae3 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 800540e:	2102      	movs	r1, #2
 8005410:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8005414:	f7fb fade 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005418:	21b7      	movs	r1, #183	@ 0xb7
 800541a:	f24d 2025 	movw	r0, #53797	@ 0xd225
 800541e:	f7fb fad9 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 8005422:	2102      	movs	r1, #2
 8005424:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8005428:	f7fb fad4 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 800542c:	21cf      	movs	r1, #207	@ 0xcf
 800542e:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8005432:	f7fb facf 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 8005436:	2102      	movs	r1, #2
 8005438:	f24d 2028 	movw	r0, #53800	@ 0xd228
 800543c:	f7fb faca 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 8005440:	21de      	movs	r1, #222	@ 0xde
 8005442:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8005446:	f7fb fac5 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 800544a:	2102      	movs	r1, #2
 800544c:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8005450:	f7fb fac0 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 8005454:	21f2      	movs	r1, #242	@ 0xf2
 8005456:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 800545a:	f7fb fabb 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 800545e:	2102      	movs	r1, #2
 8005460:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8005464:	f7fb fab6 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 8005468:	21fe      	movs	r1, #254	@ 0xfe
 800546a:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 800546e:	f7fb fab1 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 8005472:	2103      	movs	r1, #3
 8005474:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8005478:	f7fb faac 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 800547c:	2110      	movs	r1, #16
 800547e:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8005482:	f7fb faa7 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 8005486:	2103      	movs	r1, #3
 8005488:	f24d 2030 	movw	r0, #53808	@ 0xd230
 800548c:	f7fb faa2 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 8005490:	2133      	movs	r1, #51	@ 0x33
 8005492:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8005496:	f7fb fa9d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 800549a:	2103      	movs	r1, #3
 800549c:	f24d 2032 	movw	r0, #53810	@ 0xd232
 80054a0:	f7fb fa98 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 80054a4:	216d      	movs	r1, #109	@ 0x6d
 80054a6:	f24d 2033 	movw	r0, #53811	@ 0xd233
 80054aa:	f7fb fa93 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 80054ae:	2100      	movs	r1, #0
 80054b0:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 80054b4:	f7fb fa8e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 80054b8:	2133      	movs	r1, #51	@ 0x33
 80054ba:	f24d 3001 	movw	r0, #54017	@ 0xd301
 80054be:	f7fb fa89 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 80054c2:	2100      	movs	r1, #0
 80054c4:	f24d 3002 	movw	r0, #54018	@ 0xd302
 80054c8:	f7fb fa84 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 80054cc:	2134      	movs	r1, #52	@ 0x34
 80054ce:	f24d 3003 	movw	r0, #54019	@ 0xd303
 80054d2:	f7fb fa7f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 80054d6:	2100      	movs	r1, #0
 80054d8:	f24d 3004 	movw	r0, #54020	@ 0xd304
 80054dc:	f7fb fa7a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 80054e0:	213a      	movs	r1, #58	@ 0x3a
 80054e2:	f24d 3005 	movw	r0, #54021	@ 0xd305
 80054e6:	f7fb fa75 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 80054ea:	2100      	movs	r1, #0
 80054ec:	f24d 3006 	movw	r0, #54022	@ 0xd306
 80054f0:	f7fb fa70 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 80054f4:	214a      	movs	r1, #74	@ 0x4a
 80054f6:	f24d 3007 	movw	r0, #54023	@ 0xd307
 80054fa:	f7fb fa6b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 80054fe:	2100      	movs	r1, #0
 8005500:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8005504:	f7fb fa66 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 8005508:	215c      	movs	r1, #92	@ 0x5c
 800550a:	f24d 3009 	movw	r0, #54025	@ 0xd309
 800550e:	f7fb fa61 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 8005512:	2100      	movs	r1, #0
 8005514:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8005518:	f7fb fa5c 	bl	80009d4 <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 800551c:	2181      	movs	r1, #129	@ 0x81
 800551e:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8005522:	f7fb fa57 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 8005526:	2100      	movs	r1, #0
 8005528:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 800552c:	f7fb fa52 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 8005530:	21a6      	movs	r1, #166	@ 0xa6
 8005532:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8005536:	f7fb fa4d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 800553a:	2100      	movs	r1, #0
 800553c:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8005540:	f7fb fa48 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 8005544:	21e5      	movs	r1, #229	@ 0xe5
 8005546:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 800554a:	f7fb fa43 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 800554e:	2101      	movs	r1, #1
 8005550:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8005554:	f7fb fa3e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 8005558:	2113      	movs	r1, #19
 800555a:	f24d 3011 	movw	r0, #54033	@ 0xd311
 800555e:	f7fb fa39 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 8005562:	2101      	movs	r1, #1
 8005564:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8005568:	f7fb fa34 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 800556c:	2154      	movs	r1, #84	@ 0x54
 800556e:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8005572:	f7fb fa2f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 8005576:	2101      	movs	r1, #1
 8005578:	f24d 3014 	movw	r0, #54036	@ 0xd314
 800557c:	f7fb fa2a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 8005580:	2182      	movs	r1, #130	@ 0x82
 8005582:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8005586:	f7fb fa25 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 800558a:	2101      	movs	r1, #1
 800558c:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8005590:	f7fb fa20 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 8005594:	21ca      	movs	r1, #202	@ 0xca
 8005596:	f24d 3017 	movw	r0, #54039	@ 0xd317
 800559a:	f7fb fa1b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 800559e:	2102      	movs	r1, #2
 80055a0:	f24d 3018 	movw	r0, #54040	@ 0xd318
 80055a4:	f7fb fa16 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 80055a8:	2100      	movs	r1, #0
 80055aa:	f24d 3019 	movw	r0, #54041	@ 0xd319
 80055ae:	f7fb fa11 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 80055b2:	2102      	movs	r1, #2
 80055b4:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 80055b8:	f7fb fa0c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 80055bc:	2101      	movs	r1, #1
 80055be:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 80055c2:	f7fb fa07 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 80055c6:	2102      	movs	r1, #2
 80055c8:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 80055cc:	f7fb fa02 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 80055d0:	2134      	movs	r1, #52	@ 0x34
 80055d2:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 80055d6:	f7fb f9fd 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 80055da:	2102      	movs	r1, #2
 80055dc:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 80055e0:	f7fb f9f8 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 80055e4:	2167      	movs	r1, #103	@ 0x67
 80055e6:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 80055ea:	f7fb f9f3 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 80055ee:	2102      	movs	r1, #2
 80055f0:	f24d 3020 	movw	r0, #54048	@ 0xd320
 80055f4:	f7fb f9ee 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 80055f8:	2184      	movs	r1, #132	@ 0x84
 80055fa:	f24d 3021 	movw	r0, #54049	@ 0xd321
 80055fe:	f7fb f9e9 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 8005602:	2102      	movs	r1, #2
 8005604:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8005608:	f7fb f9e4 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 800560c:	21a4      	movs	r1, #164	@ 0xa4
 800560e:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8005612:	f7fb f9df 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 8005616:	2102      	movs	r1, #2
 8005618:	f24d 3024 	movw	r0, #54052	@ 0xd324
 800561c:	f7fb f9da 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 8005620:	21b7      	movs	r1, #183	@ 0xb7
 8005622:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8005626:	f7fb f9d5 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 800562a:	2102      	movs	r1, #2
 800562c:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8005630:	f7fb f9d0 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 8005634:	21cf      	movs	r1, #207	@ 0xcf
 8005636:	f24d 3027 	movw	r0, #54055	@ 0xd327
 800563a:	f7fb f9cb 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 800563e:	2102      	movs	r1, #2
 8005640:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8005644:	f7fb f9c6 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 8005648:	21de      	movs	r1, #222	@ 0xde
 800564a:	f24d 3029 	movw	r0, #54057	@ 0xd329
 800564e:	f7fb f9c1 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 8005652:	2102      	movs	r1, #2
 8005654:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8005658:	f7fb f9bc 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 800565c:	21f2      	movs	r1, #242	@ 0xf2
 800565e:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8005662:	f7fb f9b7 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 8005666:	2102      	movs	r1, #2
 8005668:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 800566c:	f7fb f9b2 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 8005670:	21fe      	movs	r1, #254	@ 0xfe
 8005672:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8005676:	f7fb f9ad 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 800567a:	2103      	movs	r1, #3
 800567c:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8005680:	f7fb f9a8 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 8005684:	2110      	movs	r1, #16
 8005686:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 800568a:	f7fb f9a3 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 800568e:	2103      	movs	r1, #3
 8005690:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8005694:	f7fb f99e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 8005698:	2133      	movs	r1, #51	@ 0x33
 800569a:	f24d 3031 	movw	r0, #54065	@ 0xd331
 800569e:	f7fb f999 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 80056a2:	2103      	movs	r1, #3
 80056a4:	f24d 3032 	movw	r0, #54066	@ 0xd332
 80056a8:	f7fb f994 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 80056ac:	216d      	movs	r1, #109	@ 0x6d
 80056ae:	f24d 3033 	movw	r0, #54067	@ 0xd333
 80056b2:	f7fb f98f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 80056b6:	2100      	movs	r1, #0
 80056b8:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 80056bc:	f7fb f98a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 80056c0:	2133      	movs	r1, #51	@ 0x33
 80056c2:	f24d 4001 	movw	r0, #54273	@ 0xd401
 80056c6:	f7fb f985 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 80056ca:	2100      	movs	r1, #0
 80056cc:	f24d 4002 	movw	r0, #54274	@ 0xd402
 80056d0:	f7fb f980 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 80056d4:	2134      	movs	r1, #52	@ 0x34
 80056d6:	f24d 4003 	movw	r0, #54275	@ 0xd403
 80056da:	f7fb f97b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 80056de:	2100      	movs	r1, #0
 80056e0:	f24d 4004 	movw	r0, #54276	@ 0xd404
 80056e4:	f7fb f976 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 80056e8:	213a      	movs	r1, #58	@ 0x3a
 80056ea:	f24d 4005 	movw	r0, #54277	@ 0xd405
 80056ee:	f7fb f971 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 80056f2:	2100      	movs	r1, #0
 80056f4:	f24d 4006 	movw	r0, #54278	@ 0xd406
 80056f8:	f7fb f96c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 80056fc:	214a      	movs	r1, #74	@ 0x4a
 80056fe:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8005702:	f7fb f967 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 8005706:	2100      	movs	r1, #0
 8005708:	f24d 4008 	movw	r0, #54280	@ 0xd408
 800570c:	f7fb f962 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8005710:	215c      	movs	r1, #92	@ 0x5c
 8005712:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8005716:	f7fb f95d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 800571a:	2100      	movs	r1, #0
 800571c:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8005720:	f7fb f958 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 8005724:	2181      	movs	r1, #129	@ 0x81
 8005726:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 800572a:	f7fb f953 	bl	80009d4 <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 800572e:	2100      	movs	r1, #0
 8005730:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8005734:	f7fb f94e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 8005738:	21a6      	movs	r1, #166	@ 0xa6
 800573a:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 800573e:	f7fb f949 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 8005742:	2100      	movs	r1, #0
 8005744:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8005748:	f7fb f944 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 800574c:	21e5      	movs	r1, #229	@ 0xe5
 800574e:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8005752:	f7fb f93f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 8005756:	2101      	movs	r1, #1
 8005758:	f24d 4010 	movw	r0, #54288	@ 0xd410
 800575c:	f7fb f93a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 8005760:	2113      	movs	r1, #19
 8005762:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8005766:	f7fb f935 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 800576a:	2101      	movs	r1, #1
 800576c:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8005770:	f7fb f930 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 8005774:	2154      	movs	r1, #84	@ 0x54
 8005776:	f24d 4013 	movw	r0, #54291	@ 0xd413
 800577a:	f7fb f92b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 800577e:	2101      	movs	r1, #1
 8005780:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8005784:	f7fb f926 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 8005788:	2182      	movs	r1, #130	@ 0x82
 800578a:	f24d 4015 	movw	r0, #54293	@ 0xd415
 800578e:	f7fb f921 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 8005792:	2101      	movs	r1, #1
 8005794:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8005798:	f7fb f91c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 800579c:	21ca      	movs	r1, #202	@ 0xca
 800579e:	f24d 4017 	movw	r0, #54295	@ 0xd417
 80057a2:	f7fb f917 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 80057a6:	2102      	movs	r1, #2
 80057a8:	f24d 4018 	movw	r0, #54296	@ 0xd418
 80057ac:	f7fb f912 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 80057b0:	2100      	movs	r1, #0
 80057b2:	f24d 4019 	movw	r0, #54297	@ 0xd419
 80057b6:	f7fb f90d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 80057ba:	2102      	movs	r1, #2
 80057bc:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 80057c0:	f7fb f908 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 80057c4:	2101      	movs	r1, #1
 80057c6:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 80057ca:	f7fb f903 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 80057ce:	2102      	movs	r1, #2
 80057d0:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 80057d4:	f7fb f8fe 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 80057d8:	2134      	movs	r1, #52	@ 0x34
 80057da:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 80057de:	f7fb f8f9 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 80057e2:	2102      	movs	r1, #2
 80057e4:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 80057e8:	f7fb f8f4 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 80057ec:	2167      	movs	r1, #103	@ 0x67
 80057ee:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 80057f2:	f7fb f8ef 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 80057f6:	2102      	movs	r1, #2
 80057f8:	f24d 4020 	movw	r0, #54304	@ 0xd420
 80057fc:	f7fb f8ea 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 8005800:	2184      	movs	r1, #132	@ 0x84
 8005802:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8005806:	f7fb f8e5 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 800580a:	2102      	movs	r1, #2
 800580c:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8005810:	f7fb f8e0 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 8005814:	21a4      	movs	r1, #164	@ 0xa4
 8005816:	f24d 4023 	movw	r0, #54307	@ 0xd423
 800581a:	f7fb f8db 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 800581e:	2102      	movs	r1, #2
 8005820:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8005824:	f7fb f8d6 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 8005828:	21b7      	movs	r1, #183	@ 0xb7
 800582a:	f24d 4025 	movw	r0, #54309	@ 0xd425
 800582e:	f7fb f8d1 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 8005832:	2102      	movs	r1, #2
 8005834:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8005838:	f7fb f8cc 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 800583c:	21cf      	movs	r1, #207	@ 0xcf
 800583e:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8005842:	f7fb f8c7 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 8005846:	2102      	movs	r1, #2
 8005848:	f24d 4028 	movw	r0, #54312	@ 0xd428
 800584c:	f7fb f8c2 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 8005850:	21de      	movs	r1, #222	@ 0xde
 8005852:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8005856:	f7fb f8bd 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 800585a:	2102      	movs	r1, #2
 800585c:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8005860:	f7fb f8b8 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 8005864:	21f2      	movs	r1, #242	@ 0xf2
 8005866:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 800586a:	f7fb f8b3 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 800586e:	2102      	movs	r1, #2
 8005870:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8005874:	f7fb f8ae 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 8005878:	21fe      	movs	r1, #254	@ 0xfe
 800587a:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 800587e:	f7fb f8a9 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 8005882:	2103      	movs	r1, #3
 8005884:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8005888:	f7fb f8a4 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 800588c:	2110      	movs	r1, #16
 800588e:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8005892:	f7fb f89f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 8005896:	2103      	movs	r1, #3
 8005898:	f24d 4030 	movw	r0, #54320	@ 0xd430
 800589c:	f7fb f89a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 80058a0:	2133      	movs	r1, #51	@ 0x33
 80058a2:	f24d 4031 	movw	r0, #54321	@ 0xd431
 80058a6:	f7fb f895 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 80058aa:	2103      	movs	r1, #3
 80058ac:	f24d 4032 	movw	r0, #54322	@ 0xd432
 80058b0:	f7fb f890 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 80058b4:	216d      	movs	r1, #109	@ 0x6d
 80058b6:	f24d 4033 	movw	r0, #54323	@ 0xd433
 80058ba:	f7fb f88b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 80058be:	2100      	movs	r1, #0
 80058c0:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 80058c4:	f7fb f886 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 80058c8:	2133      	movs	r1, #51	@ 0x33
 80058ca:	f24d 5001 	movw	r0, #54529	@ 0xd501
 80058ce:	f7fb f881 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 80058d2:	2100      	movs	r1, #0
 80058d4:	f24d 5002 	movw	r0, #54530	@ 0xd502
 80058d8:	f7fb f87c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 80058dc:	2134      	movs	r1, #52	@ 0x34
 80058de:	f24d 5003 	movw	r0, #54531	@ 0xd503
 80058e2:	f7fb f877 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 80058e6:	2100      	movs	r1, #0
 80058e8:	f24d 5004 	movw	r0, #54532	@ 0xd504
 80058ec:	f7fb f872 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 80058f0:	213a      	movs	r1, #58	@ 0x3a
 80058f2:	f24d 5005 	movw	r0, #54533	@ 0xd505
 80058f6:	f7fb f86d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 80058fa:	2100      	movs	r1, #0
 80058fc:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8005900:	f7fb f868 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 8005904:	214a      	movs	r1, #74	@ 0x4a
 8005906:	f24d 5007 	movw	r0, #54535	@ 0xd507
 800590a:	f7fb f863 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 800590e:	2100      	movs	r1, #0
 8005910:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8005914:	f7fb f85e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8005918:	215c      	movs	r1, #92	@ 0x5c
 800591a:	f24d 5009 	movw	r0, #54537	@ 0xd509
 800591e:	f7fb f859 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 8005922:	2100      	movs	r1, #0
 8005924:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8005928:	f7fb f854 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 800592c:	2181      	movs	r1, #129	@ 0x81
 800592e:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8005932:	f7fb f84f 	bl	80009d4 <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 8005936:	2100      	movs	r1, #0
 8005938:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 800593c:	f7fb f84a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 8005940:	21a6      	movs	r1, #166	@ 0xa6
 8005942:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8005946:	f7fb f845 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 800594a:	2100      	movs	r1, #0
 800594c:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8005950:	f7fb f840 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 8005954:	21e5      	movs	r1, #229	@ 0xe5
 8005956:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 800595a:	f7fb f83b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 800595e:	2101      	movs	r1, #1
 8005960:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8005964:	f7fb f836 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 8005968:	2113      	movs	r1, #19
 800596a:	f24d 5011 	movw	r0, #54545	@ 0xd511
 800596e:	f7fb f831 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 8005972:	2101      	movs	r1, #1
 8005974:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8005978:	f7fb f82c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 800597c:	2154      	movs	r1, #84	@ 0x54
 800597e:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8005982:	f7fb f827 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 8005986:	2101      	movs	r1, #1
 8005988:	f24d 5014 	movw	r0, #54548	@ 0xd514
 800598c:	f7fb f822 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 8005990:	2182      	movs	r1, #130	@ 0x82
 8005992:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8005996:	f7fb f81d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 800599a:	2101      	movs	r1, #1
 800599c:	f24d 5016 	movw	r0, #54550	@ 0xd516
 80059a0:	f7fb f818 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 80059a4:	21ca      	movs	r1, #202	@ 0xca
 80059a6:	f24d 5017 	movw	r0, #54551	@ 0xd517
 80059aa:	f7fb f813 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 80059ae:	2102      	movs	r1, #2
 80059b0:	f24d 5018 	movw	r0, #54552	@ 0xd518
 80059b4:	f7fb f80e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 80059b8:	2100      	movs	r1, #0
 80059ba:	f24d 5019 	movw	r0, #54553	@ 0xd519
 80059be:	f7fb f809 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 80059c2:	2102      	movs	r1, #2
 80059c4:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 80059c8:	f7fb f804 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 80059cc:	2101      	movs	r1, #1
 80059ce:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 80059d2:	f7fa ffff 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 80059d6:	2102      	movs	r1, #2
 80059d8:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 80059dc:	f7fa fffa 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 80059e0:	2134      	movs	r1, #52	@ 0x34
 80059e2:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 80059e6:	f7fa fff5 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 80059ea:	2102      	movs	r1, #2
 80059ec:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 80059f0:	f7fa fff0 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 80059f4:	2167      	movs	r1, #103	@ 0x67
 80059f6:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 80059fa:	f7fa ffeb 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 80059fe:	2102      	movs	r1, #2
 8005a00:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8005a04:	f7fa ffe6 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 8005a08:	2184      	movs	r1, #132	@ 0x84
 8005a0a:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8005a0e:	f7fa ffe1 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 8005a12:	2102      	movs	r1, #2
 8005a14:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8005a18:	f7fa ffdc 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 8005a1c:	21a4      	movs	r1, #164	@ 0xa4
 8005a1e:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8005a22:	f7fa ffd7 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 8005a26:	2102      	movs	r1, #2
 8005a28:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8005a2c:	f7fa ffd2 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 8005a30:	21b7      	movs	r1, #183	@ 0xb7
 8005a32:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8005a36:	f7fa ffcd 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 8005a3a:	2102      	movs	r1, #2
 8005a3c:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8005a40:	f7fa ffc8 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 8005a44:	21cf      	movs	r1, #207	@ 0xcf
 8005a46:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8005a4a:	f7fa ffc3 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 8005a4e:	2102      	movs	r1, #2
 8005a50:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8005a54:	f7fa ffbe 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 8005a58:	21de      	movs	r1, #222	@ 0xde
 8005a5a:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8005a5e:	f7fa ffb9 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 8005a62:	2102      	movs	r1, #2
 8005a64:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8005a68:	f7fa ffb4 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 8005a6c:	21f2      	movs	r1, #242	@ 0xf2
 8005a6e:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8005a72:	f7fa ffaf 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 8005a76:	2102      	movs	r1, #2
 8005a78:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8005a7c:	f7fa ffaa 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 8005a80:	21fe      	movs	r1, #254	@ 0xfe
 8005a82:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8005a86:	f7fa ffa5 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 8005a8a:	2103      	movs	r1, #3
 8005a8c:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8005a90:	f7fa ffa0 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 8005a94:	2110      	movs	r1, #16
 8005a96:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8005a9a:	f7fa ff9b 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 8005a9e:	2103      	movs	r1, #3
 8005aa0:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8005aa4:	f7fa ff96 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 8005aa8:	2133      	movs	r1, #51	@ 0x33
 8005aaa:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8005aae:	f7fa ff91 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 8005ab2:	2103      	movs	r1, #3
 8005ab4:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8005ab8:	f7fa ff8c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 8005abc:	216d      	movs	r1, #109	@ 0x6d
 8005abe:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8005ac2:	f7fa ff87 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8005acc:	f7fa ff82 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 8005ad0:	2133      	movs	r1, #51	@ 0x33
 8005ad2:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8005ad6:	f7fa ff7d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 8005ada:	2100      	movs	r1, #0
 8005adc:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8005ae0:	f7fa ff78 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 8005ae4:	2134      	movs	r1, #52	@ 0x34
 8005ae6:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8005aea:	f7fa ff73 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 8005aee:	2100      	movs	r1, #0
 8005af0:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8005af4:	f7fa ff6e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 8005af8:	213a      	movs	r1, #58	@ 0x3a
 8005afa:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8005afe:	f7fa ff69 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 8005b02:	2100      	movs	r1, #0
 8005b04:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8005b08:	f7fa ff64 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 8005b0c:	214a      	movs	r1, #74	@ 0x4a
 8005b0e:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8005b12:	f7fa ff5f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 8005b16:	2100      	movs	r1, #0
 8005b18:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8005b1c:	f7fa ff5a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8005b20:	215c      	movs	r1, #92	@ 0x5c
 8005b22:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8005b26:	f7fa ff55 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8005b30:	f7fa ff50 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 8005b34:	2181      	movs	r1, #129	@ 0x81
 8005b36:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8005b3a:	f7fa ff4b 	bl	80009d4 <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 8005b3e:	2100      	movs	r1, #0
 8005b40:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8005b44:	f7fa ff46 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 8005b48:	21a6      	movs	r1, #166	@ 0xa6
 8005b4a:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8005b4e:	f7fa ff41 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 8005b52:	2100      	movs	r1, #0
 8005b54:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8005b58:	f7fa ff3c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 8005b5c:	21e5      	movs	r1, #229	@ 0xe5
 8005b5e:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8005b62:	f7fa ff37 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 8005b66:	2101      	movs	r1, #1
 8005b68:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8005b6c:	f7fa ff32 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 8005b70:	2113      	movs	r1, #19
 8005b72:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8005b76:	f7fa ff2d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8005b80:	f7fa ff28 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 8005b84:	2154      	movs	r1, #84	@ 0x54
 8005b86:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8005b8a:	f7fa ff23 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 8005b8e:	2101      	movs	r1, #1
 8005b90:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8005b94:	f7fa ff1e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 8005b98:	2182      	movs	r1, #130	@ 0x82
 8005b9a:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8005b9e:	f7fa ff19 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8005ba8:	f7fa ff14 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 8005bac:	21ca      	movs	r1, #202	@ 0xca
 8005bae:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8005bb2:	f7fa ff0f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8005bbc:	f7fa ff0a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8005bc6:	f7fa ff05 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 8005bca:	2102      	movs	r1, #2
 8005bcc:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8005bd0:	f7fa ff00 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8005bda:	f7fa fefb 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 8005bde:	2102      	movs	r1, #2
 8005be0:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8005be4:	f7fa fef6 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8005be8:	2134      	movs	r1, #52	@ 0x34
 8005bea:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8005bee:	f7fa fef1 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8005bf8:	f7fa feec 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 8005bfc:	2167      	movs	r1, #103	@ 0x67
 8005bfe:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8005c02:	f7fa fee7 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 8005c06:	2102      	movs	r1, #2
 8005c08:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8005c0c:	f7fa fee2 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8005c10:	2184      	movs	r1, #132	@ 0x84
 8005c12:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8005c16:	f7fa fedd 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 8005c1a:	2102      	movs	r1, #2
 8005c1c:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8005c20:	f7fa fed8 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 8005c24:	21a4      	movs	r1, #164	@ 0xa4
 8005c26:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8005c2a:	f7fa fed3 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 8005c2e:	2102      	movs	r1, #2
 8005c30:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8005c34:	f7fa fece 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8005c38:	21b7      	movs	r1, #183	@ 0xb7
 8005c3a:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8005c3e:	f7fa fec9 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 8005c42:	2102      	movs	r1, #2
 8005c44:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8005c48:	f7fa fec4 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 8005c4c:	21cf      	movs	r1, #207	@ 0xcf
 8005c4e:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8005c52:	f7fa febf 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 8005c56:	2102      	movs	r1, #2
 8005c58:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8005c5c:	f7fa feba 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 8005c60:	21de      	movs	r1, #222	@ 0xde
 8005c62:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8005c66:	f7fa feb5 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8005c70:	f7fa feb0 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 8005c74:	21f2      	movs	r1, #242	@ 0xf2
 8005c76:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8005c7a:	f7fa feab 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 8005c7e:	2102      	movs	r1, #2
 8005c80:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8005c84:	f7fa fea6 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 8005c88:	21fe      	movs	r1, #254	@ 0xfe
 8005c8a:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8005c8e:	f7fa fea1 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 8005c92:	2103      	movs	r1, #3
 8005c94:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8005c98:	f7fa fe9c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 8005c9c:	2110      	movs	r1, #16
 8005c9e:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8005ca2:	f7fa fe97 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 8005ca6:	2103      	movs	r1, #3
 8005ca8:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8005cac:	f7fa fe92 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 8005cb0:	2133      	movs	r1, #51	@ 0x33
 8005cb2:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8005cb6:	f7fa fe8d 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 8005cba:	2103      	movs	r1, #3
 8005cbc:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8005cc0:	f7fa fe88 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 8005cc4:	216d      	movs	r1, #109	@ 0x6d
 8005cc6:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8005cca:	f7fa fe83 	bl	80009d4 <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 8005cce:	2155      	movs	r1, #85	@ 0x55
 8005cd0:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8005cd4:	f7fa fe7e 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8005cd8:	21aa      	movs	r1, #170	@ 0xaa
 8005cda:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8005cde:	f7fa fe79 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005ce2:	2152      	movs	r1, #82	@ 0x52
 8005ce4:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8005ce8:	f7fa fe74 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8005cec:	2108      	movs	r1, #8
 8005cee:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005cf2:	f7fa fe6f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005cfc:	f7fa fe6a 	bl	80009d4 <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8005d00:	21cc      	movs	r1, #204	@ 0xcc
 8005d02:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005d06:	f7fa fe65 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8005d10:	f7fa fe60 	bl	80009d4 <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 8005d14:	2105      	movs	r1, #5
 8005d16:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005d1a:	f7fa fe5b 	bl	80009d4 <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 8005d1e:	2170      	movs	r1, #112	@ 0x70
 8005d20:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8005d24:	f7fa fe56 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8005d28:	2170      	movs	r1, #112	@ 0x70
 8005d2a:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8005d2e:	f7fa fe51 	bl	80009d4 <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 8005d32:	2101      	movs	r1, #1
 8005d34:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8005d38:	f7fa fe4c 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 8005d3c:	2103      	movs	r1, #3
 8005d3e:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005d42:	f7fa fe47 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 8005d46:	2103      	movs	r1, #3
 8005d48:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8005d4c:	f7fa fe42 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 8005d50:	2103      	movs	r1, #3
 8005d52:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8005d56:	f7fa fe3d 	bl	80009d4 <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005d60:	f7fa fe38 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 8005d64:	2100      	movs	r1, #0
 8005d66:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005d6a:	f7fa fe33 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005d6e:	2100      	movs	r1, #0
 8005d70:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005d74:	f7fa fe2e 	bl	80009d4 <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 8005d78:	21d0      	movs	r1, #208	@ 0xd0
 8005d7a:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8005d7e:	f7fa fe29 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 8005d82:	2102      	movs	r1, #2
 8005d84:	f64c 1001 	movw	r0, #51457	@ 0xc901
 8005d88:	f7fa fe24 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 8005d8c:	2150      	movs	r1, #80	@ 0x50
 8005d8e:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8005d92:	f7fa fe1f 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 8005d96:	2150      	movs	r1, #80	@ 0x50
 8005d98:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8005d9c:	f7fa fe1a 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 8005da0:	2150      	movs	r1, #80	@ 0x50
 8005da2:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8005da6:	f7fa fe15 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 8005daa:	2100      	movs	r1, #0
 8005dac:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8005db0:	f7fa fe10 	bl	80009d4 <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8005db4:	2155      	movs	r1, #85	@ 0x55
 8005db6:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8005dba:	f7fa fe0b 	bl	80009d4 <lcd_write_reg>
 8005dbe:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005dc2:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e34 <lcd_init+0x422c>)
 8005dc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005dcc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005dce:	4b19      	ldr	r3, [pc, #100]	@ (8005e34 <lcd_init+0x422c>)
 8005dd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005dd4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005dd6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	4b16      	ldr	r3, [pc, #88]	@ (8005e38 <lcd_init+0x4230>)
 8005dde:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005de0:	4b14      	ldr	r3, [pc, #80]	@ (8005e34 <lcd_init+0x422c>)
 8005de2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005de6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005de8:	4b12      	ldr	r3, [pc, #72]	@ (8005e34 <lcd_init+0x422c>)
 8005dea:	2280      	movs	r2, #128	@ 0x80
 8005dec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005dee:	4b11      	ldr	r3, [pc, #68]	@ (8005e34 <lcd_init+0x422c>)
 8005df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005df4:	611a      	str	r2, [r3, #16]
}
 8005df6:	bf00      	nop
 8005df8:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 8005dfc:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005e00:	4b0c      	ldr	r3, [pc, #48]	@ (8005e34 <lcd_init+0x422c>)
 8005e02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e06:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005e08:	4b0a      	ldr	r3, [pc, #40]	@ (8005e34 <lcd_init+0x422c>)
 8005e0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e0e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e10:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	4b08      	ldr	r3, [pc, #32]	@ (8005e38 <lcd_init+0x4230>)
 8005e18:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005e1a:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <lcd_init+0x422c>)
 8005e1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005e20:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005e22:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <lcd_init+0x422c>)
 8005e24:	2280      	movs	r2, #128	@ 0x80
 8005e26:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005e28:	4b02      	ldr	r3, [pc, #8]	@ (8005e34 <lcd_init+0x422c>)
 8005e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e2e:	611a      	str	r2, [r3, #16]
}
 8005e30:	f000 be33 	b.w	8006a9a <lcd_init+0x4e92>
 8005e34:	40011000 	.word	0x40011000
 8005e38:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 8005e3c:	4bc3      	ldr	r3, [pc, #780]	@ (800614c <lcd_init+0x4544>)
 8005e3e:	889b      	ldrh	r3, [r3, #4]
 8005e40:	f649 0206 	movw	r2, #38918	@ 0x9806
 8005e44:	4293      	cmp	r3, r2
 8005e46:	f040 8407 	bne.w	8006658 <lcd_init+0x4a50>
 8005e4a:	23ff      	movs	r3, #255	@ 0xff
 8005e4c:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005e50:	4bbf      	ldr	r3, [pc, #764]	@ (8006150 <lcd_init+0x4548>)
 8005e52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e56:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005e58:	4bbd      	ldr	r3, [pc, #756]	@ (8006150 <lcd_init+0x4548>)
 8005e5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e60:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	4bbb      	ldr	r3, [pc, #748]	@ (8006154 <lcd_init+0x454c>)
 8005e68:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005e6a:	4bb9      	ldr	r3, [pc, #740]	@ (8006150 <lcd_init+0x4548>)
 8005e6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005e70:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005e72:	4bb7      	ldr	r3, [pc, #732]	@ (8006150 <lcd_init+0x4548>)
 8005e74:	2280      	movs	r2, #128	@ 0x80
 8005e76:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005e78:	4bb5      	ldr	r3, [pc, #724]	@ (8006150 <lcd_init+0x4548>)
 8005e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e7e:	611a      	str	r2, [r3, #16]
}
 8005e80:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 8005e82:	20ff      	movs	r0, #255	@ 0xff
 8005e84:	f7fa fd82 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 8005e88:	2098      	movs	r0, #152	@ 0x98
 8005e8a:	f7fa fd7f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8005e8e:	2006      	movs	r0, #6
 8005e90:	f7fa fd7c 	bl	800098c <lcd_wr_xdata>
 8005e94:	23bc      	movs	r3, #188	@ 0xbc
 8005e96:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005e9a:	4bad      	ldr	r3, [pc, #692]	@ (8006150 <lcd_init+0x4548>)
 8005e9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ea0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005ea2:	4bab      	ldr	r3, [pc, #684]	@ (8006150 <lcd_init+0x4548>)
 8005ea4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005ea8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005eaa:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	4ba8      	ldr	r3, [pc, #672]	@ (8006154 <lcd_init+0x454c>)
 8005eb2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005eb4:	4ba6      	ldr	r3, [pc, #664]	@ (8006150 <lcd_init+0x4548>)
 8005eb6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005eba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005ebc:	4ba4      	ldr	r3, [pc, #656]	@ (8006150 <lcd_init+0x4548>)
 8005ebe:	2280      	movs	r2, #128	@ 0x80
 8005ec0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005ec2:	4ba3      	ldr	r3, [pc, #652]	@ (8006150 <lcd_init+0x4548>)
 8005ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ec8:	611a      	str	r2, [r3, #16]
}
 8005eca:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 8005ecc:	2001      	movs	r0, #1
 8005ece:	f7fa fd5d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8005ed2:	200f      	movs	r0, #15
 8005ed4:	f7fa fd5a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8005ed8:	2061      	movs	r0, #97	@ 0x61
 8005eda:	f7fa fd57 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005ede:	20ff      	movs	r0, #255	@ 0xff
 8005ee0:	f7fa fd54 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fa fd51 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005eea:	2001      	movs	r0, #1
 8005eec:	f7fa fd4e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8005ef0:	200b      	movs	r0, #11
 8005ef2:	f7fa fd4b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8005ef6:	2010      	movs	r0, #16
 8005ef8:	f7fa fd48 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 8005efc:	2037      	movs	r0, #55	@ 0x37
 8005efe:	f7fa fd45 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 8005f02:	2063      	movs	r0, #99	@ 0x63
 8005f04:	f7fa fd42 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005f08:	20ff      	movs	r0, #255	@ 0xff
 8005f0a:	f7fa fd3f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005f0e:	20ff      	movs	r0, #255	@ 0xff
 8005f10:	f7fa fd3c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f14:	2001      	movs	r0, #1
 8005f16:	f7fa fd39 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	f7fa fd36 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005f20:	2000      	movs	r0, #0
 8005f22:	f7fa fd33 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005f26:	2000      	movs	r0, #0
 8005f28:	f7fa fd30 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005f2c:	20ff      	movs	r0, #255	@ 0xff
 8005f2e:	f7fa fd2d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8005f32:	2052      	movs	r0, #82	@ 0x52
 8005f34:	f7fa fd2a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f38:	2001      	movs	r0, #1
 8005f3a:	f7fa fd27 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f7fa fd24 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8005f44:	2040      	movs	r0, #64	@ 0x40
 8005f46:	f7fa fd21 	bl	800098c <lcd_wr_xdata>
 8005f4a:	23bd      	movs	r3, #189	@ 0xbd
 8005f4c:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005f50:	4b7f      	ldr	r3, [pc, #508]	@ (8006150 <lcd_init+0x4548>)
 8005f52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f56:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005f58:	4b7d      	ldr	r3, [pc, #500]	@ (8006150 <lcd_init+0x4548>)
 8005f5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005f60:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	4b7b      	ldr	r3, [pc, #492]	@ (8006154 <lcd_init+0x454c>)
 8005f68:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005f6a:	4b79      	ldr	r3, [pc, #484]	@ (8006150 <lcd_init+0x4548>)
 8005f6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005f70:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005f72:	4b77      	ldr	r3, [pc, #476]	@ (8006150 <lcd_init+0x4548>)
 8005f74:	2280      	movs	r2, #128	@ 0x80
 8005f76:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005f78:	4b75      	ldr	r3, [pc, #468]	@ (8006150 <lcd_init+0x4548>)
 8005f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f7e:	611a      	str	r2, [r3, #16]
}
 8005f80:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 8005f82:	2001      	movs	r0, #1
 8005f84:	f7fa fd02 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005f88:	2023      	movs	r0, #35	@ 0x23
 8005f8a:	f7fa fcff 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005f8e:	2045      	movs	r0, #69	@ 0x45
 8005f90:	f7fa fcfc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005f94:	2067      	movs	r0, #103	@ 0x67
 8005f96:	f7fa fcf9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	f7fa fcf6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005fa0:	2023      	movs	r0, #35	@ 0x23
 8005fa2:	f7fa fcf3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005fa6:	2045      	movs	r0, #69	@ 0x45
 8005fa8:	f7fa fcf0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005fac:	2067      	movs	r0, #103	@ 0x67
 8005fae:	f7fa fced 	bl	800098c <lcd_wr_xdata>
 8005fb2:	23be      	movs	r3, #190	@ 0xbe
 8005fb4:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005fb8:	4b65      	ldr	r3, [pc, #404]	@ (8006150 <lcd_init+0x4548>)
 8005fba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fbe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005fc0:	4b63      	ldr	r3, [pc, #396]	@ (8006150 <lcd_init+0x4548>)
 8005fc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005fc6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005fc8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	4b61      	ldr	r3, [pc, #388]	@ (8006154 <lcd_init+0x454c>)
 8005fd0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8006150 <lcd_init+0x4548>)
 8005fd4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005fd8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005fda:	4b5d      	ldr	r3, [pc, #372]	@ (8006150 <lcd_init+0x4548>)
 8005fdc:	2280      	movs	r2, #128	@ 0x80
 8005fde:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8006150 <lcd_init+0x4548>)
 8005fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe6:	611a      	str	r2, [r3, #16]
}
 8005fe8:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 8005fea:	2000      	movs	r0, #0
 8005fec:	f7fa fcce 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	f7fa fccb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 8005ff6:	20ab      	movs	r0, #171	@ 0xab
 8005ff8:	f7fa fcc8 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 8005ffc:	2060      	movs	r0, #96	@ 0x60
 8005ffe:	f7fa fcc5 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006002:	2022      	movs	r0, #34	@ 0x22
 8006004:	f7fa fcc2 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006008:	2022      	movs	r0, #34	@ 0x22
 800600a:	f7fa fcbf 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800600e:	2022      	movs	r0, #34	@ 0x22
 8006010:	f7fa fcbc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006014:	2022      	movs	r0, #34	@ 0x22
 8006016:	f7fa fcb9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800601a:	2022      	movs	r0, #34	@ 0x22
 800601c:	f7fa fcb6 	bl	800098c <lcd_wr_xdata>
 8006020:	23c7      	movs	r3, #199	@ 0xc7
 8006022:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006026:	4b4a      	ldr	r3, [pc, #296]	@ (8006150 <lcd_init+0x4548>)
 8006028:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800602c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800602e:	4b48      	ldr	r3, [pc, #288]	@ (8006150 <lcd_init+0x4548>)
 8006030:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006034:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006036:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800603a:	b29a      	uxth	r2, r3
 800603c:	4b45      	ldr	r3, [pc, #276]	@ (8006154 <lcd_init+0x454c>)
 800603e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006040:	4b43      	ldr	r3, [pc, #268]	@ (8006150 <lcd_init+0x4548>)
 8006042:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006046:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006048:	4b41      	ldr	r3, [pc, #260]	@ (8006150 <lcd_init+0x4548>)
 800604a:	2280      	movs	r2, #128	@ 0x80
 800604c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800604e:	4b40      	ldr	r3, [pc, #256]	@ (8006150 <lcd_init+0x4548>)
 8006050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006054:	611a      	str	r2, [r3, #16]
}
 8006056:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 8006058:	2036      	movs	r0, #54	@ 0x36
 800605a:	f7fa fc97 	bl	800098c <lcd_wr_xdata>
 800605e:	23ed      	movs	r3, #237	@ 0xed
 8006060:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006064:	4b3a      	ldr	r3, [pc, #232]	@ (8006150 <lcd_init+0x4548>)
 8006066:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800606a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800606c:	4b38      	ldr	r3, [pc, #224]	@ (8006150 <lcd_init+0x4548>)
 800606e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006072:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006074:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8006078:	b29a      	uxth	r2, r3
 800607a:	4b36      	ldr	r3, [pc, #216]	@ (8006154 <lcd_init+0x454c>)
 800607c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800607e:	4b34      	ldr	r3, [pc, #208]	@ (8006150 <lcd_init+0x4548>)
 8006080:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006084:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006086:	4b32      	ldr	r3, [pc, #200]	@ (8006150 <lcd_init+0x4548>)
 8006088:	2280      	movs	r2, #128	@ 0x80
 800608a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800608c:	4b30      	ldr	r3, [pc, #192]	@ (8006150 <lcd_init+0x4548>)
 800608e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006092:	611a      	str	r2, [r3, #16]
}
 8006094:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 8006096:	207f      	movs	r0, #127	@ 0x7f
 8006098:	f7fa fc78 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 800609c:	200f      	movs	r0, #15
 800609e:	f7fa fc75 	bl	800098c <lcd_wr_xdata>
 80060a2:	23c0      	movs	r3, #192	@ 0xc0
 80060a4:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80060a8:	4b29      	ldr	r3, [pc, #164]	@ (8006150 <lcd_init+0x4548>)
 80060aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060ae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060b0:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <lcd_init+0x4548>)
 80060b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060b6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80060b8:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 80060bc:	b29a      	uxth	r2, r3
 80060be:	4b25      	ldr	r3, [pc, #148]	@ (8006154 <lcd_init+0x454c>)
 80060c0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80060c2:	4b23      	ldr	r3, [pc, #140]	@ (8006150 <lcd_init+0x4548>)
 80060c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80060c8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80060ca:	4b21      	ldr	r3, [pc, #132]	@ (8006150 <lcd_init+0x4548>)
 80060cc:	2280      	movs	r2, #128	@ 0x80
 80060ce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80060d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006150 <lcd_init+0x4548>)
 80060d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d6:	611a      	str	r2, [r3, #16]
}
 80060d8:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 80060da:	200f      	movs	r0, #15
 80060dc:	f7fa fc56 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 80060e0:	200b      	movs	r0, #11
 80060e2:	f7fa fc53 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 80060e6:	200a      	movs	r0, #10
 80060e8:	f7fa fc50 	bl	800098c <lcd_wr_xdata>
 80060ec:	23fc      	movs	r3, #252	@ 0xfc
 80060ee:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80060f2:	4b17      	ldr	r3, [pc, #92]	@ (8006150 <lcd_init+0x4548>)
 80060f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060fa:	4b15      	ldr	r3, [pc, #84]	@ (8006150 <lcd_init+0x4548>)
 80060fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006100:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006102:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8006106:	b29a      	uxth	r2, r3
 8006108:	4b12      	ldr	r3, [pc, #72]	@ (8006154 <lcd_init+0x454c>)
 800610a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800610c:	4b10      	ldr	r3, [pc, #64]	@ (8006150 <lcd_init+0x4548>)
 800610e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006112:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006114:	4b0e      	ldr	r3, [pc, #56]	@ (8006150 <lcd_init+0x4548>)
 8006116:	2280      	movs	r2, #128	@ 0x80
 8006118:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800611a:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <lcd_init+0x4548>)
 800611c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006120:	611a      	str	r2, [r3, #16]
}
 8006122:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 8006124:	2008      	movs	r0, #8
 8006126:	f7fa fc31 	bl	800098c <lcd_wr_xdata>
 800612a:	23df      	movs	r3, #223	@ 0xdf
 800612c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006130:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <lcd_init+0x4548>)
 8006132:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006136:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006138:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <lcd_init+0x4548>)
 800613a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800613e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006140:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8006144:	b29a      	uxth	r2, r3
 8006146:	4b03      	ldr	r3, [pc, #12]	@ (8006154 <lcd_init+0x454c>)
 8006148:	60da      	str	r2, [r3, #12]
 800614a:	e005      	b.n	8006158 <lcd_init+0x4550>
 800614c:	2000002c 	.word	0x2000002c
 8006150:	40011000 	.word	0x40011000
 8006154:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006158:	4bc7      	ldr	r3, [pc, #796]	@ (8006478 <lcd_init+0x4870>)
 800615a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800615e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006160:	4bc5      	ldr	r3, [pc, #788]	@ (8006478 <lcd_init+0x4870>)
 8006162:	2280      	movs	r2, #128	@ 0x80
 8006164:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006166:	4bc4      	ldr	r3, [pc, #784]	@ (8006478 <lcd_init+0x4870>)
 8006168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800616c:	611a      	str	r2, [r3, #16]
}
 800616e:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 8006170:	2000      	movs	r0, #0
 8006172:	f7fa fc0b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006176:	2000      	movs	r0, #0
 8006178:	f7fa fc08 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800617c:	2000      	movs	r0, #0
 800617e:	f7fa fc05 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006182:	2000      	movs	r0, #0
 8006184:	f7fa fc02 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006188:	2000      	movs	r0, #0
 800618a:	f7fa fbff 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800618e:	2020      	movs	r0, #32
 8006190:	f7fa fbfc 	bl	800098c <lcd_wr_xdata>
 8006194:	23f3      	movs	r3, #243	@ 0xf3
 8006196:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800619a:	4bb7      	ldr	r3, [pc, #732]	@ (8006478 <lcd_init+0x4870>)
 800619c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80061a2:	4bb5      	ldr	r3, [pc, #724]	@ (8006478 <lcd_init+0x4870>)
 80061a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80061aa:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	4bb2      	ldr	r3, [pc, #712]	@ (800647c <lcd_init+0x4874>)
 80061b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80061b4:	4bb0      	ldr	r3, [pc, #704]	@ (8006478 <lcd_init+0x4870>)
 80061b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061bc:	4bae      	ldr	r3, [pc, #696]	@ (8006478 <lcd_init+0x4870>)
 80061be:	2280      	movs	r2, #128	@ 0x80
 80061c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061c2:	4bad      	ldr	r3, [pc, #692]	@ (8006478 <lcd_init+0x4870>)
 80061c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061c8:	611a      	str	r2, [r3, #16]
}
 80061ca:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 80061cc:	2074      	movs	r0, #116	@ 0x74
 80061ce:	f7fa fbdd 	bl	800098c <lcd_wr_xdata>
 80061d2:	23b4      	movs	r3, #180	@ 0xb4
 80061d4:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80061d8:	4ba7      	ldr	r3, [pc, #668]	@ (8006478 <lcd_init+0x4870>)
 80061da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061de:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80061e0:	4ba5      	ldr	r3, [pc, #660]	@ (8006478 <lcd_init+0x4870>)
 80061e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061e6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80061e8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	4ba3      	ldr	r3, [pc, #652]	@ (800647c <lcd_init+0x4874>)
 80061f0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80061f2:	4ba1      	ldr	r3, [pc, #644]	@ (8006478 <lcd_init+0x4870>)
 80061f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061f8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061fa:	4b9f      	ldr	r3, [pc, #636]	@ (8006478 <lcd_init+0x4870>)
 80061fc:	2280      	movs	r2, #128	@ 0x80
 80061fe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006200:	4b9d      	ldr	r3, [pc, #628]	@ (8006478 <lcd_init+0x4870>)
 8006202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006206:	611a      	str	r2, [r3, #16]
}
 8006208:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 800620a:	2000      	movs	r0, #0
 800620c:	f7fa fbbe 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006210:	2000      	movs	r0, #0
 8006212:	f7fa fbbb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006216:	2000      	movs	r0, #0
 8006218:	f7fa fbb8 	bl	800098c <lcd_wr_xdata>
 800621c:	23f7      	movs	r3, #247	@ 0xf7
 800621e:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006222:	4b95      	ldr	r3, [pc, #596]	@ (8006478 <lcd_init+0x4870>)
 8006224:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006228:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800622a:	4b93      	ldr	r3, [pc, #588]	@ (8006478 <lcd_init+0x4870>)
 800622c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006230:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006232:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 8006236:	b29a      	uxth	r2, r3
 8006238:	4b90      	ldr	r3, [pc, #576]	@ (800647c <lcd_init+0x4874>)
 800623a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800623c:	4b8e      	ldr	r3, [pc, #568]	@ (8006478 <lcd_init+0x4870>)
 800623e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006242:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006244:	4b8c      	ldr	r3, [pc, #560]	@ (8006478 <lcd_init+0x4870>)
 8006246:	2280      	movs	r2, #128	@ 0x80
 8006248:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800624a:	4b8b      	ldr	r3, [pc, #556]	@ (8006478 <lcd_init+0x4870>)
 800624c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006250:	611a      	str	r2, [r3, #16]
}
 8006252:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 8006254:	2082      	movs	r0, #130	@ 0x82
 8006256:	f7fa fb99 	bl	800098c <lcd_wr_xdata>
 800625a:	23b1      	movs	r3, #177	@ 0xb1
 800625c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006260:	4b85      	ldr	r3, [pc, #532]	@ (8006478 <lcd_init+0x4870>)
 8006262:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006266:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006268:	4b83      	ldr	r3, [pc, #524]	@ (8006478 <lcd_init+0x4870>)
 800626a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800626e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006270:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8006274:	b29a      	uxth	r2, r3
 8006276:	4b81      	ldr	r3, [pc, #516]	@ (800647c <lcd_init+0x4874>)
 8006278:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800627a:	4b7f      	ldr	r3, [pc, #508]	@ (8006478 <lcd_init+0x4870>)
 800627c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006280:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006282:	4b7d      	ldr	r3, [pc, #500]	@ (8006478 <lcd_init+0x4870>)
 8006284:	2280      	movs	r2, #128	@ 0x80
 8006286:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006288:	4b7b      	ldr	r3, [pc, #492]	@ (8006478 <lcd_init+0x4870>)
 800628a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800628e:	611a      	str	r2, [r3, #16]
}
 8006290:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 8006292:	2000      	movs	r0, #0
 8006294:	f7fa fb7a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8006298:	2013      	movs	r0, #19
 800629a:	f7fa fb77 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 800629e:	2013      	movs	r0, #19
 80062a0:	f7fa fb74 	bl	800098c <lcd_wr_xdata>
 80062a4:	23f2      	movs	r3, #242	@ 0xf2
 80062a6:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80062aa:	4b73      	ldr	r3, [pc, #460]	@ (8006478 <lcd_init+0x4870>)
 80062ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062b0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80062b2:	4b71      	ldr	r3, [pc, #452]	@ (8006478 <lcd_init+0x4870>)
 80062b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062b8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80062ba:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80062be:	b29a      	uxth	r2, r3
 80062c0:	4b6e      	ldr	r3, [pc, #440]	@ (800647c <lcd_init+0x4874>)
 80062c2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80062c4:	4b6c      	ldr	r3, [pc, #432]	@ (8006478 <lcd_init+0x4870>)
 80062c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80062ca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80062cc:	4b6a      	ldr	r3, [pc, #424]	@ (8006478 <lcd_init+0x4870>)
 80062ce:	2280      	movs	r2, #128	@ 0x80
 80062d0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80062d2:	4b69      	ldr	r3, [pc, #420]	@ (8006478 <lcd_init+0x4870>)
 80062d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062d8:	611a      	str	r2, [r3, #16]
}
 80062da:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 80062dc:	2080      	movs	r0, #128	@ 0x80
 80062de:	f7fa fb55 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80062e2:	2004      	movs	r0, #4
 80062e4:	f7fa fb52 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 80062e8:	2040      	movs	r0, #64	@ 0x40
 80062ea:	f7fa fb4f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80062ee:	2028      	movs	r0, #40	@ 0x28
 80062f0:	f7fa fb4c 	bl	800098c <lcd_wr_xdata>
 80062f4:	23c1      	movs	r3, #193	@ 0xc1
 80062f6:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80062fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006478 <lcd_init+0x4870>)
 80062fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006300:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006302:	4b5d      	ldr	r3, [pc, #372]	@ (8006478 <lcd_init+0x4870>)
 8006304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006308:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800630a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 800630e:	b29a      	uxth	r2, r3
 8006310:	4b5a      	ldr	r3, [pc, #360]	@ (800647c <lcd_init+0x4874>)
 8006312:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006314:	4b58      	ldr	r3, [pc, #352]	@ (8006478 <lcd_init+0x4870>)
 8006316:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800631a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800631c:	4b56      	ldr	r3, [pc, #344]	@ (8006478 <lcd_init+0x4870>)
 800631e:	2280      	movs	r2, #128	@ 0x80
 8006320:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006322:	4b55      	ldr	r3, [pc, #340]	@ (8006478 <lcd_init+0x4870>)
 8006324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006328:	611a      	str	r2, [r3, #16]
}
 800632a:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 800632c:	2017      	movs	r0, #23
 800632e:	f7fa fb2d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 8006332:	2088      	movs	r0, #136	@ 0x88
 8006334:	f7fa fb2a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 8006338:	2088      	movs	r0, #136	@ 0x88
 800633a:	f7fa fb27 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800633e:	2020      	movs	r0, #32
 8006340:	f7fa fb24 	bl	800098c <lcd_wr_xdata>
 8006344:	23e0      	movs	r3, #224	@ 0xe0
 8006346:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800634a:	4b4b      	ldr	r3, [pc, #300]	@ (8006478 <lcd_init+0x4870>)
 800634c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006350:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006352:	4b49      	ldr	r3, [pc, #292]	@ (8006478 <lcd_init+0x4870>)
 8006354:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006358:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800635a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800635e:	b29a      	uxth	r2, r3
 8006360:	4b46      	ldr	r3, [pc, #280]	@ (800647c <lcd_init+0x4874>)
 8006362:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006364:	4b44      	ldr	r3, [pc, #272]	@ (8006478 <lcd_init+0x4870>)
 8006366:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800636a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800636c:	4b42      	ldr	r3, [pc, #264]	@ (8006478 <lcd_init+0x4870>)
 800636e:	2280      	movs	r2, #128	@ 0x80
 8006370:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006372:	4b41      	ldr	r3, [pc, #260]	@ (8006478 <lcd_init+0x4870>)
 8006374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006378:	611a      	str	r2, [r3, #16]
}
 800637a:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 800637c:	2000      	movs	r0, #0
 800637e:	f7fa fb05 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 8006382:	200a      	movs	r0, #10
 8006384:	f7fa fb02 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 8006388:	2012      	movs	r0, #18
 800638a:	f7fa faff 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 800638e:	2010      	movs	r0, #16
 8006390:	f7fa fafc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006394:	200e      	movs	r0, #14
 8006396:	f7fa faf9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 800639a:	2020      	movs	r0, #32
 800639c:	f7fa faf6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 80063a0:	20cc      	movs	r0, #204	@ 0xcc
 80063a2:	f7fa faf3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 80063a6:	2007      	movs	r0, #7
 80063a8:	f7fa faf0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 80063ac:	2006      	movs	r0, #6
 80063ae:	f7fa faed 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 80063b2:	200b      	movs	r0, #11
 80063b4:	f7fa faea 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 80063b8:	200e      	movs	r0, #14
 80063ba:	f7fa fae7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 80063be:	200f      	movs	r0, #15
 80063c0:	f7fa fae4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 80063c4:	200d      	movs	r0, #13
 80063c6:	f7fa fae1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 80063ca:	2015      	movs	r0, #21
 80063cc:	f7fa fade 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 80063d0:	2010      	movs	r0, #16
 80063d2:	f7fa fadb 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 80063d6:	2000      	movs	r0, #0
 80063d8:	f7fa fad8 	bl	800098c <lcd_wr_xdata>
 80063dc:	23e1      	movs	r3, #225	@ 0xe1
 80063de:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063e2:	4b25      	ldr	r3, [pc, #148]	@ (8006478 <lcd_init+0x4870>)
 80063e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80063ea:	4b23      	ldr	r3, [pc, #140]	@ (8006478 <lcd_init+0x4870>)
 80063ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80063f2:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	4b20      	ldr	r3, [pc, #128]	@ (800647c <lcd_init+0x4874>)
 80063fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80063fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006478 <lcd_init+0x4870>)
 80063fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006402:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006404:	4b1c      	ldr	r3, [pc, #112]	@ (8006478 <lcd_init+0x4870>)
 8006406:	2280      	movs	r2, #128	@ 0x80
 8006408:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800640a:	4b1b      	ldr	r3, [pc, #108]	@ (8006478 <lcd_init+0x4870>)
 800640c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006410:	611a      	str	r2, [r3, #16]
}
 8006412:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 8006414:	2000      	movs	r0, #0
 8006416:	f7fa fab9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 800641a:	200b      	movs	r0, #11
 800641c:	f7fa fab6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 8006420:	2013      	movs	r0, #19
 8006422:	f7fa fab3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 8006426:	200d      	movs	r0, #13
 8006428:	f7fa fab0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 800642c:	200e      	movs	r0, #14
 800642e:	f7fa faad 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 8006432:	201b      	movs	r0, #27
 8006434:	f7fa faaa 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 8006438:	2071      	movs	r0, #113	@ 0x71
 800643a:	f7fa faa7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 800643e:	2006      	movs	r0, #6
 8006440:	f7fa faa4 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 8006444:	2006      	movs	r0, #6
 8006446:	f7fa faa1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 800644a:	200a      	movs	r0, #10
 800644c:	f7fa fa9e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 8006450:	200f      	movs	r0, #15
 8006452:	f7fa fa9b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 8006456:	200e      	movs	r0, #14
 8006458:	f7fa fa98 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 800645c:	200f      	movs	r0, #15
 800645e:	f7fa fa95 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 8006462:	2015      	movs	r0, #21
 8006464:	f7fa fa92 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 8006468:	200c      	movs	r0, #12
 800646a:	f7fa fa8f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 800646e:	2000      	movs	r0, #0
 8006470:	f7fa fa8c 	bl	800098c <lcd_wr_xdata>
 8006474:	e004      	b.n	8006480 <lcd_init+0x4878>
 8006476:	bf00      	nop
 8006478:	40011000 	.word	0x40011000
 800647c:	40010c00 	.word	0x40010c00
 8006480:	232a      	movs	r3, #42	@ 0x2a
 8006482:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006486:	4b72      	ldr	r3, [pc, #456]	@ (8006650 <lcd_init+0x4a48>)
 8006488:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800648c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800648e:	4b70      	ldr	r3, [pc, #448]	@ (8006650 <lcd_init+0x4a48>)
 8006490:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006494:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006496:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800649a:	b29a      	uxth	r2, r3
 800649c:	4b6d      	ldr	r3, [pc, #436]	@ (8006654 <lcd_init+0x4a4c>)
 800649e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006650 <lcd_init+0x4a48>)
 80064a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80064a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064a8:	4b69      	ldr	r3, [pc, #420]	@ (8006650 <lcd_init+0x4a48>)
 80064aa:	2280      	movs	r2, #128	@ 0x80
 80064ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064ae:	4b68      	ldr	r3, [pc, #416]	@ (8006650 <lcd_init+0x4a48>)
 80064b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064b4:	611a      	str	r2, [r3, #16]
}
 80064b6:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 80064b8:	2000      	movs	r0, #0
 80064ba:	f7fa fa67 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80064be:	2000      	movs	r0, #0
 80064c0:	f7fa fa64 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80064c4:	2001      	movs	r0, #1
 80064c6:	f7fa fa61 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 80064ca:	20df      	movs	r0, #223	@ 0xdf
 80064cc:	f7fa fa5e 	bl	800098c <lcd_wr_xdata>
 80064d0:	232b      	movs	r3, #43	@ 0x2b
 80064d2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80064d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006650 <lcd_init+0x4a48>)
 80064d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80064de:	4b5c      	ldr	r3, [pc, #368]	@ (8006650 <lcd_init+0x4a48>)
 80064e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80064e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80064e6:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	4b59      	ldr	r3, [pc, #356]	@ (8006654 <lcd_init+0x4a4c>)
 80064ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064f0:	4b57      	ldr	r3, [pc, #348]	@ (8006650 <lcd_init+0x4a48>)
 80064f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80064f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064f8:	4b55      	ldr	r3, [pc, #340]	@ (8006650 <lcd_init+0x4a48>)
 80064fa:	2280      	movs	r2, #128	@ 0x80
 80064fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064fe:	4b54      	ldr	r3, [pc, #336]	@ (8006650 <lcd_init+0x4a48>)
 8006500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006504:	611a      	str	r2, [r3, #16]
}
 8006506:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 8006508:	2000      	movs	r0, #0
 800650a:	f7fa fa3f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800650e:	2000      	movs	r0, #0
 8006510:	f7fa fa3c 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8006514:	2003      	movs	r0, #3
 8006516:	f7fa fa39 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 800651a:	201f      	movs	r0, #31
 800651c:	f7fa fa36 	bl	800098c <lcd_wr_xdata>
 8006520:	233a      	movs	r3, #58	@ 0x3a
 8006522:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006526:	4b4a      	ldr	r3, [pc, #296]	@ (8006650 <lcd_init+0x4a48>)
 8006528:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800652c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800652e:	4b48      	ldr	r3, [pc, #288]	@ (8006650 <lcd_init+0x4a48>)
 8006530:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006534:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006536:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800653a:	b29a      	uxth	r2, r3
 800653c:	4b45      	ldr	r3, [pc, #276]	@ (8006654 <lcd_init+0x4a4c>)
 800653e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006540:	4b43      	ldr	r3, [pc, #268]	@ (8006650 <lcd_init+0x4a48>)
 8006542:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006546:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006548:	4b41      	ldr	r3, [pc, #260]	@ (8006650 <lcd_init+0x4a48>)
 800654a:	2280      	movs	r2, #128	@ 0x80
 800654c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800654e:	4b40      	ldr	r3, [pc, #256]	@ (8006650 <lcd_init+0x4a48>)
 8006550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006554:	611a      	str	r2, [r3, #16]
}
 8006556:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 8006558:	2055      	movs	r0, #85	@ 0x55
 800655a:	f7fa fa17 	bl	800098c <lcd_wr_xdata>
 800655e:	2336      	movs	r3, #54	@ 0x36
 8006560:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006564:	4b3a      	ldr	r3, [pc, #232]	@ (8006650 <lcd_init+0x4a48>)
 8006566:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800656a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800656c:	4b38      	ldr	r3, [pc, #224]	@ (8006650 <lcd_init+0x4a48>)
 800656e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006572:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006574:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8006578:	b29a      	uxth	r2, r3
 800657a:	4b36      	ldr	r3, [pc, #216]	@ (8006654 <lcd_init+0x4a4c>)
 800657c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800657e:	4b34      	ldr	r3, [pc, #208]	@ (8006650 <lcd_init+0x4a48>)
 8006580:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006584:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006586:	4b32      	ldr	r3, [pc, #200]	@ (8006650 <lcd_init+0x4a48>)
 8006588:	2280      	movs	r2, #128	@ 0x80
 800658a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800658c:	4b30      	ldr	r3, [pc, #192]	@ (8006650 <lcd_init+0x4a48>)
 800658e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006592:	611a      	str	r2, [r3, #16]
}
 8006594:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 8006596:	2000      	movs	r0, #0
 8006598:	f7fa f9f8 	bl	800098c <lcd_wr_xdata>
 800659c:	2311      	movs	r3, #17
 800659e:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006650 <lcd_init+0x4a48>)
 80065a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065aa:	4b29      	ldr	r3, [pc, #164]	@ (8006650 <lcd_init+0x4a48>)
 80065ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065b2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	4b26      	ldr	r3, [pc, #152]	@ (8006654 <lcd_init+0x4a4c>)
 80065ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065bc:	4b24      	ldr	r3, [pc, #144]	@ (8006650 <lcd_init+0x4a48>)
 80065be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065c4:	4b22      	ldr	r3, [pc, #136]	@ (8006650 <lcd_init+0x4a48>)
 80065c6:	2280      	movs	r2, #128	@ 0x80
 80065c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80065ca:	4b21      	ldr	r3, [pc, #132]	@ (8006650 <lcd_init+0x4a48>)
 80065cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065d0:	611a      	str	r2, [r3, #16]
}
 80065d2:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 80065d4:	2078      	movs	r0, #120	@ 0x78
 80065d6:	f000 fea1 	bl	800731c <HAL_Delay>
 80065da:	2329      	movs	r3, #41	@ 0x29
 80065dc:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006650 <lcd_init+0x4a48>)
 80065e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065e8:	4b19      	ldr	r3, [pc, #100]	@ (8006650 <lcd_init+0x4a48>)
 80065ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065f0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	4b17      	ldr	r3, [pc, #92]	@ (8006654 <lcd_init+0x4a4c>)
 80065f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065fa:	4b15      	ldr	r3, [pc, #84]	@ (8006650 <lcd_init+0x4a48>)
 80065fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006600:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006602:	4b13      	ldr	r3, [pc, #76]	@ (8006650 <lcd_init+0x4a48>)
 8006604:	2280      	movs	r2, #128	@ 0x80
 8006606:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006608:	4b11      	ldr	r3, [pc, #68]	@ (8006650 <lcd_init+0x4a48>)
 800660a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800660e:	611a      	str	r2, [r3, #16]
}
 8006610:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 8006612:	2014      	movs	r0, #20
 8006614:	f000 fe82 	bl	800731c <HAL_Delay>
 8006618:	232c      	movs	r3, #44	@ 0x2c
 800661a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800661e:	4b0c      	ldr	r3, [pc, #48]	@ (8006650 <lcd_init+0x4a48>)
 8006620:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006624:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006626:	4b0a      	ldr	r3, [pc, #40]	@ (8006650 <lcd_init+0x4a48>)
 8006628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800662c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800662e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 8006632:	b29a      	uxth	r2, r3
 8006634:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <lcd_init+0x4a4c>)
 8006636:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006638:	4b05      	ldr	r3, [pc, #20]	@ (8006650 <lcd_init+0x4a48>)
 800663a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800663e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006640:	4b03      	ldr	r3, [pc, #12]	@ (8006650 <lcd_init+0x4a48>)
 8006642:	2280      	movs	r2, #128	@ 0x80
 8006644:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006646:	4b02      	ldr	r3, [pc, #8]	@ (8006650 <lcd_init+0x4a48>)
 8006648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800664c:	611a      	str	r2, [r3, #16]
}
 800664e:	e224      	b.n	8006a9a <lcd_init+0x4e92>
 8006650:	40011000 	.word	0x40011000
 8006654:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 8006658:	4bbe      	ldr	r3, [pc, #760]	@ (8006954 <lcd_init+0x4d4c>)
 800665a:	889b      	ldrh	r3, [r3, #4]
 800665c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006660:	4293      	cmp	r3, r2
 8006662:	f040 821a 	bne.w	8006a9a <lcd_init+0x4e92>
 8006666:	23e2      	movs	r3, #226	@ 0xe2
 8006668:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800666c:	4bba      	ldr	r3, [pc, #744]	@ (8006958 <lcd_init+0x4d50>)
 800666e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006672:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006674:	4bb8      	ldr	r3, [pc, #736]	@ (8006958 <lcd_init+0x4d50>)
 8006676:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800667a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800667c:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 8006680:	b29a      	uxth	r2, r3
 8006682:	4bb6      	ldr	r3, [pc, #728]	@ (800695c <lcd_init+0x4d54>)
 8006684:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006686:	4bb4      	ldr	r3, [pc, #720]	@ (8006958 <lcd_init+0x4d50>)
 8006688:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800668c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800668e:	4bb2      	ldr	r3, [pc, #712]	@ (8006958 <lcd_init+0x4d50>)
 8006690:	2280      	movs	r2, #128	@ 0x80
 8006692:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006694:	4bb0      	ldr	r3, [pc, #704]	@ (8006958 <lcd_init+0x4d50>)
 8006696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800669a:	611a      	str	r2, [r3, #16]
}
 800669c:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 800669e:	201d      	movs	r0, #29
 80066a0:	f7fa f974 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 80066a4:	2002      	movs	r0, #2
 80066a6:	f7fa f971 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 80066aa:	2004      	movs	r0, #4
 80066ac:	f7fa f96e 	bl	800098c <lcd_wr_xdata>
 80066b0:	23e0      	movs	r3, #224	@ 0xe0
 80066b2:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066b6:	4ba8      	ldr	r3, [pc, #672]	@ (8006958 <lcd_init+0x4d50>)
 80066b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066be:	4ba6      	ldr	r3, [pc, #664]	@ (8006958 <lcd_init+0x4d50>)
 80066c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066c6:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	4ba3      	ldr	r3, [pc, #652]	@ (800695c <lcd_init+0x4d54>)
 80066ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80066d0:	4ba1      	ldr	r3, [pc, #644]	@ (8006958 <lcd_init+0x4d50>)
 80066d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80066d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80066d8:	4b9f      	ldr	r3, [pc, #636]	@ (8006958 <lcd_init+0x4d50>)
 80066da:	2280      	movs	r2, #128	@ 0x80
 80066dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066de:	4b9e      	ldr	r3, [pc, #632]	@ (8006958 <lcd_init+0x4d50>)
 80066e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066e4:	611a      	str	r2, [r3, #16]
}
 80066e6:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 80066e8:	2001      	movs	r0, #1
 80066ea:	f7fa f94f 	bl	800098c <lcd_wr_xdata>
        HAL_Delay(10);
 80066ee:	200a      	movs	r0, #10
 80066f0:	f000 fe14 	bl	800731c <HAL_Delay>
 80066f4:	23e0      	movs	r3, #224	@ 0xe0
 80066f6:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066fa:	4b97      	ldr	r3, [pc, #604]	@ (8006958 <lcd_init+0x4d50>)
 80066fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006700:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006702:	4b95      	ldr	r3, [pc, #596]	@ (8006958 <lcd_init+0x4d50>)
 8006704:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006708:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800670a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 800670e:	b29a      	uxth	r2, r3
 8006710:	4b92      	ldr	r3, [pc, #584]	@ (800695c <lcd_init+0x4d54>)
 8006712:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006714:	4b90      	ldr	r3, [pc, #576]	@ (8006958 <lcd_init+0x4d50>)
 8006716:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800671a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800671c:	4b8e      	ldr	r3, [pc, #568]	@ (8006958 <lcd_init+0x4d50>)
 800671e:	2280      	movs	r2, #128	@ 0x80
 8006720:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006722:	4b8d      	ldr	r3, [pc, #564]	@ (8006958 <lcd_init+0x4d50>)
 8006724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006728:	611a      	str	r2, [r3, #16]
}
 800672a:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 800672c:	2003      	movs	r0, #3
 800672e:	f7fa f92d 	bl	800098c <lcd_wr_xdata>
        HAL_Delay(12);
 8006732:	200c      	movs	r0, #12
 8006734:	f000 fdf2 	bl	800731c <HAL_Delay>
 8006738:	2301      	movs	r3, #1
 800673a:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800673e:	4b86      	ldr	r3, [pc, #536]	@ (8006958 <lcd_init+0x4d50>)
 8006740:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006744:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006746:	4b84      	ldr	r3, [pc, #528]	@ (8006958 <lcd_init+0x4d50>)
 8006748:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800674c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800674e:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 8006752:	b29a      	uxth	r2, r3
 8006754:	4b81      	ldr	r3, [pc, #516]	@ (800695c <lcd_init+0x4d54>)
 8006756:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006758:	4b7f      	ldr	r3, [pc, #508]	@ (8006958 <lcd_init+0x4d50>)
 800675a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800675e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006760:	4b7d      	ldr	r3, [pc, #500]	@ (8006958 <lcd_init+0x4d50>)
 8006762:	2280      	movs	r2, #128	@ 0x80
 8006764:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006766:	4b7c      	ldr	r3, [pc, #496]	@ (8006958 <lcd_init+0x4d50>)
 8006768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800676c:	611a      	str	r2, [r3, #16]
}
 800676e:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 8006770:	200a      	movs	r0, #10
 8006772:	f000 fdd3 	bl	800731c <HAL_Delay>
 8006776:	23e6      	movs	r3, #230	@ 0xe6
 8006778:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800677c:	4b76      	ldr	r3, [pc, #472]	@ (8006958 <lcd_init+0x4d50>)
 800677e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006782:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006784:	4b74      	ldr	r3, [pc, #464]	@ (8006958 <lcd_init+0x4d50>)
 8006786:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800678a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800678c:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 8006790:	b29a      	uxth	r2, r3
 8006792:	4b72      	ldr	r3, [pc, #456]	@ (800695c <lcd_init+0x4d54>)
 8006794:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006796:	4b70      	ldr	r3, [pc, #448]	@ (8006958 <lcd_init+0x4d50>)
 8006798:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800679c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800679e:	4b6e      	ldr	r3, [pc, #440]	@ (8006958 <lcd_init+0x4d50>)
 80067a0:	2280      	movs	r2, #128	@ 0x80
 80067a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067a4:	4b6c      	ldr	r3, [pc, #432]	@ (8006958 <lcd_init+0x4d50>)
 80067a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067aa:	611a      	str	r2, [r3, #16]
}
 80067ac:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 80067ae:	202f      	movs	r0, #47	@ 0x2f
 80067b0:	f7fa f8ec 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80067b4:	20ff      	movs	r0, #255	@ 0xff
 80067b6:	f7fa f8e9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80067ba:	20ff      	movs	r0, #255	@ 0xff
 80067bc:	f7fa f8e6 	bl	800098c <lcd_wr_xdata>
 80067c0:	23b0      	movs	r3, #176	@ 0xb0
 80067c2:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067c6:	4b64      	ldr	r3, [pc, #400]	@ (8006958 <lcd_init+0x4d50>)
 80067c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80067ce:	4b62      	ldr	r3, [pc, #392]	@ (8006958 <lcd_init+0x4d50>)
 80067d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80067d6:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 80067da:	b29a      	uxth	r2, r3
 80067dc:	4b5f      	ldr	r3, [pc, #380]	@ (800695c <lcd_init+0x4d54>)
 80067de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80067e0:	4b5d      	ldr	r3, [pc, #372]	@ (8006958 <lcd_init+0x4d50>)
 80067e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067e8:	4b5b      	ldr	r3, [pc, #364]	@ (8006958 <lcd_init+0x4d50>)
 80067ea:	2280      	movs	r2, #128	@ 0x80
 80067ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067ee:	4b5a      	ldr	r3, [pc, #360]	@ (8006958 <lcd_init+0x4d50>)
 80067f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067f4:	611a      	str	r2, [r3, #16]
}
 80067f6:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 80067f8:	2020      	movs	r0, #32
 80067fa:	f7fa f8c7 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 80067fe:	2000      	movs	r0, #0
 8006800:	f7fa f8c4 	bl	800098c <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 8006804:	2003      	movs	r0, #3
 8006806:	f7fa f8c1 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 800680a:	f240 301f 	movw	r0, #799	@ 0x31f
 800680e:	f7fa f8bd 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 8006812:	2001      	movs	r0, #1
 8006814:	f7fa f8ba 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8006818:	f240 10df 	movw	r0, #479	@ 0x1df
 800681c:	f7fa f8b6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 8006820:	2000      	movs	r0, #0
 8006822:	f7fa f8b3 	bl	800098c <lcd_wr_xdata>
 8006826:	23b4      	movs	r3, #180	@ 0xb4
 8006828:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800682c:	4b4a      	ldr	r3, [pc, #296]	@ (8006958 <lcd_init+0x4d50>)
 800682e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006832:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006834:	4b48      	ldr	r3, [pc, #288]	@ (8006958 <lcd_init+0x4d50>)
 8006836:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800683a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800683c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8006840:	b29a      	uxth	r2, r3
 8006842:	4b46      	ldr	r3, [pc, #280]	@ (800695c <lcd_init+0x4d54>)
 8006844:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006846:	4b44      	ldr	r3, [pc, #272]	@ (8006958 <lcd_init+0x4d50>)
 8006848:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800684c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800684e:	4b42      	ldr	r3, [pc, #264]	@ (8006958 <lcd_init+0x4d50>)
 8006850:	2280      	movs	r2, #128	@ 0x80
 8006852:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006854:	4b40      	ldr	r3, [pc, #256]	@ (8006958 <lcd_init+0x4d50>)
 8006856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800685a:	611a      	str	r2, [r3, #16]
}
 800685c:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 800685e:	2004      	movs	r0, #4
 8006860:	f7fa f894 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 8006864:	f240 401f 	movw	r0, #1055	@ 0x41f
 8006868:	f7fa f890 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 800686c:	2000      	movs	r0, #0
 800686e:	f7fa f88d 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 8006872:	202e      	movs	r0, #46	@ 0x2e
 8006874:	f7fa f88a 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 8006878:	2000      	movs	r0, #0
 800687a:	f7fa f887 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800687e:	2000      	movs	r0, #0
 8006880:	f7fa f884 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006884:	2000      	movs	r0, #0
 8006886:	f7fa f881 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800688a:	2000      	movs	r0, #0
 800688c:	f7fa f87e 	bl	800098c <lcd_wr_xdata>
 8006890:	23b6      	movs	r3, #182	@ 0xb6
 8006892:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006896:	4b30      	ldr	r3, [pc, #192]	@ (8006958 <lcd_init+0x4d50>)
 8006898:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800689c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800689e:	4b2e      	ldr	r3, [pc, #184]	@ (8006958 <lcd_init+0x4d50>)
 80068a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068a6:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	4b2b      	ldr	r3, [pc, #172]	@ (800695c <lcd_init+0x4d54>)
 80068ae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068b0:	4b29      	ldr	r3, [pc, #164]	@ (8006958 <lcd_init+0x4d50>)
 80068b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068b8:	4b27      	ldr	r3, [pc, #156]	@ (8006958 <lcd_init+0x4d50>)
 80068ba:	2280      	movs	r2, #128	@ 0x80
 80068bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068be:	4b26      	ldr	r3, [pc, #152]	@ (8006958 <lcd_init+0x4d50>)
 80068c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068c4:	611a      	str	r2, [r3, #16]
}
 80068c6:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 80068c8:	2002      	movs	r0, #2
 80068ca:	f7fa f85f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 80068ce:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 80068d2:	f7fa f85b 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 80068d6:	2000      	movs	r0, #0
 80068d8:	f7fa f858 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 80068dc:	2017      	movs	r0, #23
 80068de:	f7fa f855 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 80068e2:	2015      	movs	r0, #21
 80068e4:	f7fa f852 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80068e8:	2000      	movs	r0, #0
 80068ea:	f7fa f84f 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80068ee:	2000      	movs	r0, #0
 80068f0:	f7fa f84c 	bl	800098c <lcd_wr_xdata>
 80068f4:	23f0      	movs	r3, #240	@ 0xf0
 80068f6:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068fa:	4b17      	ldr	r3, [pc, #92]	@ (8006958 <lcd_init+0x4d50>)
 80068fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006900:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006902:	4b15      	ldr	r3, [pc, #84]	@ (8006958 <lcd_init+0x4d50>)
 8006904:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006908:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800690a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 800690e:	b29a      	uxth	r2, r3
 8006910:	4b12      	ldr	r3, [pc, #72]	@ (800695c <lcd_init+0x4d54>)
 8006912:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006914:	4b10      	ldr	r3, [pc, #64]	@ (8006958 <lcd_init+0x4d50>)
 8006916:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800691a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800691c:	4b0e      	ldr	r3, [pc, #56]	@ (8006958 <lcd_init+0x4d50>)
 800691e:	2280      	movs	r2, #128	@ 0x80
 8006920:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006922:	4b0d      	ldr	r3, [pc, #52]	@ (8006958 <lcd_init+0x4d50>)
 8006924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006928:	611a      	str	r2, [r3, #16]
}
 800692a:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 800692c:	2003      	movs	r0, #3
 800692e:	f7fa f82d 	bl	800098c <lcd_wr_xdata>
 8006932:	2329      	movs	r3, #41	@ 0x29
 8006934:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006938:	4b07      	ldr	r3, [pc, #28]	@ (8006958 <lcd_init+0x4d50>)
 800693a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800693e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006940:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <lcd_init+0x4d50>)
 8006942:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006946:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006948:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 800694c:	b29a      	uxth	r2, r3
 800694e:	4b03      	ldr	r3, [pc, #12]	@ (800695c <lcd_init+0x4d54>)
 8006950:	60da      	str	r2, [r3, #12]
 8006952:	e005      	b.n	8006960 <lcd_init+0x4d58>
 8006954:	2000002c 	.word	0x2000002c
 8006958:	40011000 	.word	0x40011000
 800695c:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006960:	4b56      	ldr	r3, [pc, #344]	@ (8006abc <lcd_init+0x4eb4>)
 8006962:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006966:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006968:	4b54      	ldr	r3, [pc, #336]	@ (8006abc <lcd_init+0x4eb4>)
 800696a:	2280      	movs	r2, #128	@ 0x80
 800696c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800696e:	4b53      	ldr	r3, [pc, #332]	@ (8006abc <lcd_init+0x4eb4>)
 8006970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006974:	611a      	str	r2, [r3, #16]
}
 8006976:	bf00      	nop
 8006978:	23d0      	movs	r3, #208	@ 0xd0
 800697a:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800697e:	4b4f      	ldr	r3, [pc, #316]	@ (8006abc <lcd_init+0x4eb4>)
 8006980:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006984:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006986:	4b4d      	ldr	r3, [pc, #308]	@ (8006abc <lcd_init+0x4eb4>)
 8006988:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800698c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800698e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8006992:	b29a      	uxth	r2, r3
 8006994:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac0 <lcd_init+0x4eb8>)
 8006996:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006998:	4b48      	ldr	r3, [pc, #288]	@ (8006abc <lcd_init+0x4eb4>)
 800699a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800699e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069a0:	4b46      	ldr	r3, [pc, #280]	@ (8006abc <lcd_init+0x4eb4>)
 80069a2:	2280      	movs	r2, #128	@ 0x80
 80069a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069a6:	4b45      	ldr	r3, [pc, #276]	@ (8006abc <lcd_init+0x4eb4>)
 80069a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ac:	611a      	str	r2, [r3, #16]
}
 80069ae:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 80069b0:	2000      	movs	r0, #0
 80069b2:	f7f9 ffeb 	bl	800098c <lcd_wr_xdata>
 80069b6:	23be      	movs	r3, #190	@ 0xbe
 80069b8:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069bc:	4b3f      	ldr	r3, [pc, #252]	@ (8006abc <lcd_init+0x4eb4>)
 80069be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069c2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069c4:	4b3d      	ldr	r3, [pc, #244]	@ (8006abc <lcd_init+0x4eb4>)
 80069c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069ca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069cc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac0 <lcd_init+0x4eb8>)
 80069d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069d6:	4b39      	ldr	r3, [pc, #228]	@ (8006abc <lcd_init+0x4eb4>)
 80069d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069de:	4b37      	ldr	r3, [pc, #220]	@ (8006abc <lcd_init+0x4eb4>)
 80069e0:	2280      	movs	r2, #128	@ 0x80
 80069e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069e4:	4b35      	ldr	r3, [pc, #212]	@ (8006abc <lcd_init+0x4eb4>)
 80069e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ea:	611a      	str	r2, [r3, #16]
}
 80069ec:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 80069ee:	2005      	movs	r0, #5
 80069f0:	f7f9 ffcc 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 80069f4:	20fe      	movs	r0, #254	@ 0xfe
 80069f6:	f7f9 ffc9 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 80069fa:	2001      	movs	r0, #1
 80069fc:	f7f9 ffc6 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 8006a00:	2000      	movs	r0, #0
 8006a02:	f7f9 ffc3 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 8006a06:	2000      	movs	r0, #0
 8006a08:	f7f9 ffc0 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f7f9 ffbd 	bl	800098c <lcd_wr_xdata>
 8006a12:	23b8      	movs	r3, #184	@ 0xb8
 8006a14:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a18:	4b28      	ldr	r3, [pc, #160]	@ (8006abc <lcd_init+0x4eb4>)
 8006a1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a1e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a20:	4b26      	ldr	r3, [pc, #152]	@ (8006abc <lcd_init+0x4eb4>)
 8006a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a26:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a28:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ac0 <lcd_init+0x4eb8>)
 8006a30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a32:	4b22      	ldr	r3, [pc, #136]	@ (8006abc <lcd_init+0x4eb4>)
 8006a34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a3a:	4b20      	ldr	r3, [pc, #128]	@ (8006abc <lcd_init+0x4eb4>)
 8006a3c:	2280      	movs	r2, #128	@ 0x80
 8006a3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a40:	4b1e      	ldr	r3, [pc, #120]	@ (8006abc <lcd_init+0x4eb4>)
 8006a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a46:	611a      	str	r2, [r3, #16]
}
 8006a48:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 8006a4a:	2003      	movs	r0, #3
 8006a4c:	f7f9 ff9e 	bl	800098c <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 8006a50:	2001      	movs	r0, #1
 8006a52:	f7f9 ff9b 	bl	800098c <lcd_wr_xdata>
 8006a56:	23ba      	movs	r3, #186	@ 0xba
 8006a58:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a5c:	4b17      	ldr	r3, [pc, #92]	@ (8006abc <lcd_init+0x4eb4>)
 8006a5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a62:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a64:	4b15      	ldr	r3, [pc, #84]	@ (8006abc <lcd_init+0x4eb4>)
 8006a66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a6a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a6c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	4b13      	ldr	r3, [pc, #76]	@ (8006ac0 <lcd_init+0x4eb8>)
 8006a74:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a76:	4b11      	ldr	r3, [pc, #68]	@ (8006abc <lcd_init+0x4eb4>)
 8006a78:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a7c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006abc <lcd_init+0x4eb4>)
 8006a80:	2280      	movs	r2, #128	@ 0x80
 8006a82:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a84:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <lcd_init+0x4eb4>)
 8006a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a8a:	611a      	str	r2, [r3, #16]
}
 8006a8c:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f7f9 ff7c 	bl	800098c <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 8006a94:	2064      	movs	r0, #100	@ 0x64
 8006a96:	f7fa ff1f 	bl	80018d8 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	f7fa ffdc 	bl	8001a58 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 8006aa0:	4b06      	ldr	r3, [pc, #24]	@ (8006abc <lcd_init+0x4eb4>)
 8006aa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006aa6:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 8006aa8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006aac:	f000 f80a 	bl	8006ac4 <lcd_clear>
}
 8006ab0:	bf00      	nop
 8006ab2:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40011000 	.word	0x40011000
 8006ac0:	40010c00 	.word	0x40010c00

08006ac4 <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 8006ad2:	4b27      	ldr	r3, [pc, #156]	@ (8006b70 <lcd_clear+0xac>)
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 8006ad8:	4b25      	ldr	r3, [pc, #148]	@ (8006b70 <lcd_clear+0xac>)
 8006ada:	885b      	ldrh	r3, [r3, #2]
 8006adc:	461a      	mov	r2, r3
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	2000      	movs	r0, #0
 8006aea:	f7fa f809 	bl	8000b00 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006aee:	4b20      	ldr	r3, [pc, #128]	@ (8006b70 <lcd_clear+0xac>)
 8006af0:	891b      	ldrh	r3, [r3, #8]
 8006af2:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006af4:	4b1f      	ldr	r3, [pc, #124]	@ (8006b74 <lcd_clear+0xb0>)
 8006af6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006afa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006afc:	4b1d      	ldr	r3, [pc, #116]	@ (8006b74 <lcd_clear+0xb0>)
 8006afe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b02:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	4b1b      	ldr	r3, [pc, #108]	@ (8006b78 <lcd_clear+0xb4>)
 8006b0a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b0c:	4b19      	ldr	r3, [pc, #100]	@ (8006b74 <lcd_clear+0xb0>)
 8006b0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b12:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b14:	4b17      	ldr	r3, [pc, #92]	@ (8006b74 <lcd_clear+0xb0>)
 8006b16:	2280      	movs	r2, #128	@ 0x80
 8006b18:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b1a:	4b16      	ldr	r3, [pc, #88]	@ (8006b74 <lcd_clear+0xb0>)
 8006b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b20:	611a      	str	r2, [r3, #16]
}
 8006b22:	bf00      	nop
}
 8006b24:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 8006b26:	4b13      	ldr	r3, [pc, #76]	@ (8006b74 <lcd_clear+0xb0>)
 8006b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b2c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b2e:	4b11      	ldr	r3, [pc, #68]	@ (8006b74 <lcd_clear+0xb0>)
 8006b30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b34:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e00c      	b.n	8006b56 <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 8006b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8006b78 <lcd_clear+0xb4>)
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 8006b42:	4b0c      	ldr	r3, [pc, #48]	@ (8006b74 <lcd_clear+0xb0>)
 8006b44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b48:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b74 <lcd_clear+0xb0>)
 8006b4c:	2280      	movs	r2, #128	@ 0x80
 8006b4e:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	3301      	adds	r3, #1
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d3ee      	bcc.n	8006b3c <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 8006b5e:	4b05      	ldr	r3, [pc, #20]	@ (8006b74 <lcd_clear+0xb0>)
 8006b60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b64:	611a      	str	r2, [r3, #16]
}
 8006b66:	bf00      	nop
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	2000002c 	.word	0x2000002c
 8006b74:	40011000 	.word	0x40011000
 8006b78:	40010c00 	.word	0x40010c00

08006b7c <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8006b7c:	b590      	push	{r4, r7, lr}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4604      	mov	r4, r0
 8006b84:	4608      	mov	r0, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	80fb      	strh	r3, [r7, #6]
 8006b8e:	4603      	mov	r3, r0
 8006b90:	80bb      	strh	r3, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
 8006b96:	4613      	mov	r3, r2
 8006b98:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8006b9a:	88bb      	ldrh	r3, [r7, #4]
 8006b9c:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 8006ba6:	78bb      	ldrb	r3, [r7, #2]
 8006ba8:	08db      	lsrs	r3, r3, #3
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	78bb      	ldrb	r3, [r7, #2]
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bf14      	ite	ne
 8006bba:	2301      	movne	r3, #1
 8006bbc:	2300      	moveq	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	78ba      	ldrb	r2, [r7, #2]
 8006bc6:	0852      	lsrs	r2, r2, #1
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	3b20      	subs	r3, #32
 8006bd4:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8006bd6:	78bb      	ldrb	r3, [r7, #2]
 8006bd8:	3b0c      	subs	r3, #12
 8006bda:	2b14      	cmp	r3, #20
 8006bdc:	f200 8099 	bhi.w	8006d12 <lcd_show_char+0x196>
 8006be0:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <lcd_show_char+0x6c>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c3d 	.word	0x08006c3d
 8006bec:	08006d13 	.word	0x08006d13
 8006bf0:	08006d13 	.word	0x08006d13
 8006bf4:	08006d13 	.word	0x08006d13
 8006bf8:	08006c4f 	.word	0x08006c4f
 8006bfc:	08006d13 	.word	0x08006d13
 8006c00:	08006d13 	.word	0x08006d13
 8006c04:	08006d13 	.word	0x08006d13
 8006c08:	08006d13 	.word	0x08006d13
 8006c0c:	08006d13 	.word	0x08006d13
 8006c10:	08006d13 	.word	0x08006d13
 8006c14:	08006d13 	.word	0x08006d13
 8006c18:	08006c5b 	.word	0x08006c5b
 8006c1c:	08006d13 	.word	0x08006d13
 8006c20:	08006d13 	.word	0x08006d13
 8006c24:	08006d13 	.word	0x08006d13
 8006c28:	08006d13 	.word	0x08006d13
 8006c2c:	08006d13 	.word	0x08006d13
 8006c30:	08006d13 	.word	0x08006d13
 8006c34:	08006d13 	.word	0x08006d13
 8006c38:	08006c6d 	.word	0x08006c6d
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4a36      	ldr	r2, [pc, #216]	@ (8006d20 <lcd_show_char+0x1a4>)
 8006c48:	4413      	add	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
            break;
 8006c4c:	e014      	b.n	8006c78 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	4a34      	ldr	r2, [pc, #208]	@ (8006d24 <lcd_show_char+0x1a8>)
 8006c54:	4413      	add	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
            break;
 8006c58:	e00e      	b.n	8006c78 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4a30      	ldr	r2, [pc, #192]	@ (8006d28 <lcd_show_char+0x1ac>)
 8006c66:	4413      	add	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
            break;
 8006c6a:	e005      	b.n	8006c78 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	019b      	lsls	r3, r3, #6
 8006c70:	4a2e      	ldr	r2, [pc, #184]	@ (8006d2c <lcd_show_char+0x1b0>)
 8006c72:	4413      	add	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
            break;
 8006c76:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	757b      	strb	r3, [r7, #21]
 8006c7c:	e044      	b.n	8006d08 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 8006c7e:	7d7b      	ldrb	r3, [r7, #21]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4413      	add	r3, r2
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006c88:	2300      	movs	r3, #0
 8006c8a:	75bb      	strb	r3, [r7, #22]
 8006c8c:	e034      	b.n	8006cf8 <lcd_show_char+0x17c>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 8006c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	da06      	bge.n	8006ca4 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 8006c96:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006c98:	88b9      	ldrh	r1, [r7, #4]
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fa fdcf 	bl	8001840 <lcd_draw_point>
 8006ca2:	e00a      	b.n	8006cba <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 8006ca4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 8006cac:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <lcd_show_char+0x1b4>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	88b9      	ldrh	r1, [r7, #4]
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fa fdc3 	bl	8001840 <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
            y++;
 8006cc0:	88bb      	ldrh	r3, [r7, #4]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 8006cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d34 <lcd_show_char+0x1b8>)
 8006cc8:	885b      	ldrh	r3, [r3, #2]
 8006cca:	88ba      	ldrh	r2, [r7, #4]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d222      	bcs.n	8006d16 <lcd_show_char+0x19a>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 8006cd0:	88ba      	ldrh	r2, [r7, #4]
 8006cd2:	89fb      	ldrh	r3, [r7, #14]
 8006cd4:	1ad2      	subs	r2, r2, r3
 8006cd6:	78bb      	ldrb	r3, [r7, #2]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d10a      	bne.n	8006cf2 <lcd_show_char+0x176>
            {
                y = y0; /* y���긴λ */
 8006cdc:	89fb      	ldrh	r3, [r7, #14]
 8006cde:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 8006ce0:	88fb      	ldrh	r3, [r7, #6]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 8006ce6:	4b13      	ldr	r3, [pc, #76]	@ (8006d34 <lcd_show_char+0x1b8>)
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	88fa      	ldrh	r2, [r7, #6]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d307      	bcc.n	8006d00 <lcd_show_char+0x184>
 8006cf0:	e012      	b.n	8006d18 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006cf2:	7dbb      	ldrb	r3, [r7, #22]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	75bb      	strb	r3, [r7, #22]
 8006cf8:	7dbb      	ldrb	r3, [r7, #22]
 8006cfa:	2b07      	cmp	r3, #7
 8006cfc:	d9c7      	bls.n	8006c8e <lcd_show_char+0x112>
 8006cfe:	e000      	b.n	8006d02 <lcd_show_char+0x186>

                break;
 8006d00:	bf00      	nop
    for (t = 0; t < csize; t++)
 8006d02:	7d7b      	ldrb	r3, [r7, #21]
 8006d04:	3301      	adds	r3, #1
 8006d06:	757b      	strb	r3, [r7, #21]
 8006d08:	7d7a      	ldrb	r2, [r7, #21]
 8006d0a:	7b7b      	ldrb	r3, [r7, #13]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d3b6      	bcc.n	8006c7e <lcd_show_char+0x102>
 8006d10:	e002      	b.n	8006d18 <lcd_show_char+0x19c>
            return ;
 8006d12:	bf00      	nop
 8006d14:	e000      	b.n	8006d18 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* �������� */
 8006d16:	bf00      	nop
            }
        }
    }
}
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd90      	pop	{r4, r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	08008f08 	.word	0x08008f08
 8006d24:	0800937c 	.word	0x0800937c
 8006d28:	0800996c 	.word	0x0800996c
 8006d2c:	0800a6c8 	.word	0x0800a6c8
 8006d30:	20000000 	.word	0x20000000
 8006d34:	2000002c 	.word	0x2000002c

08006d38 <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8006d38:	b590      	push	{r4, r7, lr}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	4611      	mov	r1, r2
 8006d44:	461a      	mov	r2, r3
 8006d46:	4623      	mov	r3, r4
 8006d48:	80fb      	strh	r3, [r7, #6]
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	80bb      	strh	r3, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	807b      	strh	r3, [r7, #2]
 8006d52:	4613      	mov	r3, r2
 8006d54:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	73fb      	strb	r3, [r7, #15]
    width += x;
 8006d5a:	887a      	ldrh	r2, [r7, #2]
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	4413      	add	r3, r2
 8006d60:	807b      	strh	r3, [r7, #2]
    height += y;
 8006d62:	883a      	ldrh	r2, [r7, #0]
 8006d64:	88bb      	ldrh	r3, [r7, #4]
 8006d66:	4413      	add	r3, r2
 8006d68:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006d6a:	e027      	b.n	8006dbc <lcd_show_string+0x84>
    {
        if (x >= width)
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	887b      	ldrh	r3, [r7, #2]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d307      	bcc.n	8006d84 <lcd_show_string+0x4c>
        {
            x = x0;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	80fb      	strh	r3, [r7, #6]
            y += size;
 8006d78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	88bb      	ldrh	r3, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* �˳� */
 8006d84:	88ba      	ldrh	r2, [r7, #4]
 8006d86:	883b      	ldrh	r3, [r7, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d220      	bcs.n	8006dce <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	f897 4020 	ldrb.w	r4, [r7, #32]
 8006d94:	88b9      	ldrh	r1, [r7, #4]
 8006d96:	88f8      	ldrh	r0, [r7, #6]
 8006d98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4623      	mov	r3, r4
 8006da2:	f7ff feeb 	bl	8006b7c <lcd_show_char>
        x += size / 2;
 8006da6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	88fb      	ldrh	r3, [r7, #6]
 8006db2:	4413      	add	r3, r2
 8006db4:	80fb      	strh	r3, [r7, #6]
        p++;
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	3301      	adds	r3, #1
 8006dba:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b7e      	cmp	r3, #126	@ 0x7e
 8006dc2:	d805      	bhi.n	8006dd0 <lcd_show_string+0x98>
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b1f      	cmp	r3, #31
 8006dca:	d8cf      	bhi.n	8006d6c <lcd_show_string+0x34>
    }
}
 8006dcc:	e000      	b.n	8006dd0 <lcd_show_string+0x98>
        if (y >= height)break;  /* �˳� */
 8006dce:	bf00      	nop
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd90      	pop	{r4, r7, pc}

08006dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006ddc:	f000 fa3c 	bl	8007258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006de0:	f000 f812 	bl	8006e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006de4:	f7f9 fd2e 	bl	8000844 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006de8:	f000 f992 	bl	8007110 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8006dec:	f7fa ff0c 	bl	8001c08 <lcd_init>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1);
 8006df0:	2201      	movs	r2, #1
 8006df2:	4903      	ldr	r1, [pc, #12]	@ (8006e00 <main+0x28>)
 8006df4:	4803      	ldr	r0, [pc, #12]	@ (8006e04 <main+0x2c>)
 8006df6:	f001 fbda 	bl	80085ae <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <main+0x22>
 8006dfe:	bf00      	nop
 8006e00:	2000003c 	.word	0x2000003c
 8006e04:	20000454 	.word	0x20000454

08006e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b090      	sub	sp, #64	@ 0x40
 8006e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e0e:	f107 0318 	add.w	r3, r7, #24
 8006e12:	2228      	movs	r2, #40	@ 0x28
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f002 f822 	bl	8008e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e1c:	1d3b      	adds	r3, r7, #4
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	605a      	str	r2, [r3, #4]
 8006e24:	609a      	str	r2, [r3, #8]
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006e2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006e34:	2300      	movs	r3, #0
 8006e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006e46:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e4c:	f107 0318 	add.w	r3, r7, #24
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 feb3 	bl	8007bbc <HAL_RCC_OscConfig>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006e5c:	f000 f819 	bl	8006e92 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e60:	230f      	movs	r3, #15
 8006e62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e64:	2302      	movs	r3, #2
 8006e66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006e76:	1d3b      	adds	r3, r7, #4
 8006e78:	2102      	movs	r1, #2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f001 f920 	bl	80080c0 <HAL_RCC_ClockConfig>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006e86:	f000 f804 	bl	8006e92 <Error_Handler>
  }
}
 8006e8a:	bf00      	nop
 8006e8c:	3740      	adds	r7, #64	@ 0x40
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e92:	b480      	push	{r7}
 8006e94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e96:	b672      	cpsid	i
}
 8006e98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <Error_Handler+0x8>
	...

08006ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006ea6:	4b16      	ldr	r3, [pc, #88]	@ (8006f00 <HAL_MspInit+0x60>)
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	4a15      	ldr	r2, [pc, #84]	@ (8006f00 <HAL_MspInit+0x60>)
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	6193      	str	r3, [r2, #24]
 8006eb2:	4b13      	ldr	r3, [pc, #76]	@ (8006f00 <HAL_MspInit+0x60>)
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	60bb      	str	r3, [r7, #8]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ebe:	4b10      	ldr	r3, [pc, #64]	@ (8006f00 <HAL_MspInit+0x60>)
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8006f00 <HAL_MspInit+0x60>)
 8006ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ec8:	61d3      	str	r3, [r2, #28]
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <HAL_MspInit+0x60>)
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed2:	607b      	str	r3, [r7, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006ed6:	2005      	movs	r0, #5
 8006ed8:	f000 fb10 	bl	80074fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006edc:	4b09      	ldr	r3, [pc, #36]	@ (8006f04 <HAL_MspInit+0x64>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	4a04      	ldr	r2, [pc, #16]	@ (8006f04 <HAL_MspInit+0x64>)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40021000 	.word	0x40021000
 8006f04:	40010000 	.word	0x40010000

08006f08 <print_uart>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print_uart(char *s) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(s); ++i) {
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e00b      	b.n	8006f2e <print_uart+0x26>
		HAL_UART_Transmit(&huart1, (uint8_t *)&s[i], 1, 0xffff);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	18d1      	adds	r1, r2, r3
 8006f1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006f20:	2201      	movs	r2, #1
 8006f22:	4809      	ldr	r0, [pc, #36]	@ (8006f48 <print_uart+0x40>)
 8006f24:	f001 fab1 	bl	800848a <HAL_UART_Transmit>
	for (int i = 0; i < strlen(s); ++i) {
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7f9 f97a 	bl	8000228 <strlen>
 8006f34:	4602      	mov	r2, r0
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d8ec      	bhi.n	8006f16 <print_uart+0xe>
	}
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20000454 	.word	0x20000454

08006f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f50:	bf00      	nop
 8006f52:	e7fd      	b.n	8006f50 <NMI_Handler+0x4>

08006f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <HardFault_Handler+0x4>

08006f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f60:	bf00      	nop
 8006f62:	e7fd      	b.n	8006f60 <MemManage_Handler+0x4>

08006f64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <BusFault_Handler+0x4>

08006f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f70:	bf00      	nop
 8006f72:	e7fd      	b.n	8006f70 <UsageFault_Handler+0x4>

08006f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f78:	bf00      	nop
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr

08006f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f90:	bf00      	nop
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f9c:	f000 f9a2 	bl	80072e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fa0:	bf00      	nop
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f000 fdef 	bl	8007b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006fae:	bf00      	nop
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006fb6:	2020      	movs	r0, #32
 8006fb8:	f000 fde8 	bl	8007b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006fbc:	bf00      	nop
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006fc4:	4804      	ldr	r0, [pc, #16]	@ (8006fd8 <USART1_IRQHandler+0x18>)
 8006fc6:	f001 fb23 	bl	8008610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1);
 8006fca:	2201      	movs	r2, #1
 8006fcc:	4903      	ldr	r1, [pc, #12]	@ (8006fdc <USART1_IRQHandler+0x1c>)
 8006fce:	4802      	ldr	r0, [pc, #8]	@ (8006fd8 <USART1_IRQHandler+0x18>)
 8006fd0:	f001 faed 	bl	80085ae <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8006fd4:	bf00      	nop
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20000454 	.word	0x20000454
 8006fdc:	2000003c 	.word	0x2000003c

08006fe0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006fe4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006fe8:	f000 fdd0 	bl	8007b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006fec:	bf00      	nop
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8006ffa:	2064      	movs	r0, #100	@ 0x64
 8006ffc:	f000 f98e 	bl	800731c <HAL_Delay>
	switch (GPIO_Pin) {
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	2b20      	cmp	r3, #32
 8007004:	d003      	beq.n	800700e <HAL_GPIO_EXTI_Callback+0x1e>
 8007006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800700a:	d00b      	beq.n	8007024 <HAL_GPIO_EXTI_Callback+0x34>
		case KEY1_Pin:
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
				print_uart("KEY1 is pressed\r\n");
			}
			break;
		default: break;
 800700c:	e019      	b.n	8007042 <HAL_GPIO_EXTI_Callback+0x52>
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 800700e:	2120      	movs	r1, #32
 8007010:	480e      	ldr	r0, [pc, #56]	@ (800704c <HAL_GPIO_EXTI_Callback+0x5c>)
 8007012:	f000 fd8b 	bl	8007b2c <HAL_GPIO_ReadPin>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10f      	bne.n	800703c <HAL_GPIO_EXTI_Callback+0x4c>
				print_uart("KEY0 is pressed\r\n");
 800701c:	480c      	ldr	r0, [pc, #48]	@ (8007050 <HAL_GPIO_EXTI_Callback+0x60>)
 800701e:	f7ff ff73 	bl	8006f08 <print_uart>
			break;
 8007022:	e00b      	b.n	800703c <HAL_GPIO_EXTI_Callback+0x4c>
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007024:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007028:	480a      	ldr	r0, [pc, #40]	@ (8007054 <HAL_GPIO_EXTI_Callback+0x64>)
 800702a:	f000 fd7f 	bl	8007b2c <HAL_GPIO_ReadPin>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <HAL_GPIO_EXTI_Callback+0x50>
				print_uart("KEY1 is pressed\r\n");
 8007034:	4808      	ldr	r0, [pc, #32]	@ (8007058 <HAL_GPIO_EXTI_Callback+0x68>)
 8007036:	f7ff ff67 	bl	8006f08 <print_uart>
			break;
 800703a:	e001      	b.n	8007040 <HAL_GPIO_EXTI_Callback+0x50>
			break;
 800703c:	bf00      	nop
 800703e:	e000      	b.n	8007042 <HAL_GPIO_EXTI_Callback+0x52>
			break;
 8007040:	bf00      	nop
	}
}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40011000 	.word	0x40011000
 8007050:	08008ed0 	.word	0x08008ed0
 8007054:	40010800 	.word	0x40010800
 8007058:	08008ee4 	.word	0x08008ee4

0800705c <HAL_UART_RxCpltCallback>:

__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af04      	add	r7, sp, #16
 8007062:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a20      	ldr	r2, [pc, #128]	@ (80070ec <HAL_UART_RxCpltCallback+0x90>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d139      	bne.n	80070e2 <HAL_UART_RxCpltCallback+0x86>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800706e:	2200      	movs	r2, #0
 8007070:	2104      	movs	r1, #4
 8007072:	481f      	ldr	r0, [pc, #124]	@ (80070f0 <HAL_UART_RxCpltCallback+0x94>)
 8007074:	f000 fd71 	bl	8007b5a <HAL_GPIO_WritePin>
		if (rxBuffer[0] == '\r' || rxBuffer[0] == '\n') {
 8007078:	4b1e      	ldr	r3, [pc, #120]	@ (80070f4 <HAL_UART_RxCpltCallback+0x98>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b0d      	cmp	r3, #13
 800707e:	d003      	beq.n	8007088 <HAL_UART_RxCpltCallback+0x2c>
 8007080:	4b1c      	ldr	r3, [pc, #112]	@ (80070f4 <HAL_UART_RxCpltCallback+0x98>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b0a      	cmp	r3, #10
 8007086:	d123      	bne.n	80070d0 <HAL_UART_RxCpltCallback+0x74>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007088:	2201      	movs	r2, #1
 800708a:	2104      	movs	r1, #4
 800708c:	4818      	ldr	r0, [pc, #96]	@ (80070f0 <HAL_UART_RxCpltCallback+0x94>)
 800708e:	f000 fd64 	bl	8007b5a <HAL_GPIO_WritePin>
			lcd_clear(WHITE);
 8007092:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007096:	f7ff fd15 	bl	8006ac4 <lcd_clear>
			g_back_color = WHITE;
 800709a:	4b17      	ldr	r3, [pc, #92]	@ (80070f8 <HAL_UART_RxCpltCallback+0x9c>)
 800709c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070a0:	601a      	str	r2, [r3, #0]
			lcd_show_string(30, 40, 200, 16, 16, uRx_Data, BLACK);
 80070a2:	2300      	movs	r3, #0
 80070a4:	9302      	str	r3, [sp, #8]
 80070a6:	4b15      	ldr	r3, [pc, #84]	@ (80070fc <HAL_UART_RxCpltCallback+0xa0>)
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	2310      	movs	r3, #16
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2310      	movs	r3, #16
 80070b0:	22c8      	movs	r2, #200	@ 0xc8
 80070b2:	2128      	movs	r1, #40	@ 0x28
 80070b4:	201e      	movs	r0, #30
 80070b6:	f7ff fe3f 	bl	8006d38 <lcd_show_string>
			memset(uRx_Data, 0, uLength);
 80070ba:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <HAL_UART_RxCpltCallback+0xa4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	2100      	movs	r1, #0
 80070c2:	480e      	ldr	r0, [pc, #56]	@ (80070fc <HAL_UART_RxCpltCallback+0xa0>)
 80070c4:	f001 fecc 	bl	8008e60 <memset>
			uLength = 0;
 80070c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <HAL_UART_RxCpltCallback+0xa4>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
		} else {
			uRx_Data[uLength++] = rxBuffer[0];
		}
	}
}
 80070ce:	e008      	b.n	80070e2 <HAL_UART_RxCpltCallback+0x86>
			uRx_Data[uLength++] = rxBuffer[0];
 80070d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007100 <HAL_UART_RxCpltCallback+0xa4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	490a      	ldr	r1, [pc, #40]	@ (8007100 <HAL_UART_RxCpltCallback+0xa4>)
 80070d8:	600a      	str	r2, [r1, #0]
 80070da:	4a06      	ldr	r2, [pc, #24]	@ (80070f4 <HAL_UART_RxCpltCallback+0x98>)
 80070dc:	7811      	ldrb	r1, [r2, #0]
 80070de:	4a07      	ldr	r2, [pc, #28]	@ (80070fc <HAL_UART_RxCpltCallback+0xa0>)
 80070e0:	54d1      	strb	r1, [r2, r3]
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	40013800 	.word	0x40013800
 80070f0:	40011400 	.word	0x40011400
 80070f4:	2000003c 	.word	0x2000003c
 80070f8:	20000000 	.word	0x20000000
 80070fc:	20000050 	.word	0x20000050
 8007100:	20000450 	.word	0x20000450

08007104 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007108:	bf00      	nop
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007114:	4b11      	ldr	r3, [pc, #68]	@ (800715c <MX_USART1_UART_Init+0x4c>)
 8007116:	4a12      	ldr	r2, [pc, #72]	@ (8007160 <MX_USART1_UART_Init+0x50>)
 8007118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800711a:	4b10      	ldr	r3, [pc, #64]	@ (800715c <MX_USART1_UART_Init+0x4c>)
 800711c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007122:	4b0e      	ldr	r3, [pc, #56]	@ (800715c <MX_USART1_UART_Init+0x4c>)
 8007124:	2200      	movs	r2, #0
 8007126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007128:	4b0c      	ldr	r3, [pc, #48]	@ (800715c <MX_USART1_UART_Init+0x4c>)
 800712a:	2200      	movs	r2, #0
 800712c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800712e:	4b0b      	ldr	r3, [pc, #44]	@ (800715c <MX_USART1_UART_Init+0x4c>)
 8007130:	2200      	movs	r2, #0
 8007132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007134:	4b09      	ldr	r3, [pc, #36]	@ (800715c <MX_USART1_UART_Init+0x4c>)
 8007136:	220c      	movs	r2, #12
 8007138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800713a:	4b08      	ldr	r3, [pc, #32]	@ (800715c <MX_USART1_UART_Init+0x4c>)
 800713c:	2200      	movs	r2, #0
 800713e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007140:	4b06      	ldr	r3, [pc, #24]	@ (800715c <MX_USART1_UART_Init+0x4c>)
 8007142:	2200      	movs	r2, #0
 8007144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007146:	4805      	ldr	r0, [pc, #20]	@ (800715c <MX_USART1_UART_Init+0x4c>)
 8007148:	f001 f952 	bl	80083f0 <HAL_UART_Init>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007152:	f7ff fe9e 	bl	8006e92 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007156:	bf00      	nop
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000454 	.word	0x20000454
 8007160:	40013800 	.word	0x40013800

08007164 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800716c:	f107 0310 	add.w	r3, r7, #16
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	609a      	str	r2, [r3, #8]
 8007178:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a20      	ldr	r2, [pc, #128]	@ (8007200 <HAL_UART_MspInit+0x9c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d139      	bne.n	80071f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007184:	4b1f      	ldr	r3, [pc, #124]	@ (8007204 <HAL_UART_MspInit+0xa0>)
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	4a1e      	ldr	r2, [pc, #120]	@ (8007204 <HAL_UART_MspInit+0xa0>)
 800718a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800718e:	6193      	str	r3, [r2, #24]
 8007190:	4b1c      	ldr	r3, [pc, #112]	@ (8007204 <HAL_UART_MspInit+0xa0>)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800719c:	4b19      	ldr	r3, [pc, #100]	@ (8007204 <HAL_UART_MspInit+0xa0>)
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	4a18      	ldr	r2, [pc, #96]	@ (8007204 <HAL_UART_MspInit+0xa0>)
 80071a2:	f043 0304 	orr.w	r3, r3, #4
 80071a6:	6193      	str	r3, [r2, #24]
 80071a8:	4b16      	ldr	r3, [pc, #88]	@ (8007204 <HAL_UART_MspInit+0xa0>)
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80071b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ba:	2302      	movs	r3, #2
 80071bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071be:	2303      	movs	r3, #3
 80071c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c2:	f107 0310 	add.w	r3, r7, #16
 80071c6:	4619      	mov	r1, r3
 80071c8:	480f      	ldr	r0, [pc, #60]	@ (8007208 <HAL_UART_MspInit+0xa4>)
 80071ca:	f000 fb1b 	bl	8007804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80071ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d8:	2300      	movs	r3, #0
 80071da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071dc:	f107 0310 	add.w	r3, r7, #16
 80071e0:	4619      	mov	r1, r3
 80071e2:	4809      	ldr	r0, [pc, #36]	@ (8007208 <HAL_UART_MspInit+0xa4>)
 80071e4:	f000 fb0e 	bl	8007804 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 3);
 80071e8:	2203      	movs	r2, #3
 80071ea:	2101      	movs	r1, #1
 80071ec:	2025      	movs	r0, #37	@ 0x25
 80071ee:	f000 f990 	bl	8007512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80071f2:	2025      	movs	r0, #37	@ 0x25
 80071f4:	f000 f9a9 	bl	800754a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80071f8:	bf00      	nop
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40013800 	.word	0x40013800
 8007204:	40021000 	.word	0x40021000
 8007208:	40010800 	.word	0x40010800

0800720c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800720c:	480c      	ldr	r0, [pc, #48]	@ (8007240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800720e:	490d      	ldr	r1, [pc, #52]	@ (8007244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007210:	4a0d      	ldr	r2, [pc, #52]	@ (8007248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007214:	e002      	b.n	800721c <LoopCopyDataInit>

08007216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800721a:	3304      	adds	r3, #4

0800721c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800721c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800721e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007220:	d3f9      	bcc.n	8007216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007222:	4a0a      	ldr	r2, [pc, #40]	@ (800724c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007224:	4c0a      	ldr	r4, [pc, #40]	@ (8007250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007228:	e001      	b.n	800722e <LoopFillZerobss>

0800722a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800722a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800722c:	3204      	adds	r2, #4

0800722e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800722e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007230:	d3fb      	bcc.n	800722a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007232:	f7ff ff67 	bl	8007104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007236:	f001 fe1b 	bl	8008e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800723a:	f7ff fdcd 	bl	8006dd8 <main>
  bx lr
 800723e:	4770      	bx	lr
  ldr r0, =_sdata
 8007240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007244:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8007248:	0800beb0 	.word	0x0800beb0
  ldr r2, =_sbss
 800724c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8007250:	2000049c 	.word	0x2000049c

08007254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007254:	e7fe      	b.n	8007254 <ADC1_2_IRQHandler>
	...

08007258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800725c:	4b08      	ldr	r3, [pc, #32]	@ (8007280 <HAL_Init+0x28>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a07      	ldr	r2, [pc, #28]	@ (8007280 <HAL_Init+0x28>)
 8007262:	f043 0310 	orr.w	r3, r3, #16
 8007266:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007268:	2003      	movs	r0, #3
 800726a:	f000 f947 	bl	80074fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800726e:	2000      	movs	r0, #0
 8007270:	f000 f808 	bl	8007284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007274:	f7ff fe14 	bl	8006ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	40022000 	.word	0x40022000

08007284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800728c:	4b12      	ldr	r3, [pc, #72]	@ (80072d8 <HAL_InitTick+0x54>)
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <HAL_InitTick+0x58>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	4619      	mov	r1, r3
 8007296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800729a:	fbb3 f3f1 	udiv	r3, r3, r1
 800729e:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f95f 	bl	8007566 <HAL_SYSTICK_Config>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e00e      	b.n	80072d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b0f      	cmp	r3, #15
 80072b6:	d80a      	bhi.n	80072ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072b8:	2200      	movs	r2, #0
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072c0:	f000 f927 	bl	8007512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80072c4:	4a06      	ldr	r2, [pc, #24]	@ (80072e0 <HAL_InitTick+0x5c>)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e000      	b.n	80072d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20000004 	.word	0x20000004
 80072dc:	2000000c 	.word	0x2000000c
 80072e0:	20000008 	.word	0x20000008

080072e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80072e8:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <HAL_IncTick+0x1c>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <HAL_IncTick+0x20>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4413      	add	r3, r2
 80072f4:	4a03      	ldr	r2, [pc, #12]	@ (8007304 <HAL_IncTick+0x20>)
 80072f6:	6013      	str	r3, [r2, #0]
}
 80072f8:	bf00      	nop
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr
 8007300:	2000000c 	.word	0x2000000c
 8007304:	20000498 	.word	0x20000498

08007308 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  return uwTick;
 800730c:	4b02      	ldr	r3, [pc, #8]	@ (8007318 <HAL_GetTick+0x10>)
 800730e:	681b      	ldr	r3, [r3, #0]
}
 8007310:	4618      	mov	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr
 8007318:	20000498 	.word	0x20000498

0800731c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007324:	f7ff fff0 	bl	8007308 <HAL_GetTick>
 8007328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007334:	d005      	beq.n	8007342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007336:	4b0a      	ldr	r3, [pc, #40]	@ (8007360 <HAL_Delay+0x44>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007342:	bf00      	nop
 8007344:	f7ff ffe0 	bl	8007308 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	429a      	cmp	r2, r3
 8007352:	d8f7      	bhi.n	8007344 <HAL_Delay+0x28>
  {
  }
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	2000000c 	.word	0x2000000c

08007364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007374:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007380:	4013      	ands	r3, r2
 8007382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800738c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007396:	4a04      	ldr	r2, [pc, #16]	@ (80073a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	60d3      	str	r3, [r2, #12]
}
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	e000ed00 	.word	0xe000ed00

080073ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073b0:	4b04      	ldr	r3, [pc, #16]	@ (80073c4 <__NVIC_GetPriorityGrouping+0x18>)
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	0a1b      	lsrs	r3, r3, #8
 80073b6:	f003 0307 	and.w	r3, r3, #7
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	e000ed00 	.word	0xe000ed00

080073c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	db0b      	blt.n	80073f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	f003 021f 	and.w	r2, r3, #31
 80073e0:	4906      	ldr	r1, [pc, #24]	@ (80073fc <__NVIC_EnableIRQ+0x34>)
 80073e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	2001      	movs	r0, #1
 80073ea:	fa00 f202 	lsl.w	r2, r0, r2
 80073ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr
 80073fc:	e000e100 	.word	0xe000e100

08007400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	6039      	str	r1, [r7, #0]
 800740a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800740c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007410:	2b00      	cmp	r3, #0
 8007412:	db0a      	blt.n	800742a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	b2da      	uxtb	r2, r3
 8007418:	490c      	ldr	r1, [pc, #48]	@ (800744c <__NVIC_SetPriority+0x4c>)
 800741a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800741e:	0112      	lsls	r2, r2, #4
 8007420:	b2d2      	uxtb	r2, r2
 8007422:	440b      	add	r3, r1
 8007424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007428:	e00a      	b.n	8007440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	b2da      	uxtb	r2, r3
 800742e:	4908      	ldr	r1, [pc, #32]	@ (8007450 <__NVIC_SetPriority+0x50>)
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	f003 030f 	and.w	r3, r3, #15
 8007436:	3b04      	subs	r3, #4
 8007438:	0112      	lsls	r2, r2, #4
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	440b      	add	r3, r1
 800743e:	761a      	strb	r2, [r3, #24]
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	e000e100 	.word	0xe000e100
 8007450:	e000ed00 	.word	0xe000ed00

08007454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007454:	b480      	push	{r7}
 8007456:	b089      	sub	sp, #36	@ 0x24
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f1c3 0307 	rsb	r3, r3, #7
 800746e:	2b04      	cmp	r3, #4
 8007470:	bf28      	it	cs
 8007472:	2304      	movcs	r3, #4
 8007474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	3304      	adds	r3, #4
 800747a:	2b06      	cmp	r3, #6
 800747c:	d902      	bls.n	8007484 <NVIC_EncodePriority+0x30>
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	3b03      	subs	r3, #3
 8007482:	e000      	b.n	8007486 <NVIC_EncodePriority+0x32>
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	fa02 f303 	lsl.w	r3, r2, r3
 8007492:	43da      	mvns	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	401a      	ands	r2, r3
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800749c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	fa01 f303 	lsl.w	r3, r1, r3
 80074a6:	43d9      	mvns	r1, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074ac:	4313      	orrs	r3, r2
         );
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3724      	adds	r7, #36	@ 0x24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074c8:	d301      	bcc.n	80074ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80074ca:	2301      	movs	r3, #1
 80074cc:	e00f      	b.n	80074ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074ce:	4a0a      	ldr	r2, [pc, #40]	@ (80074f8 <SysTick_Config+0x40>)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074d6:	210f      	movs	r1, #15
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074dc:	f7ff ff90 	bl	8007400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074e0:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <SysTick_Config+0x40>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074e6:	4b04      	ldr	r3, [pc, #16]	@ (80074f8 <SysTick_Config+0x40>)
 80074e8:	2207      	movs	r2, #7
 80074ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	e000e010 	.word	0xe000e010

080074fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff ff2d 	bl	8007364 <__NVIC_SetPriorityGrouping>
}
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	4603      	mov	r3, r0
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007524:	f7ff ff42 	bl	80073ac <__NVIC_GetPriorityGrouping>
 8007528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	6978      	ldr	r0, [r7, #20]
 8007530:	f7ff ff90 	bl	8007454 <NVIC_EncodePriority>
 8007534:	4602      	mov	r2, r0
 8007536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800753a:	4611      	mov	r1, r2
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff ff5f 	bl	8007400 <__NVIC_SetPriority>
}
 8007542:	bf00      	nop
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	4603      	mov	r3, r0
 8007552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff ff35 	bl	80073c8 <__NVIC_EnableIRQ>
}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff ffa2 	bl	80074b8 <SysTick_Config>
 8007574:	4603      	mov	r3, r0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800757e:	b480      	push	{r7}
 8007580:	b085      	sub	sp, #20
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007590:	2b02      	cmp	r3, #2
 8007592:	d008      	beq.n	80075a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2204      	movs	r2, #4
 8007598:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e020      	b.n	80075e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 020e 	bic.w	r2, r2, #14
 80075b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0201 	bic.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ce:	2101      	movs	r1, #1
 80075d0:	fa01 f202 	lsl.w	r2, r1, r2
 80075d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr
	...

080075f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007606:	2b02      	cmp	r3, #2
 8007608:	d005      	beq.n	8007616 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2204      	movs	r2, #4
 800760e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
 8007614:	e0d6      	b.n	80077c4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 020e 	bic.w	r2, r2, #14
 8007624:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0201 	bic.w	r2, r2, #1
 8007634:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	4b64      	ldr	r3, [pc, #400]	@ (80077d0 <HAL_DMA_Abort_IT+0x1dc>)
 800763e:	429a      	cmp	r2, r3
 8007640:	d958      	bls.n	80076f4 <HAL_DMA_Abort_IT+0x100>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a63      	ldr	r2, [pc, #396]	@ (80077d4 <HAL_DMA_Abort_IT+0x1e0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d04f      	beq.n	80076ec <HAL_DMA_Abort_IT+0xf8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a61      	ldr	r2, [pc, #388]	@ (80077d8 <HAL_DMA_Abort_IT+0x1e4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d048      	beq.n	80076e8 <HAL_DMA_Abort_IT+0xf4>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a60      	ldr	r2, [pc, #384]	@ (80077dc <HAL_DMA_Abort_IT+0x1e8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d040      	beq.n	80076e2 <HAL_DMA_Abort_IT+0xee>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a5e      	ldr	r2, [pc, #376]	@ (80077e0 <HAL_DMA_Abort_IT+0x1ec>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d038      	beq.n	80076dc <HAL_DMA_Abort_IT+0xe8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a5d      	ldr	r2, [pc, #372]	@ (80077e4 <HAL_DMA_Abort_IT+0x1f0>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d030      	beq.n	80076d6 <HAL_DMA_Abort_IT+0xe2>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a5b      	ldr	r2, [pc, #364]	@ (80077e8 <HAL_DMA_Abort_IT+0x1f4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d028      	beq.n	80076d0 <HAL_DMA_Abort_IT+0xdc>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a53      	ldr	r2, [pc, #332]	@ (80077d0 <HAL_DMA_Abort_IT+0x1dc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d020      	beq.n	80076ca <HAL_DMA_Abort_IT+0xd6>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a57      	ldr	r2, [pc, #348]	@ (80077ec <HAL_DMA_Abort_IT+0x1f8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d019      	beq.n	80076c6 <HAL_DMA_Abort_IT+0xd2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a56      	ldr	r2, [pc, #344]	@ (80077f0 <HAL_DMA_Abort_IT+0x1fc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d012      	beq.n	80076c2 <HAL_DMA_Abort_IT+0xce>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a54      	ldr	r2, [pc, #336]	@ (80077f4 <HAL_DMA_Abort_IT+0x200>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00a      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a53      	ldr	r2, [pc, #332]	@ (80077f8 <HAL_DMA_Abort_IT+0x204>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d102      	bne.n	80076b6 <HAL_DMA_Abort_IT+0xc2>
 80076b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076b4:	e01b      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80076ba:	e018      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80076c0:	e015      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076c2:	2310      	movs	r3, #16
 80076c4:	e013      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e011      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076ce:	e00e      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80076d4:	e00b      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80076da:	e008      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076e0:	e005      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80076e6:	e002      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076e8:	2310      	movs	r3, #16
 80076ea:	e000      	b.n	80076ee <HAL_DMA_Abort_IT+0xfa>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4a43      	ldr	r2, [pc, #268]	@ (80077fc <HAL_DMA_Abort_IT+0x208>)
 80076f0:	6053      	str	r3, [r2, #4]
 80076f2:	e057      	b.n	80077a4 <HAL_DMA_Abort_IT+0x1b0>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a36      	ldr	r2, [pc, #216]	@ (80077d4 <HAL_DMA_Abort_IT+0x1e0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d04f      	beq.n	800779e <HAL_DMA_Abort_IT+0x1aa>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a35      	ldr	r2, [pc, #212]	@ (80077d8 <HAL_DMA_Abort_IT+0x1e4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d048      	beq.n	800779a <HAL_DMA_Abort_IT+0x1a6>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a33      	ldr	r2, [pc, #204]	@ (80077dc <HAL_DMA_Abort_IT+0x1e8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d040      	beq.n	8007794 <HAL_DMA_Abort_IT+0x1a0>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a32      	ldr	r2, [pc, #200]	@ (80077e0 <HAL_DMA_Abort_IT+0x1ec>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d038      	beq.n	800778e <HAL_DMA_Abort_IT+0x19a>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a30      	ldr	r2, [pc, #192]	@ (80077e4 <HAL_DMA_Abort_IT+0x1f0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d030      	beq.n	8007788 <HAL_DMA_Abort_IT+0x194>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a2f      	ldr	r2, [pc, #188]	@ (80077e8 <HAL_DMA_Abort_IT+0x1f4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d028      	beq.n	8007782 <HAL_DMA_Abort_IT+0x18e>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a26      	ldr	r2, [pc, #152]	@ (80077d0 <HAL_DMA_Abort_IT+0x1dc>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d020      	beq.n	800777c <HAL_DMA_Abort_IT+0x188>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a2b      	ldr	r2, [pc, #172]	@ (80077ec <HAL_DMA_Abort_IT+0x1f8>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d019      	beq.n	8007778 <HAL_DMA_Abort_IT+0x184>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a29      	ldr	r2, [pc, #164]	@ (80077f0 <HAL_DMA_Abort_IT+0x1fc>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d012      	beq.n	8007774 <HAL_DMA_Abort_IT+0x180>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a28      	ldr	r2, [pc, #160]	@ (80077f4 <HAL_DMA_Abort_IT+0x200>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d00a      	beq.n	800776e <HAL_DMA_Abort_IT+0x17a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a26      	ldr	r2, [pc, #152]	@ (80077f8 <HAL_DMA_Abort_IT+0x204>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d102      	bne.n	8007768 <HAL_DMA_Abort_IT+0x174>
 8007762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007766:	e01b      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 8007768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800776c:	e018      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 800776e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007772:	e015      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 8007774:	2310      	movs	r3, #16
 8007776:	e013      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 8007778:	2301      	movs	r3, #1
 800777a:	e011      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 800777c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007780:	e00e      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 8007782:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007786:	e00b      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 8007788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800778c:	e008      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 800778e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007792:	e005      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 8007794:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007798:	e002      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 800779a:	2310      	movs	r3, #16
 800779c:	e000      	b.n	80077a0 <HAL_DMA_Abort_IT+0x1ac>
 800779e:	2301      	movs	r3, #1
 80077a0:	4a17      	ldr	r2, [pc, #92]	@ (8007800 <HAL_DMA_Abort_IT+0x20c>)
 80077a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
    } 
  }
  return status;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40020080 	.word	0x40020080
 80077d4:	40020008 	.word	0x40020008
 80077d8:	4002001c 	.word	0x4002001c
 80077dc:	40020030 	.word	0x40020030
 80077e0:	40020044 	.word	0x40020044
 80077e4:	40020058 	.word	0x40020058
 80077e8:	4002006c 	.word	0x4002006c
 80077ec:	40020408 	.word	0x40020408
 80077f0:	4002041c 	.word	0x4002041c
 80077f4:	40020430 	.word	0x40020430
 80077f8:	40020444 	.word	0x40020444
 80077fc:	40020400 	.word	0x40020400
 8007800:	40020000 	.word	0x40020000

08007804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007804:	b480      	push	{r7}
 8007806:	b08b      	sub	sp, #44	@ 0x2c
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800780e:	2300      	movs	r3, #0
 8007810:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007812:	2300      	movs	r3, #0
 8007814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007816:	e179      	b.n	8007b0c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007818:	2201      	movs	r2, #1
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	4013      	ands	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	429a      	cmp	r2, r3
 8007832:	f040 8168 	bne.w	8007b06 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	4a96      	ldr	r2, [pc, #600]	@ (8007a94 <HAL_GPIO_Init+0x290>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d05e      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 8007840:	4a94      	ldr	r2, [pc, #592]	@ (8007a94 <HAL_GPIO_Init+0x290>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d875      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 8007846:	4a94      	ldr	r2, [pc, #592]	@ (8007a98 <HAL_GPIO_Init+0x294>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d058      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 800784c:	4a92      	ldr	r2, [pc, #584]	@ (8007a98 <HAL_GPIO_Init+0x294>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d86f      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 8007852:	4a92      	ldr	r2, [pc, #584]	@ (8007a9c <HAL_GPIO_Init+0x298>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d052      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 8007858:	4a90      	ldr	r2, [pc, #576]	@ (8007a9c <HAL_GPIO_Init+0x298>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d869      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 800785e:	4a90      	ldr	r2, [pc, #576]	@ (8007aa0 <HAL_GPIO_Init+0x29c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d04c      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 8007864:	4a8e      	ldr	r2, [pc, #568]	@ (8007aa0 <HAL_GPIO_Init+0x29c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d863      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 800786a:	4a8e      	ldr	r2, [pc, #568]	@ (8007aa4 <HAL_GPIO_Init+0x2a0>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d046      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
 8007870:	4a8c      	ldr	r2, [pc, #560]	@ (8007aa4 <HAL_GPIO_Init+0x2a0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d85d      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 8007876:	2b12      	cmp	r3, #18
 8007878:	d82a      	bhi.n	80078d0 <HAL_GPIO_Init+0xcc>
 800787a:	2b12      	cmp	r3, #18
 800787c:	d859      	bhi.n	8007932 <HAL_GPIO_Init+0x12e>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <HAL_GPIO_Init+0x80>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078ff 	.word	0x080078ff
 8007888:	080078d9 	.word	0x080078d9
 800788c:	080078eb 	.word	0x080078eb
 8007890:	0800792d 	.word	0x0800792d
 8007894:	08007933 	.word	0x08007933
 8007898:	08007933 	.word	0x08007933
 800789c:	08007933 	.word	0x08007933
 80078a0:	08007933 	.word	0x08007933
 80078a4:	08007933 	.word	0x08007933
 80078a8:	08007933 	.word	0x08007933
 80078ac:	08007933 	.word	0x08007933
 80078b0:	08007933 	.word	0x08007933
 80078b4:	08007933 	.word	0x08007933
 80078b8:	08007933 	.word	0x08007933
 80078bc:	08007933 	.word	0x08007933
 80078c0:	08007933 	.word	0x08007933
 80078c4:	08007933 	.word	0x08007933
 80078c8:	080078e1 	.word	0x080078e1
 80078cc:	080078f5 	.word	0x080078f5
 80078d0:	4a75      	ldr	r2, [pc, #468]	@ (8007aa8 <HAL_GPIO_Init+0x2a4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d013      	beq.n	80078fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80078d6:	e02c      	b.n	8007932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	623b      	str	r3, [r7, #32]
          break;
 80078de:	e029      	b.n	8007934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	3304      	adds	r3, #4
 80078e6:	623b      	str	r3, [r7, #32]
          break;
 80078e8:	e024      	b.n	8007934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	3308      	adds	r3, #8
 80078f0:	623b      	str	r3, [r7, #32]
          break;
 80078f2:	e01f      	b.n	8007934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	330c      	adds	r3, #12
 80078fa:	623b      	str	r3, [r7, #32]
          break;
 80078fc:	e01a      	b.n	8007934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d102      	bne.n	800790c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007906:	2304      	movs	r3, #4
 8007908:	623b      	str	r3, [r7, #32]
          break;
 800790a:	e013      	b.n	8007934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d105      	bne.n	8007920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007914:	2308      	movs	r3, #8
 8007916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	611a      	str	r2, [r3, #16]
          break;
 800791e:	e009      	b.n	8007934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007920:	2308      	movs	r3, #8
 8007922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	615a      	str	r2, [r3, #20]
          break;
 800792a:	e003      	b.n	8007934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800792c:	2300      	movs	r3, #0
 800792e:	623b      	str	r3, [r7, #32]
          break;
 8007930:	e000      	b.n	8007934 <HAL_GPIO_Init+0x130>
          break;
 8007932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2bff      	cmp	r3, #255	@ 0xff
 8007938:	d801      	bhi.n	800793e <HAL_GPIO_Init+0x13a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	e001      	b.n	8007942 <HAL_GPIO_Init+0x13e>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3304      	adds	r3, #4
 8007942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2bff      	cmp	r3, #255	@ 0xff
 8007948:	d802      	bhi.n	8007950 <HAL_GPIO_Init+0x14c>
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	e002      	b.n	8007956 <HAL_GPIO_Init+0x152>
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	3b08      	subs	r3, #8
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	210f      	movs	r1, #15
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	fa01 f303 	lsl.w	r3, r1, r3
 8007964:	43db      	mvns	r3, r3
 8007966:	401a      	ands	r2, r3
 8007968:	6a39      	ldr	r1, [r7, #32]
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	fa01 f303 	lsl.w	r3, r1, r3
 8007970:	431a      	orrs	r2, r3
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 80c1 	beq.w	8007b06 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007984:	4b49      	ldr	r3, [pc, #292]	@ (8007aac <HAL_GPIO_Init+0x2a8>)
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	4a48      	ldr	r2, [pc, #288]	@ (8007aac <HAL_GPIO_Init+0x2a8>)
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	6193      	str	r3, [r2, #24]
 8007990:	4b46      	ldr	r3, [pc, #280]	@ (8007aac <HAL_GPIO_Init+0x2a8>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800799c:	4a44      	ldr	r2, [pc, #272]	@ (8007ab0 <HAL_GPIO_Init+0x2ac>)
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	089b      	lsrs	r3, r3, #2
 80079a2:	3302      	adds	r3, #2
 80079a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	220f      	movs	r2, #15
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	43db      	mvns	r3, r3
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4013      	ands	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a3c      	ldr	r2, [pc, #240]	@ (8007ab4 <HAL_GPIO_Init+0x2b0>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d01f      	beq.n	8007a08 <HAL_GPIO_Init+0x204>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a3b      	ldr	r2, [pc, #236]	@ (8007ab8 <HAL_GPIO_Init+0x2b4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d019      	beq.n	8007a04 <HAL_GPIO_Init+0x200>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a3a      	ldr	r2, [pc, #232]	@ (8007abc <HAL_GPIO_Init+0x2b8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <HAL_GPIO_Init+0x1fc>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a39      	ldr	r2, [pc, #228]	@ (8007ac0 <HAL_GPIO_Init+0x2bc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00d      	beq.n	80079fc <HAL_GPIO_Init+0x1f8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a38      	ldr	r2, [pc, #224]	@ (8007ac4 <HAL_GPIO_Init+0x2c0>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d007      	beq.n	80079f8 <HAL_GPIO_Init+0x1f4>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a37      	ldr	r2, [pc, #220]	@ (8007ac8 <HAL_GPIO_Init+0x2c4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d101      	bne.n	80079f4 <HAL_GPIO_Init+0x1f0>
 80079f0:	2305      	movs	r3, #5
 80079f2:	e00a      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 80079f4:	2306      	movs	r3, #6
 80079f6:	e008      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 80079f8:	2304      	movs	r3, #4
 80079fa:	e006      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 80079fc:	2303      	movs	r3, #3
 80079fe:	e004      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e002      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e000      	b.n	8007a0a <HAL_GPIO_Init+0x206>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a0c:	f002 0203 	and.w	r2, r2, #3
 8007a10:	0092      	lsls	r2, r2, #2
 8007a12:	4093      	lsls	r3, r2
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007a1a:	4925      	ldr	r1, [pc, #148]	@ (8007ab0 <HAL_GPIO_Init+0x2ac>)
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	089b      	lsrs	r3, r3, #2
 8007a20:	3302      	adds	r3, #2
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d006      	beq.n	8007a42 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007a34:	4b25      	ldr	r3, [pc, #148]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	4924      	ldr	r1, [pc, #144]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	600b      	str	r3, [r1, #0]
 8007a40:	e006      	b.n	8007a50 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007a42:	4b22      	ldr	r3, [pc, #136]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	43db      	mvns	r3, r3
 8007a4a:	4920      	ldr	r1, [pc, #128]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d006      	beq.n	8007a6a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	491a      	ldr	r1, [pc, #104]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	604b      	str	r3, [r1, #4]
 8007a68:	e006      	b.n	8007a78 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007a6a:	4b18      	ldr	r3, [pc, #96]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	43db      	mvns	r3, r3
 8007a72:	4916      	ldr	r1, [pc, #88]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d025      	beq.n	8007ad0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007a84:	4b11      	ldr	r3, [pc, #68]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	4910      	ldr	r1, [pc, #64]	@ (8007acc <HAL_GPIO_Init+0x2c8>)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	608b      	str	r3, [r1, #8]
 8007a90:	e025      	b.n	8007ade <HAL_GPIO_Init+0x2da>
 8007a92:	bf00      	nop
 8007a94:	10320000 	.word	0x10320000
 8007a98:	10310000 	.word	0x10310000
 8007a9c:	10220000 	.word	0x10220000
 8007aa0:	10210000 	.word	0x10210000
 8007aa4:	10120000 	.word	0x10120000
 8007aa8:	10110000 	.word	0x10110000
 8007aac:	40021000 	.word	0x40021000
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40010800 	.word	0x40010800
 8007ab8:	40010c00 	.word	0x40010c00
 8007abc:	40011000 	.word	0x40011000
 8007ac0:	40011400 	.word	0x40011400
 8007ac4:	40011800 	.word	0x40011800
 8007ac8:	40011c00 	.word	0x40011c00
 8007acc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007ad0:	4b15      	ldr	r3, [pc, #84]	@ (8007b28 <HAL_GPIO_Init+0x324>)
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	4913      	ldr	r1, [pc, #76]	@ (8007b28 <HAL_GPIO_Init+0x324>)
 8007ada:	4013      	ands	r3, r2
 8007adc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d006      	beq.n	8007af8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007aea:	4b0f      	ldr	r3, [pc, #60]	@ (8007b28 <HAL_GPIO_Init+0x324>)
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	490e      	ldr	r1, [pc, #56]	@ (8007b28 <HAL_GPIO_Init+0x324>)
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60cb      	str	r3, [r1, #12]
 8007af6:	e006      	b.n	8007b06 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007af8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b28 <HAL_GPIO_Init+0x324>)
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	43db      	mvns	r3, r3
 8007b00:	4909      	ldr	r1, [pc, #36]	@ (8007b28 <HAL_GPIO_Init+0x324>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	3301      	adds	r3, #1
 8007b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b12:	fa22 f303 	lsr.w	r3, r2, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f47f ae7e 	bne.w	8007818 <HAL_GPIO_Init+0x14>
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	bf00      	nop
 8007b20:	372c      	adds	r7, #44	@ 0x2c
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr
 8007b28:	40010400 	.word	0x40010400

08007b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	887b      	ldrh	r3, [r7, #2]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b44:	2301      	movs	r3, #1
 8007b46:	73fb      	strb	r3, [r7, #15]
 8007b48:	e001      	b.n	8007b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr

08007b5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	807b      	strh	r3, [r7, #2]
 8007b66:	4613      	mov	r3, r2
 8007b68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b6a:	787b      	ldrb	r3, [r7, #1]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b70:	887a      	ldrh	r2, [r7, #2]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007b76:	e003      	b.n	8007b80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007b78:	887b      	ldrh	r3, [r7, #2]
 8007b7a:	041a      	lsls	r2, r3, #16
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	611a      	str	r2, [r3, #16]
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr
	...

08007b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007b96:	4b08      	ldr	r3, [pc, #32]	@ (8007bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b98:	695a      	ldr	r2, [r3, #20]
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d006      	beq.n	8007bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ba2:	4a05      	ldr	r2, [pc, #20]	@ (8007bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ba4:	88fb      	ldrh	r3, [r7, #6]
 8007ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ba8:	88fb      	ldrh	r3, [r7, #6]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff fa20 	bl	8006ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40010400 	.word	0x40010400

08007bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e272      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8087 	beq.w	8007cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007bdc:	4b92      	ldr	r3, [pc, #584]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f003 030c 	and.w	r3, r3, #12
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d00c      	beq.n	8007c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007be8:	4b8f      	ldr	r3, [pc, #572]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f003 030c 	and.w	r3, r3, #12
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d112      	bne.n	8007c1a <HAL_RCC_OscConfig+0x5e>
 8007bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c00:	d10b      	bne.n	8007c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c02:	4b89      	ldr	r3, [pc, #548]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d06c      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x12c>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d168      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e24c      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c22:	d106      	bne.n	8007c32 <HAL_RCC_OscConfig+0x76>
 8007c24:	4b80      	ldr	r3, [pc, #512]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a7f      	ldr	r2, [pc, #508]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	e02e      	b.n	8007c90 <HAL_RCC_OscConfig+0xd4>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10c      	bne.n	8007c54 <HAL_RCC_OscConfig+0x98>
 8007c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a7a      	ldr	r2, [pc, #488]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	4b78      	ldr	r3, [pc, #480]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a77      	ldr	r2, [pc, #476]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	e01d      	b.n	8007c90 <HAL_RCC_OscConfig+0xd4>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c5c:	d10c      	bne.n	8007c78 <HAL_RCC_OscConfig+0xbc>
 8007c5e:	4b72      	ldr	r3, [pc, #456]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a71      	ldr	r2, [pc, #452]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	e00b      	b.n	8007c90 <HAL_RCC_OscConfig+0xd4>
 8007c78:	4b6b      	ldr	r3, [pc, #428]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c82:	6013      	str	r3, [r2, #0]
 8007c84:	4b68      	ldr	r3, [pc, #416]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a67      	ldr	r2, [pc, #412]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d013      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c98:	f7ff fb36 	bl	8007308 <HAL_GetTick>
 8007c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ca0:	f7ff fb32 	bl	8007308 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b64      	cmp	r3, #100	@ 0x64
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e200      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0f0      	beq.n	8007ca0 <HAL_RCC_OscConfig+0xe4>
 8007cbe:	e014      	b.n	8007cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cc0:	f7ff fb22 	bl	8007308 <HAL_GetTick>
 8007cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cc6:	e008      	b.n	8007cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cc8:	f7ff fb1e 	bl	8007308 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b64      	cmp	r3, #100	@ 0x64
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e1ec      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cda:	4b53      	ldr	r3, [pc, #332]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1f0      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x10c>
 8007ce6:	e000      	b.n	8007cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d063      	beq.n	8007dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f003 030c 	and.w	r3, r3, #12
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00b      	beq.n	8007d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007d02:	4b49      	ldr	r3, [pc, #292]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f003 030c 	and.w	r3, r3, #12
 8007d0a:	2b08      	cmp	r3, #8
 8007d0c:	d11c      	bne.n	8007d48 <HAL_RCC_OscConfig+0x18c>
 8007d0e:	4b46      	ldr	r3, [pc, #280]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d116      	bne.n	8007d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d1a:	4b43      	ldr	r3, [pc, #268]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d005      	beq.n	8007d32 <HAL_RCC_OscConfig+0x176>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d001      	beq.n	8007d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e1c0      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d32:	4b3d      	ldr	r3, [pc, #244]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	4939      	ldr	r1, [pc, #228]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d46:	e03a      	b.n	8007dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d020      	beq.n	8007d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d50:	4b36      	ldr	r3, [pc, #216]	@ (8007e2c <HAL_RCC_OscConfig+0x270>)
 8007d52:	2201      	movs	r2, #1
 8007d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d56:	f7ff fad7 	bl	8007308 <HAL_GetTick>
 8007d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d5c:	e008      	b.n	8007d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d5e:	f7ff fad3 	bl	8007308 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e1a1      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d70:	4b2d      	ldr	r3, [pc, #180]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0f0      	beq.n	8007d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	4927      	ldr	r1, [pc, #156]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	600b      	str	r3, [r1, #0]
 8007d90:	e015      	b.n	8007dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d92:	4b26      	ldr	r3, [pc, #152]	@ (8007e2c <HAL_RCC_OscConfig+0x270>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d98:	f7ff fab6 	bl	8007308 <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007da0:	f7ff fab2 	bl	8007308 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e180      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007db2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d03a      	beq.n	8007e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d019      	beq.n	8007e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dd2:	4b17      	ldr	r3, [pc, #92]	@ (8007e30 <HAL_RCC_OscConfig+0x274>)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dd8:	f7ff fa96 	bl	8007308 <HAL_GetTick>
 8007ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dde:	e008      	b.n	8007df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007de0:	f7ff fa92 	bl	8007308 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d901      	bls.n	8007df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e160      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007df2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e28 <HAL_RCC_OscConfig+0x26c>)
 8007df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0f0      	beq.n	8007de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007dfe:	2001      	movs	r0, #1
 8007e00:	f000 fad8 	bl	80083b4 <RCC_Delay>
 8007e04:	e01c      	b.n	8007e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e06:	4b0a      	ldr	r3, [pc, #40]	@ (8007e30 <HAL_RCC_OscConfig+0x274>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e0c:	f7ff fa7c 	bl	8007308 <HAL_GetTick>
 8007e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e12:	e00f      	b.n	8007e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e14:	f7ff fa78 	bl	8007308 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d908      	bls.n	8007e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e146      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
 8007e26:	bf00      	nop
 8007e28:	40021000 	.word	0x40021000
 8007e2c:	42420000 	.word	0x42420000
 8007e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e34:	4b92      	ldr	r3, [pc, #584]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e9      	bne.n	8007e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80a6 	beq.w	8007f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e52:	4b8b      	ldr	r3, [pc, #556]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10d      	bne.n	8007e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e5e:	4b88      	ldr	r3, [pc, #544]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	4a87      	ldr	r2, [pc, #540]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e68:	61d3      	str	r3, [r2, #28]
 8007e6a:	4b85      	ldr	r3, [pc, #532]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e72:	60bb      	str	r3, [r7, #8]
 8007e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e76:	2301      	movs	r3, #1
 8007e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e7a:	4b82      	ldr	r3, [pc, #520]	@ (8008084 <HAL_RCC_OscConfig+0x4c8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d118      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e86:	4b7f      	ldr	r3, [pc, #508]	@ (8008084 <HAL_RCC_OscConfig+0x4c8>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8008084 <HAL_RCC_OscConfig+0x4c8>)
 8007e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e92:	f7ff fa39 	bl	8007308 <HAL_GetTick>
 8007e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e9a:	f7ff fa35 	bl	8007308 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b64      	cmp	r3, #100	@ 0x64
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e103      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eac:	4b75      	ldr	r3, [pc, #468]	@ (8008084 <HAL_RCC_OscConfig+0x4c8>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d106      	bne.n	8007ece <HAL_RCC_OscConfig+0x312>
 8007ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007ec6:	f043 0301 	orr.w	r3, r3, #1
 8007eca:	6213      	str	r3, [r2, #32]
 8007ecc:	e02d      	b.n	8007f2a <HAL_RCC_OscConfig+0x36e>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10c      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x334>
 8007ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	4a69      	ldr	r2, [pc, #420]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007edc:	f023 0301 	bic.w	r3, r3, #1
 8007ee0:	6213      	str	r3, [r2, #32]
 8007ee2:	4b67      	ldr	r3, [pc, #412]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	4a66      	ldr	r2, [pc, #408]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007ee8:	f023 0304 	bic.w	r3, r3, #4
 8007eec:	6213      	str	r3, [r2, #32]
 8007eee:	e01c      	b.n	8007f2a <HAL_RCC_OscConfig+0x36e>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	2b05      	cmp	r3, #5
 8007ef6:	d10c      	bne.n	8007f12 <HAL_RCC_OscConfig+0x356>
 8007ef8:	4b61      	ldr	r3, [pc, #388]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	4a60      	ldr	r2, [pc, #384]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007efe:	f043 0304 	orr.w	r3, r3, #4
 8007f02:	6213      	str	r3, [r2, #32]
 8007f04:	4b5e      	ldr	r3, [pc, #376]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	4a5d      	ldr	r2, [pc, #372]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f0a:	f043 0301 	orr.w	r3, r3, #1
 8007f0e:	6213      	str	r3, [r2, #32]
 8007f10:	e00b      	b.n	8007f2a <HAL_RCC_OscConfig+0x36e>
 8007f12:	4b5b      	ldr	r3, [pc, #364]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	4a5a      	ldr	r2, [pc, #360]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f18:	f023 0301 	bic.w	r3, r3, #1
 8007f1c:	6213      	str	r3, [r2, #32]
 8007f1e:	4b58      	ldr	r3, [pc, #352]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	4a57      	ldr	r2, [pc, #348]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f24:	f023 0304 	bic.w	r3, r3, #4
 8007f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d015      	beq.n	8007f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f32:	f7ff f9e9 	bl	8007308 <HAL_GetTick>
 8007f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f38:	e00a      	b.n	8007f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f3a:	f7ff f9e5 	bl	8007308 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d901      	bls.n	8007f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e0b1      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f50:	4b4b      	ldr	r3, [pc, #300]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0ee      	beq.n	8007f3a <HAL_RCC_OscConfig+0x37e>
 8007f5c:	e014      	b.n	8007f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f5e:	f7ff f9d3 	bl	8007308 <HAL_GetTick>
 8007f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f64:	e00a      	b.n	8007f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f66:	f7ff f9cf 	bl	8007308 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d901      	bls.n	8007f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e09b      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f7c:	4b40      	ldr	r3, [pc, #256]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1ee      	bne.n	8007f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d105      	bne.n	8007f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	4a3b      	ldr	r2, [pc, #236]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8087 	beq.w	80080b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fa4:	4b36      	ldr	r3, [pc, #216]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f003 030c 	and.w	r3, r3, #12
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d061      	beq.n	8008074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d146      	bne.n	8008046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fb8:	4b33      	ldr	r3, [pc, #204]	@ (8008088 <HAL_RCC_OscConfig+0x4cc>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fbe:	f7ff f9a3 	bl	8007308 <HAL_GetTick>
 8007fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fc4:	e008      	b.n	8007fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fc6:	f7ff f99f 	bl	8007308 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e06d      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fd8:	4b29      	ldr	r3, [pc, #164]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1f0      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fec:	d108      	bne.n	8008000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007fee:	4b24      	ldr	r3, [pc, #144]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	4921      	ldr	r1, [pc, #132]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008000:	4b1f      	ldr	r3, [pc, #124]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a19      	ldr	r1, [r3, #32]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	430b      	orrs	r3, r1
 8008012:	491b      	ldr	r1, [pc, #108]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8008014:	4313      	orrs	r3, r2
 8008016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008018:	4b1b      	ldr	r3, [pc, #108]	@ (8008088 <HAL_RCC_OscConfig+0x4cc>)
 800801a:	2201      	movs	r2, #1
 800801c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800801e:	f7ff f973 	bl	8007308 <HAL_GetTick>
 8008022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008024:	e008      	b.n	8008038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008026:	f7ff f96f 	bl	8007308 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e03d      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008038:	4b11      	ldr	r3, [pc, #68]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0f0      	beq.n	8008026 <HAL_RCC_OscConfig+0x46a>
 8008044:	e035      	b.n	80080b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008046:	4b10      	ldr	r3, [pc, #64]	@ (8008088 <HAL_RCC_OscConfig+0x4cc>)
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800804c:	f7ff f95c 	bl	8007308 <HAL_GetTick>
 8008050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008054:	f7ff f958 	bl	8007308 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e026      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008066:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <HAL_RCC_OscConfig+0x4c4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f0      	bne.n	8008054 <HAL_RCC_OscConfig+0x498>
 8008072:	e01e      	b.n	80080b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d107      	bne.n	800808c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e019      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
 8008080:	40021000 	.word	0x40021000
 8008084:	40007000 	.word	0x40007000
 8008088:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800808c:	4b0b      	ldr	r3, [pc, #44]	@ (80080bc <HAL_RCC_OscConfig+0x500>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	429a      	cmp	r2, r3
 800809e:	d106      	bne.n	80080ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d001      	beq.n	80080b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40021000 	.word	0x40021000

080080c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0d0      	b.n	8008276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008280 <HAL_RCC_ClockConfig+0x1c0>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d910      	bls.n	8008104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080e2:	4b67      	ldr	r3, [pc, #412]	@ (8008280 <HAL_RCC_ClockConfig+0x1c0>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f023 0207 	bic.w	r2, r3, #7
 80080ea:	4965      	ldr	r1, [pc, #404]	@ (8008280 <HAL_RCC_ClockConfig+0x1c0>)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080f2:	4b63      	ldr	r3, [pc, #396]	@ (8008280 <HAL_RCC_ClockConfig+0x1c0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d001      	beq.n	8008104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e0b8      	b.n	8008276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d020      	beq.n	8008152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800811c:	4b59      	ldr	r3, [pc, #356]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	4a58      	ldr	r2, [pc, #352]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 8008122:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008134:	4b53      	ldr	r3, [pc, #332]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	4a52      	ldr	r2, [pc, #328]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 800813a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800813e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008140:	4b50      	ldr	r3, [pc, #320]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	494d      	ldr	r1, [pc, #308]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 800814e:	4313      	orrs	r3, r2
 8008150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d040      	beq.n	80081e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d107      	bne.n	8008176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008166:	4b47      	ldr	r3, [pc, #284]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d115      	bne.n	800819e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e07f      	b.n	8008276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d107      	bne.n	800818e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800817e:	4b41      	ldr	r3, [pc, #260]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e073      	b.n	8008276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800818e:	4b3d      	ldr	r3, [pc, #244]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e06b      	b.n	8008276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800819e:	4b39      	ldr	r3, [pc, #228]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f023 0203 	bic.w	r2, r3, #3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	4936      	ldr	r1, [pc, #216]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081b0:	f7ff f8aa 	bl	8007308 <HAL_GetTick>
 80081b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081b6:	e00a      	b.n	80081ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081b8:	f7ff f8a6 	bl	8007308 <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d901      	bls.n	80081ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e053      	b.n	8008276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f003 020c 	and.w	r2, r3, #12
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	429a      	cmp	r2, r3
 80081de:	d1eb      	bne.n	80081b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081e0:	4b27      	ldr	r3, [pc, #156]	@ (8008280 <HAL_RCC_ClockConfig+0x1c0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d210      	bcs.n	8008210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ee:	4b24      	ldr	r3, [pc, #144]	@ (8008280 <HAL_RCC_ClockConfig+0x1c0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f023 0207 	bic.w	r2, r3, #7
 80081f6:	4922      	ldr	r1, [pc, #136]	@ (8008280 <HAL_RCC_ClockConfig+0x1c0>)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081fe:	4b20      	ldr	r3, [pc, #128]	@ (8008280 <HAL_RCC_ClockConfig+0x1c0>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d001      	beq.n	8008210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e032      	b.n	8008276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b00      	cmp	r3, #0
 800821a:	d008      	beq.n	800822e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800821c:	4b19      	ldr	r3, [pc, #100]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	4916      	ldr	r1, [pc, #88]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 800822a:	4313      	orrs	r3, r2
 800822c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800823a:	4b12      	ldr	r3, [pc, #72]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	490e      	ldr	r1, [pc, #56]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 800824a:	4313      	orrs	r3, r2
 800824c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800824e:	f000 f821 	bl	8008294 <HAL_RCC_GetSysClockFreq>
 8008252:	4602      	mov	r2, r0
 8008254:	4b0b      	ldr	r3, [pc, #44]	@ (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	091b      	lsrs	r3, r3, #4
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	490a      	ldr	r1, [pc, #40]	@ (8008288 <HAL_RCC_ClockConfig+0x1c8>)
 8008260:	5ccb      	ldrb	r3, [r1, r3]
 8008262:	fa22 f303 	lsr.w	r3, r2, r3
 8008266:	4a09      	ldr	r2, [pc, #36]	@ (800828c <HAL_RCC_ClockConfig+0x1cc>)
 8008268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800826a:	4b09      	ldr	r3, [pc, #36]	@ (8008290 <HAL_RCC_ClockConfig+0x1d0>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff f808 	bl	8007284 <HAL_InitTick>

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	40022000 	.word	0x40022000
 8008284:	40021000 	.word	0x40021000
 8008288:	0800be88 	.word	0x0800be88
 800828c:	20000004 	.word	0x20000004
 8008290:	20000008 	.word	0x20000008

08008294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008294:	b490      	push	{r4, r7}
 8008296:	b08a      	sub	sp, #40	@ 0x28
 8008298:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800829a:	4b29      	ldr	r3, [pc, #164]	@ (8008340 <HAL_RCC_GetSysClockFreq+0xac>)
 800829c:	1d3c      	adds	r4, r7, #4
 800829e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80082a4:	f240 2301 	movw	r3, #513	@ 0x201
 80082a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
 80082ae:	2300      	movs	r3, #0
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80082b6:	2300      	movs	r3, #0
 80082b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80082be:	4b21      	ldr	r3, [pc, #132]	@ (8008344 <HAL_RCC_GetSysClockFreq+0xb0>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f003 030c 	and.w	r3, r3, #12
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d002      	beq.n	80082d4 <HAL_RCC_GetSysClockFreq+0x40>
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d003      	beq.n	80082da <HAL_RCC_GetSysClockFreq+0x46>
 80082d2:	e02b      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80082d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80082d6:	623b      	str	r3, [r7, #32]
      break;
 80082d8:	e02b      	b.n	8008332 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	0c9b      	lsrs	r3, r3, #18
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	3328      	adds	r3, #40	@ 0x28
 80082e4:	443b      	add	r3, r7
 80082e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80082ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d012      	beq.n	800831c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80082f6:	4b13      	ldr	r3, [pc, #76]	@ (8008344 <HAL_RCC_GetSysClockFreq+0xb0>)
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	0c5b      	lsrs	r3, r3, #17
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	3328      	adds	r3, #40	@ 0x28
 8008302:	443b      	add	r3, r7
 8008304:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008308:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	4a0e      	ldr	r2, [pc, #56]	@ (8008348 <HAL_RCC_GetSysClockFreq+0xb4>)
 800830e:	fb03 f202 	mul.w	r2, r3, r2
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	fbb2 f3f3 	udiv	r3, r2, r3
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
 800831a:	e004      	b.n	8008326 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	4a0b      	ldr	r2, [pc, #44]	@ (800834c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008320:	fb02 f303 	mul.w	r3, r2, r3
 8008324:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	623b      	str	r3, [r7, #32]
      break;
 800832a:	e002      	b.n	8008332 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800832c:	4b06      	ldr	r3, [pc, #24]	@ (8008348 <HAL_RCC_GetSysClockFreq+0xb4>)
 800832e:	623b      	str	r3, [r7, #32]
      break;
 8008330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008332:	6a3b      	ldr	r3, [r7, #32]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3728      	adds	r7, #40	@ 0x28
 8008338:	46bd      	mov	sp, r7
 800833a:	bc90      	pop	{r4, r7}
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	08008ef8 	.word	0x08008ef8
 8008344:	40021000 	.word	0x40021000
 8008348:	007a1200 	.word	0x007a1200
 800834c:	003d0900 	.word	0x003d0900

08008350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008354:	4b02      	ldr	r3, [pc, #8]	@ (8008360 <HAL_RCC_GetHCLKFreq+0x10>)
 8008356:	681b      	ldr	r3, [r3, #0]
}
 8008358:	4618      	mov	r0, r3
 800835a:	46bd      	mov	sp, r7
 800835c:	bc80      	pop	{r7}
 800835e:	4770      	bx	lr
 8008360:	20000004 	.word	0x20000004

08008364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008368:	f7ff fff2 	bl	8008350 <HAL_RCC_GetHCLKFreq>
 800836c:	4602      	mov	r2, r0
 800836e:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	0a1b      	lsrs	r3, r3, #8
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	4903      	ldr	r1, [pc, #12]	@ (8008388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800837a:	5ccb      	ldrb	r3, [r1, r3]
 800837c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008380:	4618      	mov	r0, r3
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40021000 	.word	0x40021000
 8008388:	0800be98 	.word	0x0800be98

0800838c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008390:	f7ff ffde 	bl	8008350 <HAL_RCC_GetHCLKFreq>
 8008394:	4602      	mov	r2, r0
 8008396:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	0adb      	lsrs	r3, r3, #11
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	4903      	ldr	r1, [pc, #12]	@ (80083b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083a2:	5ccb      	ldrb	r3, [r1, r3]
 80083a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	40021000 	.word	0x40021000
 80083b0:	0800be98 	.word	0x0800be98

080083b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80083bc:	4b0a      	ldr	r3, [pc, #40]	@ (80083e8 <RCC_Delay+0x34>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a0a      	ldr	r2, [pc, #40]	@ (80083ec <RCC_Delay+0x38>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	0a5b      	lsrs	r3, r3, #9
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	fb02 f303 	mul.w	r3, r2, r3
 80083ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80083d0:	bf00      	nop
  }
  while (Delay --);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	1e5a      	subs	r2, r3, #1
 80083d6:	60fa      	str	r2, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1f9      	bne.n	80083d0 <RCC_Delay+0x1c>
}
 80083dc:	bf00      	nop
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr
 80083e8:	20000004 	.word	0x20000004
 80083ec:	10624dd3 	.word	0x10624dd3

080083f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e03f      	b.n	8008482 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d106      	bne.n	800841c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7fe fea4 	bl	8007164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2224      	movs	r2, #36	@ 0x24
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fc85 	bl	8008d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	695a      	ldr	r2, [r3, #20]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b08a      	sub	sp, #40	@ 0x28
 800848e:	af02      	add	r7, sp, #8
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	603b      	str	r3, [r7, #0]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b20      	cmp	r3, #32
 80084a8:	d17c      	bne.n	80085a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <HAL_UART_Transmit+0x2c>
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e075      	b.n	80085a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_UART_Transmit+0x3e>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e06e      	b.n	80085a6 <HAL_UART_Transmit+0x11c>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2221      	movs	r2, #33	@ 0x21
 80084da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084de:	f7fe ff13 	bl	8007308 <HAL_GetTick>
 80084e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	88fa      	ldrh	r2, [r7, #6]
 80084e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	88fa      	ldrh	r2, [r7, #6]
 80084ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f8:	d108      	bne.n	800850c <HAL_UART_Transmit+0x82>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	61bb      	str	r3, [r7, #24]
 800850a:	e003      	b.n	8008514 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800851c:	e02a      	b.n	8008574 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2200      	movs	r2, #0
 8008526:	2180      	movs	r1, #128	@ 0x80
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fa38 	bl	800899e <UART_WaitOnFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e036      	b.n	80085a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10b      	bne.n	8008556 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	3302      	adds	r3, #2
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	e007      	b.n	8008566 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	3301      	adds	r3, #1
 8008564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1cf      	bne.n	800851e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2200      	movs	r2, #0
 8008586:	2140      	movs	r1, #64	@ 0x40
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fa08 	bl	800899e <UART_WaitOnFlagUntilTimeout>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e006      	b.n	80085a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	e000      	b.n	80085a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085a4:	2302      	movs	r3, #2
  }
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	4613      	mov	r3, r2
 80085ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	d11d      	bne.n	8008604 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <HAL_UART_Receive_IT+0x26>
 80085ce:	88fb      	ldrh	r3, [r7, #6]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e016      	b.n	8008606 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d101      	bne.n	80085e6 <HAL_UART_Receive_IT+0x38>
 80085e2:	2302      	movs	r3, #2
 80085e4:	e00f      	b.n	8008606 <HAL_UART_Receive_IT+0x58>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	461a      	mov	r2, r3
 80085f8:	68b9      	ldr	r1, [r7, #8]
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 fa19 	bl	8008a32 <UART_Start_Receive_IT>
 8008600:	4603      	mov	r3, r0
 8008602:	e000      	b.n	8008606 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008604:	2302      	movs	r3, #2
  }
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08a      	sub	sp, #40	@ 0x28
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008630:	2300      	movs	r3, #0
 8008632:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10d      	bne.n	8008662 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_UART_IRQHandler+0x52>
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fac9 	bl	8008bf2 <UART_Receive_IT>
      return;
 8008660:	e17b      	b.n	800895a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 80b1 	beq.w	80087cc <HAL_UART_IRQHandler+0x1bc>
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <HAL_UART_IRQHandler+0x70>
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80a6 	beq.w	80087cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00a      	beq.n	80086a0 <HAL_UART_IRQHandler+0x90>
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	f043 0201 	orr.w	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <HAL_UART_IRQHandler+0xb0>
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b8:	f043 0202 	orr.w	r2, r3, #2
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <HAL_UART_IRQHandler+0xd0>
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d005      	beq.n	80086e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d8:	f043 0204 	orr.w	r2, r3, #4
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00f      	beq.n	800870a <HAL_UART_IRQHandler+0xfa>
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <HAL_UART_IRQHandler+0xee>
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008702:	f043 0208 	orr.w	r2, r3, #8
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 811e 	beq.w	8008950 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_UART_IRQHandler+0x11e>
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fa62 	bl	8008bf2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	bf14      	ite	ne
 800873c:	2301      	movne	r3, #1
 800873e:	2300      	moveq	r3, #0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d102      	bne.n	8008756 <HAL_UART_IRQHandler+0x146>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d031      	beq.n	80087ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f9a4 	bl	8008aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	d023      	beq.n	80087b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008778:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877e:	2b00      	cmp	r3, #0
 8008780:	d013      	beq.n	80087aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008786:	4a76      	ldr	r2, [pc, #472]	@ (8008960 <HAL_UART_IRQHandler+0x350>)
 8008788:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe ff30 	bl	80075f4 <HAL_DMA_Abort_IT>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d016      	beq.n	80087c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800879e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a8:	e00e      	b.n	80087c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f8e3 	bl	8008976 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b0:	e00a      	b.n	80087c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f8df 	bl	8008976 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b8:	e006      	b.n	80087c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f8db 	bl	8008976 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80087c6:	e0c3      	b.n	8008950 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c8:	bf00      	nop
    return;
 80087ca:	e0c1      	b.n	8008950 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	f040 80a1 	bne.w	8008918 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	f003 0310 	and.w	r3, r3, #16
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 809b 	beq.w	8008918 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	f003 0310 	and.w	r3, r3, #16
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 8095 	beq.w	8008918 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	60fb      	str	r3, [r7, #12]
 8008802:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880e:	2b00      	cmp	r3, #0
 8008810:	d04e      	beq.n	80088b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800881c:	8a3b      	ldrh	r3, [r7, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8098 	beq.w	8008954 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008828:	8a3a      	ldrh	r2, [r7, #16]
 800882a:	429a      	cmp	r2, r3
 800882c:	f080 8092 	bcs.w	8008954 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	8a3a      	ldrh	r2, [r7, #16]
 8008834:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	2b20      	cmp	r3, #32
 800883e:	d02b      	beq.n	8008898 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800884e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0201 	bic.w	r2, r2, #1
 800885e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	695a      	ldr	r2, [r3, #20]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800886e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0210 	bic.w	r2, r2, #16
 800888c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fe73 	bl	800757e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f86d 	bl	8008988 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80088ae:	e051      	b.n	8008954 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d047      	beq.n	8008958 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80088c8:	8a7b      	ldrh	r3, [r7, #18]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d044      	beq.n	8008958 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80088dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	695a      	ldr	r2, [r3, #20]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0201 	bic.w	r2, r2, #1
 80088ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0210 	bic.w	r2, r2, #16
 800890a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800890c:	8a7b      	ldrh	r3, [r7, #18]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f839 	bl	8008988 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008916:	e01f      	b.n	8008958 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800891e:	2b00      	cmp	r3, #0
 8008920:	d008      	beq.n	8008934 <HAL_UART_IRQHandler+0x324>
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f8f9 	bl	8008b24 <UART_Transmit_IT>
    return;
 8008932:	e012      	b.n	800895a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00d      	beq.n	800895a <HAL_UART_IRQHandler+0x34a>
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d008      	beq.n	800895a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f93a 	bl	8008bc2 <UART_EndTransmit_IT>
    return;
 800894e:	e004      	b.n	800895a <HAL_UART_IRQHandler+0x34a>
    return;
 8008950:	bf00      	nop
 8008952:	e002      	b.n	800895a <HAL_UART_IRQHandler+0x34a>
      return;
 8008954:	bf00      	nop
 8008956:	e000      	b.n	800895a <HAL_UART_IRQHandler+0x34a>
      return;
 8008958:	bf00      	nop
  }
}
 800895a:	3728      	adds	r7, #40	@ 0x28
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	08008afd 	.word	0x08008afd

08008964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	bc80      	pop	{r7}
 8008974:	4770      	bx	lr

08008976 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	bc80      	pop	{r7}
 8008986:	4770      	bx	lr

08008988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr

0800899e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	603b      	str	r3, [r7, #0]
 80089aa:	4613      	mov	r3, r2
 80089ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ae:	e02c      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089b6:	d028      	beq.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d007      	beq.n	80089ce <UART_WaitOnFlagUntilTimeout+0x30>
 80089be:	f7fe fca3 	bl	8007308 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d21d      	bcs.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80089dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	695a      	ldr	r2, [r3, #20]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0201 	bic.w	r2, r2, #1
 80089ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e00f      	b.n	8008a2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4013      	ands	r3, r2
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	bf0c      	ite	eq
 8008a1a:	2301      	moveq	r3, #1
 8008a1c:	2300      	movne	r3, #0
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d0c3      	beq.n	80089b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	88fa      	ldrh	r2, [r7, #6]
 8008a4a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	88fa      	ldrh	r2, [r7, #6]
 8008a50:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2222      	movs	r2, #34	@ 0x22
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a76:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0220 	orr.w	r2, r2, #32
 8008a96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr

08008aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8008aba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	695a      	ldr	r2, [r3, #20]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0201 	bic.w	r2, r2, #1
 8008aca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d107      	bne.n	8008ae4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0210 	bic.w	r2, r2, #16
 8008ae2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bc80      	pop	{r7}
 8008afa:	4770      	bx	lr

08008afc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff ff2d 	bl	8008976 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b1c:	bf00      	nop
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b21      	cmp	r3, #33	@ 0x21
 8008b36:	d13e      	bne.n	8008bb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b40:	d114      	bne.n	8008b6c <UART_Transmit_IT+0x48>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d110      	bne.n	8008b6c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	461a      	mov	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	1c9a      	adds	r2, r3, #2
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	621a      	str	r2, [r3, #32]
 8008b6a:	e008      	b.n	8008b7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	1c59      	adds	r1, r3, #1
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6211      	str	r1, [r2, #32]
 8008b76:	781a      	ldrb	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	3b01      	subs	r3, #1
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10f      	bne.n	8008bb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ba0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e000      	b.n	8008bb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bb6:	2302      	movs	r3, #2
  }
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bc80      	pop	{r7}
 8008bc0:	4770      	bx	lr

08008bc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff febe 	bl	8008964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b22      	cmp	r3, #34	@ 0x22
 8008c04:	f040 8099 	bne.w	8008d3a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c10:	d117      	bne.n	8008c42 <UART_Receive_IT+0x50>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d113      	bne.n	8008c42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c22:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3a:	1c9a      	adds	r2, r3, #2
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c40:	e026      	b.n	8008c90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c46:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c54:	d007      	beq.n	8008c66 <UART_Receive_IT+0x74>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <UART_Receive_IT+0x82>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	e008      	b.n	8008c86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d148      	bne.n	8008d36 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0220 	bic.w	r2, r2, #32
 8008cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008cc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695a      	ldr	r2, [r3, #20]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0201 	bic.w	r2, r2, #1
 8008cd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d123      	bne.n	8008d2c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 0210 	bic.w	r2, r2, #16
 8008cf8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0310 	and.w	r3, r3, #16
 8008d04:	2b10      	cmp	r3, #16
 8008d06:	d10a      	bne.n	8008d1e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff fe2f 	bl	8008988 <HAL_UARTEx_RxEventCallback>
 8008d2a:	e002      	b.n	8008d32 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7fe f995 	bl	800705c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e002      	b.n	8008d3c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	e000      	b.n	8008d3c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008d3a:	2302      	movs	r3, #2
  }
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008d7e:	f023 030c 	bic.w	r3, r3, #12
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	6812      	ldr	r2, [r2, #0]
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	430b      	orrs	r3, r1
 8008d8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699a      	ldr	r2, [r3, #24]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a2c      	ldr	r2, [pc, #176]	@ (8008e58 <UART_SetConfig+0x114>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d103      	bne.n	8008db4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008dac:	f7ff faee 	bl	800838c <HAL_RCC_GetPCLK2Freq>
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	e002      	b.n	8008dba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008db4:	f7ff fad6 	bl	8008364 <HAL_RCC_GetPCLK1Freq>
 8008db8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009a      	lsls	r2, r3, #2
 8008dc4:	441a      	add	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd0:	4a22      	ldr	r2, [pc, #136]	@ (8008e5c <UART_SetConfig+0x118>)
 8008dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd6:	095b      	lsrs	r3, r3, #5
 8008dd8:	0119      	lsls	r1, r3, #4
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009a      	lsls	r2, r3, #2
 8008de4:	441a      	add	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8008df0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e5c <UART_SetConfig+0x118>)
 8008df2:	fba3 0302 	umull	r0, r3, r3, r2
 8008df6:	095b      	lsrs	r3, r3, #5
 8008df8:	2064      	movs	r0, #100	@ 0x64
 8008dfa:	fb00 f303 	mul.w	r3, r0, r3
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	3332      	adds	r3, #50	@ 0x32
 8008e04:	4a15      	ldr	r2, [pc, #84]	@ (8008e5c <UART_SetConfig+0x118>)
 8008e06:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e10:	4419      	add	r1, r3
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4613      	mov	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	009a      	lsls	r2, r3, #2
 8008e1c:	441a      	add	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e28:	4b0c      	ldr	r3, [pc, #48]	@ (8008e5c <UART_SetConfig+0x118>)
 8008e2a:	fba3 0302 	umull	r0, r3, r3, r2
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	2064      	movs	r0, #100	@ 0x64
 8008e32:	fb00 f303 	mul.w	r3, r0, r3
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	3332      	adds	r3, #50	@ 0x32
 8008e3c:	4a07      	ldr	r2, [pc, #28]	@ (8008e5c <UART_SetConfig+0x118>)
 8008e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	f003 020f 	and.w	r2, r3, #15
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	40013800 	.word	0x40013800
 8008e5c:	51eb851f 	.word	0x51eb851f

08008e60 <memset>:
 8008e60:	4603      	mov	r3, r0
 8008e62:	4402      	add	r2, r0
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d100      	bne.n	8008e6a <memset+0xa>
 8008e68:	4770      	bx	lr
 8008e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e6e:	e7f9      	b.n	8008e64 <memset+0x4>

08008e70 <__libc_init_array>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	2600      	movs	r6, #0
 8008e74:	4d0c      	ldr	r5, [pc, #48]	@ (8008ea8 <__libc_init_array+0x38>)
 8008e76:	4c0d      	ldr	r4, [pc, #52]	@ (8008eac <__libc_init_array+0x3c>)
 8008e78:	1b64      	subs	r4, r4, r5
 8008e7a:	10a4      	asrs	r4, r4, #2
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	d109      	bne.n	8008e94 <__libc_init_array+0x24>
 8008e80:	f000 f81a 	bl	8008eb8 <_init>
 8008e84:	2600      	movs	r6, #0
 8008e86:	4d0a      	ldr	r5, [pc, #40]	@ (8008eb0 <__libc_init_array+0x40>)
 8008e88:	4c0a      	ldr	r4, [pc, #40]	@ (8008eb4 <__libc_init_array+0x44>)
 8008e8a:	1b64      	subs	r4, r4, r5
 8008e8c:	10a4      	asrs	r4, r4, #2
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	d105      	bne.n	8008e9e <__libc_init_array+0x2e>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e98:	4798      	blx	r3
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	e7ee      	b.n	8008e7c <__libc_init_array+0xc>
 8008e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea2:	4798      	blx	r3
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	e7f2      	b.n	8008e8e <__libc_init_array+0x1e>
 8008ea8:	0800bea8 	.word	0x0800bea8
 8008eac:	0800bea8 	.word	0x0800bea8
 8008eb0:	0800bea8 	.word	0x0800bea8
 8008eb4:	0800beac 	.word	0x0800beac

08008eb8 <_init>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	bf00      	nop
 8008ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ebe:	bc08      	pop	{r3}
 8008ec0:	469e      	mov	lr, r3
 8008ec2:	4770      	bx	lr

08008ec4 <_fini>:
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	bf00      	nop
 8008ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eca:	bc08      	pop	{r3}
 8008ecc:	469e      	mov	lr, r3
 8008ece:	4770      	bx	lr
