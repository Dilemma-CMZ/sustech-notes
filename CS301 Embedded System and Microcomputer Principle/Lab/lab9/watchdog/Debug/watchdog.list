
watchdog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003680  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003864  08003864  00004864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038e0  080038e0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e0  080038e0  000048e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038e4  080038e4  000048e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080038e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08003944  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003944  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b389  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000239f  00000000  00000000  0001040e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  000127b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009eb  00000000  00000000  00013480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019937  00000000  00000000  00013e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee2f  00000000  00000000  0002d7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000970d9  00000000  00000000  0003c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d36aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  000d36f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000d6ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800384c 	.word	0x0800384c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	0800384c 	.word	0x0800384c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000248:	4b46      	ldr	r3, [pc, #280]	@ (8000364 <MX_GPIO_Init+0x130>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a45      	ldr	r2, [pc, #276]	@ (8000364 <MX_GPIO_Init+0x130>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b43      	ldr	r3, [pc, #268]	@ (8000364 <MX_GPIO_Init+0x130>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0320 	and.w	r3, r3, #32
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000260:	4b40      	ldr	r3, [pc, #256]	@ (8000364 <MX_GPIO_Init+0x130>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a3f      	ldr	r2, [pc, #252]	@ (8000364 <MX_GPIO_Init+0x130>)
 8000266:	f043 0304 	orr.w	r3, r3, #4
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b3d      	ldr	r3, [pc, #244]	@ (8000364 <MX_GPIO_Init+0x130>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0304 	and.w	r3, r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
 8000276:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000278:	4b3a      	ldr	r3, [pc, #232]	@ (8000364 <MX_GPIO_Init+0x130>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a39      	ldr	r2, [pc, #228]	@ (8000364 <MX_GPIO_Init+0x130>)
 800027e:	f043 0310 	orr.w	r3, r3, #16
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b37      	ldr	r3, [pc, #220]	@ (8000364 <MX_GPIO_Init+0x130>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0310 	and.w	r3, r3, #16
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000296:	4834      	ldr	r0, [pc, #208]	@ (8000368 <MX_GPIO_Init+0x134>)
 8000298:	f000 fff9 	bl	800128e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	2104      	movs	r1, #4
 80002a0:	4832      	ldr	r0, [pc, #200]	@ (800036c <MX_GPIO_Init+0x138>)
 80002a2:	f000 fff4 	bl	800128e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80002a6:	2301      	movs	r3, #1
 80002a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002aa:	4b31      	ldr	r3, [pc, #196]	@ (8000370 <MX_GPIO_Init+0x13c>)
 80002ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	4619      	mov	r1, r3
 80002b8:	482b      	ldr	r0, [pc, #172]	@ (8000368 <MX_GPIO_Init+0x134>)
 80002ba:	f000 fe3d 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80002be:	2320      	movs	r3, #32
 80002c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000374 <MX_GPIO_Init+0x140>)
 80002c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	4619      	mov	r1, r3
 80002d0:	4829      	ldr	r0, [pc, #164]	@ (8000378 <MX_GPIO_Init+0x144>)
 80002d2:	f000 fe31 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80002d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	481e      	ldr	r0, [pc, #120]	@ (8000368 <MX_GPIO_Init+0x134>)
 80002f0:	f000 fe22 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80002f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000374 <MX_GPIO_Init+0x140>)
 80002fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fe:	2301      	movs	r3, #1
 8000300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	4619      	mov	r1, r3
 8000308:	4817      	ldr	r0, [pc, #92]	@ (8000368 <MX_GPIO_Init+0x134>)
 800030a:	f000 fe15 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800030e:	2304      	movs	r3, #4
 8000310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000312:	2301      	movs	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031a:	2302      	movs	r3, #2
 800031c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	4811      	ldr	r0, [pc, #68]	@ (800036c <MX_GPIO_Init+0x138>)
 8000326:	f000 fe07 	bl	8000f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2101      	movs	r1, #1
 800032e:	2006      	movs	r0, #6
 8000330:	f000 fc89 	bl	8000c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000334:	2006      	movs	r0, #6
 8000336:	f000 fca2 	bl	8000c7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800033a:	2201      	movs	r2, #1
 800033c:	2101      	movs	r1, #1
 800033e:	2017      	movs	r0, #23
 8000340:	f000 fc81 	bl	8000c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000344:	2017      	movs	r0, #23
 8000346:	f000 fc9a 	bl	8000c7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	2101      	movs	r1, #1
 800034e:	2028      	movs	r0, #40	@ 0x28
 8000350:	f000 fc79 	bl	8000c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000354:	2028      	movs	r0, #40	@ 0x28
 8000356:	f000 fc92 	bl	8000c7e <HAL_NVIC_EnableIRQ>

}
 800035a:	bf00      	nop
 800035c:	3720      	adds	r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000
 8000368:	40010800 	.word	0x40010800
 800036c:	40011400 	.word	0x40011400
 8000370:	10110000 	.word	0x10110000
 8000374:	10210000 	.word	0x10210000
 8000378:	40011000 	.word	0x40011000

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b09a      	sub	sp, #104	@ 0x68
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000382:	f000 fb03 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000386:	f000 f83f 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038a:	f7ff ff53 	bl	8000234 <MX_GPIO_Init>
  MX_TIM3_Init();
 800038e:	f000 f997 	bl	80006c0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000392:	f000 fa11 	bl	80007b8 <MX_USART1_UART_Init>
  MX_WWDG_Init();
 8000396:	f000 fa8d 	bl	80008b4 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800039a:	4816      	ldr	r0, [pc, #88]	@ (80003f4 <main+0x78>)
 800039c:	f001 fc2a 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1);
 80003a0:	2201      	movs	r2, #1
 80003a2:	4915      	ldr	r1, [pc, #84]	@ (80003f8 <main+0x7c>)
 80003a4:	4815      	ldr	r0, [pc, #84]	@ (80003fc <main+0x80>)
 80003a6:	f002 f8e2 	bl	800256e <HAL_UART_Receive_IT>
  int i = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	667b      	str	r3, [r7, #100]	@ 0x64
  unsigned char msg[100];
  HAL_UART_Transmit(&huart1, "Restart\r\n", 9, HAL_MAX_DELAY);
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003b2:	2209      	movs	r2, #9
 80003b4:	4912      	ldr	r1, [pc, #72]	@ (8000400 <main+0x84>)
 80003b6:	4811      	ldr	r0, [pc, #68]	@ (80003fc <main+0x80>)
 80003b8:	f002 f847 	bl	800244a <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i++;
 80003bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80003be:	3301      	adds	r3, #1
 80003c0:	667b      	str	r3, [r7, #100]	@ 0x64
	  sprintf(msg, "i = %d\r\n", i);
 80003c2:	463b      	mov	r3, r7
 80003c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80003c6:	490f      	ldr	r1, [pc, #60]	@ (8000404 <main+0x88>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f002 fd8f 	bl	8002eec <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80003ce:	463b      	mov	r3, r7
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff27 	bl	8000224 <strlen>
 80003d6:	4603      	mov	r3, r0
 80003d8:	b29a      	uxth	r2, r3
 80003da:	4639      	mov	r1, r7
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003e0:	4806      	ldr	r0, [pc, #24]	@ (80003fc <main+0x80>)
 80003e2:	f002 f832 	bl	800244a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80003e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003ea:	f000 fb31 	bl	8000a50 <HAL_Delay>
  {
 80003ee:	bf00      	nop
 80003f0:	e7e4      	b.n	80003bc <main+0x40>
 80003f2:	bf00      	nop
 80003f4:	20000094 	.word	0x20000094
 80003f8:	20000078 	.word	0x20000078
 80003fc:	200000dc 	.word	0x200000dc
 8000400:	08003864 	.word	0x08003864
 8000404:	08003870 	.word	0x08003870

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b090      	sub	sp, #64	@ 0x40
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	2228      	movs	r2, #40	@ 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f002 fd88 	bl	8002f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042a:	2301      	movs	r3, #1
 800042c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000432:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043c:	2302      	movs	r3, #2
 800043e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000440:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000444:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000446:	2300      	movs	r3, #0
 8000448:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044a:	f107 0318 	add.w	r3, r7, #24
 800044e:	4618      	mov	r0, r3
 8000450:	f000 ff66 	bl	8001320 <HAL_RCC_OscConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800045a:	f000 f819 	bl	8000490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	230f      	movs	r3, #15
 8000460:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000462:	2302      	movs	r3, #2
 8000464:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800046a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800046e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2100      	movs	r1, #0
 8000478:	4618      	mov	r0, r3
 800047a:	f001 f9d3 	bl	8001824 <HAL_RCC_ClockConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000484:	f000 f804 	bl	8000490 <Error_Handler>
  }
}
 8000488:	bf00      	nop
 800048a:	3740      	adds	r7, #64	@ 0x40
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <Error_Handler+0x8>

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a2:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <HAL_MspInit+0x60>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a15      	ldr	r2, [pc, #84]	@ (80004fc <HAL_MspInit+0x60>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <HAL_MspInit+0x60>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b10      	ldr	r3, [pc, #64]	@ (80004fc <HAL_MspInit+0x60>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a0f      	ldr	r2, [pc, #60]	@ (80004fc <HAL_MspInit+0x60>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b0d      	ldr	r3, [pc, #52]	@ (80004fc <HAL_MspInit+0x60>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80004d2:	2005      	movs	r0, #5
 80004d4:	f000 fbac 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <HAL_MspInit+0x64>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <HAL_MspInit+0x64>)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010000 	.word	0x40010000

08000504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <NMI_Handler+0x4>

0800050c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <MemManage_Handler+0x4>

0800051c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <UsageFault_Handler+0x4>

0800052c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000554:	f000 fa60 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8000560:	4802      	ldr	r0, [pc, #8]	@ (800056c <WWDG_IRQHandler+0x10>)
 8000562:	f002 fc9a 	bl	8002e9a <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000120 	.word	0x20000120

08000570 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 febb 	bl	80012f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}

0800057e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000582:	2020      	movs	r0, #32
 8000584:	f000 feb4 	bl	80012f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000590:	4802      	ldr	r0, [pc, #8]	@ (800059c <TIM3_IRQHandler+0x10>)
 8000592:	f001 fb8f 	bl	8001cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000094 	.word	0x20000094

080005a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <USART1_IRQHandler+0x10>)
 80005a6:	f002 f813 	bl	80025d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200000dc 	.word	0x200000dc

080005b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80005b8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80005bc:	f000 fe98 	bl	80012f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005d4:	d10b      	bne.n	80005ee <HAL_GPIO_EXTI_Callback+0x2a>
		case KEY1_Pin:
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 80005d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005da:	4808      	ldr	r0, [pc, #32]	@ (80005fc <HAL_GPIO_EXTI_Callback+0x38>)
 80005dc:	f000 fe40 	bl	8001260 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d105      	bne.n	80005f2 <HAL_GPIO_EXTI_Callback+0x2e>
				HAL_WWDG_Refresh(&hwwdg);
 80005e6:	4806      	ldr	r0, [pc, #24]	@ (8000600 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005e8:	f002 fc48 	bl	8002e7c <HAL_WWDG_Refresh>
			}
			break;
 80005ec:	e001      	b.n	80005f2 <HAL_GPIO_EXTI_Callback+0x2e>
		default:
			break;
 80005ee:	bf00      	nop
 80005f0:	e000      	b.n	80005f4 <HAL_GPIO_EXTI_Callback+0x30>
			break;
 80005f2:	bf00      	nop
	}
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40010800 	.word	0x40010800
 8000600:	20000120 	.word	0x20000120

08000604 <HAL_TIM_PeriodElapsedCallback>:

int count = 0;
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	// char s[100];
	// sprintf(s, "Count to number %u\r\n", count++);
	if (++count % 4 == 0) HAL_WWDG_Refresh(&hwwdg);
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f003 0303 	and.w	r3, r3, #3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x24>
 8000622:	4807      	ldr	r0, [pc, #28]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000624:	f002 fc2a 	bl	8002e7c <HAL_WWDG_Refresh>

	// HAL_UART_Transmit(&huart1, (uint8_t* )s, strlen(s), HAL_MAX_DELAY);
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000628:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800062c:	4805      	ldr	r0, [pc, #20]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800062e:	f000 fe46 	bl	80012be <HAL_GPIO_TogglePin>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000008c 	.word	0x2000008c
 8000640:	20000120 	.word	0x20000120
 8000644:	40010800 	.word	0x40010800

08000648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <_sbrk+0x5c>)
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <_sbrk+0x60>)
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <_sbrk+0x64>)
 8000666:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <_sbrk+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	429a      	cmp	r2, r3
 8000676:	d207      	bcs.n	8000688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000678:	f002 fc60 	bl	8002f3c <__errno>
 800067c:	4603      	mov	r3, r0
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000686:	e009      	b.n	800069c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <_sbrk+0x64>)
 8000698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000c000 	.word	0x2000c000
 80006a8:	00000400 	.word	0x00000400
 80006ac:	20000090 	.word	0x20000090
 80006b0:	20000280 	.word	0x20000280

080006b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	463b      	mov	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_TIM3_Init+0x94>)
 80006de:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <MX_TIM3_Init+0x98>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_TIM3_Init+0x94>)
 80006e4:	2263      	movs	r2, #99	@ 0x63
 80006e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_TIM3_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_TIM3_Init+0x94>)
 80006f0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_TIM3_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_TIM3_Init+0x94>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000702:	4814      	ldr	r0, [pc, #80]	@ (8000754 <MX_TIM3_Init+0x94>)
 8000704:	f001 fa26 	bl	8001b54 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800070e:	f7ff febf 	bl	8000490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	4619      	mov	r1, r3
 800071e:	480d      	ldr	r0, [pc, #52]	@ (8000754 <MX_TIM3_Init+0x94>)
 8000720:	f001 fbd0 	bl	8001ec4 <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800072a:	f7ff feb1 	bl	8000490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_TIM3_Init+0x94>)
 800073c:	f001 fdba 	bl	80022b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000746:	f7ff fea3 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000094 	.word	0x20000094
 8000758:	40000400 	.word	0x40000400

0800075c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <HAL_TIM_Base_MspInit+0x54>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d11b      	bne.n	80007a6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <HAL_TIM_Base_MspInit+0x58>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <HAL_TIM_Base_MspInit+0x58>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <HAL_TIM_Base_MspInit+0x58>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 3);
 8000786:	2203      	movs	r2, #3
 8000788:	2101      	movs	r1, #1
 800078a:	201d      	movs	r0, #29
 800078c:	f000 fa5b 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000790:	201d      	movs	r0, #29
 8000792:	f000 fa74 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */
    __HAL_TIM_CLEAR_FLAG(tim_baseHandle, TIM_SR_UIF);//添加这条语句解决问题
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f06f 0201 	mvn.w	r2, #1
 800079e:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(tim_baseHandle);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f001 fa27 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40000400 	.word	0x40000400
 80007b4:	40021000 	.word	0x40021000

080007b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART1_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <MX_USART1_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_USART1_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART1_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART1_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART1_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART1_UART_Init+0x4c>)
 80007f0:	f001 fdde 	bl	80023b0 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f7ff fe49 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000dc 	.word	0x200000dc
 8000808:	40013800 	.word	0x40013800

0800080c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a20      	ldr	r2, [pc, #128]	@ (80008a8 <HAL_UART_MspInit+0x9c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d139      	bne.n	80008a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a1e      	ldr	r2, [pc, #120]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800085c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000860:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	480f      	ldr	r0, [pc, #60]	@ (80008b0 <HAL_UART_MspInit+0xa4>)
 8000872:	f000 fb61 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <HAL_UART_MspInit+0xa4>)
 800088c:	f000 fb54 	bl	8000f38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8000890:	2201      	movs	r2, #1
 8000892:	2101      	movs	r1, #1
 8000894:	2025      	movs	r0, #37	@ 0x25
 8000896:	f000 f9d6 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800089a:	2025      	movs	r0, #37	@ 0x25
 800089c:	f000 f9ef 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_WWDG_Init+0x38>)
 80008ba:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <MX_WWDG_Init+0x3c>)
 80008bc:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_WWDG_Init+0x38>)
 80008c0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80008c4:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 95;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_WWDG_Init+0x38>)
 80008c8:	225f      	movs	r2, #95	@ 0x5f
 80008ca:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_WWDG_Init+0x38>)
 80008ce:	227f      	movs	r2, #127	@ 0x7f
 80008d0:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_WWDG_Init+0x38>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_WWDG_Init+0x38>)
 80008da:	f002 faab 	bl	8002e34 <HAL_WWDG_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 80008e4:	f7ff fdd4 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000120 	.word	0x20000120
 80008f0:	40002c00 	.word	0x40002c00

080008f4 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <HAL_WWDG_MspInit+0x44>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d113      	bne.n	800092e <HAL_WWDG_MspInit+0x3a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <HAL_WWDG_MspInit+0x48>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a0c      	ldr	r2, [pc, #48]	@ (800093c <HAL_WWDG_MspInit+0x48>)
 800090c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <HAL_WWDG_MspInit+0x48>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]

    /* WWDG interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 1, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	2000      	movs	r0, #0
 8000924:	f000 f98f 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 8000928:	2000      	movs	r0, #0
 800092a:	f000 f9a8 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40002c00 	.word	0x40002c00
 800093c:	40021000 	.word	0x40021000

08000940 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000942:	490d      	ldr	r1, [pc, #52]	@ (8000978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000944:	4a0d      	ldr	r2, [pc, #52]	@ (800097c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000958:	4c0a      	ldr	r4, [pc, #40]	@ (8000984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000966:	f7ff fea5 	bl	80006b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096a:	f002 faed 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096e:	f7ff fd05 	bl	800037c <main>
  bx lr
 8000972:	4770      	bx	lr
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800097c:	080038e8 	.word	0x080038e8
  ldr r2, =_sbss
 8000980:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000984:	20000280 	.word	0x20000280

08000988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_2_IRQHandler>
	...

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_Init+0x28>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	@ (80009b4 <HAL_Init+0x28>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f947 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f808 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff fd78 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40022000 	.word	0x40022000

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_InitTick+0x54>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_InitTick+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f95f 	bl	8000c9a <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00e      	b.n	8000a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d80a      	bhi.n	8000a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f4:	f000 f927 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f8:	4a06      	ldr	r2, [pc, #24]	@ (8000a14 <HAL_InitTick+0x5c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <HAL_IncTick+0x1c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a03      	ldr	r2, [pc, #12]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000134 	.word	0x20000134

08000a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b02      	ldr	r3, [pc, #8]	@ (8000a4c <HAL_GetTick+0x10>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	20000134 	.word	0x20000134

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff fff0 	bl	8000a3c <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffe0 	bl	8000a3c <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4906      	ldr	r1, [pc, #24]	@ (8000b30 <__NVIC_EnableIRQ+0x34>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	@ (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	@ 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	f7ff ff90 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff2d 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff42 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff90 	bl	8000b88 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5f 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff35 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffa2 	bl	8000bec <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d008      	beq.n	8000cda <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2204      	movs	r2, #4
 8000ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e020      	b.n	8000d1c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 020e 	bic.w	r2, r2, #14
 8000ce8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0201 	bic.w	r2, r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d02:	2101      	movs	r1, #1
 8000d04:	fa01 f202 	lsl.w	r2, r1, r2
 8000d08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
	...

08000d28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d005      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2204      	movs	r2, #4
 8000d42:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e0d6      	b.n	8000ef8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 020e 	bic.w	r2, r2, #14
 8000d58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b64      	ldr	r3, [pc, #400]	@ (8000f04 <HAL_DMA_Abort_IT+0x1dc>)
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d958      	bls.n	8000e28 <HAL_DMA_Abort_IT+0x100>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a63      	ldr	r2, [pc, #396]	@ (8000f08 <HAL_DMA_Abort_IT+0x1e0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d04f      	beq.n	8000e20 <HAL_DMA_Abort_IT+0xf8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a61      	ldr	r2, [pc, #388]	@ (8000f0c <HAL_DMA_Abort_IT+0x1e4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d048      	beq.n	8000e1c <HAL_DMA_Abort_IT+0xf4>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a60      	ldr	r2, [pc, #384]	@ (8000f10 <HAL_DMA_Abort_IT+0x1e8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d040      	beq.n	8000e16 <HAL_DMA_Abort_IT+0xee>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a5e      	ldr	r2, [pc, #376]	@ (8000f14 <HAL_DMA_Abort_IT+0x1ec>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d038      	beq.n	8000e10 <HAL_DMA_Abort_IT+0xe8>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a5d      	ldr	r2, [pc, #372]	@ (8000f18 <HAL_DMA_Abort_IT+0x1f0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d030      	beq.n	8000e0a <HAL_DMA_Abort_IT+0xe2>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a5b      	ldr	r2, [pc, #364]	@ (8000f1c <HAL_DMA_Abort_IT+0x1f4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d028      	beq.n	8000e04 <HAL_DMA_Abort_IT+0xdc>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a53      	ldr	r2, [pc, #332]	@ (8000f04 <HAL_DMA_Abort_IT+0x1dc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d020      	beq.n	8000dfe <HAL_DMA_Abort_IT+0xd6>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a57      	ldr	r2, [pc, #348]	@ (8000f20 <HAL_DMA_Abort_IT+0x1f8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d019      	beq.n	8000dfa <HAL_DMA_Abort_IT+0xd2>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a56      	ldr	r2, [pc, #344]	@ (8000f24 <HAL_DMA_Abort_IT+0x1fc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d012      	beq.n	8000df6 <HAL_DMA_Abort_IT+0xce>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a54      	ldr	r2, [pc, #336]	@ (8000f28 <HAL_DMA_Abort_IT+0x200>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00a      	beq.n	8000df0 <HAL_DMA_Abort_IT+0xc8>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a53      	ldr	r2, [pc, #332]	@ (8000f2c <HAL_DMA_Abort_IT+0x204>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d102      	bne.n	8000dea <HAL_DMA_Abort_IT+0xc2>
 8000de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de8:	e01b      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000dea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dee:	e018      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df4:	e015      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000df6:	2310      	movs	r3, #16
 8000df8:	e013      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e011      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000dfe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e02:	e00e      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e08:	e00b      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e0e:	e008      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e14:	e005      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1a:	e002      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	e000      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e20:	2301      	movs	r3, #1
 8000e22:	4a43      	ldr	r2, [pc, #268]	@ (8000f30 <HAL_DMA_Abort_IT+0x208>)
 8000e24:	6053      	str	r3, [r2, #4]
 8000e26:	e057      	b.n	8000ed8 <HAL_DMA_Abort_IT+0x1b0>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a36      	ldr	r2, [pc, #216]	@ (8000f08 <HAL_DMA_Abort_IT+0x1e0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d04f      	beq.n	8000ed2 <HAL_DMA_Abort_IT+0x1aa>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a35      	ldr	r2, [pc, #212]	@ (8000f0c <HAL_DMA_Abort_IT+0x1e4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d048      	beq.n	8000ece <HAL_DMA_Abort_IT+0x1a6>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a33      	ldr	r2, [pc, #204]	@ (8000f10 <HAL_DMA_Abort_IT+0x1e8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d040      	beq.n	8000ec8 <HAL_DMA_Abort_IT+0x1a0>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a32      	ldr	r2, [pc, #200]	@ (8000f14 <HAL_DMA_Abort_IT+0x1ec>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d038      	beq.n	8000ec2 <HAL_DMA_Abort_IT+0x19a>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a30      	ldr	r2, [pc, #192]	@ (8000f18 <HAL_DMA_Abort_IT+0x1f0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d030      	beq.n	8000ebc <HAL_DMA_Abort_IT+0x194>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f1c <HAL_DMA_Abort_IT+0x1f4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d028      	beq.n	8000eb6 <HAL_DMA_Abort_IT+0x18e>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a26      	ldr	r2, [pc, #152]	@ (8000f04 <HAL_DMA_Abort_IT+0x1dc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d020      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0x188>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a2b      	ldr	r2, [pc, #172]	@ (8000f20 <HAL_DMA_Abort_IT+0x1f8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d019      	beq.n	8000eac <HAL_DMA_Abort_IT+0x184>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a29      	ldr	r2, [pc, #164]	@ (8000f24 <HAL_DMA_Abort_IT+0x1fc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d012      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0x180>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a28      	ldr	r2, [pc, #160]	@ (8000f28 <HAL_DMA_Abort_IT+0x200>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d00a      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x17a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a26      	ldr	r2, [pc, #152]	@ (8000f2c <HAL_DMA_Abort_IT+0x204>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d102      	bne.n	8000e9c <HAL_DMA_Abort_IT+0x174>
 8000e96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9a:	e01b      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000e9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea0:	e018      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ea2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea6:	e015      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	e013      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e011      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000eb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000eb4:	e00e      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000eb6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000eba:	e00b      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ebc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec0:	e008      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec6:	e005      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ecc:	e002      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ece:	2310      	movs	r3, #16
 8000ed0:	e000      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	4a17      	ldr	r2, [pc, #92]	@ (8000f34 <HAL_DMA_Abort_IT+0x20c>)
 8000ed6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	4798      	blx	r3
    } 
  }
  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020080 	.word	0x40020080
 8000f08:	40020008 	.word	0x40020008
 8000f0c:	4002001c 	.word	0x4002001c
 8000f10:	40020030 	.word	0x40020030
 8000f14:	40020044 	.word	0x40020044
 8000f18:	40020058 	.word	0x40020058
 8000f1c:	4002006c 	.word	0x4002006c
 8000f20:	40020408 	.word	0x40020408
 8000f24:	4002041c 	.word	0x4002041c
 8000f28:	40020430 	.word	0x40020430
 8000f2c:	40020444 	.word	0x40020444
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020000 	.word	0x40020000

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b08b      	sub	sp, #44	@ 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e179      	b.n	8001240 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8168 	bne.w	800123a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4a96      	ldr	r2, [pc, #600]	@ (80011c8 <HAL_GPIO_Init+0x290>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d05e      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f74:	4a94      	ldr	r2, [pc, #592]	@ (80011c8 <HAL_GPIO_Init+0x290>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d875      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f7a:	4a94      	ldr	r2, [pc, #592]	@ (80011cc <HAL_GPIO_Init+0x294>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d058      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f80:	4a92      	ldr	r2, [pc, #584]	@ (80011cc <HAL_GPIO_Init+0x294>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d86f      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f86:	4a92      	ldr	r2, [pc, #584]	@ (80011d0 <HAL_GPIO_Init+0x298>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d052      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f8c:	4a90      	ldr	r2, [pc, #576]	@ (80011d0 <HAL_GPIO_Init+0x298>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d869      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f92:	4a90      	ldr	r2, [pc, #576]	@ (80011d4 <HAL_GPIO_Init+0x29c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d04c      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f98:	4a8e      	ldr	r2, [pc, #568]	@ (80011d4 <HAL_GPIO_Init+0x29c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d863      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f9e:	4a8e      	ldr	r2, [pc, #568]	@ (80011d8 <HAL_GPIO_Init+0x2a0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d046      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000fa4:	4a8c      	ldr	r2, [pc, #560]	@ (80011d8 <HAL_GPIO_Init+0x2a0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d85d      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000faa:	2b12      	cmp	r3, #18
 8000fac:	d82a      	bhi.n	8001004 <HAL_GPIO_Init+0xcc>
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d859      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb8 <HAL_GPIO_Init+0x80>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	08001033 	.word	0x08001033
 8000fbc:	0800100d 	.word	0x0800100d
 8000fc0:	0800101f 	.word	0x0800101f
 8000fc4:	08001061 	.word	0x08001061
 8000fc8:	08001067 	.word	0x08001067
 8000fcc:	08001067 	.word	0x08001067
 8000fd0:	08001067 	.word	0x08001067
 8000fd4:	08001067 	.word	0x08001067
 8000fd8:	08001067 	.word	0x08001067
 8000fdc:	08001067 	.word	0x08001067
 8000fe0:	08001067 	.word	0x08001067
 8000fe4:	08001067 	.word	0x08001067
 8000fe8:	08001067 	.word	0x08001067
 8000fec:	08001067 	.word	0x08001067
 8000ff0:	08001067 	.word	0x08001067
 8000ff4:	08001067 	.word	0x08001067
 8000ff8:	08001067 	.word	0x08001067
 8000ffc:	08001015 	.word	0x08001015
 8001000:	08001029 	.word	0x08001029
 8001004:	4a75      	ldr	r2, [pc, #468]	@ (80011dc <HAL_GPIO_Init+0x2a4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100a:	e02c      	b.n	8001066 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	623b      	str	r3, [r7, #32]
          break;
 8001012:	e029      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	3304      	adds	r3, #4
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e024      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	3308      	adds	r3, #8
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e01f      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	330c      	adds	r3, #12
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e01a      	b.n	8001068 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800103a:	2304      	movs	r3, #4
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e013      	b.n	8001068 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d105      	bne.n	8001054 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001048:	2308      	movs	r3, #8
 800104a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	611a      	str	r2, [r3, #16]
          break;
 8001052:	e009      	b.n	8001068 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001054:	2308      	movs	r3, #8
 8001056:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	615a      	str	r2, [r3, #20]
          break;
 800105e:	e003      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x130>
          break;
 8001066:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2bff      	cmp	r3, #255	@ 0xff
 800106c:	d801      	bhi.n	8001072 <HAL_GPIO_Init+0x13a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	e001      	b.n	8001076 <HAL_GPIO_Init+0x13e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3304      	adds	r3, #4
 8001076:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2bff      	cmp	r3, #255	@ 0xff
 800107c:	d802      	bhi.n	8001084 <HAL_GPIO_Init+0x14c>
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	e002      	b.n	800108a <HAL_GPIO_Init+0x152>
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	3b08      	subs	r3, #8
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	210f      	movs	r1, #15
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	401a      	ands	r2, r3
 800109c:	6a39      	ldr	r1, [r7, #32]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	431a      	orrs	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80c1 	beq.w	800123a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010b8:	4b49      	ldr	r3, [pc, #292]	@ (80011e0 <HAL_GPIO_Init+0x2a8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a48      	ldr	r2, [pc, #288]	@ (80011e0 <HAL_GPIO_Init+0x2a8>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b46      	ldr	r3, [pc, #280]	@ (80011e0 <HAL_GPIO_Init+0x2a8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d0:	4a44      	ldr	r2, [pc, #272]	@ (80011e4 <HAL_GPIO_Init+0x2ac>)
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3c      	ldr	r2, [pc, #240]	@ (80011e8 <HAL_GPIO_Init+0x2b0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d01f      	beq.n	800113c <HAL_GPIO_Init+0x204>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a3b      	ldr	r2, [pc, #236]	@ (80011ec <HAL_GPIO_Init+0x2b4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d019      	beq.n	8001138 <HAL_GPIO_Init+0x200>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a3a      	ldr	r2, [pc, #232]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1fc>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a39      	ldr	r2, [pc, #228]	@ (80011f4 <HAL_GPIO_Init+0x2bc>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1f8>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a38      	ldr	r2, [pc, #224]	@ (80011f8 <HAL_GPIO_Init+0x2c0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1f4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a37      	ldr	r2, [pc, #220]	@ (80011fc <HAL_GPIO_Init+0x2c4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1f0>
 8001124:	2305      	movs	r3, #5
 8001126:	e00a      	b.n	800113e <HAL_GPIO_Init+0x206>
 8001128:	2306      	movs	r3, #6
 800112a:	e008      	b.n	800113e <HAL_GPIO_Init+0x206>
 800112c:	2304      	movs	r3, #4
 800112e:	e006      	b.n	800113e <HAL_GPIO_Init+0x206>
 8001130:	2303      	movs	r3, #3
 8001132:	e004      	b.n	800113e <HAL_GPIO_Init+0x206>
 8001134:	2302      	movs	r3, #2
 8001136:	e002      	b.n	800113e <HAL_GPIO_Init+0x206>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_GPIO_Init+0x206>
 800113c:	2300      	movs	r3, #0
 800113e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001140:	f002 0203 	and.w	r2, r2, #3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4093      	lsls	r3, r2
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800114e:	4925      	ldr	r1, [pc, #148]	@ (80011e4 <HAL_GPIO_Init+0x2ac>)
 8001150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001168:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4924      	ldr	r1, [pc, #144]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001176:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	43db      	mvns	r3, r3
 800117e:	4920      	ldr	r1, [pc, #128]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 8001180:	4013      	ands	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	491a      	ldr	r1, [pc, #104]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4916      	ldr	r1, [pc, #88]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d025      	beq.n	8001204 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	4910      	ldr	r1, [pc, #64]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	608b      	str	r3, [r1, #8]
 80011c4:	e025      	b.n	8001212 <HAL_GPIO_Init+0x2da>
 80011c6:	bf00      	nop
 80011c8:	10320000 	.word	0x10320000
 80011cc:	10310000 	.word	0x10310000
 80011d0:	10220000 	.word	0x10220000
 80011d4:	10210000 	.word	0x10210000
 80011d8:	10120000 	.word	0x10120000
 80011dc:	10110000 	.word	0x10110000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40010c00 	.word	0x40010c00
 80011f0:	40011000 	.word	0x40011000
 80011f4:	40011400 	.word	0x40011400
 80011f8:	40011800 	.word	0x40011800
 80011fc:	40011c00 	.word	0x40011c00
 8001200:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_GPIO_Init+0x324>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	43db      	mvns	r3, r3
 800120c:	4913      	ldr	r1, [pc, #76]	@ (800125c <HAL_GPIO_Init+0x324>)
 800120e:	4013      	ands	r3, r2
 8001210:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_GPIO_Init+0x324>)
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	490e      	ldr	r1, [pc, #56]	@ (800125c <HAL_GPIO_Init+0x324>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	60cb      	str	r3, [r1, #12]
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_GPIO_Init+0x324>)
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	43db      	mvns	r3, r3
 8001234:	4909      	ldr	r1, [pc, #36]	@ (800125c <HAL_GPIO_Init+0x324>)
 8001236:	4013      	ands	r3, r2
 8001238:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	3301      	adds	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	fa22 f303 	lsr.w	r3, r2, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	f47f ae7e 	bne.w	8000f4c <HAL_GPIO_Init+0x14>
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	372c      	adds	r7, #44	@ 0x2c
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e001      	b.n	8001282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]
 800129a:	4613      	mov	r3, r2
 800129c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800129e:	787b      	ldrb	r3, [r7, #1]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a4:	887a      	ldrh	r2, [r7, #2]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012aa:	e003      	b.n	80012b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	041a      	lsls	r2, r3, #16
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	611a      	str	r2, [r3, #16]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d0:	887a      	ldrh	r2, [r7, #2]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	041a      	lsls	r2, r3, #16
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43d9      	mvns	r1, r3
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	400b      	ands	r3, r1
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	611a      	str	r2, [r3, #16]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001306:	4a05      	ldr	r2, [pc, #20]	@ (800131c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f958 	bl	80005c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e272      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8087 	beq.w	800144e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001340:	4b92      	ldr	r3, [pc, #584]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b04      	cmp	r3, #4
 800134a:	d00c      	beq.n	8001366 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800134c:	4b8f      	ldr	r3, [pc, #572]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d112      	bne.n	800137e <HAL_RCC_OscConfig+0x5e>
 8001358:	4b8c      	ldr	r3, [pc, #560]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001364:	d10b      	bne.n	800137e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001366:	4b89      	ldr	r3, [pc, #548]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d06c      	beq.n	800144c <HAL_RCC_OscConfig+0x12c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d168      	bne.n	800144c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e24c      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x76>
 8001388:	4b80      	ldr	r3, [pc, #512]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a7f      	ldr	r2, [pc, #508]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 800138e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e02e      	b.n	80013f4 <HAL_RCC_OscConfig+0xd4>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x98>
 800139e:	4b7b      	ldr	r3, [pc, #492]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a7a      	ldr	r2, [pc, #488]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b78      	ldr	r3, [pc, #480]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a77      	ldr	r2, [pc, #476]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e01d      	b.n	80013f4 <HAL_RCC_OscConfig+0xd4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0xbc>
 80013c2:	4b72      	ldr	r3, [pc, #456]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a71      	ldr	r2, [pc, #452]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b6f      	ldr	r3, [pc, #444]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a6e      	ldr	r2, [pc, #440]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0xd4>
 80013dc:	4b6b      	ldr	r3, [pc, #428]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a6a      	ldr	r2, [pc, #424]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b68      	ldr	r3, [pc, #416]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a67      	ldr	r2, [pc, #412]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb1e 	bl	8000a3c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fb1a 	bl	8000a3c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	@ 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e200      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b5d      	ldr	r3, [pc, #372]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0xe4>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fb0a 	bl	8000a3c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fb06 	bl	8000a3c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	@ 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1ec      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	4b53      	ldr	r3, [pc, #332]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x10c>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d063      	beq.n	8001522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145a:	4b4c      	ldr	r3, [pc, #304]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001466:	4b49      	ldr	r3, [pc, #292]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b08      	cmp	r3, #8
 8001470:	d11c      	bne.n	80014ac <HAL_RCC_OscConfig+0x18c>
 8001472:	4b46      	ldr	r3, [pc, #280]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d116      	bne.n	80014ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	4b43      	ldr	r3, [pc, #268]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x176>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e1c0      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b3d      	ldr	r3, [pc, #244]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4939      	ldr	r1, [pc, #228]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	e03a      	b.n	8001522 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b36      	ldr	r3, [pc, #216]	@ (8001590 <HAL_RCC_OscConfig+0x270>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fabf 	bl	8000a3c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff fabb 	bl	8000a3c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1a1      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4927      	ldr	r1, [pc, #156]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f6:	4b26      	ldr	r3, [pc, #152]	@ (8001590 <HAL_RCC_OscConfig+0x270>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fa9e 	bl	8000a3c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fa9a 	bl	8000a3c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e180      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03a      	beq.n	80015a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d019      	beq.n	800156a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <HAL_RCC_OscConfig+0x274>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fa7e 	bl	8000a3c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fa7a 	bl	8000a3c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e160      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <HAL_RCC_OscConfig+0x26c>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f000 fad8 	bl	8001b18 <RCC_Delay>
 8001568:	e01c      	b.n	80015a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <HAL_RCC_OscConfig+0x274>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7ff fa64 	bl	8000a3c <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001576:	e00f      	b.n	8001598 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fa60 	bl	8000a3c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d908      	bls.n	8001598 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e146      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	42420000 	.word	0x42420000
 8001594:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	4b92      	ldr	r3, [pc, #584]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1e9      	bne.n	8001578 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80a6 	beq.w	80016fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b8b      	ldr	r3, [pc, #556]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10d      	bne.n	80015de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b88      	ldr	r3, [pc, #544]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a87      	ldr	r2, [pc, #540]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b85      	ldr	r3, [pc, #532]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015de:	4b82      	ldr	r3, [pc, #520]	@ (80017e8 <HAL_RCC_OscConfig+0x4c8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ea:	4b7f      	ldr	r3, [pc, #508]	@ (80017e8 <HAL_RCC_OscConfig+0x4c8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a7e      	ldr	r2, [pc, #504]	@ (80017e8 <HAL_RCC_OscConfig+0x4c8>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa21 	bl	8000a3c <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff fa1d 	bl	8000a3c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b64      	cmp	r3, #100	@ 0x64
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e103      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	4b75      	ldr	r3, [pc, #468]	@ (80017e8 <HAL_RCC_OscConfig+0x4c8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x312>
 8001624:	4b6f      	ldr	r3, [pc, #444]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a6e      	ldr	r2, [pc, #440]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	e02d      	b.n	800168e <HAL_RCC_OscConfig+0x36e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x334>
 800163a:	4b6a      	ldr	r3, [pc, #424]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a69      	ldr	r2, [pc, #420]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b67      	ldr	r3, [pc, #412]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a66      	ldr	r2, [pc, #408]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6213      	str	r3, [r2, #32]
 8001652:	e01c      	b.n	800168e <HAL_RCC_OscConfig+0x36e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x356>
 800165c:	4b61      	ldr	r3, [pc, #388]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a60      	ldr	r2, [pc, #384]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	4b5e      	ldr	r3, [pc, #376]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a5d      	ldr	r2, [pc, #372]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e00b      	b.n	800168e <HAL_RCC_OscConfig+0x36e>
 8001676:	4b5b      	ldr	r3, [pc, #364]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a5a      	ldr	r2, [pc, #360]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	4b58      	ldr	r3, [pc, #352]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a57      	ldr	r2, [pc, #348]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d015      	beq.n	80016c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff f9d1 	bl	8000a3c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff f9cd 	bl	8000a3c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0b1      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	4b4b      	ldr	r3, [pc, #300]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ee      	beq.n	800169e <HAL_RCC_OscConfig+0x37e>
 80016c0:	e014      	b.n	80016ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff f9bb 	bl	8000a3c <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff f9b7 	bl	8000a3c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e09b      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	4b40      	ldr	r3, [pc, #256]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ee      	bne.n	80016ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d105      	bne.n	80016fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f2:	4b3c      	ldr	r3, [pc, #240]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a3b      	ldr	r2, [pc, #236]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8087 	beq.w	8001816 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001708:	4b36      	ldr	r3, [pc, #216]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d061      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d146      	bne.n	80017aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b33      	ldr	r3, [pc, #204]	@ (80017ec <HAL_RCC_OscConfig+0x4cc>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff f98b 	bl	8000a3c <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff f987 	bl	8000a3c <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e06d      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001750:	d108      	bne.n	8001764 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001752:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4921      	ldr	r1, [pc, #132]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a19      	ldr	r1, [r3, #32]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	430b      	orrs	r3, r1
 8001776:	491b      	ldr	r1, [pc, #108]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <HAL_RCC_OscConfig+0x4cc>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff f95b 	bl	8000a3c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff f957 	bl	8000a3c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e03d      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x46a>
 80017a8:	e035      	b.n	8001816 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <HAL_RCC_OscConfig+0x4cc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff f944 	bl	8000a3c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff f940 	bl	8000a3c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e026      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x498>
 80017d6:	e01e      	b.n	8001816 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e019      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40007000 	.word	0x40007000
 80017ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <HAL_RCC_OscConfig+0x500>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	429a      	cmp	r2, r3
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0d0      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b6a      	ldr	r3, [pc, #424]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d910      	bls.n	8001868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b67      	ldr	r3, [pc, #412]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0207 	bic.w	r2, r3, #7
 800184e:	4965      	ldr	r1, [pc, #404]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a58      	ldr	r2, [pc, #352]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800188a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a52      	ldr	r2, [pc, #328]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d040      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d115      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b41      	ldr	r3, [pc, #260]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e073      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3d      	ldr	r3, [pc, #244]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e06b      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b39      	ldr	r3, [pc, #228]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4936      	ldr	r1, [pc, #216]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff f892 	bl	8000a3c <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff f88e 	bl	8000a3c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e053      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d210      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0207 	bic.w	r2, r3, #7
 800195a:	4922      	ldr	r1, [pc, #136]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800199e:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	@ (80019ec <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <HAL_RCC_ClockConfig+0x1cc>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_RCC_ClockConfig+0x1d0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fff0 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	0800388c 	.word	0x0800388c
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b490      	push	{r4, r7}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019fe:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a00:	1d3c      	adds	r4, r7, #4
 8001a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a08:	f240 2301 	movw	r3, #513	@ 0x201
 8001a0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a22:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d002      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d003      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x46>
 8001a36:	e02b      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a3a:	623b      	str	r3, [r7, #32]
      break;
 8001a3c:	e02b      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3328      	adds	r3, #40	@ 0x28
 8001a48:	443b      	add	r3, r7
 8001a4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a5a:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	0c5b      	lsrs	r3, r3, #17
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	3328      	adds	r3, #40	@ 0x28
 8001a66:	443b      	add	r3, r7
 8001a68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4a0e      	ldr	r2, [pc, #56]	@ (8001aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a72:	fb03 f202 	mul.w	r2, r3, r2
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7e:	e004      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	623b      	str	r3, [r7, #32]
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a92:	623b      	str	r3, [r7, #32]
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	6a3b      	ldr	r3, [r7, #32]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc90      	pop	{r4, r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	0800387c 	.word	0x0800387c
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	007a1200 	.word	0x007a1200
 8001ab0:	003d0900 	.word	0x003d0900

08001ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001acc:	f7ff fff2 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	@ (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	0800389c 	.word	0x0800389c

08001af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0adb      	lsrs	r3, r3, #11
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4903      	ldr	r1, [pc, #12]	@ (8001b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	0800389c 	.word	0x0800389c

08001b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <RCC_Delay+0x34>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <RCC_Delay+0x38>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0a5b      	lsrs	r3, r3, #9
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b34:	bf00      	nop
  }
  while (Delay --);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	60fa      	str	r2, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <RCC_Delay+0x1c>
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	10624dd3 	.word	0x10624dd3

08001b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e041      	b.n	8001bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe fdee 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f000 fa7e 	bl	8002094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d001      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e044      	b.n	8001c96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <HAL_TIM_Base_Start_IT+0xac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d018      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x6c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x6c>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c40:	d00e      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x6c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x6c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a16      	ldr	r2, [pc, #88]	@ (8001cac <HAL_TIM_Base_Start_IT+0xb8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x6c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a15      	ldr	r2, [pc, #84]	@ (8001cb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d111      	bne.n	8001c84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d010      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c82:	e007      	b.n	8001c94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	40012c00 	.word	0x40012c00
 8001ca4:	40013400 	.word	0x40013400
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40000800 	.word	0x40000800
 8001cb0:	40000c00 	.word	0x40000c00

08001cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d122      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d11b      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0202 	mvn.w	r2, #2
 8001ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f9b1 	bl	800205e <HAL_TIM_IC_CaptureCallback>
 8001cfc:	e005      	b.n	8001d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f9a4 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f9b3 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d122      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d11b      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0204 	mvn.w	r2, #4
 8001d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f987 	bl	800205e <HAL_TIM_IC_CaptureCallback>
 8001d50:	e005      	b.n	8001d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f97a 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f989 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d122      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d11b      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0208 	mvn.w	r2, #8
 8001d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f95d 	bl	800205e <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f950 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f95f 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d122      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d11b      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0210 	mvn.w	r2, #16
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2208      	movs	r2, #8
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f933 	bl	800205e <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f926 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f935 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0201 	mvn.w	r2, #1
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe fbe6 	bl	8000604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e42:	2b80      	cmp	r3, #128	@ 0x80
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e50:	2b80      	cmp	r3, #128	@ 0x80
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fa9d 	bl	800239e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6e:	2b40      	cmp	r3, #64	@ 0x40
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7c:	2b40      	cmp	r3, #64	@ 0x40
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8f9 	bl	8002082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0220 	mvn.w	r2, #32
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fa68 	bl	800238c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_TIM_ConfigClockSource+0x18>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e0b3      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x180>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001efa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f14:	d03e      	beq.n	8001f94 <HAL_TIM_ConfigClockSource+0xd0>
 8001f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f1a:	f200 8087 	bhi.w	800202c <HAL_TIM_ConfigClockSource+0x168>
 8001f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f22:	f000 8085 	beq.w	8002030 <HAL_TIM_ConfigClockSource+0x16c>
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f2a:	d87f      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x168>
 8001f2c:	2b70      	cmp	r3, #112	@ 0x70
 8001f2e:	d01a      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0xa2>
 8001f30:	2b70      	cmp	r3, #112	@ 0x70
 8001f32:	d87b      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x168>
 8001f34:	2b60      	cmp	r3, #96	@ 0x60
 8001f36:	d050      	beq.n	8001fda <HAL_TIM_ConfigClockSource+0x116>
 8001f38:	2b60      	cmp	r3, #96	@ 0x60
 8001f3a:	d877      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x168>
 8001f3c:	2b50      	cmp	r3, #80	@ 0x50
 8001f3e:	d03c      	beq.n	8001fba <HAL_TIM_ConfigClockSource+0xf6>
 8001f40:	2b50      	cmp	r3, #80	@ 0x50
 8001f42:	d873      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x168>
 8001f44:	2b40      	cmp	r3, #64	@ 0x40
 8001f46:	d058      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x136>
 8001f48:	2b40      	cmp	r3, #64	@ 0x40
 8001f4a:	d86f      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x168>
 8001f4c:	2b30      	cmp	r3, #48	@ 0x30
 8001f4e:	d064      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x156>
 8001f50:	2b30      	cmp	r3, #48	@ 0x30
 8001f52:	d86b      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x168>
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d060      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x156>
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d867      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x168>
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d05c      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x156>
 8001f60:	2b10      	cmp	r3, #16
 8001f62:	d05a      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f64:	e062      	b.n	800202c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6899      	ldr	r1, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f000 f97e 	bl	8002276 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001f88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	609a      	str	r2, [r3, #8]
      break;
 8001f92:	e04e      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f000 f967 	bl	8002276 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fb6:	609a      	str	r2, [r3, #8]
      break;
 8001fb8:	e03b      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6859      	ldr	r1, [r3, #4]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f000 f8de 	bl	8002188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2150      	movs	r1, #80	@ 0x50
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f935 	bl	8002242 <TIM_ITRx_SetConfig>
      break;
 8001fd8:	e02b      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f000 f8fc 	bl	80021e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2160      	movs	r1, #96	@ 0x60
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f925 	bl	8002242 <TIM_ITRx_SetConfig>
      break;
 8001ff8:	e01b      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	461a      	mov	r2, r3
 8002008:	f000 f8be 	bl	8002188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2140      	movs	r1, #64	@ 0x40
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f915 	bl	8002242 <TIM_ITRx_SetConfig>
      break;
 8002018:	e00b      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f000 f90c 	bl	8002242 <TIM_ITRx_SetConfig>
        break;
 800202a:	e002      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800202c:	bf00      	nop
 800202e:	e000      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002030:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a33      	ldr	r2, [pc, #204]	@ (8002174 <TIM_Base_SetConfig+0xe0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a32      	ldr	r2, [pc, #200]	@ (8002178 <TIM_Base_SetConfig+0xe4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00f      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ba:	d00b      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a2f      	ldr	r2, [pc, #188]	@ (800217c <TIM_Base_SetConfig+0xe8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002180 <TIM_Base_SetConfig+0xec>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002184 <TIM_Base_SetConfig+0xf0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d108      	bne.n	80020e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a22      	ldr	r2, [pc, #136]	@ (8002174 <TIM_Base_SetConfig+0xe0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a21      	ldr	r2, [pc, #132]	@ (8002178 <TIM_Base_SetConfig+0xe4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00f      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fc:	d00b      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1e      	ldr	r2, [pc, #120]	@ (800217c <TIM_Base_SetConfig+0xe8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1d      	ldr	r2, [pc, #116]	@ (8002180 <TIM_Base_SetConfig+0xec>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0x82>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <TIM_Base_SetConfig+0xf0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800211c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <TIM_Base_SetConfig+0xe0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0xc8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a08      	ldr	r2, [pc, #32]	@ (8002178 <TIM_Base_SetConfig+0xe4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	615a      	str	r2, [r3, #20]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40013400 	.word	0x40013400
 800217c:	40000400 	.word	0x40000400
 8002180:	40000800 	.word	0x40000800
 8002184:	40000c00 	.word	0x40000c00

08002188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f023 0201 	bic.w	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f023 030a 	bic.w	r3, r3, #10
 80021c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	621a      	str	r2, [r3, #32]
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f023 0210 	bic.w	r2, r3, #16
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800220e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	031b      	lsls	r3, r3, #12
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002220:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	621a      	str	r2, [r3, #32]
}
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	f043 0307 	orr.w	r3, r3, #7
 8002264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	609a      	str	r2, [r3, #8]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002276:	b480      	push	{r7}
 8002278:	b087      	sub	sp, #28
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002290:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	021a      	lsls	r2, r3, #8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	431a      	orrs	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	4313      	orrs	r3, r2
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	609a      	str	r2, [r3, #8]
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e050      	b.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1b      	ldr	r2, [pc, #108]	@ (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d018      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a19      	ldr	r2, [pc, #100]	@ (800237c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002322:	d00e      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a15      	ldr	r2, [pc, #84]	@ (8002380 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10c      	bne.n	800235c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	4313      	orrs	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40013400 	.word	0x40013400
 8002380:	40000400 	.word	0x40000400
 8002384:	40000800 	.word	0x40000800
 8002388:	40000c00 	.word	0x40000c00

0800238c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e03f      	b.n	8002442 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fa18 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	@ 0x24
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fc8f 	bl	8002d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b08a      	sub	sp, #40	@ 0x28
 800244e:	af02      	add	r7, sp, #8
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b20      	cmp	r3, #32
 8002468:	d17c      	bne.n	8002564 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_UART_Transmit+0x2c>
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e075      	b.n	8002566 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_UART_Transmit+0x3e>
 8002484:	2302      	movs	r3, #2
 8002486:	e06e      	b.n	8002566 <HAL_UART_Transmit+0x11c>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2221      	movs	r2, #33	@ 0x21
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800249e:	f7fe facd 	bl	8000a3c <HAL_GetTick>
 80024a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	88fa      	ldrh	r2, [r7, #6]
 80024a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024b8:	d108      	bne.n	80024cc <HAL_UART_Transmit+0x82>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	e003      	b.n	80024d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80024dc:	e02a      	b.n	8002534 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa41 	bl	8002970 <UART_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e036      	b.n	8002566 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800250c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	3302      	adds	r3, #2
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	e007      	b.n	8002526 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	3301      	adds	r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1cf      	bne.n	80024de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	2140      	movs	r1, #64	@ 0x40
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fa11 	bl	8002970 <UART_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e006      	b.n	8002566 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e000      	b.n	8002566 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	4613      	mov	r3, r2
 800257a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b20      	cmp	r3, #32
 8002586:	d11d      	bne.n	80025c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_UART_Receive_IT+0x26>
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e016      	b.n	80025c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Receive_IT+0x38>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e00f      	b.n	80025c6 <HAL_UART_Receive_IT+0x58>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fa22 	bl	8002a04 <UART_Start_Receive_IT>
 80025c0:	4603      	mov	r3, r0
 80025c2:	e000      	b.n	80025c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	@ 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10d      	bne.n	8002622 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_UART_IRQHandler+0x52>
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fad2 	bl	8002bc4 <UART_Receive_IT>
      return;
 8002620:	e17b      	b.n	800291a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80b1 	beq.w	800278c <HAL_UART_IRQHandler+0x1bc>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <HAL_UART_IRQHandler+0x70>
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80a6 	beq.w	800278c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_UART_IRQHandler+0x90>
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_UART_IRQHandler+0xb0>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	f043 0202 	orr.w	r2, r3, #2
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_UART_IRQHandler+0xd0>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f043 0204 	orr.w	r2, r3, #4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00f      	beq.n	80026ca <HAL_UART_IRQHandler+0xfa>
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <HAL_UART_IRQHandler+0xee>
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f043 0208 	orr.w	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 811e 	beq.w	8002910 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_UART_IRQHandler+0x11e>
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fa6b 	bl	8002bc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf14      	ite	ne
 80026fc:	2301      	movne	r3, #1
 80026fe:	2300      	moveq	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <HAL_UART_IRQHandler+0x146>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d031      	beq.n	800277a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f9ad 	bl	8002a76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d023      	beq.n	8002772 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002738:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273e:	2b00      	cmp	r3, #0
 8002740:	d013      	beq.n	800276a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002746:	4a76      	ldr	r2, [pc, #472]	@ (8002920 <HAL_UART_IRQHandler+0x350>)
 8002748:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe faea 	bl	8000d28 <HAL_DMA_Abort_IT>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002764:	4610      	mov	r0, r2
 8002766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002768:	e00e      	b.n	8002788 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8ec 	bl	8002948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002770:	e00a      	b.n	8002788 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8e8 	bl	8002948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002778:	e006      	b.n	8002788 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8e4 	bl	8002948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8002786:	e0c3      	b.n	8002910 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002788:	bf00      	nop
    return;
 800278a:	e0c1      	b.n	8002910 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	2b01      	cmp	r3, #1
 8002792:	f040 80a1 	bne.w	80028d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 809b 	beq.w	80028d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8095 	beq.w	80028d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d04e      	beq.n	8002870 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80027dc:	8a3b      	ldrh	r3, [r7, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8098 	beq.w	8002914 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027e8:	8a3a      	ldrh	r2, [r7, #16]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	f080 8092 	bcs.w	8002914 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8a3a      	ldrh	r2, [r7, #16]
 80027f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d02b      	beq.n	8002858 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800280e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800282e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0210 	bic.w	r2, r2, #16
 800284c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fa2d 	bl	8000cb2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002860:	b29b      	uxth	r3, r3
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	b29b      	uxth	r3, r3
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f876 	bl	800295a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800286e:	e051      	b.n	8002914 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002878:	b29b      	uxth	r3, r3
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d047      	beq.n	8002918 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002888:	8a7b      	ldrh	r3, [r7, #18]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d044      	beq.n	8002918 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800289c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0210 	bic.w	r2, r2, #16
 80028ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028cc:	8a7b      	ldrh	r3, [r7, #18]
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f842 	bl	800295a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80028d6:	e01f      	b.n	8002918 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_UART_IRQHandler+0x324>
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f902 	bl	8002af6 <UART_Transmit_IT>
    return;
 80028f2:	e012      	b.n	800291a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00d      	beq.n	800291a <HAL_UART_IRQHandler+0x34a>
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f943 	bl	8002b94 <UART_EndTransmit_IT>
    return;
 800290e:	e004      	b.n	800291a <HAL_UART_IRQHandler+0x34a>
    return;
 8002910:	bf00      	nop
 8002912:	e002      	b.n	800291a <HAL_UART_IRQHandler+0x34a>
      return;
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <HAL_UART_IRQHandler+0x34a>
      return;
 8002918:	bf00      	nop
  }
}
 800291a:	3728      	adds	r7, #40	@ 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	08002acf 	.word	0x08002acf

08002924 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002980:	e02c      	b.n	80029dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002988:	d028      	beq.n	80029dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002990:	f7fe f854 	bl	8000a3c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	429a      	cmp	r2, r3
 800299e:	d21d      	bcs.n	80029dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80029ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e00f      	b.n	80029fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d0c3      	beq.n	8002982 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2222      	movs	r2, #34	@ 0x22
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a48:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0220 	orr.w	r2, r2, #32
 8002a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8002a8c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0210 	bic.w	r2, r2, #16
 8002ab4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff2d 	bl	8002948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b21      	cmp	r3, #33	@ 0x21
 8002b08:	d13e      	bne.n	8002b88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b12:	d114      	bne.n	8002b3e <UART_Transmit_IT+0x48>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	1c9a      	adds	r2, r3, #2
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	621a      	str	r2, [r3, #32]
 8002b3c:	e008      	b.n	8002b50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6211      	str	r1, [r2, #32]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10f      	bne.n	8002b84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002baa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff feb5 	bl	8002924 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b22      	cmp	r3, #34	@ 0x22
 8002bd6:	f040 8099 	bne.w	8002d0c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be2:	d117      	bne.n	8002c14 <UART_Receive_IT+0x50>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d113      	bne.n	8002c14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0c:	1c9a      	adds	r2, r3, #2
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c12:	e026      	b.n	8002c62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c26:	d007      	beq.n	8002c38 <UART_Receive_IT+0x74>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <UART_Receive_IT+0x82>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e008      	b.n	8002c58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d148      	bne.n	8002d08 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0220 	bic.w	r2, r2, #32
 8002c84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d123      	bne.n	8002cfe <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0210 	bic.w	r2, r2, #16
 8002cca:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d10a      	bne.n	8002cf0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff fe2f 	bl	800295a <HAL_UARTEx_RxEventCallback>
 8002cfc:	e002      	b.n	8002d04 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff fe19 	bl	8002936 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e002      	b.n	8002d0e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d52:	f023 030c 	bic.w	r3, r3, #12
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8002e2c <UART_SetConfig+0x114>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d80:	f7fe feb6 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	e002      	b.n	8002d8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d88:	f7fe fe9e 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8002d8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009a      	lsls	r2, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	4a22      	ldr	r2, [pc, #136]	@ (8002e30 <UART_SetConfig+0x118>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	0119      	lsls	r1, r3, #4
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	009a      	lsls	r2, r3, #2
 8002db8:	441a      	add	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <UART_SetConfig+0x118>)
 8002dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2064      	movs	r0, #100	@ 0x64
 8002dce:	fb00 f303 	mul.w	r3, r0, r3
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	3332      	adds	r3, #50	@ 0x32
 8002dd8:	4a15      	ldr	r2, [pc, #84]	@ (8002e30 <UART_SetConfig+0x118>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de4:	4419      	add	r1, r3
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009a      	lsls	r2, r3, #2
 8002df0:	441a      	add	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <UART_SetConfig+0x118>)
 8002dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2064      	movs	r0, #100	@ 0x64
 8002e06:	fb00 f303 	mul.w	r3, r0, r3
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	3332      	adds	r3, #50	@ 0x32
 8002e10:	4a07      	ldr	r2, [pc, #28]	@ (8002e30 <UART_SetConfig+0x118>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	440a      	add	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40013800 	.word	0x40013800
 8002e30:	51eb851f 	.word	0x51eb851f

08002e34 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e016      	b.n	8002e74 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd fd54 	bl	80008f4 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e58:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	ea42 0103 	orr.w	r1, r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	68d2      	ldr	r2, [r2, #12]
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d107      	bne.n	8002ed0 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0201 	mvn.w	r2, #1
 8002ec8:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f804 	bl	8002ed8 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
	...

08002eec <siprintf>:
 8002eec:	b40e      	push	{r1, r2, r3}
 8002eee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ef2:	b500      	push	{lr}
 8002ef4:	b09c      	sub	sp, #112	@ 0x70
 8002ef6:	ab1d      	add	r3, sp, #116	@ 0x74
 8002ef8:	9002      	str	r0, [sp, #8]
 8002efa:	9006      	str	r0, [sp, #24]
 8002efc:	9107      	str	r1, [sp, #28]
 8002efe:	9104      	str	r1, [sp, #16]
 8002f00:	4808      	ldr	r0, [pc, #32]	@ (8002f24 <siprintf+0x38>)
 8002f02:	4909      	ldr	r1, [pc, #36]	@ (8002f28 <siprintf+0x3c>)
 8002f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f08:	9105      	str	r1, [sp, #20]
 8002f0a:	6800      	ldr	r0, [r0, #0]
 8002f0c:	a902      	add	r1, sp, #8
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	f000 f89c 	bl	800304c <_svfiprintf_r>
 8002f14:	2200      	movs	r2, #0
 8002f16:	9b02      	ldr	r3, [sp, #8]
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	b01c      	add	sp, #112	@ 0x70
 8002f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f20:	b003      	add	sp, #12
 8002f22:	4770      	bx	lr
 8002f24:	2000000c 	.word	0x2000000c
 8002f28:	ffff0208 	.word	0xffff0208

08002f2c <memset>:
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4402      	add	r2, r0
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d100      	bne.n	8002f36 <memset+0xa>
 8002f34:	4770      	bx	lr
 8002f36:	f803 1b01 	strb.w	r1, [r3], #1
 8002f3a:	e7f9      	b.n	8002f30 <memset+0x4>

08002f3c <__errno>:
 8002f3c:	4b01      	ldr	r3, [pc, #4]	@ (8002f44 <__errno+0x8>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	4d0c      	ldr	r5, [pc, #48]	@ (8002f80 <__libc_init_array+0x38>)
 8002f4e:	4c0d      	ldr	r4, [pc, #52]	@ (8002f84 <__libc_init_array+0x3c>)
 8002f50:	1b64      	subs	r4, r4, r5
 8002f52:	10a4      	asrs	r4, r4, #2
 8002f54:	42a6      	cmp	r6, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	f000 fc78 	bl	800384c <_init>
 8002f5c:	2600      	movs	r6, #0
 8002f5e:	4d0a      	ldr	r5, [pc, #40]	@ (8002f88 <__libc_init_array+0x40>)
 8002f60:	4c0a      	ldr	r4, [pc, #40]	@ (8002f8c <__libc_init_array+0x44>)
 8002f62:	1b64      	subs	r4, r4, r5
 8002f64:	10a4      	asrs	r4, r4, #2
 8002f66:	42a6      	cmp	r6, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f70:	4798      	blx	r3
 8002f72:	3601      	adds	r6, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7a:	4798      	blx	r3
 8002f7c:	3601      	adds	r6, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	080038e0 	.word	0x080038e0
 8002f84:	080038e0 	.word	0x080038e0
 8002f88:	080038e0 	.word	0x080038e0
 8002f8c:	080038e4 	.word	0x080038e4

08002f90 <__retarget_lock_acquire_recursive>:
 8002f90:	4770      	bx	lr

08002f92 <__retarget_lock_release_recursive>:
 8002f92:	4770      	bx	lr

08002f94 <__ssputs_r>:
 8002f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f98:	461f      	mov	r7, r3
 8002f9a:	688e      	ldr	r6, [r1, #8]
 8002f9c:	4682      	mov	sl, r0
 8002f9e:	42be      	cmp	r6, r7
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	4690      	mov	r8, r2
 8002fa4:	680b      	ldr	r3, [r1, #0]
 8002fa6:	d82d      	bhi.n	8003004 <__ssputs_r+0x70>
 8002fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002fb0:	d026      	beq.n	8003000 <__ssputs_r+0x6c>
 8002fb2:	6965      	ldr	r5, [r4, #20]
 8002fb4:	6909      	ldr	r1, [r1, #16]
 8002fb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fba:	eba3 0901 	sub.w	r9, r3, r1
 8002fbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fc2:	1c7b      	adds	r3, r7, #1
 8002fc4:	444b      	add	r3, r9
 8002fc6:	106d      	asrs	r5, r5, #1
 8002fc8:	429d      	cmp	r5, r3
 8002fca:	bf38      	it	cc
 8002fcc:	461d      	movcc	r5, r3
 8002fce:	0553      	lsls	r3, r2, #21
 8002fd0:	d527      	bpl.n	8003022 <__ssputs_r+0x8e>
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	f000 f958 	bl	8003288 <_malloc_r>
 8002fd8:	4606      	mov	r6, r0
 8002fda:	b360      	cbz	r0, 8003036 <__ssputs_r+0xa2>
 8002fdc:	464a      	mov	r2, r9
 8002fde:	6921      	ldr	r1, [r4, #16]
 8002fe0:	f000 fbd6 	bl	8003790 <memcpy>
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fee:	81a3      	strh	r3, [r4, #12]
 8002ff0:	6126      	str	r6, [r4, #16]
 8002ff2:	444e      	add	r6, r9
 8002ff4:	6026      	str	r6, [r4, #0]
 8002ff6:	463e      	mov	r6, r7
 8002ff8:	6165      	str	r5, [r4, #20]
 8002ffa:	eba5 0509 	sub.w	r5, r5, r9
 8002ffe:	60a5      	str	r5, [r4, #8]
 8003000:	42be      	cmp	r6, r7
 8003002:	d900      	bls.n	8003006 <__ssputs_r+0x72>
 8003004:	463e      	mov	r6, r7
 8003006:	4632      	mov	r2, r6
 8003008:	4641      	mov	r1, r8
 800300a:	6820      	ldr	r0, [r4, #0]
 800300c:	f000 fb88 	bl	8003720 <memmove>
 8003010:	2000      	movs	r0, #0
 8003012:	68a3      	ldr	r3, [r4, #8]
 8003014:	1b9b      	subs	r3, r3, r6
 8003016:	60a3      	str	r3, [r4, #8]
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	4433      	add	r3, r6
 800301c:	6023      	str	r3, [r4, #0]
 800301e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003022:	462a      	mov	r2, r5
 8003024:	f000 fb4e 	bl	80036c4 <_realloc_r>
 8003028:	4606      	mov	r6, r0
 800302a:	2800      	cmp	r0, #0
 800302c:	d1e0      	bne.n	8002ff0 <__ssputs_r+0x5c>
 800302e:	4650      	mov	r0, sl
 8003030:	6921      	ldr	r1, [r4, #16]
 8003032:	f000 fbbb 	bl	80037ac <_free_r>
 8003036:	230c      	movs	r3, #12
 8003038:	f8ca 3000 	str.w	r3, [sl]
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003046:	81a3      	strh	r3, [r4, #12]
 8003048:	e7e9      	b.n	800301e <__ssputs_r+0x8a>
	...

0800304c <_svfiprintf_r>:
 800304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003050:	4698      	mov	r8, r3
 8003052:	898b      	ldrh	r3, [r1, #12]
 8003054:	4607      	mov	r7, r0
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	460d      	mov	r5, r1
 800305a:	4614      	mov	r4, r2
 800305c:	b09d      	sub	sp, #116	@ 0x74
 800305e:	d510      	bpl.n	8003082 <_svfiprintf_r+0x36>
 8003060:	690b      	ldr	r3, [r1, #16]
 8003062:	b973      	cbnz	r3, 8003082 <_svfiprintf_r+0x36>
 8003064:	2140      	movs	r1, #64	@ 0x40
 8003066:	f000 f90f 	bl	8003288 <_malloc_r>
 800306a:	6028      	str	r0, [r5, #0]
 800306c:	6128      	str	r0, [r5, #16]
 800306e:	b930      	cbnz	r0, 800307e <_svfiprintf_r+0x32>
 8003070:	230c      	movs	r3, #12
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003078:	b01d      	add	sp, #116	@ 0x74
 800307a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800307e:	2340      	movs	r3, #64	@ 0x40
 8003080:	616b      	str	r3, [r5, #20]
 8003082:	2300      	movs	r3, #0
 8003084:	9309      	str	r3, [sp, #36]	@ 0x24
 8003086:	2320      	movs	r3, #32
 8003088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800308c:	2330      	movs	r3, #48	@ 0x30
 800308e:	f04f 0901 	mov.w	r9, #1
 8003092:	f8cd 800c 	str.w	r8, [sp, #12]
 8003096:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003230 <_svfiprintf_r+0x1e4>
 800309a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800309e:	4623      	mov	r3, r4
 80030a0:	469a      	mov	sl, r3
 80030a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030a6:	b10a      	cbz	r2, 80030ac <_svfiprintf_r+0x60>
 80030a8:	2a25      	cmp	r2, #37	@ 0x25
 80030aa:	d1f9      	bne.n	80030a0 <_svfiprintf_r+0x54>
 80030ac:	ebba 0b04 	subs.w	fp, sl, r4
 80030b0:	d00b      	beq.n	80030ca <_svfiprintf_r+0x7e>
 80030b2:	465b      	mov	r3, fp
 80030b4:	4622      	mov	r2, r4
 80030b6:	4629      	mov	r1, r5
 80030b8:	4638      	mov	r0, r7
 80030ba:	f7ff ff6b 	bl	8002f94 <__ssputs_r>
 80030be:	3001      	adds	r0, #1
 80030c0:	f000 80a7 	beq.w	8003212 <_svfiprintf_r+0x1c6>
 80030c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80030c6:	445a      	add	r2, fp
 80030c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80030ca:	f89a 3000 	ldrb.w	r3, [sl]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 809f 	beq.w	8003212 <_svfiprintf_r+0x1c6>
 80030d4:	2300      	movs	r3, #0
 80030d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030de:	f10a 0a01 	add.w	sl, sl, #1
 80030e2:	9304      	str	r3, [sp, #16]
 80030e4:	9307      	str	r3, [sp, #28]
 80030e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80030ec:	4654      	mov	r4, sl
 80030ee:	2205      	movs	r2, #5
 80030f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f4:	484e      	ldr	r0, [pc, #312]	@ (8003230 <_svfiprintf_r+0x1e4>)
 80030f6:	f000 fb3d 	bl	8003774 <memchr>
 80030fa:	9a04      	ldr	r2, [sp, #16]
 80030fc:	b9d8      	cbnz	r0, 8003136 <_svfiprintf_r+0xea>
 80030fe:	06d0      	lsls	r0, r2, #27
 8003100:	bf44      	itt	mi
 8003102:	2320      	movmi	r3, #32
 8003104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003108:	0711      	lsls	r1, r2, #28
 800310a:	bf44      	itt	mi
 800310c:	232b      	movmi	r3, #43	@ 0x2b
 800310e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003112:	f89a 3000 	ldrb.w	r3, [sl]
 8003116:	2b2a      	cmp	r3, #42	@ 0x2a
 8003118:	d015      	beq.n	8003146 <_svfiprintf_r+0xfa>
 800311a:	4654      	mov	r4, sl
 800311c:	2000      	movs	r0, #0
 800311e:	f04f 0c0a 	mov.w	ip, #10
 8003122:	9a07      	ldr	r2, [sp, #28]
 8003124:	4621      	mov	r1, r4
 8003126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800312a:	3b30      	subs	r3, #48	@ 0x30
 800312c:	2b09      	cmp	r3, #9
 800312e:	d94b      	bls.n	80031c8 <_svfiprintf_r+0x17c>
 8003130:	b1b0      	cbz	r0, 8003160 <_svfiprintf_r+0x114>
 8003132:	9207      	str	r2, [sp, #28]
 8003134:	e014      	b.n	8003160 <_svfiprintf_r+0x114>
 8003136:	eba0 0308 	sub.w	r3, r0, r8
 800313a:	fa09 f303 	lsl.w	r3, r9, r3
 800313e:	4313      	orrs	r3, r2
 8003140:	46a2      	mov	sl, r4
 8003142:	9304      	str	r3, [sp, #16]
 8003144:	e7d2      	b.n	80030ec <_svfiprintf_r+0xa0>
 8003146:	9b03      	ldr	r3, [sp, #12]
 8003148:	1d19      	adds	r1, r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	9103      	str	r1, [sp, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	bfbb      	ittet	lt
 8003152:	425b      	neglt	r3, r3
 8003154:	f042 0202 	orrlt.w	r2, r2, #2
 8003158:	9307      	strge	r3, [sp, #28]
 800315a:	9307      	strlt	r3, [sp, #28]
 800315c:	bfb8      	it	lt
 800315e:	9204      	strlt	r2, [sp, #16]
 8003160:	7823      	ldrb	r3, [r4, #0]
 8003162:	2b2e      	cmp	r3, #46	@ 0x2e
 8003164:	d10a      	bne.n	800317c <_svfiprintf_r+0x130>
 8003166:	7863      	ldrb	r3, [r4, #1]
 8003168:	2b2a      	cmp	r3, #42	@ 0x2a
 800316a:	d132      	bne.n	80031d2 <_svfiprintf_r+0x186>
 800316c:	9b03      	ldr	r3, [sp, #12]
 800316e:	3402      	adds	r4, #2
 8003170:	1d1a      	adds	r2, r3, #4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	9203      	str	r2, [sp, #12]
 8003176:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800317a:	9305      	str	r3, [sp, #20]
 800317c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003234 <_svfiprintf_r+0x1e8>
 8003180:	2203      	movs	r2, #3
 8003182:	4650      	mov	r0, sl
 8003184:	7821      	ldrb	r1, [r4, #0]
 8003186:	f000 faf5 	bl	8003774 <memchr>
 800318a:	b138      	cbz	r0, 800319c <_svfiprintf_r+0x150>
 800318c:	2240      	movs	r2, #64	@ 0x40
 800318e:	9b04      	ldr	r3, [sp, #16]
 8003190:	eba0 000a 	sub.w	r0, r0, sl
 8003194:	4082      	lsls	r2, r0
 8003196:	4313      	orrs	r3, r2
 8003198:	3401      	adds	r4, #1
 800319a:	9304      	str	r3, [sp, #16]
 800319c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a0:	2206      	movs	r2, #6
 80031a2:	4825      	ldr	r0, [pc, #148]	@ (8003238 <_svfiprintf_r+0x1ec>)
 80031a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80031a8:	f000 fae4 	bl	8003774 <memchr>
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d036      	beq.n	800321e <_svfiprintf_r+0x1d2>
 80031b0:	4b22      	ldr	r3, [pc, #136]	@ (800323c <_svfiprintf_r+0x1f0>)
 80031b2:	bb1b      	cbnz	r3, 80031fc <_svfiprintf_r+0x1b0>
 80031b4:	9b03      	ldr	r3, [sp, #12]
 80031b6:	3307      	adds	r3, #7
 80031b8:	f023 0307 	bic.w	r3, r3, #7
 80031bc:	3308      	adds	r3, #8
 80031be:	9303      	str	r3, [sp, #12]
 80031c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031c2:	4433      	add	r3, r6
 80031c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80031c6:	e76a      	b.n	800309e <_svfiprintf_r+0x52>
 80031c8:	460c      	mov	r4, r1
 80031ca:	2001      	movs	r0, #1
 80031cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80031d0:	e7a8      	b.n	8003124 <_svfiprintf_r+0xd8>
 80031d2:	2300      	movs	r3, #0
 80031d4:	f04f 0c0a 	mov.w	ip, #10
 80031d8:	4619      	mov	r1, r3
 80031da:	3401      	adds	r4, #1
 80031dc:	9305      	str	r3, [sp, #20]
 80031de:	4620      	mov	r0, r4
 80031e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031e4:	3a30      	subs	r2, #48	@ 0x30
 80031e6:	2a09      	cmp	r2, #9
 80031e8:	d903      	bls.n	80031f2 <_svfiprintf_r+0x1a6>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0c6      	beq.n	800317c <_svfiprintf_r+0x130>
 80031ee:	9105      	str	r1, [sp, #20]
 80031f0:	e7c4      	b.n	800317c <_svfiprintf_r+0x130>
 80031f2:	4604      	mov	r4, r0
 80031f4:	2301      	movs	r3, #1
 80031f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80031fa:	e7f0      	b.n	80031de <_svfiprintf_r+0x192>
 80031fc:	ab03      	add	r3, sp, #12
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	462a      	mov	r2, r5
 8003202:	4638      	mov	r0, r7
 8003204:	4b0e      	ldr	r3, [pc, #56]	@ (8003240 <_svfiprintf_r+0x1f4>)
 8003206:	a904      	add	r1, sp, #16
 8003208:	f3af 8000 	nop.w
 800320c:	1c42      	adds	r2, r0, #1
 800320e:	4606      	mov	r6, r0
 8003210:	d1d6      	bne.n	80031c0 <_svfiprintf_r+0x174>
 8003212:	89ab      	ldrh	r3, [r5, #12]
 8003214:	065b      	lsls	r3, r3, #25
 8003216:	f53f af2d 	bmi.w	8003074 <_svfiprintf_r+0x28>
 800321a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800321c:	e72c      	b.n	8003078 <_svfiprintf_r+0x2c>
 800321e:	ab03      	add	r3, sp, #12
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	462a      	mov	r2, r5
 8003224:	4638      	mov	r0, r7
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <_svfiprintf_r+0x1f4>)
 8003228:	a904      	add	r1, sp, #16
 800322a:	f000 f91f 	bl	800346c <_printf_i>
 800322e:	e7ed      	b.n	800320c <_svfiprintf_r+0x1c0>
 8003230:	080038a4 	.word	0x080038a4
 8003234:	080038aa 	.word	0x080038aa
 8003238:	080038ae 	.word	0x080038ae
 800323c:	00000000 	.word	0x00000000
 8003240:	08002f95 	.word	0x08002f95

08003244 <sbrk_aligned>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4e0f      	ldr	r6, [pc, #60]	@ (8003284 <sbrk_aligned+0x40>)
 8003248:	460c      	mov	r4, r1
 800324a:	6831      	ldr	r1, [r6, #0]
 800324c:	4605      	mov	r5, r0
 800324e:	b911      	cbnz	r1, 8003256 <sbrk_aligned+0x12>
 8003250:	f000 fa80 	bl	8003754 <_sbrk_r>
 8003254:	6030      	str	r0, [r6, #0]
 8003256:	4621      	mov	r1, r4
 8003258:	4628      	mov	r0, r5
 800325a:	f000 fa7b 	bl	8003754 <_sbrk_r>
 800325e:	1c43      	adds	r3, r0, #1
 8003260:	d103      	bne.n	800326a <sbrk_aligned+0x26>
 8003262:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003266:	4620      	mov	r0, r4
 8003268:	bd70      	pop	{r4, r5, r6, pc}
 800326a:	1cc4      	adds	r4, r0, #3
 800326c:	f024 0403 	bic.w	r4, r4, #3
 8003270:	42a0      	cmp	r0, r4
 8003272:	d0f8      	beq.n	8003266 <sbrk_aligned+0x22>
 8003274:	1a21      	subs	r1, r4, r0
 8003276:	4628      	mov	r0, r5
 8003278:	f000 fa6c 	bl	8003754 <_sbrk_r>
 800327c:	3001      	adds	r0, #1
 800327e:	d1f2      	bne.n	8003266 <sbrk_aligned+0x22>
 8003280:	e7ef      	b.n	8003262 <sbrk_aligned+0x1e>
 8003282:	bf00      	nop
 8003284:	20000274 	.word	0x20000274

08003288 <_malloc_r>:
 8003288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800328c:	1ccd      	adds	r5, r1, #3
 800328e:	f025 0503 	bic.w	r5, r5, #3
 8003292:	3508      	adds	r5, #8
 8003294:	2d0c      	cmp	r5, #12
 8003296:	bf38      	it	cc
 8003298:	250c      	movcc	r5, #12
 800329a:	2d00      	cmp	r5, #0
 800329c:	4606      	mov	r6, r0
 800329e:	db01      	blt.n	80032a4 <_malloc_r+0x1c>
 80032a0:	42a9      	cmp	r1, r5
 80032a2:	d904      	bls.n	80032ae <_malloc_r+0x26>
 80032a4:	230c      	movs	r3, #12
 80032a6:	6033      	str	r3, [r6, #0]
 80032a8:	2000      	movs	r0, #0
 80032aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003384 <_malloc_r+0xfc>
 80032b2:	f000 f9fb 	bl	80036ac <__malloc_lock>
 80032b6:	f8d8 3000 	ldr.w	r3, [r8]
 80032ba:	461c      	mov	r4, r3
 80032bc:	bb44      	cbnz	r4, 8003310 <_malloc_r+0x88>
 80032be:	4629      	mov	r1, r5
 80032c0:	4630      	mov	r0, r6
 80032c2:	f7ff ffbf 	bl	8003244 <sbrk_aligned>
 80032c6:	1c43      	adds	r3, r0, #1
 80032c8:	4604      	mov	r4, r0
 80032ca:	d158      	bne.n	800337e <_malloc_r+0xf6>
 80032cc:	f8d8 4000 	ldr.w	r4, [r8]
 80032d0:	4627      	mov	r7, r4
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d143      	bne.n	800335e <_malloc_r+0xd6>
 80032d6:	2c00      	cmp	r4, #0
 80032d8:	d04b      	beq.n	8003372 <_malloc_r+0xea>
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	4639      	mov	r1, r7
 80032de:	4630      	mov	r0, r6
 80032e0:	eb04 0903 	add.w	r9, r4, r3
 80032e4:	f000 fa36 	bl	8003754 <_sbrk_r>
 80032e8:	4581      	cmp	r9, r0
 80032ea:	d142      	bne.n	8003372 <_malloc_r+0xea>
 80032ec:	6821      	ldr	r1, [r4, #0]
 80032ee:	4630      	mov	r0, r6
 80032f0:	1a6d      	subs	r5, r5, r1
 80032f2:	4629      	mov	r1, r5
 80032f4:	f7ff ffa6 	bl	8003244 <sbrk_aligned>
 80032f8:	3001      	adds	r0, #1
 80032fa:	d03a      	beq.n	8003372 <_malloc_r+0xea>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	442b      	add	r3, r5
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	f8d8 3000 	ldr.w	r3, [r8]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	bb62      	cbnz	r2, 8003364 <_malloc_r+0xdc>
 800330a:	f8c8 7000 	str.w	r7, [r8]
 800330e:	e00f      	b.n	8003330 <_malloc_r+0xa8>
 8003310:	6822      	ldr	r2, [r4, #0]
 8003312:	1b52      	subs	r2, r2, r5
 8003314:	d420      	bmi.n	8003358 <_malloc_r+0xd0>
 8003316:	2a0b      	cmp	r2, #11
 8003318:	d917      	bls.n	800334a <_malloc_r+0xc2>
 800331a:	1961      	adds	r1, r4, r5
 800331c:	42a3      	cmp	r3, r4
 800331e:	6025      	str	r5, [r4, #0]
 8003320:	bf18      	it	ne
 8003322:	6059      	strne	r1, [r3, #4]
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	bf08      	it	eq
 8003328:	f8c8 1000 	streq.w	r1, [r8]
 800332c:	5162      	str	r2, [r4, r5]
 800332e:	604b      	str	r3, [r1, #4]
 8003330:	4630      	mov	r0, r6
 8003332:	f000 f9c1 	bl	80036b8 <__malloc_unlock>
 8003336:	f104 000b 	add.w	r0, r4, #11
 800333a:	1d23      	adds	r3, r4, #4
 800333c:	f020 0007 	bic.w	r0, r0, #7
 8003340:	1ac2      	subs	r2, r0, r3
 8003342:	bf1c      	itt	ne
 8003344:	1a1b      	subne	r3, r3, r0
 8003346:	50a3      	strne	r3, [r4, r2]
 8003348:	e7af      	b.n	80032aa <_malloc_r+0x22>
 800334a:	6862      	ldr	r2, [r4, #4]
 800334c:	42a3      	cmp	r3, r4
 800334e:	bf0c      	ite	eq
 8003350:	f8c8 2000 	streq.w	r2, [r8]
 8003354:	605a      	strne	r2, [r3, #4]
 8003356:	e7eb      	b.n	8003330 <_malloc_r+0xa8>
 8003358:	4623      	mov	r3, r4
 800335a:	6864      	ldr	r4, [r4, #4]
 800335c:	e7ae      	b.n	80032bc <_malloc_r+0x34>
 800335e:	463c      	mov	r4, r7
 8003360:	687f      	ldr	r7, [r7, #4]
 8003362:	e7b6      	b.n	80032d2 <_malloc_r+0x4a>
 8003364:	461a      	mov	r2, r3
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	42a3      	cmp	r3, r4
 800336a:	d1fb      	bne.n	8003364 <_malloc_r+0xdc>
 800336c:	2300      	movs	r3, #0
 800336e:	6053      	str	r3, [r2, #4]
 8003370:	e7de      	b.n	8003330 <_malloc_r+0xa8>
 8003372:	230c      	movs	r3, #12
 8003374:	4630      	mov	r0, r6
 8003376:	6033      	str	r3, [r6, #0]
 8003378:	f000 f99e 	bl	80036b8 <__malloc_unlock>
 800337c:	e794      	b.n	80032a8 <_malloc_r+0x20>
 800337e:	6005      	str	r5, [r0, #0]
 8003380:	e7d6      	b.n	8003330 <_malloc_r+0xa8>
 8003382:	bf00      	nop
 8003384:	20000278 	.word	0x20000278

08003388 <_printf_common>:
 8003388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800338c:	4616      	mov	r6, r2
 800338e:	4698      	mov	r8, r3
 8003390:	688a      	ldr	r2, [r1, #8]
 8003392:	690b      	ldr	r3, [r1, #16]
 8003394:	4607      	mov	r7, r0
 8003396:	4293      	cmp	r3, r2
 8003398:	bfb8      	it	lt
 800339a:	4613      	movlt	r3, r2
 800339c:	6033      	str	r3, [r6, #0]
 800339e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033a2:	460c      	mov	r4, r1
 80033a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033a8:	b10a      	cbz	r2, 80033ae <_printf_common+0x26>
 80033aa:	3301      	adds	r3, #1
 80033ac:	6033      	str	r3, [r6, #0]
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	0699      	lsls	r1, r3, #26
 80033b2:	bf42      	ittt	mi
 80033b4:	6833      	ldrmi	r3, [r6, #0]
 80033b6:	3302      	addmi	r3, #2
 80033b8:	6033      	strmi	r3, [r6, #0]
 80033ba:	6825      	ldr	r5, [r4, #0]
 80033bc:	f015 0506 	ands.w	r5, r5, #6
 80033c0:	d106      	bne.n	80033d0 <_printf_common+0x48>
 80033c2:	f104 0a19 	add.w	sl, r4, #25
 80033c6:	68e3      	ldr	r3, [r4, #12]
 80033c8:	6832      	ldr	r2, [r6, #0]
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	42ab      	cmp	r3, r5
 80033ce:	dc2b      	bgt.n	8003428 <_printf_common+0xa0>
 80033d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	3b00      	subs	r3, #0
 80033d8:	bf18      	it	ne
 80033da:	2301      	movne	r3, #1
 80033dc:	0692      	lsls	r2, r2, #26
 80033de:	d430      	bmi.n	8003442 <_printf_common+0xba>
 80033e0:	4641      	mov	r1, r8
 80033e2:	4638      	mov	r0, r7
 80033e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033e8:	47c8      	blx	r9
 80033ea:	3001      	adds	r0, #1
 80033ec:	d023      	beq.n	8003436 <_printf_common+0xae>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	6922      	ldr	r2, [r4, #16]
 80033f2:	f003 0306 	and.w	r3, r3, #6
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf14      	ite	ne
 80033fa:	2500      	movne	r5, #0
 80033fc:	6833      	ldreq	r3, [r6, #0]
 80033fe:	f04f 0600 	mov.w	r6, #0
 8003402:	bf08      	it	eq
 8003404:	68e5      	ldreq	r5, [r4, #12]
 8003406:	f104 041a 	add.w	r4, r4, #26
 800340a:	bf08      	it	eq
 800340c:	1aed      	subeq	r5, r5, r3
 800340e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003412:	bf08      	it	eq
 8003414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003418:	4293      	cmp	r3, r2
 800341a:	bfc4      	itt	gt
 800341c:	1a9b      	subgt	r3, r3, r2
 800341e:	18ed      	addgt	r5, r5, r3
 8003420:	42b5      	cmp	r5, r6
 8003422:	d11a      	bne.n	800345a <_printf_common+0xd2>
 8003424:	2000      	movs	r0, #0
 8003426:	e008      	b.n	800343a <_printf_common+0xb2>
 8003428:	2301      	movs	r3, #1
 800342a:	4652      	mov	r2, sl
 800342c:	4641      	mov	r1, r8
 800342e:	4638      	mov	r0, r7
 8003430:	47c8      	blx	r9
 8003432:	3001      	adds	r0, #1
 8003434:	d103      	bne.n	800343e <_printf_common+0xb6>
 8003436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800343a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343e:	3501      	adds	r5, #1
 8003440:	e7c1      	b.n	80033c6 <_printf_common+0x3e>
 8003442:	2030      	movs	r0, #48	@ 0x30
 8003444:	18e1      	adds	r1, r4, r3
 8003446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003450:	4422      	add	r2, r4
 8003452:	3302      	adds	r3, #2
 8003454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003458:	e7c2      	b.n	80033e0 <_printf_common+0x58>
 800345a:	2301      	movs	r3, #1
 800345c:	4622      	mov	r2, r4
 800345e:	4641      	mov	r1, r8
 8003460:	4638      	mov	r0, r7
 8003462:	47c8      	blx	r9
 8003464:	3001      	adds	r0, #1
 8003466:	d0e6      	beq.n	8003436 <_printf_common+0xae>
 8003468:	3601      	adds	r6, #1
 800346a:	e7d9      	b.n	8003420 <_printf_common+0x98>

0800346c <_printf_i>:
 800346c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003470:	7e0f      	ldrb	r7, [r1, #24]
 8003472:	4691      	mov	r9, r2
 8003474:	2f78      	cmp	r7, #120	@ 0x78
 8003476:	4680      	mov	r8, r0
 8003478:	460c      	mov	r4, r1
 800347a:	469a      	mov	sl, r3
 800347c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800347e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003482:	d807      	bhi.n	8003494 <_printf_i+0x28>
 8003484:	2f62      	cmp	r7, #98	@ 0x62
 8003486:	d80a      	bhi.n	800349e <_printf_i+0x32>
 8003488:	2f00      	cmp	r7, #0
 800348a:	f000 80d3 	beq.w	8003634 <_printf_i+0x1c8>
 800348e:	2f58      	cmp	r7, #88	@ 0x58
 8003490:	f000 80ba 	beq.w	8003608 <_printf_i+0x19c>
 8003494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800349c:	e03a      	b.n	8003514 <_printf_i+0xa8>
 800349e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034a2:	2b15      	cmp	r3, #21
 80034a4:	d8f6      	bhi.n	8003494 <_printf_i+0x28>
 80034a6:	a101      	add	r1, pc, #4	@ (adr r1, 80034ac <_printf_i+0x40>)
 80034a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034ac:	08003505 	.word	0x08003505
 80034b0:	08003519 	.word	0x08003519
 80034b4:	08003495 	.word	0x08003495
 80034b8:	08003495 	.word	0x08003495
 80034bc:	08003495 	.word	0x08003495
 80034c0:	08003495 	.word	0x08003495
 80034c4:	08003519 	.word	0x08003519
 80034c8:	08003495 	.word	0x08003495
 80034cc:	08003495 	.word	0x08003495
 80034d0:	08003495 	.word	0x08003495
 80034d4:	08003495 	.word	0x08003495
 80034d8:	0800361b 	.word	0x0800361b
 80034dc:	08003543 	.word	0x08003543
 80034e0:	080035d5 	.word	0x080035d5
 80034e4:	08003495 	.word	0x08003495
 80034e8:	08003495 	.word	0x08003495
 80034ec:	0800363d 	.word	0x0800363d
 80034f0:	08003495 	.word	0x08003495
 80034f4:	08003543 	.word	0x08003543
 80034f8:	08003495 	.word	0x08003495
 80034fc:	08003495 	.word	0x08003495
 8003500:	080035dd 	.word	0x080035dd
 8003504:	6833      	ldr	r3, [r6, #0]
 8003506:	1d1a      	adds	r2, r3, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6032      	str	r2, [r6, #0]
 800350c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003514:	2301      	movs	r3, #1
 8003516:	e09e      	b.n	8003656 <_printf_i+0x1ea>
 8003518:	6833      	ldr	r3, [r6, #0]
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	1d19      	adds	r1, r3, #4
 800351e:	6031      	str	r1, [r6, #0]
 8003520:	0606      	lsls	r6, r0, #24
 8003522:	d501      	bpl.n	8003528 <_printf_i+0xbc>
 8003524:	681d      	ldr	r5, [r3, #0]
 8003526:	e003      	b.n	8003530 <_printf_i+0xc4>
 8003528:	0645      	lsls	r5, r0, #25
 800352a:	d5fb      	bpl.n	8003524 <_printf_i+0xb8>
 800352c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003530:	2d00      	cmp	r5, #0
 8003532:	da03      	bge.n	800353c <_printf_i+0xd0>
 8003534:	232d      	movs	r3, #45	@ 0x2d
 8003536:	426d      	negs	r5, r5
 8003538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800353c:	230a      	movs	r3, #10
 800353e:	4859      	ldr	r0, [pc, #356]	@ (80036a4 <_printf_i+0x238>)
 8003540:	e011      	b.n	8003566 <_printf_i+0xfa>
 8003542:	6821      	ldr	r1, [r4, #0]
 8003544:	6833      	ldr	r3, [r6, #0]
 8003546:	0608      	lsls	r0, r1, #24
 8003548:	f853 5b04 	ldr.w	r5, [r3], #4
 800354c:	d402      	bmi.n	8003554 <_printf_i+0xe8>
 800354e:	0649      	lsls	r1, r1, #25
 8003550:	bf48      	it	mi
 8003552:	b2ad      	uxthmi	r5, r5
 8003554:	2f6f      	cmp	r7, #111	@ 0x6f
 8003556:	6033      	str	r3, [r6, #0]
 8003558:	bf14      	ite	ne
 800355a:	230a      	movne	r3, #10
 800355c:	2308      	moveq	r3, #8
 800355e:	4851      	ldr	r0, [pc, #324]	@ (80036a4 <_printf_i+0x238>)
 8003560:	2100      	movs	r1, #0
 8003562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003566:	6866      	ldr	r6, [r4, #4]
 8003568:	2e00      	cmp	r6, #0
 800356a:	bfa8      	it	ge
 800356c:	6821      	ldrge	r1, [r4, #0]
 800356e:	60a6      	str	r6, [r4, #8]
 8003570:	bfa4      	itt	ge
 8003572:	f021 0104 	bicge.w	r1, r1, #4
 8003576:	6021      	strge	r1, [r4, #0]
 8003578:	b90d      	cbnz	r5, 800357e <_printf_i+0x112>
 800357a:	2e00      	cmp	r6, #0
 800357c:	d04b      	beq.n	8003616 <_printf_i+0x1aa>
 800357e:	4616      	mov	r6, r2
 8003580:	fbb5 f1f3 	udiv	r1, r5, r3
 8003584:	fb03 5711 	mls	r7, r3, r1, r5
 8003588:	5dc7      	ldrb	r7, [r0, r7]
 800358a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800358e:	462f      	mov	r7, r5
 8003590:	42bb      	cmp	r3, r7
 8003592:	460d      	mov	r5, r1
 8003594:	d9f4      	bls.n	8003580 <_printf_i+0x114>
 8003596:	2b08      	cmp	r3, #8
 8003598:	d10b      	bne.n	80035b2 <_printf_i+0x146>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	07df      	lsls	r7, r3, #31
 800359e:	d508      	bpl.n	80035b2 <_printf_i+0x146>
 80035a0:	6923      	ldr	r3, [r4, #16]
 80035a2:	6861      	ldr	r1, [r4, #4]
 80035a4:	4299      	cmp	r1, r3
 80035a6:	bfde      	ittt	le
 80035a8:	2330      	movle	r3, #48	@ 0x30
 80035aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035ae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80035b2:	1b92      	subs	r2, r2, r6
 80035b4:	6122      	str	r2, [r4, #16]
 80035b6:	464b      	mov	r3, r9
 80035b8:	4621      	mov	r1, r4
 80035ba:	4640      	mov	r0, r8
 80035bc:	f8cd a000 	str.w	sl, [sp]
 80035c0:	aa03      	add	r2, sp, #12
 80035c2:	f7ff fee1 	bl	8003388 <_printf_common>
 80035c6:	3001      	adds	r0, #1
 80035c8:	d14a      	bne.n	8003660 <_printf_i+0x1f4>
 80035ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035ce:	b004      	add	sp, #16
 80035d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	f043 0320 	orr.w	r3, r3, #32
 80035da:	6023      	str	r3, [r4, #0]
 80035dc:	2778      	movs	r7, #120	@ 0x78
 80035de:	4832      	ldr	r0, [pc, #200]	@ (80036a8 <_printf_i+0x23c>)
 80035e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	6831      	ldr	r1, [r6, #0]
 80035e8:	061f      	lsls	r7, r3, #24
 80035ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80035ee:	d402      	bmi.n	80035f6 <_printf_i+0x18a>
 80035f0:	065f      	lsls	r7, r3, #25
 80035f2:	bf48      	it	mi
 80035f4:	b2ad      	uxthmi	r5, r5
 80035f6:	6031      	str	r1, [r6, #0]
 80035f8:	07d9      	lsls	r1, r3, #31
 80035fa:	bf44      	itt	mi
 80035fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003600:	6023      	strmi	r3, [r4, #0]
 8003602:	b11d      	cbz	r5, 800360c <_printf_i+0x1a0>
 8003604:	2310      	movs	r3, #16
 8003606:	e7ab      	b.n	8003560 <_printf_i+0xf4>
 8003608:	4826      	ldr	r0, [pc, #152]	@ (80036a4 <_printf_i+0x238>)
 800360a:	e7e9      	b.n	80035e0 <_printf_i+0x174>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	f023 0320 	bic.w	r3, r3, #32
 8003612:	6023      	str	r3, [r4, #0]
 8003614:	e7f6      	b.n	8003604 <_printf_i+0x198>
 8003616:	4616      	mov	r6, r2
 8003618:	e7bd      	b.n	8003596 <_printf_i+0x12a>
 800361a:	6833      	ldr	r3, [r6, #0]
 800361c:	6825      	ldr	r5, [r4, #0]
 800361e:	1d18      	adds	r0, r3, #4
 8003620:	6961      	ldr	r1, [r4, #20]
 8003622:	6030      	str	r0, [r6, #0]
 8003624:	062e      	lsls	r6, r5, #24
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	d501      	bpl.n	800362e <_printf_i+0x1c2>
 800362a:	6019      	str	r1, [r3, #0]
 800362c:	e002      	b.n	8003634 <_printf_i+0x1c8>
 800362e:	0668      	lsls	r0, r5, #25
 8003630:	d5fb      	bpl.n	800362a <_printf_i+0x1be>
 8003632:	8019      	strh	r1, [r3, #0]
 8003634:	2300      	movs	r3, #0
 8003636:	4616      	mov	r6, r2
 8003638:	6123      	str	r3, [r4, #16]
 800363a:	e7bc      	b.n	80035b6 <_printf_i+0x14a>
 800363c:	6833      	ldr	r3, [r6, #0]
 800363e:	2100      	movs	r1, #0
 8003640:	1d1a      	adds	r2, r3, #4
 8003642:	6032      	str	r2, [r6, #0]
 8003644:	681e      	ldr	r6, [r3, #0]
 8003646:	6862      	ldr	r2, [r4, #4]
 8003648:	4630      	mov	r0, r6
 800364a:	f000 f893 	bl	8003774 <memchr>
 800364e:	b108      	cbz	r0, 8003654 <_printf_i+0x1e8>
 8003650:	1b80      	subs	r0, r0, r6
 8003652:	6060      	str	r0, [r4, #4]
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	6123      	str	r3, [r4, #16]
 8003658:	2300      	movs	r3, #0
 800365a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800365e:	e7aa      	b.n	80035b6 <_printf_i+0x14a>
 8003660:	4632      	mov	r2, r6
 8003662:	4649      	mov	r1, r9
 8003664:	4640      	mov	r0, r8
 8003666:	6923      	ldr	r3, [r4, #16]
 8003668:	47d0      	blx	sl
 800366a:	3001      	adds	r0, #1
 800366c:	d0ad      	beq.n	80035ca <_printf_i+0x15e>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	079b      	lsls	r3, r3, #30
 8003672:	d413      	bmi.n	800369c <_printf_i+0x230>
 8003674:	68e0      	ldr	r0, [r4, #12]
 8003676:	9b03      	ldr	r3, [sp, #12]
 8003678:	4298      	cmp	r0, r3
 800367a:	bfb8      	it	lt
 800367c:	4618      	movlt	r0, r3
 800367e:	e7a6      	b.n	80035ce <_printf_i+0x162>
 8003680:	2301      	movs	r3, #1
 8003682:	4632      	mov	r2, r6
 8003684:	4649      	mov	r1, r9
 8003686:	4640      	mov	r0, r8
 8003688:	47d0      	blx	sl
 800368a:	3001      	adds	r0, #1
 800368c:	d09d      	beq.n	80035ca <_printf_i+0x15e>
 800368e:	3501      	adds	r5, #1
 8003690:	68e3      	ldr	r3, [r4, #12]
 8003692:	9903      	ldr	r1, [sp, #12]
 8003694:	1a5b      	subs	r3, r3, r1
 8003696:	42ab      	cmp	r3, r5
 8003698:	dcf2      	bgt.n	8003680 <_printf_i+0x214>
 800369a:	e7eb      	b.n	8003674 <_printf_i+0x208>
 800369c:	2500      	movs	r5, #0
 800369e:	f104 0619 	add.w	r6, r4, #25
 80036a2:	e7f5      	b.n	8003690 <_printf_i+0x224>
 80036a4:	080038b5 	.word	0x080038b5
 80036a8:	080038c6 	.word	0x080038c6

080036ac <__malloc_lock>:
 80036ac:	4801      	ldr	r0, [pc, #4]	@ (80036b4 <__malloc_lock+0x8>)
 80036ae:	f7ff bc6f 	b.w	8002f90 <__retarget_lock_acquire_recursive>
 80036b2:	bf00      	nop
 80036b4:	20000270 	.word	0x20000270

080036b8 <__malloc_unlock>:
 80036b8:	4801      	ldr	r0, [pc, #4]	@ (80036c0 <__malloc_unlock+0x8>)
 80036ba:	f7ff bc6a 	b.w	8002f92 <__retarget_lock_release_recursive>
 80036be:	bf00      	nop
 80036c0:	20000270 	.word	0x20000270

080036c4 <_realloc_r>:
 80036c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036c8:	4680      	mov	r8, r0
 80036ca:	4615      	mov	r5, r2
 80036cc:	460c      	mov	r4, r1
 80036ce:	b921      	cbnz	r1, 80036da <_realloc_r+0x16>
 80036d0:	4611      	mov	r1, r2
 80036d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036d6:	f7ff bdd7 	b.w	8003288 <_malloc_r>
 80036da:	b92a      	cbnz	r2, 80036e8 <_realloc_r+0x24>
 80036dc:	f000 f866 	bl	80037ac <_free_r>
 80036e0:	2400      	movs	r4, #0
 80036e2:	4620      	mov	r0, r4
 80036e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036e8:	f000 f8a8 	bl	800383c <_malloc_usable_size_r>
 80036ec:	4285      	cmp	r5, r0
 80036ee:	4606      	mov	r6, r0
 80036f0:	d802      	bhi.n	80036f8 <_realloc_r+0x34>
 80036f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80036f6:	d8f4      	bhi.n	80036e2 <_realloc_r+0x1e>
 80036f8:	4629      	mov	r1, r5
 80036fa:	4640      	mov	r0, r8
 80036fc:	f7ff fdc4 	bl	8003288 <_malloc_r>
 8003700:	4607      	mov	r7, r0
 8003702:	2800      	cmp	r0, #0
 8003704:	d0ec      	beq.n	80036e0 <_realloc_r+0x1c>
 8003706:	42b5      	cmp	r5, r6
 8003708:	462a      	mov	r2, r5
 800370a:	4621      	mov	r1, r4
 800370c:	bf28      	it	cs
 800370e:	4632      	movcs	r2, r6
 8003710:	f000 f83e 	bl	8003790 <memcpy>
 8003714:	4621      	mov	r1, r4
 8003716:	4640      	mov	r0, r8
 8003718:	f000 f848 	bl	80037ac <_free_r>
 800371c:	463c      	mov	r4, r7
 800371e:	e7e0      	b.n	80036e2 <_realloc_r+0x1e>

08003720 <memmove>:
 8003720:	4288      	cmp	r0, r1
 8003722:	b510      	push	{r4, lr}
 8003724:	eb01 0402 	add.w	r4, r1, r2
 8003728:	d902      	bls.n	8003730 <memmove+0x10>
 800372a:	4284      	cmp	r4, r0
 800372c:	4623      	mov	r3, r4
 800372e:	d807      	bhi.n	8003740 <memmove+0x20>
 8003730:	1e43      	subs	r3, r0, #1
 8003732:	42a1      	cmp	r1, r4
 8003734:	d008      	beq.n	8003748 <memmove+0x28>
 8003736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800373a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800373e:	e7f8      	b.n	8003732 <memmove+0x12>
 8003740:	4601      	mov	r1, r0
 8003742:	4402      	add	r2, r0
 8003744:	428a      	cmp	r2, r1
 8003746:	d100      	bne.n	800374a <memmove+0x2a>
 8003748:	bd10      	pop	{r4, pc}
 800374a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800374e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003752:	e7f7      	b.n	8003744 <memmove+0x24>

08003754 <_sbrk_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	2300      	movs	r3, #0
 8003758:	4d05      	ldr	r5, [pc, #20]	@ (8003770 <_sbrk_r+0x1c>)
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	f7fc ff72 	bl	8000648 <_sbrk>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d102      	bne.n	800376e <_sbrk_r+0x1a>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	b103      	cbz	r3, 800376e <_sbrk_r+0x1a>
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	2000027c 	.word	0x2000027c

08003774 <memchr>:
 8003774:	4603      	mov	r3, r0
 8003776:	b510      	push	{r4, lr}
 8003778:	b2c9      	uxtb	r1, r1
 800377a:	4402      	add	r2, r0
 800377c:	4293      	cmp	r3, r2
 800377e:	4618      	mov	r0, r3
 8003780:	d101      	bne.n	8003786 <memchr+0x12>
 8003782:	2000      	movs	r0, #0
 8003784:	e003      	b.n	800378e <memchr+0x1a>
 8003786:	7804      	ldrb	r4, [r0, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	428c      	cmp	r4, r1
 800378c:	d1f6      	bne.n	800377c <memchr+0x8>
 800378e:	bd10      	pop	{r4, pc}

08003790 <memcpy>:
 8003790:	440a      	add	r2, r1
 8003792:	4291      	cmp	r1, r2
 8003794:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003798:	d100      	bne.n	800379c <memcpy+0xc>
 800379a:	4770      	bx	lr
 800379c:	b510      	push	{r4, lr}
 800379e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037a2:	4291      	cmp	r1, r2
 80037a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037a8:	d1f9      	bne.n	800379e <memcpy+0xe>
 80037aa:	bd10      	pop	{r4, pc}

080037ac <_free_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4605      	mov	r5, r0
 80037b0:	2900      	cmp	r1, #0
 80037b2:	d040      	beq.n	8003836 <_free_r+0x8a>
 80037b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b8:	1f0c      	subs	r4, r1, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bfb8      	it	lt
 80037be:	18e4      	addlt	r4, r4, r3
 80037c0:	f7ff ff74 	bl	80036ac <__malloc_lock>
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <_free_r+0x8c>)
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	b933      	cbnz	r3, 80037d8 <_free_r+0x2c>
 80037ca:	6063      	str	r3, [r4, #4]
 80037cc:	6014      	str	r4, [r2, #0]
 80037ce:	4628      	mov	r0, r5
 80037d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037d4:	f7ff bf70 	b.w	80036b8 <__malloc_unlock>
 80037d8:	42a3      	cmp	r3, r4
 80037da:	d908      	bls.n	80037ee <_free_r+0x42>
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	1821      	adds	r1, r4, r0
 80037e0:	428b      	cmp	r3, r1
 80037e2:	bf01      	itttt	eq
 80037e4:	6819      	ldreq	r1, [r3, #0]
 80037e6:	685b      	ldreq	r3, [r3, #4]
 80037e8:	1809      	addeq	r1, r1, r0
 80037ea:	6021      	streq	r1, [r4, #0]
 80037ec:	e7ed      	b.n	80037ca <_free_r+0x1e>
 80037ee:	461a      	mov	r2, r3
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	b10b      	cbz	r3, 80037f8 <_free_r+0x4c>
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	d9fa      	bls.n	80037ee <_free_r+0x42>
 80037f8:	6811      	ldr	r1, [r2, #0]
 80037fa:	1850      	adds	r0, r2, r1
 80037fc:	42a0      	cmp	r0, r4
 80037fe:	d10b      	bne.n	8003818 <_free_r+0x6c>
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	4401      	add	r1, r0
 8003804:	1850      	adds	r0, r2, r1
 8003806:	4283      	cmp	r3, r0
 8003808:	6011      	str	r1, [r2, #0]
 800380a:	d1e0      	bne.n	80037ce <_free_r+0x22>
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4408      	add	r0, r1
 8003812:	6010      	str	r0, [r2, #0]
 8003814:	6053      	str	r3, [r2, #4]
 8003816:	e7da      	b.n	80037ce <_free_r+0x22>
 8003818:	d902      	bls.n	8003820 <_free_r+0x74>
 800381a:	230c      	movs	r3, #12
 800381c:	602b      	str	r3, [r5, #0]
 800381e:	e7d6      	b.n	80037ce <_free_r+0x22>
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	1821      	adds	r1, r4, r0
 8003824:	428b      	cmp	r3, r1
 8003826:	bf01      	itttt	eq
 8003828:	6819      	ldreq	r1, [r3, #0]
 800382a:	685b      	ldreq	r3, [r3, #4]
 800382c:	1809      	addeq	r1, r1, r0
 800382e:	6021      	streq	r1, [r4, #0]
 8003830:	6063      	str	r3, [r4, #4]
 8003832:	6054      	str	r4, [r2, #4]
 8003834:	e7cb      	b.n	80037ce <_free_r+0x22>
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	20000278 	.word	0x20000278

0800383c <_malloc_usable_size_r>:
 800383c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003840:	1f18      	subs	r0, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	bfbc      	itt	lt
 8003846:	580b      	ldrlt	r3, [r1, r0]
 8003848:	18c0      	addlt	r0, r0, r3
 800384a:	4770      	bx	lr

0800384c <_init>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	bf00      	nop
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr

08003858 <_fini>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr
